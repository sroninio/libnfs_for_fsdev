cscope 15 /home/DocaSpdk/spdk/libnfsAvi/libnfs -q 0000008554 0001490557
	@aros/aros_compat.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<sys/sockë.h
>

24 
	~<√tdb.h
>

25 
	~"¨os_com∑t.h
"

26 
	~<î∫o.h
>

27 
	~<bsdsockë/sockëba£ègs.h
>

29 #unde‡
pﬁl


31 
	$¨os_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

32 *
ho°
, 
size_t
 
ho°Àn
,

33 *
£rv
, 
size_t
 
£rvÀn
, 
Êags
)

35 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

37 i‡(
ho°
) {

38 
	`¢¥ötf
(
ho°
, 
ho°Àn
, 
	`I√t_NtoA
(
sö
->
sö_addr
.
s_addr
));

42 
	}
}

44 
	$¨os_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

45 c⁄° 
addröfo
 *
höts
,

46 
addröfo
 **
ªs
)

48 
sockaddr_ö
 *
sö
;

50 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

51 
sö
->
sö_Àn
 = (
sockaddr_ö
);

52 
sö
->
sö_Ámûy
=
AF_INET
;

55 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
node
);

57 
sö
->
sö_p‹t
=0;

58 i‡(
£rvi˚
) {

59 
sö
->
sö_p‹t
=
	`ht⁄s
(
	`©oi
(
£rvi˚
));

62 *
ªs
 = 
	`mÆloc
((
addröfo
));

64 (*
ªs
)->
ai_Ámûy
 = 
AF_INET
;

65 (*
ªs
)->
ai_addæí
 = (
sockaddr_ö
);

66 (*
ªs
)->
ai_addr
 = (
sockaddr
 *)
sö
;

69 
	}
}

71 
	$¨os_‰ìaddröfo
(
addröfo
 *
ªs
)

73 
	`‰ì
(
ªs
->
ai_addr
);

74 
	`‰ì
(
ªs
);

75 
	}
}

77 
	$¨os_öë_±⁄
(
af
, *
§c
, *
d°
)

79 
sockaddr_ö
 
sö
;

81 
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
§c
);

82 
	`mem˝y
(
d°
, &
sö
.
sö_addr
.
s_addr
, (sin.sin_addr.s_addr));

84 
	}
}

88 
	$maj‹
(
i
)

91 
	}
}

92 
	$mö‹
(
i
)

95 
	}
}

97 
Libøry
 * 
	gSockëBa£
 = 
NULL
;

99 
î∫o
;

100 
	gh_î∫o
 = 0;

103 
	$¨os_öô_sockë
()

105 i‡(!(
SockëBa£
 = 
	`O≥nLibøry
("bsdsocket.library", 4))) {

106 
	`¥ötf
("NoTCP/IP Stackávailable");

107 
	`exô
(10);

109 i‡(
	`SockëBa£Tags
(
	`SBTM_SETVAL
(
	`SBTC_ERRNOPTR
((
î∫o
))),

110 (
IPTR
)&
î∫o
,

111 
	`SBTM_SETVAL
(
SBTC_HERRNOLONGPTR
),

112 (
IPTR
)&
h_î∫o
, 
TAG_DONE
)) {

113 
	`¥ötf
("FailedÅo set ERRNO");

114 
	`exô
(10);

116 
	}
}

118 
	$¨os_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

120 
timevÆ
 
timeout
, *
t›å
;

121 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

122 
i
, 
maxfd
 = 0;

123 
rc
;

126 
	`FD_ZERO
(&
ifds
);

127 
	`FD_ZERO
(&
ofds
);

128 
	`FD_ZERO
(&
efds
);

129 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

131 
fds
[
i
].
ªvíts
 = 0;

132 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

134 
ù
 = &
ifds
;

135 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

137 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

139 
›
 = &
ofds
;

140 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

142 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

143 i‡(
fds
[
i
].
fd
 > 
maxfd
) {

144 
maxfd
 = 
fds
[
i
].
fd
;

149 if(
timo
 < 0)

151 
t›å
 = 0;

155 
t›å
 = &
timeout
;

156 
timeout
.
tv_£c
 = 
timo
 / 1000;

157 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

160 
rc
 = 
	`WaôSñe˘
(
maxfd
 + 1, 
ù
, 
›
, &
efds
, 
t›å
, 
NULL
);

162 if(
rc
 <= 0)

163  
rc
;

165 if(
rc
 > 0)

167 
i
 = 0; i < 
nfds
; ++i)

169 
fd
 = 
fds
[
i
].fd;

170 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

171 
fds
[
i
].
ªvíts
 |
POLLIN
;

172 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

173 
fds
[
i
].
ªvíts
 |
POLLOUT
;

174 if(
	`FD_ISSET
(
fd
, &
efds
))

175 
fds
[
i
].
ªvíts
 |
POLLHUP
;

178  
rc
;

179 
	}
}

	@aros/aros_compat.h

18 #i‚de‡
AROS_COMPAT_H


19 
	#AROS_COMPAT_H


	)

21 
	~<uni°d.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/io˘l.h
>

24 
	~<√töë/ö.h
>

25 
	~<sys/mou¡.h
>

26 
	~<¥Ÿo/sockë.h
>

27 
	~<¥Ÿo/exec.h
>

28 
	~<√tdb.h
>

29 
	~<√t/if.h
>

30 
	~<√töë/ö.h
>

32 
	#°©vfs
 
°©fs


	)

33 
	#io˘l
 
Io˘lSockë


	)

34 
	#˛o£
 
Clo£Sockë


	)

36 
	#öë_±⁄
 
¨os_öë_±⁄


	)

37 
	#‰ìaddröfo
 
¨os_‰ìaddröfo


	)

38 
	#gë«meöfo
 
¨os_gë«meöfo


	)

39 
	#gëaddröfo
 
¨os_gëaddröfo


	)

41 
Libøry
 * 
SockëBa£
;

43 
¨os_öô_sockë
();

45 
	#f_Êag
 
f_Êags


	)

46 
	#f_Ávaû
 
f_f‰ì


	)

48 
	#f_fsid
 
f_•¨e
[0]

	)

49 
	#f_‰size
 
f_•¨e
[0]

	)

50 
	#f_«memax
 
f_•¨e
[0]

	)

52 
	#POLLIN
 0x0001

	)

53 
	#POLLPRI
 0x0002

	)

54 
	#POLLOUT
 0x0004

	)

55 
	#POLLERR
 0x0008

	)

56 
	#POLLHUP
 0x0010

	)

57 
	#POLLNVAL
 0x0020

	)

59 
	sutimbuf
 {

60 
	ma˘ime
;

61 
	mmodtime
;

64 
	spﬁlfd
 {

65 
	mfd
;

66 
	mevíts
;

67 
	mªvíts
;

70 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`¨os_pﬁl
(x, y, z)

	)

	@build/CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c

1 #ifde‡
__˝lu•lus


5 #i‡
deföed
(
__18CXX
)

6 
	#ID_VOID_MAIN


	)

8 #i‡
deföed
(
__CLASSIC_C__
)

10 c⁄°

	)

11 vﬁ©ûe

	)

14 #i‡!
deföed
(
__has_ö˛ude
)

17 
	#__has_ö˛ude
(
x
Ë0

	)

24 #i‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICC
)

25 
	#COMPILER_ID
 "I¡ñ"

	)

26 #i‡
deföed
(
_MSC_VER
)

27 
	#SIMULATE_ID
 "MSVC"

	)

29 #i‡
deföed
(
__GNUC__
)

30 
	#SIMULATE_ID
 "GNU"

	)

34 #i‡
__INTEL_COMPILER
 < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111

35 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_COMPILER
/100)

	)

36 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_COMPILER
/10 % 10)

	)

37 #i‡
deföed
(
__INTEL_COMPILER_UPDATE
)

38 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER_UPDATE
)

	)

40 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER
 % 10)

	)

43 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_COMPILER
)

	)

44 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_COMPILER_UPDATE
)

	)

47 
	#COMPILER_VERSION_PATCH
 
	`DEC
(0)

	)

49 #i‡
deföed
(
__INTEL_COMPILER_BUILD_DATE
)

51 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__INTEL_COMPILER_BUILD_DATE
)

	)

53 #i‡
deföed
(
_MSC_VER
)

55 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

56 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

58 #i‡
deföed
(
__GNUC__
)

59 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

60 #ñi‡
deföed
(
__GNUG__
)

61 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUG__
)

	)

63 #i‡
deföed
(
__GNUC_MINOR__
)

64 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

66 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

67 
	#SIMULATE_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

70 #ñi‡(
deföed
(
__˛™g__
Ë&& deföed(
__INTEL_CLANG_COMPILER
)Ë|| deföed(
__INTEL_LLVM_COMPILER
)

71 
	#COMPILER_ID
 "I¡ñLLVM"

	)

72 #i‡
deföed
(
_MSC_VER
)

73 
	#SIMULATE_ID
 "MSVC"

	)

75 #i‡
deföed
(
__GNUC__
)

76 
	#SIMULATE_ID
 "GNU"

	)

82 #i‡
__INTEL_LLVM_COMPILER
 < 1000000L

83 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_LLVM_COMPILER
/100)

	)

84 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_LLVM_COMPILER
/10 % 10)

	)

85 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_LLVM_COMPILER
 % 10)

	)

87 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_LLVM_COMPILER
/10000)

	)

88 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_LLVM_COMPILER
/100 % 100)

	)

89 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_LLVM_COMPILER
 % 100)

	)

91 #i‡
deföed
(
_MSC_VER
)

93 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

94 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

96 #i‡
deföed
(
__GNUC__
)

97 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

98 #ñi‡
deföed
(
__GNUG__
)

99 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUG__
)

	)

101 #i‡
deföed
(
__GNUC_MINOR__
)

102 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

104 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

105 
	#SIMULATE_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

108 #ñi‡
deföed
(
__PATHCC__
)

109 
	#COMPILER_ID
 "P©hSˇÀ"

	)

110 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PATHCC__
)

	)

111 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PATHCC_MINOR__
)

	)

112 #i‡
deföed
(
__PATHCC_PATCHLEVEL__
)

113 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PATHCC_PATCHLEVEL__
)

	)

116 #ñi‡
deföed
(
__BORLANDC__
Ë&& deföed(
__CODEGEARC_VERSION__
)

117 
	#COMPILER_ID
 "Emb¨ˇdîo"

	)

118 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>24 & 0x00FF)

	)

119 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>16 & 0x00FF)

	)

120 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__CODEGEARC_VERSION__
 & 0xFFFF)

	)

122 #ñi‡
deföed
(
__BORLANDC__
)

123 
	#COMPILER_ID
 "B‹œnd"

	)

125 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__BORLANDC__
>>8)

	)

126 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__BORLANDC__
 & 0xFF)

	)

128 #ñi‡
deföed
(
__WATCOMC__
) && __WATCOMC__ < 1200

129 
	#COMPILER_ID
 "W©com"

	)

131 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__WATCOMC__
 / 100)

	)

132 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

133 #i‡(
__WATCOMC__
 % 10) > 0

134 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

137 #ñi‡
deföed
(
__WATCOMC__
)

138 
	#COMPILER_ID
 "O≥nW©com"

	)

140 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__WATCOMC__
 - 1100Ë/ 100)

	)

141 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

142 #i‡(
__WATCOMC__
 % 10) > 0

143 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

146 #ñi‡
deföed
(
__SUNPRO_C
)

147 
	#COMPILER_ID
 "SunPro"

	)

148 #i‡
__SUNPRO_C
 >= 0x5100

150 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_C
>>12)

	)

151 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_C
>>4 & 0xFF)

	)

152 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_C
 & 0xF)

	)

155 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_C
>>8)

	)

156 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_C
>>4 & 0xF)

	)

157 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_C
 & 0xF)

	)

160 #ñi‡
deföed
(
__HP_cc
)

161 
	#COMPILER_ID
 "HP"

	)

163 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__HP_cc
/10000)

	)

164 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__HP_cc
/100 % 100)

	)

165 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__HP_cc
 % 100)

	)

167 #ñi‡
deföed
(
__DECC
)

168 
	#COMPILER_ID
 "Com∑q"

	)

170 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__DECC_VER
/10000000)

	)

171 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__DECC_VER
/100000 % 100)

	)

172 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__DECC_VER
 % 10000)

	)

174 #ñi‡
deföed
(
__IBMC__
Ë&& deföed(
__COMPILER_VER__
)

175 
	#COMPILER_ID
 "zOS"

	)

177 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

178 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

179 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

181 #ñi‡
deföed
(
__ibmxl__
Ë&& deföed(
__˛™g__
)

182 
	#COMPILER_ID
 "XLCœng"

	)

183 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ibmxl_vîsi⁄__
)

	)

184 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ibmxl_ªÀa£__
)

	)

185 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ibmxl_modifiˇti⁄__
)

	)

186 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__ibmxl_±f_fix_Àvñ__
)

	)

189 #ñi‡
deföed
(
__IBMC__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMC__ >= 800

190 
	#COMPILER_ID
 "XL"

	)

192 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

193 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

194 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

196 #ñi‡
deföed
(
__IBMC__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMC__ < 800

197 
	#COMPILER_ID
 "VisuÆAge"

	)

199 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

200 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

201 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

203 #ñi‡
deföed
(
__NVCOMPILER
)

204 
	#COMPILER_ID
 "NVHPC"

	)

205 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__NVCOMPILER_MAJOR__
)

	)

206 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__NVCOMPILER_MINOR__
)

	)

207 #i‡
deföed
(
__NVCOMPILER_PATCHLEVEL__
)

208 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__NVCOMPILER_PATCHLEVEL__
)

	)

211 #ñi‡
deföed
(
__PGI
)

212 
	#COMPILER_ID
 "PGI"

	)

213 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PGIC__
)

	)

214 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PGIC_MINOR__
)

	)

215 #i‡
deföed
(
__PGIC_PATCHLEVEL__
)

216 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PGIC_PATCHLEVEL__
)

	)

219 #ñi‡
deföed
(
_CRAYC
)

220 
	#COMPILER_ID
 "Cøy"

	)

221 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_RELEASE_MAJOR
)

	)

222 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_RELEASE_MINOR
)

	)

224 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

225 
	#COMPILER_ID
 "TI"

	)

227 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000000)

	)

228 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000 % 1000)

	)

229 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__TI_COMPILER_VERSION__
 % 1000)

	)

231 #ñi‡
deföed
(
__CLANG_FUJITSU
)

232 
	#COMPILER_ID
 "FujôsuCœng"

	)

233 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__FCC_maj‹__
)

	)

234 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__FCC_mö‹__
)

	)

235 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__FCC_∑tchÀvñ__
)

	)

236 
	#COMPILER_VERSION_INTERNAL_STR
 
__˛™g_vîsi⁄__


	)

239 #ñi‡
deföed
(
__FUJITSU
)

240 
	#COMPILER_ID
 "Fujôsu"

	)

241 #i‡
deföed
(
__FCC_vîsi⁄__
)

242 
	#COMPILER_VERSION
 
__FCC_vîsi⁄__


	)

243 #ñi‡
deföed
(
__FCC_maj‹__
)

244 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__FCC_maj‹__
)

	)

245 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__FCC_mö‹__
)

	)

246 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__FCC_∑tchÀvñ__
)

	)

248 #i‡
deföed
(
__fcc_vîsi⁄
)

249 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__fcc_vîsi⁄
)

	)

250 #ñi‡
deföed
(
__FCC_VERSION
)

251 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__FCC_VERSION
)

	)

255 #ñi‡
deföed
(
__ghs__
)

256 
	#COMPILER_ID
 "GHS"

	)

258 #ifde‡
__GHS_VERSION_NUMBER


259 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GHS_VERSION_NUMBER
 / 100)

	)

260 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GHS_VERSION_NUMBER
 / 10 % 10)

	)

261 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GHS_VERSION_NUMBER
 % 10)

	)

264 #ñi‡
deföed
(
__TINYC__
)

265 
	#COMPILER_ID
 "TöyCC"

	)

267 #ñi‡
deföed
(
__BCC__
)

268 
	#COMPILER_ID
 "Bru˚"

	)

270 #ñi‡
deföed
(
__SCO_VERSION__
)

271 
	#COMPILER_ID
 "SCO"

	)

273 #ñi‡
deföed
(
__ARMCC_VERSION
Ë&& !deföed(
__˛™g__
)

274 
	#COMPILER_ID
 "ARMCC"

	)

275 #i‡
__ARMCC_VERSION
 >= 1000000

277 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/1000000)

	)

278 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 100)

	)

279 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

282 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/100000)

	)

283 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 10)

	)

284 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

288 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__≠∂e_buûd_vîsi⁄__
)

289 
	#COMPILER_ID
 "AµÀCœng"

	)

290 #i‡
deföed
(
_MSC_VER
)

291 
	#SIMULATE_ID
 "MSVC"

	)

293 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

294 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

295 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

296 #i‡
deföed
(
_MSC_VER
)

298 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

299 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

301 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__≠∂e_buûd_vîsi⁄__
)

	)

303 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__ARMCOMPILER_VERSION
)

304 
	#COMPILER_ID
 "ARMCœng"

	)

305 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCOMPILER_VERSION
/1000000)

	)

306 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCOMPILER_VERSION
/10000 % 100)

	)

307 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCOMPILER_VERSION
 % 10000)

	)

308 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__ARMCOMPILER_VERSION
)

	)

310 #ñi‡
deföed
(
__˛™g__
)

311 
	#COMPILER_ID
 "Cœng"

	)

312 #i‡
deföed
(
_MSC_VER
)

313 
	#SIMULATE_ID
 "MSVC"

	)

315 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

316 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

317 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

318 #i‡
deföed
(
_MSC_VER
)

320 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

321 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

324 #ñi‡
deföed
(
__GNUC__
)

325 
	#COMPILER_ID
 "GNU"

	)

326 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

327 #i‡
deföed
(
__GNUC_MINOR__
)

328 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

330 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

331 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

334 #ñi‡
deföed
(
_MSC_VER
)

335 
	#COMPILER_ID
 "MSVC"

	)

337 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

338 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

339 #i‡
deföed
(
_MSC_FULL_VER
)

340 #i‡
_MSC_VER
 >= 1400

342 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 100000)

	)

345 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 10000)

	)

348 #i‡
deföed
(
_MSC_BUILD
)

349 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
_MSC_BUILD
)

	)

352 #ñi‡
deföed
(
__VISUALDSPVERSION__
Ë|| deföed(
__ADSPBLACKFIN__
Ë|| deföed(
__ADSPTS__
Ë|| deföed(
__ADSP21000__
)

353 
	#COMPILER_ID
 "ADSP"

	)

354 #i‡
deföed
(
__VISUALDSPVERSION__
)

356 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__VISUALDSPVERSION__
>>24)

	)

357 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__VISUALDSPVERSION__
>>16 & 0xFF)

	)

358 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__VISUALDSPVERSION__
>>8 & 0xFF)

	)

361 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__IAR_SYSTEMS_ICC
)

362 
	#COMPILER_ID
 "IAR"

	)

363 #i‡
deföed
(
__VER__
Ë&& deföed(
__ICCARM__
)

364 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__VER__
Ë/ 1000000)

	)

365 
	#COMPILER_VERSION_MINOR
 
	`DEC
(((
__VER__
Ë/ 1000Ë% 1000)

	)

366 
	#COMPILER_VERSION_PATCH
 
	`DEC
((
__VER__
Ë% 1000)

	)

367 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__IAR_SYSTEMS_ICC__
)

	)

368 #ñi‡
deföed
(
__VER__
Ë&& (deföed(
__ICCAVR__
Ë|| deföed(
__ICCRX__
Ë|| deföed(
__ICCRH850__
Ë|| deföed(
__ICCRL78__
Ë|| deföed(
__ICC430__
Ë|| deföed(
__ICCRISCV__
Ë|| deföed(
__ICCV850__
Ë|| deföed(
__ICC8051__
Ë|| deföed(
__ICCSTM8__
))

369 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__VER__
Ë/ 100)

	)

370 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__VER__
Ë- (((__VER__Ë/ 100)*100))

	)

371 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__SUBVERSION__
)

	)

372 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__IAR_SYSTEMS_ICC__
)

	)

375 #ñi‡
deföed
(
__SDCC_VERSION_MAJOR
Ë|| deföed(
SDCC
)

376 
	#COMPILER_ID
 "SDCC"

	)

377 #i‡
deföed
(
__SDCC_VERSION_MAJOR
)

378 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__SDCC_VERSION_MAJOR
)

	)

379 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__SDCC_VERSION_MINOR
)

	)

380 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__SDCC_VERSION_PATCH
)

	)

383 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
SDCC
/100)

	)

384 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
SDCC
/10 % 10)

	)

385 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
SDCC
 % 10)

	)

392 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpua
)

393 
	#COMPILER_ID
 "HP"

	)

396 
	#COMPILER_ID
 ""

	)

403 c⁄°* 
	göfo_compûî
 = "INFO" ":" "compûî[" 
COMPILER_ID
 "]";

404 #ifde‡
SIMULATE_ID


405 c⁄°* 
	göfo_simuœã
 = "INFO" ":" "simuœã[" 
SIMULATE_ID
 "]";

408 #ifde‡
__QNXNTO__


409 c⁄°* 
	gqnx¡o
 = "INFO" ":" "qnxnto[]";

412 #i‡
deföed
(
__CRAYXT_COMPUTE_LINUX_TARGET
)

413 c⁄° *
	göfo_¸ay
 = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";

416 
	#STRINGIFY_HELPER
(
X
Ë#X

	)

417 
	#STRINGIFY
(
X
Ë
	`STRINGIFY_HELPER
(X)

	)

420 #i‡
deföed
(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
löux
)

421 
	#PLATFORM_ID
 "Löux"

	)

423 #ñi‡
deföed
(
__MSYS__
)

424 
	#PLATFORM_ID
 "MSYS"

	)

426 #ñi‡
deföed
(
__CYGWIN__
)

427 
	#PLATFORM_ID
 "Cygwö"

	)

429 #ñi‡
deföed
(
__MINGW32__
)

430 
	#PLATFORM_ID
 "MöGW"

	)

432 #ñi‡
deföed
(
__APPLE__
)

433 
	#PLATFORM_ID
 "D¨wö"

	)

435 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

436 
	#PLATFORM_ID
 "Wödows"

	)

438 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD
)

439 
	#PLATFORM_ID
 "FªeBSD"

	)

441 #ñi‡
deföed
(
__NëBSD__
Ë|| deföed(
__NëBSD
)

442 
	#PLATFORM_ID
 "NëBSD"

	)

444 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__OPENBSD
)

445 
	#PLATFORM_ID
 "O≥nBSD"

	)

447 #ñi‡
deföed
(
__sun
Ë|| deföed(
sun
)

448 
	#PLATFORM_ID
 "SunOS"

	)

450 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix
Ë|| deföed(
__aix__
)

451 
	#PLATFORM_ID
 "AIX"

	)

453 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

454 
	#PLATFORM_ID
 "HP-UX"

	)

456 #ñi‡
deföed
(
__HAIKU__
)

457 
	#PLATFORM_ID
 "Haiku"

	)

459 #ñi‡
deföed
(
__BeOS
Ë|| deföed(
__BEOS__
Ë|| deföed(
_BEOS
)

460 
	#PLATFORM_ID
 "BeOS"

	)

462 #ñi‡
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)

463 
	#PLATFORM_ID
 "QNX"

	)

465 #ñi‡
deföed
(
__åu64
Ë|| deföed(
_åu64
Ë|| deföed(
__TRU64__
)

466 
	#PLATFORM_ID
 "Tru64"

	)

468 #ñi‡
deföed
(
__riscos
Ë|| deföed(
__riscos__
)

469 
	#PLATFORM_ID
 "RISCos"

	)

471 #ñi‡
deföed
(
__söix
Ë|| deföed(
__söix__
Ë|| deföed(
__SINIX__
)

472 
	#PLATFORM_ID
 "SINIX"

	)

474 #ñi‡
deföed
(
__UNIX_SV__
)

475 
	#PLATFORM_ID
 "UNIX_SV"

	)

477 #ñi‡
deföed
(
__bsdos__
)

478 
	#PLATFORM_ID
 "BSDOS"

	)

480 #ñi‡
deföed
(
_MPRAS
Ë|| deföed(
MPRAS
)

481 
	#PLATFORM_ID
 "MP-RAS"

	)

483 #ñi‡
deföed
(
__osf
Ë|| deföed(
__osf__
)

484 
	#PLATFORM_ID
 "OSF1"

	)

486 #ñi‡
deföed
(
_SCO_SV
Ë|| deföed(
SCO_SV
Ë|| deföed(
sco_sv
)

487 
	#PLATFORM_ID
 "SCO_SV"

	)

489 #ñi‡
deföed
(
__u…rix
Ë|| deföed(
__u…rix__
Ë|| deföed(
_ULTRIX
)

490 
	#PLATFORM_ID
 "ULTRIX"

	)

492 #ñi‡
deföed
(
__XENIX__
Ë|| deföed(
_XENIX
Ë|| deföed(
XENIX
)

493 
	#PLATFORM_ID
 "Xíix"

	)

495 #ñi‡
deföed
(
__WATCOMC__
)

496 #i‡
deföed
(
__LINUX__
)

497 
	#PLATFORM_ID
 "Löux"

	)

499 #ñi‡
deföed
(
__DOS__
)

500 
	#PLATFORM_ID
 "DOS"

	)

502 #ñi‡
deföed
(
__OS2__
)

503 
	#PLATFORM_ID
 "OS2"

	)

505 #ñi‡
deföed
(
__WINDOWS__
)

506 
	#PLATFORM_ID
 "Wödows3x"

	)

508 #ñi‡
deföed
(
__VXWORKS__
)

509 
	#PLATFORM_ID
 "VxW‹ks"

	)

512 
	#PLATFORM_ID


	)

515 #ñi‡
deföed
(
__INTEGRITY
)

516 #i‡
deföed
(
INT_178B
)

517 
	#PLATFORM_ID
 "I¡egrôy178"

	)

520 
	#PLATFORM_ID
 "I¡egrôy"

	)

524 
	#PLATFORM_ID


	)

533 #i‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

534 #i‡
deföed
(
_M_IA64
)

535 
	#ARCHITECTURE_ID
 "IA64"

	)

537 #ñi‡
deföed
(
_M_ARM64EC
)

538 
	#ARCHITECTURE_ID
 "ARM64EC"

	)

540 #ñi‡
deföed
(
_M_X64
Ë|| deföed(
_M_AMD64
)

541 
	#ARCHITECTURE_ID
 "x64"

	)

543 #ñi‡
deföed
(
_M_IX86
)

544 
	#ARCHITECTURE_ID
 "X86"

	)

546 #ñi‡
deföed
(
_M_ARM64
)

547 
	#ARCHITECTURE_ID
 "ARM64"

	)

549 #ñi‡
deföed
(
_M_ARM
)

550 #i‡
_M_ARM
 == 4

551 
	#ARCHITECTURE_ID
 "ARMV4I"

	)

552 #ñi‡
_M_ARM
 == 5

553 
	#ARCHITECTURE_ID
 "ARMV5I"

	)

555 
	#ARCHITECTURE_ID
 "ARMV" 
	`STRINGIFY
(
_M_ARM
)

	)

558 #ñi‡
deföed
(
_M_MIPS
)

559 
	#ARCHITECTURE_ID
 "MIPS"

	)

561 #ñi‡
deföed
(
_M_SH
)

562 
	#ARCHITECTURE_ID
 "SHx"

	)

565 
	#ARCHITECTURE_ID
 ""

	)

568 #ñi‡
deföed
(
__WATCOMC__
)

569 #i‡
deföed
(
_M_I86
)

570 
	#ARCHITECTURE_ID
 "I86"

	)

572 #ñi‡
deföed
(
_M_IX86
)

573 
	#ARCHITECTURE_ID
 "X86"

	)

576 
	#ARCHITECTURE_ID
 ""

	)

579 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__IAR_SYSTEMS_ICC
)

580 #i‡
deföed
(
__ICCARM__
)

581 
	#ARCHITECTURE_ID
 "ARM"

	)

583 #ñi‡
deföed
(
__ICCRX__
)

584 
	#ARCHITECTURE_ID
 "RX"

	)

586 #ñi‡
deföed
(
__ICCRH850__
)

587 
	#ARCHITECTURE_ID
 "RH850"

	)

589 #ñi‡
deföed
(
__ICCRL78__
)

590 
	#ARCHITECTURE_ID
 "RL78"

	)

592 #ñi‡
deföed
(
__ICCRISCV__
)

593 
	#ARCHITECTURE_ID
 "RISCV"

	)

595 #ñi‡
deföed
(
__ICCAVR__
)

596 
	#ARCHITECTURE_ID
 "AVR"

	)

598 #ñi‡
deföed
(
__ICC430__
)

599 
	#ARCHITECTURE_ID
 "MSP430"

	)

601 #ñi‡
deföed
(
__ICCV850__
)

602 
	#ARCHITECTURE_ID
 "V850"

	)

604 #ñi‡
deföed
(
__ICC8051__
)

605 
	#ARCHITECTURE_ID
 "8051"

	)

607 #ñi‡
deföed
(
__ICCSTM8__
)

608 
	#ARCHITECTURE_ID
 "STM8"

	)

611 
	#ARCHITECTURE_ID
 ""

	)

614 #ñi‡
deföed
(
__ghs__
)

615 #i‡
deföed
(
__PPC64__
)

616 
	#ARCHITECTURE_ID
 "PPC64"

	)

618 #ñi‡
deföed
(
__µc__
)

619 
	#ARCHITECTURE_ID
 "PPC"

	)

621 #ñi‡
deföed
(
__ARM__
)

622 
	#ARCHITECTURE_ID
 "ARM"

	)

624 #ñi‡
deföed
(
__x86_64__
)

625 
	#ARCHITECTURE_ID
 "x64"

	)

627 #ñi‡
deföed
(
__i386__
)

628 
	#ARCHITECTURE_ID
 "X86"

	)

631 
	#ARCHITECTURE_ID
 ""

	)

634 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

635 #i‡
deföed
(
__TI_ARM__
)

636 
	#ARCHITECTURE_ID
 "ARM"

	)

638 #ñi‡
deföed
(
__MSP430__
)

639 
	#ARCHITECTURE_ID
 "MSP430"

	)

641 #ñi‡
deföed
(
__TMS320C28XX__
)

642 
	#ARCHITECTURE_ID
 "TMS320C28x"

	)

644 #ñi‡
deföed
(
__TMS320C6X__
Ë|| deföed(
_TMS320C6X
)

645 
	#ARCHITECTURE_ID
 "TMS320C6x"

	)

648 
	#ARCHITECTURE_ID
 ""

	)

652 
	#ARCHITECTURE_ID


	)

656 
	#DEC
(
n
) \

657 ('0' + (((
n
) / 10000000)%10)), \

658 ('0' + (((
n
) / 1000000)%10)), \

659 ('0' + (((
n
) / 100000)%10)), \

660 ('0' + (((
n
) / 10000)%10)), \

661 ('0' + (((
n
) / 1000)%10)), \

662 ('0' + (((
n
) / 100)%10)), \

663 ('0' + (((
n
) / 10)%10)), \

664 ('0' + ((
n
Ë% 10))

	)

667 
	#HEX
(
n
) \

668 ('0' + ((
n
)>>28 & 0xF)), \

669 ('0' + ((
n
)>>24 & 0xF)), \

670 ('0' + ((
n
)>>20 & 0xF)), \

671 ('0' + ((
n
)>>16 & 0xF)), \

672 ('0' + ((
n
)>>12 & 0xF)), \

673 ('0' + ((
n
)>>8 & 0xF)), \

674 ('0' + ((
n
)>>4 & 0xF)), \

675 ('0' + ((
n
Ë& 0xF))

	)

678 #ifde‡
COMPILER_VERSION


679 c⁄°* 
	göfo_vîsi⁄
 = "INFO" ":" "compûî_vîsi⁄[" 
COMPILER_VERSION
 "]";

682 #ñi‡
deföed
(
COMPILER_VERSION_MAJOR
)

683 c⁄° 
	göfo_vîsi⁄
[] = {

686 
COMPILER_VERSION_MAJOR
,

687 #ifde‡
COMPILER_VERSION_MINOR


688 '.', 
COMPILER_VERSION_MINOR
,

689 #ifde‡
COMPILER_VERSION_PATCH


690 '.', 
COMPILER_VERSION_PATCH
,

691 #ifde‡
COMPILER_VERSION_TWEAK


692 '.', 
COMPILER_VERSION_TWEAK
,

700 #ifde‡
COMPILER_VERSION_INTERNAL


701 c⁄° 
	göfo_vîsi⁄_öã∫Æ
[] = {

705 
COMPILER_VERSION_INTERNAL
,']','\0'};

706 #ñi‡
deföed
(
COMPILER_VERSION_INTERNAL_STR
)

707 c⁄°* 
	göfo_vîsi⁄_öã∫Æ
 = "INFO" ":" "compûî_vîsi⁄_öã∫Æ[" 
COMPILER_VERSION_INTERNAL_STR
 "]";

711 #ifde‡
SIMULATE_VERSION_MAJOR


712 c⁄° 
	göfo_simuœã_vîsi⁄
[] = {

715 
SIMULATE_VERSION_MAJOR
,

716 #ifde‡
SIMULATE_VERSION_MINOR


717 '.', 
SIMULATE_VERSION_MINOR
,

718 #ifde‡
SIMULATE_VERSION_PATCH


719 '.', 
SIMULATE_VERSION_PATCH
,

720 #ifde‡
SIMULATE_VERSION_TWEAK


721 '.', 
SIMULATE_VERSION_TWEAK
,

732 c⁄°* 
	göfo_∂©f‹m
 = "INFO" ":" "∂©f‹m[" 
PLATFORM_ID
 "]";

733 c⁄°* 
	göfo_¨ch
 = "INFO" ":" "¨ch[" 
ARCHITECTURE_ID
 "]";

737 #i‡!
deföed
(
__STDC__
Ë&& !deföed(
__˛™g__
)

738 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__ibmxl__
Ë|| deföed(
__IBMC__
)

739 
	#C_VERSION
 "90"

	)

741 
	#C_VERSION


	)

743 #ñi‡
__STDC_VERSION__
 > 201710L

744 
	#C_VERSION
 "23"

	)

745 #ñi‡
__STDC_VERSION__
 >= 201710L

746 
	#C_VERSION
 "17"

	)

747 #ñi‡
__STDC_VERSION__
 >= 201000L

748 
	#C_VERSION
 "11"

	)

749 #ñi‡
__STDC_VERSION__
 >= 199901L

750 
	#C_VERSION
 "99"

	)

752 
	#C_VERSION
 "90"

	)

754 c⁄° * 
	göfo_œnguage_°™d¨d_deÁu…
 =

755 "INFO" ":" "°™d¨d_deÁu…[" 
C_VERSION
 "]";

757 c⁄° * 
	göfo_œnguage_exãnsi⁄s_deÁu…
 = "INFO" ":" "extensions_default["

759 #i‡(
deföed
(
__˛™g__
Ë|| deföed(
__GNUC__
) || \

760 
deföed
(
__TI_COMPILER_VERSION__
)) && \

761 !
deföed
(
__STRICT_ANSI__
Ë&& !deföed(
_MSC_VER
)

770 #ifde‡
ID_VOID_MAIN


771 
	$maö
(Ë{
	}
}

773 #i‡
deföed
(
__CLASSIC_C__
)

774 
	$maö
(
¨gc
, 
¨gv
) argc; *argv[];

776 
	$maö
(
¨gc
, * 
¨gv
[])

779 
ªquúe
 = 0;

780 
ªquúe
 +
öfo_compûî
[
¨gc
];

781 
ªquúe
 +
öfo_∂©f‹m
[
¨gc
];

782 
ªquúe
 +
öfo_¨ch
[
¨gc
];

783 #ifde‡
COMPILER_VERSION_MAJOR


784 
ªquúe
 +
öfo_vîsi⁄
[
¨gc
];

786 #ifde‡
COMPILER_VERSION_INTERNAL


787 
ªquúe
 +
öfo_vîsi⁄_öã∫Æ
[
¨gc
];

789 #ifde‡
SIMULATE_ID


790 
ªquúe
 +
öfo_simuœã
[
¨gc
];

792 #ifde‡
SIMULATE_VERSION_MAJOR


793 
ªquúe
 +
öfo_simuœã_vîsi⁄
[
¨gc
];

795 #i‡
	`deföed
(
__CRAYXT_COMPUTE_LINUX_TARGET
)

796 
ªquúe
 +
öfo_¸ay
[
¨gc
];

798 
ªquúe
 +
öfo_œnguage_°™d¨d_deÁu…
[
¨gc
];

799 
ªquúe
 +
öfo_œnguage_exãnsi⁄s_deÁu…
[
¨gc
];

800 ()
¨gv
;

801  
ªquúe
;

802 
	}
}

	@build/CMakeFiles/CheckIncludeFiles/HAVE_NET_IF_H.c

2 
	~<sys/sockë.h
>

3 
	~<√t/if.h
>

6 
	$maö
(){ 0;
	}
}

	@build/config.h

4 
	#HAVE_ARPA_INET_H


	)

7 
	#HAVE_CLOCK_GETTIME


	)

13 
	#HAVE_PTHREAD


	)

16 
	#HAVE_DLFCN_H


	)

22 
	#HAVE_INTTYPES_H


	)

31 
	#HAVE_MEMORY_H


	)

34 
	#HAVE_NETDB_H


	)

37 
	#HAVE_NETINET_IN_H


	)

40 
	#HAVE_NETINET_TCP_H


	)

43 
	#HAVE_NET_IF_H


	)

46 
	#HAVE_POLL_H


	)

52 
	#HAVE_SOCKADDR_STORAGE


	)

55 
	#HAVE_SO_BINDTODEVICE


	)

58 
	#HAVE_STDINT_H


	)

61 
	#HAVE_STDLIB_H


	)

64 
	#HAVE_STDATOMIC_H


	)

67 
	#HAVE_STRINGS_H


	)

70 
	#HAVE_STRING_H


	)

73 
	#HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC


	)

79 
	#HAVE_SYS_IOCTL_H


	)

82 
	#HAVE_SYS_SOCKET_H


	)

88 
	#HAVE_SYS_STATVFS_H


	)

91 
	#HAVE_SYS_STAT_H


	)

94 
	#HAVE_SYS_SYSMACROS_H


	)

97 
	#HAVE_SYS_TIME_H


	)

100 
	#HAVE_SYS_TYPES_H


	)

103 
	#HAVE_SYS_UIO_H


	)

106 
	#HAVE_SYS_VFS_H


	)

112 
	#HAVE_UNISTD_H


	)

115 
	#HAVE_UTIME_H


	)

118 
	#HAVE_SIGNAL_H


	)

121 
	#HAVE_SYS_UTSNAME_H


	)

129 
	#MAJOR_IN_SYSMACROS


	)

132 #i‚de‡
_DARWIN_USE_64_BIT_INODE


133 
	#_DARWIN_USE_64_BIT_INODE
 1

	)

	@examples/ld_nfs.c

18 
	#_GNU_SOURCE


	)

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<uni°d.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<°dio.h
>

27 
	~<asm/f˙é.h
>

29 
	~<nfsc/libnfs.h
>

31 
	~<sys/sysˇŒ.h
>

32 
	~<dlf˙.h
>

34 
	#NFS_MAX_FD
 255

	)

36 
	gdebug
 = 0;

37 
	gnfsuid
 = -1;

38 
	gnfsgid
 = -1;

40 #i‚de‡
disˇrd_c⁄°


41 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

44 
	#LD_NFS_DPRINTF
(
Àvñ
, 
fmt
, 
¨gs
...) \

46 i‡((
debug
Ë>
Àvñ
) { \

47 
	`Ârötf
(
°dîr
,"ld_nfs: "); \

48 
	`Ârötf
(
°dîr
, (
fmt
), ##
¨gs
); \

49 
	`Ârötf
(
°dîr
,"\n"); \

51 } 0);

	)

53 
	snfs_fd_li°
 {

54 
	mis_nfs
;

55 
nfs_c⁄ãxt
 *
	mnfs
;

56 
nfsfh
 *
	mfh
;

59 c⁄° *
	m∑th
;

60 
	mÊags
;

61 
mode_t
 
	mmode
;

64 
nfs_fd_li°
 
	gnfs_fd_li°
[
NFS_MAX_FD
];

66 (*
ªÆ_›í
)(
__c⁄°
 *
∑th
, 
Êags
, 
mode_t
 
mode
);

68 
	$›í
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

70 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

71 
nfs_c⁄ãxt
 *
nfs
;

72 
nfs_uæ
 *
uæ
;

73 
nfsfh
 *
fh
 = 
NULL
;

74 
ªt
, 
fd
;

76 
	`LD_NFS_DPRINTF
(9, "›í(%s, %x, %o)", 
∑th
, 
Êags
, 
mode
);

77 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

78 i‡(
nfs
 =
NULL
) {

79 
	`LD_NFS_DPRINTF
(1, "FailedÅo create context");

80 
î∫o
 = 
ENOMEM
;

84 i‡(
nfsuid
 >= 0)

85 
	`nfs_£t_uid
(
nfs
, 
nfsuid
);

86 i‡(
nfsgid
 >= 0)

87 
	`nfs_£t_gid
(
nfs
, 
nfsgid
);

89 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
∑th
);

90 i‡(
uæ
 =
NULL
) {

91 
	`LD_NFS_DPRINTF
(1, "FailedÅoÖarse URL: %s\n",

92 
	`nfs_gë_îr‹
(
nfs
));

93 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

94 
î∫o
 = 
EINVAL
;

98 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

99 
	`LD_NFS_DPRINTF
(1, "FailedÅo mountÇfs share : %s\n",

100 
	`nfs_gë_îr‹
(
nfs
));

101 
	`nfs_de°roy_uæ
(
uæ
);

102 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

103 
î∫o
 = 
EINVAL
;

107 i‡(
Êags
 & 
O_CREAT
) {

108 i‡((
ªt
 = 
	`nfs_¸ót
(
nfs
, 
uæ
->
fûe
, 
mode
, &
fh
)) != 0) {

109 
	`LD_NFS_DPRINTF
(1, "FailedÅo creatÇfs file : "

110 "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

111 
	`nfs_de°roy_uæ
(
uæ
);

112 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

113 
î∫o
 = -
ªt
;

117 i‡((
ªt
 = 
	`nfs_›í
(
nfs
, 
uæ
->
fûe
, 
Êags
, &
fh
)) != 0) {

118 
	`LD_NFS_DPRINTF
(1, "FailedÅo openÇfs file : "

119 "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

120 
	`nfs_de°roy_uæ
(
uæ
);

121 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

122 
î∫o
 = -
ªt
;

127 
fd
 = 
	`nfs_gë_fd
(
nfs
);

128 i‡(
fd
 >
NFS_MAX_FD
) {

129 
	`LD_NFS_DPRINTF
(1, "Too many files open");

130 
	`nfs_de°roy_uæ
(
uæ
);

131 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

132 
î∫o
 = 
ENFILE
;

136 
nfs_fd_li°
[
fd
].
is_nfs
 = 1;

137 
nfs_fd_li°
[
fd
].
nfs
 =Çfs;

138 
nfs_fd_li°
[
fd
].
fh
 = fh;

139 
nfs_fd_li°
[
fd
].
∑th
 = 
	`°rdup
(path);

140 
nfs_fd_li°
[
fd
].
Êags
 = flags;

141 
nfs_fd_li°
[
fd
].
mode
 = mode;

143 
	`nfs_de°roy_uæ
(
uæ
);

145 
	`LD_NFS_DPRINTF
(9, "›í(%sË=%d", 
∑th
, 
fd
);

146  
fd
;

149  
	`ªÆ_›í
(
∑th
, 
Êags
, 
mode
);

150 
	}
}

152 
	$›í64
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

154  
	`›í
(
∑th
, 
Êags
 | 
O_LARGEFILE
, 
mode
);

155 
	}
}

157 (*
ªÆ_˛o£
)(
fd
);

159 
	$˛o£
(
fd
)

161 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

162 
i
;

164 
	`LD_NFS_DPRINTF
(9, "˛o£(%d)", 
fd
);

166 
nfs_fd_li°
[
fd
].
is_nfs
 = 0;

168 
	`nfs_˛o£
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
);

169 
nfs_fd_li°
[
fd
].
fh
 = 
NULL
;

171 
	`nfs_de°roy_c⁄ãxt
(
nfs_fd_li°
[
fd
].
nfs
);

172 
nfs_fd_li°
[
fd
].
nfs
 = 
NULL
;

174 
	`‰ì
(
	`disˇrd_c⁄°
(
nfs_fd_li°
[
fd
].
∑th
));

175 
nfs_fd_li°
[
fd
].
∑th
 = 
NULL
;

180  
	`ªÆ_˛o£
(
fd
);

181 
	}
}

183 
	$ssize_t
 (*
ªÆ_ªad
)(
fd
, *
buf
, 
size_t
 
cou¡
);

185 
ssize_t
 
	$ªad
(
fd
, *
buf
, 
size_t
 
cou¡
)

187 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

188 
ªt
;

190 
	`LD_NFS_DPRINTF
(9, "ªad(fd:%d cou¡:%d)", 
fd
, ()
cou¡
);

191 i‡((
ªt
 = 
	`nfs_ªad
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
,

192 
buf
, 
cou¡
)) < 0) {

193 
î∫o
 = -
ªt
;

196  
ªt
;

198  
	`ªÆ_ªad
(
fd
, 
buf
, 
cou¡
);

199 
	}
}

201 
	$ssize_t
 (*
ªÆ_¥ód
)(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

202 
ssize_t
 
	$¥ód
(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

203 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

204 
ªt
;

206 
	`LD_NFS_DPRINTF
(9, "¥ód(fd:%d off£t:%d cou¡:%d)", 
fd
,

207 ()
off£t
, ()
cou¡
);

208 i‡((
ªt
 = 
	`nfs_¥ód
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
,

209 
buf
, 
cou¡
, 
off£t
)) < 0) {

210 
î∫o
 = -
ªt
;

213  
ªt
;

215  
	`ªÆ_¥ód
(
fd
, 
buf
, 
cou¡
, 
off£t
);

216 
	}
}

218 
	$ssize_t
 (*
ªÆ_wrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

220 
ssize_t
 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

222 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

223 
ªt
;

225 
	`LD_NFS_DPRINTF
(9, "wrôe(fd:%d cou¡:%d)", 
fd
, ()
cou¡
);

226 i‡((
ªt
 = 
	`nfs_wrôe
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
,

227 (*)
	`disˇrd_c⁄°
(
buf
), 
cou¡
)) < 0) {

228 
î∫o
 = -
ªt
;

231  
ªt
;

233  
	`ªÆ_wrôe
(
fd
, 
buf
, 
cou¡
);

234 
	}
}

236 
	$ssize_t
 (*
ªÆ_pwrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

237 
ssize_t
 
	$pwrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

238 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

239 
ªt
;

241 
	`LD_NFS_DPRINTF
(9, "pwrôe(fd:%d off£t:%d cou¡:%d)", 
fd
,

242 ()
off£t
, ()
cou¡
);

243 i‡((
ªt
 = 
	`nfs_pwrôe
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
,

244 (*)
	`disˇrd_c⁄°
(
buf
), 
cou¡
, 
off£t
)) < 0) {

245 
î∫o
 = -
ªt
;

248  
ªt
;

250  
	`ªÆ_pwrôe
(
fd
, 
buf
, 
cou¡
, 
off£t
);

251 
	}
}

253 (*
ªÆ_dup2
)(
ﬁdfd
, 
√wfd
);

255 
	$dup2
(
ﬁdfd
, 
√wfd
)

257 
	`˛o£
(
√wfd
);

259 i‡(
nfs_fd_li°
[
ﬁdfd
].
is_nfs
 == 1) {

260 
nfs_c⁄ãxt
 *
nfs
;

261 
nfs_uæ
 *
uæ
;

262 
nfsfh
 *
fh
 = 
NULL
;

263 
ªt
, 
fd
;

265 
	`LD_NFS_DPRINTF
(9, "dup2(%s:%d, %d)", 
nfs_fd_li°
[
ﬁdfd
].
∑th
,

266 
ﬁdfd
, 
√wfd
);

267 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

268 i‡(
nfs
 =
NULL
) {

269 
	`LD_NFS_DPRINTF
(1, "FailedÅo create context");

270 
î∫o
 = 
ENOMEM
;

274 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
nfs_fd_li°
[
ﬁdfd
].
∑th
);

275 i‡(
uæ
 =
NULL
) {

276 
	`LD_NFS_DPRINTF
(1, "FailedÅoÖarse URL: %s\n",

277 
	`nfs_gë_îr‹
(
nfs
));

278 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

279 
î∫o
 = 
EINVAL
;

283 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

284 
	`LD_NFS_DPRINTF
(1, "FailedÅo mountÇfs share : %s\n",

285 
	`nfs_gë_îr‹
(
nfs
));

286 
	`nfs_de°roy_uæ
(
uæ
);

287 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

288 
î∫o
 = 
EINVAL
;

292 i‡((
ªt
 = 
	`nfs_›í
(
nfs
, 
uæ
->
fûe
, 
nfs_fd_li°
[
ﬁdfd
].
mode
,

293 &
fh
)) != 0) {

294 
	`LD_NFS_DPRINTF
(1, "FailedÅo openÇfs file : %s\n",

295 
	`nfs_gë_îr‹
(
nfs
));

296 
	`nfs_de°roy_uæ
(
uæ
);

297 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

298 
î∫o
 = -
ªt
;

303 i‡(
	`nfs_gë_fd
(
nfs
Ë!
√wfd
) {

304 i‡(
	`ªÆ_dup2
(
	`nfs_gë_fd
(
nfs
), 
√wfd
) < 0) {

305 
	`LD_NFS_DPRINTF
(1, "FailedÅo dup2 file : %d",

306 
î∫o
);

310 
	`˛o£
(
	`Ωc_gë_fd
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
)));

311 
	`Ωc_£t_fd
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
), 
√wfd
);

314 
fd
 = 
	`nfs_gë_fd
(
nfs
);

315 i‡(
fd
 >
NFS_MAX_FD
) {

316 
	`LD_NFS_DPRINTF
(1, "Too many files open");

317 
	`nfs_de°roy_uæ
(
uæ
);

318 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

319 
î∫o
 = 
ENFILE
;

323 
nfs_fd_li°
[
fd
].
is_nfs
 = 1;

324 
nfs_fd_li°
[
fd
].
nfs
 =Çfs;

325 
nfs_fd_li°
[
fd
].
fh
 = fh;

326 
nfs_fd_li°
[
fd
].
∑th
 = 
	`°rdup
“fs_fd_li°[
ﬁdfd
].path);

327 
nfs_fd_li°
[
fd
].
Êags
 =Çfs_fd_li°[
ﬁdfd
].flags;

328 
nfs_fd_li°
[
fd
].
mode
 =Çfs_fd_li°[
ﬁdfd
].mode;

330 
	`nfs_de°roy_uæ
(
uæ
);

332 
	`LD_NFS_DPRINTF
(9, "dup2(%s) successful",

333 
nfs_fd_li°
[
ﬁdfd
].
∑th
);

334  
fd
;

337  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

338 
	}
}

340 (*
ªÆ_x°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

342 
	$__x°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

344 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

345 
fd
, 
ªt
;

347 
	`LD_NFS_DPRINTF
(9, "__x°©(%s)", 
∑th
);

348 
fd
 = 
	`›í
(
∑th
, 0, 0);

349 i‡(
fd
 == -1) {

350  
fd
;

353 
ªt
 = 
	`__fx°©
(
vî
, 
fd
, 
buf
);

354 
	`˛o£
(
fd
);

355  
ªt
;

358  
	`ªÆ_x°©
(
vî
, 
∑th
, 
buf
);

359 
	}
}

361 (*
ªÆ_x°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

363 
	$__x°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

365 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

366 
fd
, 
ªt
;

368 
	`LD_NFS_DPRINTF
(9, "__x°©64(%s)", 
∑th
);

369 
fd
 = 
	`›í
(
∑th
, 0, 0);

370 i‡(
fd
 == -1) {

371  
fd
;

374 
ªt
 = 
	`__fx°©64
(
vî
, 
fd
, 
buf
);

375 
	`˛o£
(
fd
);

376  
ªt
;

379  
	`ªÆ_x°©64
(
vî
, 
∑th
, 
buf
);

380 
	}
}

382 (*
ªÆ_lx°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

384 
	$__lx°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

386 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

387 
fd
, 
ªt
;

389 
	`LD_NFS_DPRINTF
(9, "__lx°©(%s)", 
∑th
);

390 
fd
 = 
	`›í
(
∑th
, 0, 0);

391 i‡(
fd
 == -1) {

392  
fd
;

395 
ªt
 = 
	`__fx°©
(
vî
, 
fd
, 
buf
);

396 
	`˛o£
(
fd
);

397  
ªt
;

400  
	`ªÆ_lx°©
(
vî
, 
∑th
, 
buf
);

401 
	}
}

403 (*
ªÆ_lx°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

405 
	$__lx°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

407 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

408 
fd
, 
ªt
;

410 
	`LD_NFS_DPRINTF
(9, "__lx°©64(%s)", 
∑th
);

411 
fd
 = 
	`›í
(
∑th
, 0, 0);

412 i‡(
fd
 == -1) {

413  
fd
;

416 
ªt
 = 
	`__fx°©64
(
vî
, 
fd
, 
buf
);

417 
	`˛o£
(
fd
);

418  
ªt
;

421  
	`ªÆ_lx°©64
(
vî
, 
∑th
, 
buf
);

422 
	}
}

424 (*
ªÆ_fx°©
)(
vî
, 
fd
, 
°©
 *
buf
);

426 
	$__fx°©
(
vî
, 
fd
, 
°©
 *
buf
)

428 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

429 
ªt
;

430 
nfs_°©_64
 
°64
;

432 
	`LD_NFS_DPRINTF
(9, "__fx°©(%d)", 
fd
);

433 i‡((
ªt
 = 
	`nfs_f°©64
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
,

434 (*)&
°64
)) < 0) {

435 
î∫o
 = -
ªt
;

439 
buf
->
°_dev
 = 
°64
.
nfs_dev
;

440 
buf
->
°_öo
 = 
°64
.
nfs_öo
;

441 
buf
->
°_mode
 = 
°64
.
nfs_mode
;

442 
buf
->
°_∆ök
 = 
°64
.
nfs_∆ök
;

443 
buf
->
°_uid
 = 
°64
.
nfs_uid
;

444 
buf
->
°_gid
 = 
°64
.
nfs_gid
;

445 
buf
->
°_rdev
 = 
°64
.
nfs_rdev
;

446 
buf
->
°_size
 = 
°64
.
nfs_size
;

447 
buf
->
°_blksize
 = 
°64
.
nfs_blksize
;

448 
buf
->
°_blocks
 = 
°64
.
nfs_blocks
;

449 
buf
->
°_©im
.
tv_£c
 = 
°64
.
nfs_©ime
;

450 
buf
->
°_mtim
.
tv_£c
 = 
°64
.
nfs_mtime
;

451 
buf
->
°_˘im
.
tv_£c
 = 
°64
.
nfs_˘ime
;

453 
	`LD_NFS_DPRINTF
(9, "__fx°©(%dËsuc˚ss", 
fd
);

454  
ªt
;

457  
	`ªÆ_fx°©
(
vî
, 
fd
, 
buf
);

458 
	}
}

460 (*
ªÆ_fx°©64
)(
vî
, 
fd
, 
°©64
 *
buf
);

462 
	$__fx°©64
(
vî
, 
fd
, 
°©64
 *
buf
)

464 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

465 
ªt
;

466 
nfs_°©_64
 
°64
;

468 
	`LD_NFS_DPRINTF
(9, "__fx°©64(%d)", 
fd
);

469 i‡((
ªt
 = 
	`nfs_f°©64
(
nfs_fd_li°
[
fd
].
nfs
,Çfs_fd_li°[fd].
fh
,

470 (*)&
°64
)) < 0) {

471 
î∫o
 = -
ªt
;

475 
buf
->
°_dev
 = 
°64
.
nfs_dev
;

476 
buf
->
°_öo
 = 
°64
.
nfs_öo
;

477 
buf
->
°_mode
 = 
°64
.
nfs_mode
;

478 
buf
->
°_∆ök
 = 
°64
.
nfs_∆ök
;

479 
buf
->
°_uid
 = 
°64
.
nfs_uid
;

480 
buf
->
°_gid
 = 
°64
.
nfs_gid
;

481 
buf
->
°_rdev
 = 
°64
.
nfs_rdev
;

482 
buf
->
°_size
 = 
°64
.
nfs_size
;

483 
buf
->
°_blksize
 = 
°64
.
nfs_blksize
;

484 
buf
->
°_blocks
 = 
°64
.
nfs_blocks
;

485 
buf
->
°_©im
.
tv_£c
 = 
°64
.
nfs_©ime
;

486 
buf
->
°_mtim
.
tv_£c
 = 
°64
.
nfs_mtime
;

487 
buf
->
°_˘im
.
tv_£c
 = 
°64
.
nfs_˘ime
;

489 
	`LD_NFS_DPRINTF
(9, "__fx°©64(%dËsuc˚ss", 
fd
);

490  
ªt
;

493  
	`ªÆ_fx°©64
(
vî
, 
fd
, 
buf
);

494 
	}
}

496 (*
ªÆ_fx°©©
)(
vî
, 
fd
, c⁄° *
∑th
, 
°©
 *
buf
, 
Êag
);

498 
	$__fx°©©
(
vî
, 
fd
, c⁄° *
∑th
, 
°©
 *
buf
, 
Êag
)

500 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

501  
	`__x°©
(
vî
, 
∑th
, 
buf
);

504  
	`ªÆ_fx°©©
(
vî
, 
fd
, 
∑th
, 
buf
, 
Êag
);

505 
	}
}

507 (*
ªÆ_fx°©©64
)(
vî
, 
fd
, c⁄° *
∑th
, 
°©64
 *
buf
, 
Êag
);

509 
	$__fx°©©64
(
vî
, 
fd
, c⁄° *
∑th
, 
°©64
 *
buf
, 
Êag
)

511 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

512  
	`__x°©64
(
vî
, 
∑th
, 
buf
);

514  
	`ªÆ_fx°©©64
(
vî
, 
fd
, 
∑th
, 
buf
, 
Êag
);

515 
	}
}

517 (*
ªÆ_ÁŒoˇã
)(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
);

519 
	$ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
)

521 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

522 
	`LD_NFS_DPRINTF
(9, "ÁŒoˇã(%d)", 
fd
);

523 
î∫o
 = 
EOPNOTSUPP
;

527  
	`ªÆ_ÁŒoˇã
(
fd
, 
mode
, 
off£t
, 
Àn
);

528 
	}
}

530 (*
ªÆ_·runˇã
)(
fd
, 
off_t
 
Àn
);

532 
	$·runˇã
(
fd
, 
off_t
 
Àn
)

534 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

535 
ªt
;

537 
	`LD_NFS_DPRINTF
(9, "·runˇã(%d, %d)", 
fd
, ()
Àn
);

538 i‡((
ªt
 = 
	`nfs_·runˇã
(
nfs_fd_li°
[
fd
].
nfs
,

539 
nfs_fd_li°
[
fd
].
fh
,

540 
Àn
)) < 0) {

541 
î∫o
 = -
ªt
;

547  
	`ªÆ_·runˇã
(
fd
, 
Àn
);

548 
	}
}

550 (*
ªÆ_åunˇã
)(c⁄° *
∑th
, 
off_t
 
Àn
);

552 
	$åunˇã
(c⁄° *
∑th
, 
off_t
 
Àn
)

554 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

555 
fd
, 
ªt
;

557 
	`LD_NFS_DPRINTF
(9, "åunˇã(%s, %d)", 
∑th
, ()
Àn
);

558 
fd
 = 
	`›í
(
∑th
, 0, 0);

559 i‡(
fd
 == -1) {

560  
fd
;

563 
ªt
 = 
	`·runˇã
(
fd
, 
Àn
);

564 
	`˛o£
(
fd
);

565  
ªt
;

568  
	`ªÆ_åunˇã
(
∑th
, 
Àn
);

569 
	}
}

571 (*
ªÆ_fchmod
)(
fd
, 
mode_t
 
mode
);

573 
	$fchmod
(
fd
, 
mode_t
 
mode
)

575 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

576 
ªt
;

578 
	`LD_NFS_DPRINTF
(9, "fchmod(%d, %o)", 
fd
, ()
mode
);

579 i‡((
ªt
 = 
	`nfs_fchmod
(
nfs_fd_li°
[
fd
].
nfs
,

580 
nfs_fd_li°
[
fd
].
fh
,

581 
mode
)) < 0) {

582 
î∫o
 = -
ªt
;

588  
	`ªÆ_fchmod
(
fd
, 
mode
);

589 
	}
}

591 (*
ªÆ_chmod
)(c⁄° *
∑th
, 
mode_t
 
mode
);

593 
	$chmod
(c⁄° *
∑th
, 
mode_t
 
mode
)

595 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

596 
fd
, 
ªt
;

598 
	`LD_NFS_DPRINTF
(9, "chmod(%s, %o)", 
∑th
, ()
mode
);

599 
fd
 = 
	`›í
(
∑th
, 0, 0);

600 i‡(
fd
 == -1) {

601  
fd
;

604 
ªt
 = 
	`fchmod
(
fd
, 
mode
);

605 
	`˛o£
(
fd
);

606  
ªt
;

609  
	`ªÆ_chmod
(
∑th
, 
mode
);

610 
	}
}

612 (*
ªÆ_fchmod©
)(
fd
, c⁄° *
∑th
, 
mode_t
 
mode
, 
Êags
);

614 
	$fchmod©
(
fd
, c⁄° *
∑th
, 
mode_t
 
mode
, 
Êags
)

616 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

617  
	`chmod
(
∑th
, 
mode
);

620  
	`ªÆ_fchmod©
(
fd
, 
∑th
, 
mode
, 
Êags
);

621 
	}
}

623 (*
ªÆ_fchown
)(
fd
, 
__uid_t
 
uid
, 
__gid_t
 
gid
);

625 
	$fchown
(
fd
, 
__uid_t
 
uid
, 
__gid_t
 
gid
)

627 i‡(
nfs_fd_li°
[
fd
].
is_nfs
 == 1) {

628 
ªt
;

630 
	`LD_NFS_DPRINTF
(9, "fchown(%d, %o, %o)", 
fd
, ()
uid
, ()
gid
);

631 i‡((
ªt
 = 
	`nfs_fchown
(
nfs_fd_li°
[
fd
].
nfs
,

632 
nfs_fd_li°
[
fd
].
fh
,

633 
uid
, 
gid
)) < 0) {

634 
î∫o
 = -
ªt
;

640  
	`ªÆ_fchown
(
fd
, 
uid
, 
gid
);

641 
	}
}

643 (*
ªÆ_chown
)(c⁄° *
∑th
, 
__uid_t
 
uid
, 
__gid_t
 
gid
);

645 
	$chown
(c⁄° *
∑th
, 
__uid_t
 
uid
, 
__gid_t
 
gid
)

647 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

648 
fd
, 
ªt
;

650 
	`LD_NFS_DPRINTF
(9, "chown(%s, %o, %o)", 
∑th
, ()
uid
, ()
gid
);

651 
fd
 = 
	`›í
(
∑th
, 0, 0);

652 i‡(
fd
 == -1) {

653  
fd
;

656 
ªt
 = 
	`fchown
(
fd
, 
uid
, 
gid
);

657 
	`˛o£
(
fd
);

658  
ªt
;

661  
	`ªÆ_chown
(
∑th
, 
uid
, 
gid
);

662 
	}
}

664 (*
ªÆ_fchow«t
)(
fd
, c⁄° *
∑th
, 
__uid_t
 
uid
, 
__gid_t
 
gid
, 
Êags
);

666 
	$fchow«t
(
fd
, c⁄° *
∑th
, 
uid_t
 
uid
, 
gid_t
 
gid
, 
Êags
)

668 i‡(!
	`°∫cmp
(
∑th
, "nfs:", 4)) {

669  
	`chown
(
∑th
, 
uid
, 
gid
);

672  
	`ªÆ_fchow«t
(
fd
, 
∑th
, 
uid
, 
gid
, 
Êags
);

673 
	}
}

675 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$_öô
()

677 
i
;

679 i‡(
	`gëív
("LD_NFS_DEBUG"Ë!
NULL
) {

680 
debug
 = 
	`©oi
(
	`gëív
("LD_NFS_DEBUG"));

683 i‡(
	`gëív
("LD_NFS_UID"Ë!
NULL
) {

684 
nfsuid
 = 
	`©oi
(
	`gëív
("LD_NFS_UID"));

687 i‡(
	`gëív
("LD_NFS_GID"Ë!
NULL
) {

688 
nfsgid
 = 
	`©oi
(
	`gëív
("LD_NFS_GID"));

691 
ªÆ_›í
 = 
	`dlsym
(
RTLD_NEXT
, "open");

692 i‡(
ªÆ_›í
 =
NULL
) {

693 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(open)");

694 
	`exô
(10);

697 
ªÆ_˛o£
 = 
	`dlsym
(
RTLD_NEXT
, "close");

698 i‡(
ªÆ_˛o£
 =
NULL
) {

699 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(close)");

700 
	`exô
(10);

703 
ªÆ_ªad
 = 
	`dlsym
(
RTLD_NEXT
, "read");

704 i‡(
ªÆ_ªad
 =
NULL
) {

705 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(read)");

706 
	`exô
(10);

709 
ªÆ_¥ód
 = 
	`dlsym
(
RTLD_NEXT
, "pread");

710 i‡(
ªÆ_¥ód
 =
NULL
) {

711 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(pread)");

712 
	`exô
(10);

715 
ªÆ_wrôe
 = 
	`dlsym
(
RTLD_NEXT
, "write");

716 i‡(
ªÆ_wrôe
 =
NULL
) {

717 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(write)");

718 
	`exô
(10);

721 
ªÆ_pwrôe
 = 
	`dlsym
(
RTLD_NEXT
, "pwrite");

722 i‡(
ªÆ_pwrôe
 =
NULL
) {

723 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(pwrite)");

724 
	`exô
(10);

727 
ªÆ_x°©
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat");

728 i‡(
ªÆ_x°©
 =
NULL
) {

729 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__xstat)");

730 
	`exô
(10);

733 
ªÆ_x°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat64");

734 i‡(
ªÆ_x°©64
 =
NULL
) {

735 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__xstat64)");

738 
ªÆ_lx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat");

739 i‡(
ªÆ_lx°©
 =
NULL
) {

740 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__lxstat)");

741 
	`exô
(10);

744 
ªÆ_lx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat64");

745 i‡(
ªÆ_lx°©64
 =
NULL
) {

746 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(_lxstat64)");

747 
	`exô
(10);

750 
ªÆ_fx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat");

751 i‡(
ªÆ_fx°©
 =
NULL
) {

752 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__fxstat)");

753 
	`exô
(10);

756 
ªÆ_fx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat64");

757 i‡(
ªÆ_fx°©64
 =
NULL
) {

758 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__fxstat64)");

759 
	`exô
(10);

762 
ªÆ_fx°©©
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstatat");

763 i‡(
ªÆ_fx°©©
 =
NULL
) {

764 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__fxstatat)");

765 
	`exô
(10);

768 
ªÆ_fx°©©64
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstatat64");

769 i‡(
ªÆ_fx°©©64
 =
NULL
) {

770 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(__fxstatat64)");

771 
	`exô
(10);

774 
ªÆ_ÁŒoˇã
 = 
	`dlsym
(
RTLD_NEXT
, "fallocate");

775 i‡(
ªÆ_ÁŒoˇã
 =
NULL
) {

776 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(fallocate)");

777 
	`exô
(10);

780 
ªÆ_dup2
 = 
	`dlsym
(
RTLD_NEXT
, "dup2");

781 i‡(
ªÆ_dup2
 =
NULL
) {

782 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(dup2)");

783 
	`exô
(10);

786 
ªÆ_åunˇã
 = 
	`dlsym
(
RTLD_NEXT
, "truncate");

787 i‡(
ªÆ_åunˇã
 =
NULL
) {

788 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(truncate)");

789 
	`exô
(10);

792 
ªÆ_·runˇã
 = 
	`dlsym
(
RTLD_NEXT
, "ftruncate");

793 i‡(
ªÆ_·runˇã
 =
NULL
) {

794 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(ftruncate)");

795 
	`exô
(10);

798 
ªÆ_chmod
 = 
	`dlsym
(
RTLD_NEXT
, "chmod");

799 i‡(
ªÆ_chmod
 =
NULL
) {

800 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(chmod)");

801 
	`exô
(10);

804 
ªÆ_fchmod
 = 
	`dlsym
(
RTLD_NEXT
, "fchmod");

805 i‡(
ªÆ_fchmod
 =
NULL
) {

806 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(fchmod)");

807 
	`exô
(10);

810 
ªÆ_fchmod©
 = 
	`dlsym
(
RTLD_NEXT
, "fchmodat");

811 i‡(
ªÆ_fchmod©
 =
NULL
) {

812 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(fchmodat)");

813 
	`exô
(10);

816 
ªÆ_chown
 = 
	`dlsym
(
RTLD_NEXT
, "chown");

817 i‡(
ªÆ_chown
 =
NULL
) {

818 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(chown)");

819 
	`exô
(10);

822 
ªÆ_fchown
 = 
	`dlsym
(
RTLD_NEXT
, "fchown");

823 i‡(
ªÆ_fchown
 =
NULL
) {

824 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(fchown)");

825 
	`exô
(10);

828 
ªÆ_fchow«t
 = 
	`dlsym
(
RTLD_NEXT
, "fchownat");

829 i‡(
ªÆ_fchow«t
 =
NULL
) {

830 
	`LD_NFS_DPRINTF
(0, "FailedÅo dlsym(fchownat)");

831 
	`exô
(10);

833 
	}
}

	@examples/nfs-fh.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
AROS


27 
	~"¨os_com∑t.h
"

31 #ifde‡
WIN32


32 
	~<wö32/wö32_com∑t.h
>

33 #¥agm®
commít
(
lib
, "ws2_32.lib")

34 
WSADATA
 
	gwßD©a
;

36 
	~<sys/°©.h
>

37 
	~<°rög.h
>

40 #ifde‡
HAVE_POLL_H


41 
	~<pﬁl.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°döt.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<f˙é.h
>

53 
	~"libnfs.h
"

54 
	~"libnfs-øw.h
"

55 
	~"libnfs-øw-nfs.h
"

57 
	$ußge
()

59 
	`Ârötf
(
°dîr
, "Usage:Çfs-fh <url>\n");

60 
	`Ârötf
(
°dîr
, "\tPrintsÅhe NFS filehandle forá URL.\n");

61 
	`exô
(0);

62 
	}
}

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
i
;

67 
ªt
 = 0;

68 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

69 
nfsfh
 *nfsfh = 
NULL
;

70 
nfs_fh3
 *
fh3
;

71 
nfs_uæ
 *
uæ
 = 
NULL
;

73 #ifde‡
WIN32


74 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

75 
	`¥ötf
("FailedÅo start Winsock2\n");

80 #ifde‡
AROS


81 
	`¨os_öô_sockë
();

84 i‡(
¨gc
 < 2) {

85 
	`ußge
();

88 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

89 i‡(
nfs
 =
NULL
) {

90 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

91 
föished
;

94 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

95 i‡(
uæ
 =
NULL
) {

96 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

97 
ªt
 = 1;

98 
föished
;

101 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

102 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

103 
	`nfs_gë_îr‹
(
nfs
));

104 
ªt
 = 1;

105 
föished
;

108 i‡(
	`nfs_›í
(
nfs
, 
uæ
->
fûe
, 
O_RDONLY
, &
nfsfh
) != 0) {

109 
	`Ârötf
(
°dîr
, "FailedÅo open file %s: %s\n",

110 
uæ
->
fûe
, 
	`nfs_gë_îr‹
(
nfs
));

111 
ªt
 = 1;

112 
föished
;

115 
fh3
 = (
nfs_fh3
 *)
	`nfs_gë_fh
(
nfsfh
);

116 
i
 = 0; i < 
fh3
->
d©a
.
d©a_Àn
; i++) {

117 
	`¥ötf
("%02x", ()(
fh3
->
d©a
.
d©a_vÆ
[
i
]));

119 
	`¥ötf
("\n");

121 
föished
:

122 i‡(
nfsfh
) {

123 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

125 
	`nfs_umou¡
(
nfs
);

126 i‡(
uæ
) {

127 
	`nfs_de°roy_uæ
(
uæ
);

129 i‡(
nfs
) {

130 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

133  
ªt
;

134 
	}
}

	@examples/nfs-io.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

29 #ifde‡
WIN32


30 
	~<wö32/wö32_com∑t.h
>

31 #¥agm®
commít
(
lib
, "ws2_32.lib")

32 
WSADATA
 
	gwßD©a
;

33 
	#PRId64
 "Œ"

	)

35 
	~<öây≥s.h
>

36 
	~<°rög.h
>

37 
	~<sys/°©.h
>

38 
	~<sys/time.h
>

39 
	~<sys/°©vfs.h
>

40 #i‚de‡
AROS


41 
	~<sys/°©vfs.h
>

45 #ifde‡
HAVE_UNISTD_H


46 
	~<uni°d.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°döt.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/°©.h
>

54 
	~<f˙é.h
>

55 
	~"../ö˛ude/nfsc/libnfs.h
"

56 
	~"../ö˛ude/nfsc/libnfs-øw.h
"

57 
	~"../mou¡/libnfs-øw-mou¡.h
"

58 
	~"../nfs/libnfs-øw-nfs.h
"

59 
	~"../nfs4/libnfs-øw-nfs4.h
"

61 
	$¥öt_ußge
()

63 
	`Ârötf
(
°dîr
, "Usage:Çfs-io [-?|--help|--usage] [stat|creat|trunc|unlink|mkdir|rmdir|touch|chmod] <url>\n");

64 
	}
}

67 *
	$a˛3_ty≥
(
ty≥
)

69 
ty≥
) {

70 
NFSACL_TYPE_USER_OBJ
:  "USER_OBJ";

71 
NFSACL_TYPE_USER
:  "USER";

72 
NFSACL_TYPE_GROUP_OBJ
:  "GROUP_OBJ";

73 
NFSACL_TYPE_GROUP
:  "GROUP";

74 
NFSACL_TYPE_CLASS_OBJ
:  "CLASS_OBJ";

75 
NFSACL_TYPE_CLASS
:  "CLASS";

76 
NFSACL_TYPE_DEFAULT
:  "DEFAULT";

77 
NFSACL_TYPE_DEFAULT_USER_OBJ
:  "DEFAULT_USER_OBJ";

78 
NFSACL_TYPE_DEFAULT_USER
:  "DEFAULT_USER";

79 
NFSACL_TYPE_DEFAULT_GROUP_OBJ
:  "DEFAULT_GROUP_OBJ";

80 
NFSACL_TYPE_DEFAULT_GROUP
:  "DEFAULT_GROUP";

81 
NFSACL_TYPE_DEFAULT_CLASS_OBJ
:  "DEFAULT_CLASS_OBJ";

82 
NFSACL_TYPE_DEFAULT_OTHER_OBJ
:  "DEFAULT_OTHER_OBJ";

85 
	}
}

87 
	$maö
(
¨gc
, *
¨gv
[])

89 
ªt
 = 1;

90 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

91 
nfsfh
 *nfsfh = 
NULL
;

92 
nfs_uæ
 *
uæ
 = 
NULL
;

93 
Áâr4_a˛
 
a˛4
;

94 
Áâr3_a˛
 
a˛3
;

95 
i
;

97 #ifde‡
WIN32


98 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

99 
	`¥ötf
("FailedÅo start Winsock2\n");

100 
	`exô
(10);

104 #ifde‡
AROS


105 
	`¨os_öô_sockë
();

108 i‡(
¨gc
 < 3) {

109 
	`Ârötf
(
°dîr
, "No URL specified.\n");

110 
föished
;

113 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

114 i‡(
nfs
 =
NULL
) {

115 
	`¥ötf
("failedÅo init context\n");

116 
föished
;

119 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[
¨gc
 - 1]);

120 i‡(
uæ
 =
NULL
) {

121 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

122 
föished
;

125 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

126 
	`Ârötf
(
°dîr
, "FaûedÅÿmou¡Çf†sh¨ê: %s\n", 
	`nfs_gë_îr‹
(
nfs
));

127 
föished
;

130 i‡(!
	`°∫cmp
(
¨gv
[1], "creat", 5)) {

131 
ªt
 = 
	`nfs_¸ót
(
nfs
, 
uæ
->
fûe
, 0600, &
nfsfh
);

132 } i‡(!
	`°∫cmp
(
¨gv
[1], "unlink", 6)) {

133 
ªt
 = 
	`nfs_u∆ök
(
nfs
, 
uæ
->
fûe
);

134 } i‡(!
	`°∫cmp
(
¨gv
[1], "mkdir", 5)) {

135 
ªt
 = 
	`nfs_mkdú
(
nfs
, 
uæ
->
fûe
);

136 } i‡(!
	`°∫cmp
(
¨gv
[1], "rmdir", 5)) {

137 
ªt
 = 
	`nfs_rmdú
(
nfs
, 
uæ
->
fûe
);

138 } i‡(!
	`°∫cmp
(
¨gv
[1], "trunc", 5)) {

139 
ªt
 = 
	`nfs_åunˇã
(
nfs
, 
uæ
->
fûe
, 0);

140 } i‡(!
	`°∫cmp
(
¨gv
[1], "touch", 5)) {

141 
timevÆ
 
times
[2];

142 
	`gëtimeofday
(&
times
[0], 
NULL
);

143 
	`gëtimeofday
(&
times
[1], 
NULL
);

144 
ªt
 = 
	`nfs_utimes
(
nfs
, 
uæ
->
fûe
, 
times
);

145 } i‡(!
	`°∫cmp
(
¨gv
[1], "chmod", 5)) {

146 i‡(
¨gc
 < 4) {

147 
	`Ârötf
(
°dîr
, "Invalidárguments for chmod");

148 
föished
;

150 
mode
 = 
	`°πﬁ
(
¨gv
[2], 
NULL
, 8);

151 
ªt
 = 
	`nfs_chmod
(
nfs
, 
uæ
->
fûe
, 
mode
);

152 } i‡(!
	`°∫cmp
(
¨gv
[1], "chown", 5)) {

153 i‡(
¨gc
 < 5) {

154 
	`Ârötf
(
°dîr
, "Invalidárguments for chown");

155 
föished
;

157 
uid
 = 
	`°πﬁ
(
¨gv
[2], 
NULL
, 10);

158 
gid
 = 
	`°πﬁ
(
¨gv
[3], 
NULL
, 10);

159 
ªt
 = 
	`nfs_chown
(
nfs
, 
uæ
->
fûe
, 
uid
, 
gid
);

160 } i‡(!
	`°∫cmp
(
¨gv
[1], "stat", 4)) {

161 
nfs_°©_64
 
°
;

162 
ªt
 = 
	`nfs_°©64
(
nfs
, 
uæ
->
fûe
, &
°
);

163 i‡(!
ªt
) {

164 
°
.
nfs_mode
 & 
S_IFMT
) {

165 #i‚de‡
WIN32


166 
S_IFLNK
:

167 
	`¥ötf
("l");

170 
S_IFREG
:

171 
	`¥ötf
("-");

173 
S_IFDIR
:

174 
	`¥ötf
("d");

176 
S_IFCHR
:

177 
	`¥ötf
("c");

179 
S_IFBLK
:

180 
	`¥ötf
("b");

183 
	`¥ötf
("%c%c%c",

184 "-r"[!!(
°
.
nfs_mode
 & 
S_IRUSR
)],

185 "-w"[!!(
°
.
nfs_mode
 & 
S_IWUSR
)],

186 "-xSs"[ !!(
°
.
nfs_mode
 & 
S_IXUSR
) +

187 2*!!(
°
.
nfs_mode
 & 
S_ISUID
)]

189 
	`¥ötf
("%c%c%c",

190 "-r"[!!(
°
.
nfs_mode
 & 
S_IRGRP
)],

191 "-w"[!!(
°
.
nfs_mode
 & 
S_IWGRP
)],

192 "-xSs"[ !!(
°
.
nfs_mode
 & 
S_IXGRP
) +

193 2*!!(
°
.
nfs_mode
 & 
S_ISGID
)]

195 
	`¥ötf
("%c%c%c",

196 "-r"[!!(
°
.
nfs_mode
 & 
S_IROTH
)],

197 "-w"[!!(
°
.
nfs_mode
 & 
S_IWOTH
)],

198 "-xTt"[ !!(
°
.
nfs_mode
 & 
S_IXOTH
) +

199 2*!!(
°
.
nfs_mode
 & 
S_ISVTX
)]

201 
	`¥ötf
(" %2d", ()
°
.
nfs_∆ök
);

202 
	`¥ötf
(" %5d", ()
°
.
nfs_uid
);

203 
	`¥ötf
(" %5d", ()
°
.
nfs_gid
);

204 
	`¥ötf
(" size: %12" 
PRId64
, 
°
.
nfs_size
);

205 
	`¥ötf
(" mtime: %lu %lu", 
°
.
nfs_mtime
, st.
nfs_mtime_n£c
);

206 
	`¥ötf
("\n");

208 } i‡(!
	`°∫cmp
(
¨gv
[1], "acl", 3)) {

209 
ªt
 = 
	`nfs_›í
(
nfs
, 
uæ
->
fûe
, 0600, &
nfsfh
);

210 i‡(
ªt
 != 0) {

211 
	`¥ötf
("ÁûedÅÿ›í %s. %s\n", 
uæ
->
fûe
, 
	`nfs_gë_îr‹
(
nfs
));

212 
föished
;

215 
	`¥ötf
("ACL vîsi⁄:%d\n", 
	`nfs_gë_vîsi⁄
(
nfs
));

217 i‡(
	`nfs_gë_vîsi⁄
(
nfs
Ë=
NFS_V3
) {

218 
	`¥ötf
("Get v3 ACL\n");

219 
	`mem£t
(&
a˛3
, 0, (
Áâr3_a˛
));

220 i‡(
	`nfs3_gëa˛
(
nfs
, 
nfsfh
, &
a˛3
) != 0) {

221 
	`¥ötf
("nfs3_getacl_async failed\n");

223 
	`¥ötf
("Numbî o‡ACEs: %d\n", 
a˛3
.
a˚_cou¡
);

224 
i
 = 0; i < 
a˛3
.
a˚_cou¡
; i++) {

225 
	`¥ötf
("%s(%dË", 
	`a˛3_ty≥
(
a˛3
.
a˚
[
i
].
ty≥
),ácl3.ace[i].type);

226 
	`¥ötf
("Id: %d ", 
a˛3
.
a˚
[
i
].
id
);

227 
	`¥ötf
("Pîm: 0x%x: %s%s%s\n", 
a˛3
.
a˚
[
i
].
≥rm
,

228 
a˛3
.
a˚
[
i
].
≥rm
 & 
NFSACL_PERM_READ
 ? "READ ":"",

229 
a˛3
.
a˚
[
i
].
≥rm
 & 
NFSACL_PERM_WRITE
 ? "WRITE ":"",

230 
a˛3
.
a˚
[
i
].
≥rm
 & 
NFSACL_PERM_EXEC
 ? "EXEC ":"");

232 
	`nfs3_a˛_‰ì
(&
a˛3
);

233 
föished
;

237 i‡(
	`nfs4_gëa˛
(
nfs
, 
nfsfh
, &
a˛4
)) {

238 
	`¥ötf
("FaûedÅÿªad ACL†%s\n", 
	`nfs_gë_îr‹
(
nfs
));

239 
föished
;

241 
i
 = 0; i < 
a˛4
.
Áâr4_a˛_Àn
; i++) {

242 
	`¥ötf
("Type:%d Flag:%d Mask:0x%08x Who:%s\n",

243 
a˛4
.
Áâr4_a˛_vÆ
[
i
].
ty≥
,

244 
a˛4
.
Áâr4_a˛_vÆ
[
i
].
Êag
,

245 
a˛4
.
Áâr4_a˛_vÆ
[
i
].
ac˚ss_mask
,

246 
a˛4
.
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_vÆ
);

248 
	`nfs4_a˛_‰ì
(&
a˛4
);

249 
ªt
 = 0;

251 
föished
;

254 i‡(
ªt
) {

255 
	`Ârötf
(
°dîr
, "ERROR: %s\n", 
	`nfs_gë_îr‹
(
nfs
));

258 
föished
:

259 i‡(
ªt
 > 0) {

260 
	`¥öt_ußge
();

262 
	`nfs_de°roy_uæ
(
uæ
);

263 i‡(
nfs
 !
NULL
) {

264 i‡(
nfsfh
) {

265 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

267 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

269  !!
ªt
;

270 
	}
}

	@examples/nfs-ln.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
AROS


27 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

34 
	#PRId64
 "Œ"

	)

36 
	~<öây≥s.h
>

37 
	~<°rög.h
>

38 
	~<sys/°©.h
>

39 
	~<sys/°©vfs.h
>

40 #i‚de‡
AROS


41 
	~<sys/°©vfs.h
>

45 #ifde‡
HAVE_UNISTD_H


46 
	~<uni°d.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°döt.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/°©.h
>

54 
	~<f˙é.h
>

55 
	~"libnfs.h
"

56 
	~"libnfs-øw.h
"

57 
	~"libnfs-øw-mou¡.h
"

59 
	$¥öt_ußge
()

61 
	`Ârötf
(
°dîr
, "Usage:Çfs-ln <url> <old-path> <new-path>\n");

62 
	}
}

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
ªt
 = 1;

67 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

68 
nfsfh
 *nfsfh = 
NULL
;

69 
nfs_uæ
 *
uæ
 = 
NULL
;

71 #ifde‡
WIN32


72 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

73 
	`¥ötf
("FailedÅo start Winsock2\n");

74 
	`exô
(10);

78 #ifde‡
AROS


79 
	`¨os_öô_sockë
();

82 i‡(
¨gc
 != 4) {

83 
	`¥öt_ußge
();

84 
föished
;

87 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

88 i‡(
nfs
 =
NULL
) {

89 
	`¥ötf
("failedÅo init context\n");

90 
föished
;

93 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

94 i‡(
uæ
 =
NULL
) {

95 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

96 
föished
;

99 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

100 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

101 
	`nfs_gë_îr‹
(
nfs
));

102 
föished
;

105 
ªt
 = 
	`nfs_lök
(
nfs
, 
¨gv
[2],árgv[3]);

106 i‡(
ªt
) {

107 
	`Ârötf
(
°dîr
, "nfs_link() failed with %s\n",

108 
	`nfs_gë_îr‹
(
nfs
));

109 
föished
;

112 
föished
:

113 i‡(
ªt
 > 0) {

114 
	`¥öt_ußge
();

116 
	`nfs_de°roy_uæ
(
uæ
);

117 i‡(
nfs
 !
NULL
) {

118 i‡(
nfsfh
) {

119 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

121 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

123  !!
ªt
;

124 
	}
}

	@examples/nfs-pthreads-async-readfile.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
AROS


27 
	~"¨os_com∑t.h
"

31 #ifde‡
WIN32


32 
	~<wö32/wö32_com∑t.h
>

33 #¥agm®
commít
(
lib
, "ws2_32.lib")

34 
WSADATA
 
	gwßD©a
;

36 
	~<sys/°©.h
>

37 
	~<°rög.h
>

40 #ifde‡
HAVE_POLL_H


41 
	~<pﬁl.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 
	~<°d©omic.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<°döt.h
>

53 
	~<sys/mm™.h
>

54 
	~<sys/°©.h
>

55 
	~<sys/ty≥s.h
>

56 
	~<f˙é.h
>

57 
	~<±hªad.h
>

58 
	~<time.h
>

59 
	~<uni°d.h
>

60 
	~"libnfs.h
"

61 
	~"libnfs-øw.h
"

62 
	~"libnfs-øw-mou¡.h
"

69 
	#NUM_CONTEXTS
 4

	)

80 
	#NUM_THREADS
 8

	)

86 
	#MAX_CONCURRENCY
 1024

	)

88 
	$ußge
()

90 
	`Ârötf
(
°dîr
, "Usage:Çfs-pthreads-async-readile <src> <dst>\n");

91 
	`Ârötf
(
°dîr
, "<src> isánÇfs URL, <dst> isáÜocal file.\n");

92 
	`exô
(0);

93 
	}
}

95 
	sªad_d©a
 {

96 
nfs_c⁄ãxt
 *
	mnfs
;

97 *
	m±r
;

98 
nfsfh
 *
	mnfsfh
;

99 
uöt64_t
 
	moff£t
;

100 
ssize_t
 
	mÀn
;

101 
	mmax_out°™dög
;

104 
	sªad_cb_d©a
 {

105 
©omic_öt
 
	mˇŒs_ö_Êight
;

106 
	m°©us
;

109 
	$ªad_async_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
,

110 *
d©a
, *
¥iv©e_d©a
)

112 
ªad_cb_d©a
 *ªad_cb_d©®
¥iv©e_d©a
;

114 i‡(
°©us
 < 0) {

115 
	`Ârötf
(
°dîr
, "¥ód faûed wôh \"%s\"\n", (*)
d©a
);

116 
°©us
 = -
EIO
;

118 
	`©omic_„tch_sub_ex∂icô
(&
ªad_cb_d©a
->
ˇŒs_ö_Êight
, 1, 
mem‹y_‹dî_ªœxed
);

119 
	}
}

124 *
	$nfs_ªad_thªad
(*
¨g
)

126 
ªad_d©a
 *
rd
 = 
¨g
;

127 
ssize_t
 
cou¡
;

128 
ªad_cb_d©a
Ñead_cb_data;

129 
time•ec
 
ts
;

131 
ªad_cb_d©a
.
°©us
 = 0;

132 
ªad_cb_d©a
.
ˇŒs_ö_Êight
 = 0;

134 
rd
->
Àn
) {

136 
cou¡
 = 1048576;

137 i‡(
cou¡
 > 
rd
->
Àn
) {

138 
cou¡
 = 
rd
->
Àn
;

140 
	`©omic_„tch_add_ex∂icô
(&
ªad_cb_d©a
.
ˇŒs_ö_Êight
, 1, 
mem‹y_‹dî_ªœxed
);

141 i‡(
	`nfs_¥ód_async
(
rd
->
nfs
,Ñd->
nfsfh
,

142 
rd
->
±r
 +Ñd->
off£t
,

143 
cou¡
, 
rd
->
off£t
,

144 
ªad_async_cb
, &
ªad_cb_d©a
) < 0) {

145 
	`Ârötf
(
°dîr
, "FaûedÅÿªad fromÇf†fûe. %s\n", 
	`nfs_gë_îr‹
(
rd
->
nfs
));

146 
	`exô
(1);

148 
rd
->
off£t
 +
cou¡
;

149 
rd
->
Àn
 -
cou¡
;

152 
ªad_cb_d©a
.
ˇŒs_ö_Êight
 >
rd
->
max_out°™dög
) {

153 
ts
.
tv_£c
 = 0;

154 
ts
.
tv_n£c
 = 1000000;

155 
	`«no¶ìp
(&
ts
, 
NULL
);

162 
ªad_cb_d©a
.
ˇŒs_ö_Êight
) {

163 
ts
.
tv_£c
 = 0;

164 
ts
.
tv_n£c
 = 1000000;

165 
	`«no¶ìp
(&
ts
, 
NULL
);

167 i‡(
ªad_cb_d©a
.
°©us
) {

168 
	`Ârötf
(
°dîr
, "Oh,Ço, something went wrong\n");

169 
	`exô
(1);

171  
NULL
;

172 
	}
}

174 
	$maö
(
¨gc
, *
¨gv
[])

176 
i
;

177 
fd
 = -1;

178 
uöt64_t
 
chunk_size
;

179 
nfs_c⁄ãxt
 *
nfs
[
NUM_CONTEXTS
] = {
NULL
,};

180 
nfs_uæ
 *
uæ
 = 
NULL
;

181 
±hªad_t
 *
ªad_thªads
;

182 
ªad_d©a
 *
rd
;

183 
nfsfh
 *nfsfh = 
NULL
;

184 
nfs_°©_64
 
°
;

185 *
±r
;

186 *
nfs_fûe
 = 
NULL
;

188 #ifde‡
WIN32


189 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

190 
	`¥ötf
("FailedÅo start Winsock2\n");

195 #ifde‡
AROS


196 
	`¨os_öô_sockë
();

199 i‡(
¨gc
 != 3) {

200 
	`ußge
();

209 
i
 = 0; i < 
NUM_CONTEXTS
; i++) {

210 
nfs
[
i
] = 
	`nfs_öô_c⁄ãxt
();

211 i‡(
nfs
[
i
] =
NULL
) {

212 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

213 
	`exô
(1);

220 
	`nfs_£t_hash_size
(
nfs
[
i
], 50);

221 i‡(
uæ
) {

222 
	`nfs_de°roy_uæ
(
uæ
);

224 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
[
i
], 
¨gv
[1]);

225 i‡(
uæ
 =
NULL
) {

226 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
[0]));

227 
	`exô
(1);

230 i‡(
	`nfs_mou¡
(
nfs
[
i
], 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

231 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

232 
	`nfs_gë_îr‹
(
nfs
[
i
]));

233 
	`exô
(1);

240 i‡(
i
 == 0) {

241 
nfs_fûe
 = 
	`°rdup
(
uæ
->
fûe
);

243 i‡(
	`nfs_›í
(
nfs
[0], 
uæ
->
fûe
, 
O_RDONLY
, &
nfsfh
) < 0) {

244 
	`Ârötf
(
°dîr
, "FailedÅo openÇfs file %s. %s\n",

245 
uæ
->
fûe
,

246 
	`nfs_gë_îr‹
(
nfs
[0]));

247 
	`exô
(1);

254 i‡(
	`nfs_l°©64
(
nfs
[0], 
uæ
->
fûe
, &
°
) < 0) {

255 
	`Ârötf
(
°dîr
, "FailedÅo statÇfs file %s. %s\n",

256 
uæ
->
fûe
,

257 
	`nfs_gë_îr‹
(
nfs
[0]));

258 
	`exô
(1);

266 i‡(
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs
[
i
])) {

267 
	`Ârötf
(
°dîr
, "failedÅo start serviceÅhread\n");

268 
	`exô
(10);

270 
	`¥ötf
("Sîvi˚Åhªad #%d i†a˘ive. RódyÅÿdÿI/O\n", 
i
);

277 
fd
 = 
	`›í
(
¨gv
[2], 
O_RDWR
|
O_CREAT
|
O_TRUNC
);

278 i‡(
fd
 < 0) {

279 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í de° fûê%s\n", 
¨gv
[2]);

280 
	`exô
(1);

282 i‡(
	`·runˇã
(
fd
, 
°
.
nfs_size
) < 0) {

283 
	`Ârötf
(
°dîr
, "failedÅoÅruncate(%s)Åo %lu bytes\n",

284 
¨gv
[2], 
°
.
nfs_size
);

285 
	`exô
(1);

287 
±r
 = 
	`mm≠
(
NULL
, 
°
.
nfs_size
, 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

288 i‡(
±r
 =
MAP_FAILED
) {

289 
	`Ârötf
(
°dîr
, "failedÅo mmap file %s: %s\n",

290 
¨gv
[2], 
	`°ªº‹
(
î∫o
));

291 
	`exô
(1);

298 
	`¥ötf
("Sizêo‡fûe:%†i†%lu byãs\n", 
nfs_fûe
, 
°
.
nfs_size
);

299 
chunk_size
 = (
°
.
nfs_size
 + 
NUM_THREADS
 - 1) / NUM_THREADS;

301 
	`¥ötf
("Usög %dÅhªad†wrôög %lu byã†óch\n", 
NUM_THREADS
, 
chunk_size
);

303 i‡((
ªad_thªads
 = 
	`mÆloc
((
±hªad_t
Ë* 
NUM_THREADS
)Ë=
NULL
) {

304 
	`Ârötf
(
°dîr
, "FailedÅoállocated stat_thread\n");

305 
	`exô
(10);

307 i‡((
rd
 = 
	`mÆloc
((
ªad_d©a
Ë* 
NUM_THREADS
)Ë=
NULL
) {

308 
	`Ârötf
(
°dîr
, "FailedÅoállocatedÑead_data\n");

309 
	`exô
(10);

311 
i
 = 0; i < 
NUM_THREADS
; i++) {

312 
rd
[
i
].
nfs
 =Çfs[ò% 
NUM_CONTEXTS
];

313 
rd
[
i
].
±r
 =Ötr;

314 
rd
[
i
].
nfsfh
 =Çfsfh;

315 
rd
[
i
].
off£t
 = i * 
chunk_size
;

316 
rd
[
i
].
Àn
 = 
°
.
nfs_size
 -Ñd[i].
off£t
;

317 i‡(
rd
[
i
].
Àn
 > 
chunk_size
) {

318 
rd
[
i
].
Àn
 = 
chunk_size
;

320 
rd
[
i
].
max_out°™dög
 = 
MAX_CONCURRENCY
 / 
NUM_THREADS
;

322 i‡(
	`±hªad_¸óã
(&
ªad_thªads
[
i
], 
NULL
,

323 &
nfs_ªad_thªad
, &
rd
[
i
])) {

324 
	`¥ötf
("FaûedÅÿ¸óã sèàthªad %d\n", 
i
);

325 
	`exô
(10);

332 
i
 = 0; i < 
NUM_THREADS
; i++) {

333 
	`±hªad_joö
(
ªad_thªads
[
i
], 
NULL
);

339 
	`nfs_˛o£
(
nfs
[0], 
nfsfh
);

340 
	`˛o£
(
fd
);

342 
	`¥ötf
("closing serviceÅhreads\n");

343 
i
 = 0; i < 
NUM_CONTEXTS
; i++) {

344 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs
[
i
]);

345 
	`nfs_de°roy_c⁄ãxt
(
nfs
[
i
]);

347 i‡(
uæ
) {

348 
	`nfs_de°roy_uæ
(
uæ
);

350 
	`‰ì
(
rd
);

351 
	`‰ì
(
ªad_thªads
);

352 
	`munm≠
(
±r
, 
°
.
nfs_size
);

354 
	}
}

	@examples/nfs-pthreads-async-writefile.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

35 
	~<sys/°©.h
>

36 
	~<°rög.h
>

39 #ifde‡
HAVE_POLL_H


40 
	~<pﬁl.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<î∫o.h
>

48 
	~<°d©omic.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°döt.h
>

52 
	~<sys/mm™.h
>

53 
	~<sys/°©.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<f˙é.h
>

56 
	~<±hªad.h
>

57 
	~<time.h
>

58 
	~<uni°d.h
>

59 
	~"libnfs.h
"

60 
	~"libnfs-øw.h
"

61 
	~"libnfs-øw-mou¡.h
"

68 
	#NUM_CONTEXTS
 4

	)

79 
	#NUM_THREADS
 8

	)

85 
	#MAX_CONCURRENCY
 1024

	)

87 
	$ußge
()

89 
	`Ârötf
(
°dîr
, "Usage:Çfs-pthreads-writefile <src> <dst>\n");

90 
	`Ârötf
(
°dîr
, "<src> isáÜocal file, <dst> isánÇfs URL.\n");

91 
	`exô
(0);

92 
	}
}

94 
	swrôe_d©a
 {

95 
nfs_c⁄ãxt
 *
	mnfs
;

96 *
	m±r
;

97 
nfsfh
 *
	mnfsfh
;

98 
uöt64_t
 
	moff£t
;

99 
ssize_t
 
	mÀn
;

100 
	mmax_out°™dög
;

103 
	swrôe_cb_d©a
 {

104 
©omic_öt
 
	mˇŒs_ö_Êight
;

105 
	m°©us
;

108 
	$wrôe_async_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
,

109 *
d©a
, *
¥iv©e_d©a
)

111 
wrôe_cb_d©a
 *wrôe_cb_d©®
¥iv©e_d©a
;

113 i‡(
°©us
 < 0) {

114 
	`Ârötf
(
°dîr
, "pwrôêÁûed wôh \"%s\"\n", (*)
d©a
);

115 
°©us
 = -
EIO
;

117 
	`©omic_„tch_sub_ex∂icô
(&
wrôe_cb_d©a
->
ˇŒs_ö_Êight
, 1, 
mem‹y_‹dî_ªœxed
);

118 
	}
}

123 *
	$nfs_wrôe_thªad
(*
¨g
)

125 
wrôe_d©a
 *
wd
 = 
¨g
;

126 
ssize_t
 
cou¡
;

127 
wrôe_cb_d©a
 write_cb_data;

128 
time•ec
 
ts
;

130 
wrôe_cb_d©a
.
°©us
 = 0;

131 
wrôe_cb_d©a
.
ˇŒs_ö_Êight
 = 0;

132 
wd
->
Àn
) {

134 
cou¡
 = 1048576;

135 i‡(
cou¡
 > 
wd
->
Àn
) {

136 
cou¡
 = 
wd
->
Àn
;

138 
	`©omic_„tch_add_ex∂icô
(&
wrôe_cb_d©a
.
ˇŒs_ö_Êight
, 1, 
mem‹y_‹dî_ªœxed
);

139 i‡(
	`nfs_pwrôe_async
(
wd
->
nfs
, wd->
nfsfh
,

140 
wd
->
±r
 + wd->
off£t
,

141 
cou¡
, 
wd
->
off£t
,

142 
wrôe_async_cb
, &
wrôe_cb_d©a
) < 0) {

143 
	`Ârötf
(
°dîr
, "FaûedÅÿwrôêtÿnf†fûe. %s\n", 
	`nfs_gë_îr‹
(
wd
->
nfs
));

144 
	`exô
(1);

146 
wd
->
off£t
 +
cou¡
;

147 
wd
->
Àn
 -
cou¡
;

150 
wrôe_cb_d©a
.
ˇŒs_ö_Êight
 >
wd
->
max_out°™dög
) {

151 
ts
.
tv_£c
 = 0;

152 
ts
.
tv_n£c
 = 1000000;

153 
	`«no¶ìp
(&
ts
, 
NULL
);

156 
wrôe_cb_d©a
.
ˇŒs_ö_Êight
) {

157 
ts
.
tv_£c
 = 0;

158 
ts
.
tv_n£c
 = 1000000;

159 
	`«no¶ìp
(&
ts
, 
NULL
);

161 i‡(
wrôe_cb_d©a
.
°©us
) {

162 
	`Ârötf
(
°dîr
, "Oh,Ço, something went wrong\n");

163 
	`exô
(1);

165  
NULL
;

166 
	}
}

168 
	$maö
(
¨gc
, *
¨gv
[])

170 
i
;

171 
fd
 = -1;

172 
uöt64_t
 
chunk_size
;

173 
nfs_c⁄ãxt
 *
nfs
[
NUM_CONTEXTS
] = {
NULL
,};

174 
nfs_uæ
 *
uæ
 = 
NULL
;

175 
°©
 
°
;

176 
±hªad_t
 *
wrôe_thªads
;

177 
wrôe_d©a
 *
wd
;

178 
nfsfh
 *nfsfh = 
NULL
;

179 *
±r
;

181 #ifde‡
WIN32


182 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

183 
	`¥ötf
("FailedÅo start Winsock2\n");

188 #ifde‡
AROS


189 
	`¨os_öô_sockë
();

192 i‡(
¨gc
 != 3) {

193 
	`ußge
();

196 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

197 i‡(
fd
 < 0) {

198 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í sour˚ fûê%s\n", 
¨gv
[1]);

199 
	`exô
(1);

201 i‡(
	`f°©
(
fd
, &
°
) < 0) {

202 
	`Ârötf
(
°dîr
, "ÁûedÅÿ°©(%s)\n", 
¨gv
[1]);

203 
	`exô
(10);

205 
±r
 = 
	`mm≠
(
NULL
, 
°
.
°_size
, 
PROT_READ
, 
MAP_SHARED
, 
fd
, 0);

206 i‡(
±r
 =
MAP_FAILED
) {

207 
	`Ârötf
(
°dîr
, "ÁûedÅÿmm≠ fûe. %s\n", 
	`°ªº‹
(
î∫o
));

208 
	`exô
(1);

215 
i
 = 0; i < 
NUM_CONTEXTS
; i++) {

216 
nfs
[
i
] = 
	`nfs_öô_c⁄ãxt
();

217 i‡(
nfs
[
i
] =
NULL
) {

218 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

219 
	`exô
(1);

226 
	`nfs_£t_hash_size
(
nfs
[
i
], 50);

227 i‡(
uæ
) {

228 
	`nfs_de°roy_uæ
(
uæ
);

230 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
[
i
], 
¨gv
[2]);

231 i‡(
uæ
 =
NULL
) {

232 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
[0]));

233 
	`exô
(1);

236 i‡(
	`nfs_mou¡
(
nfs
[
i
], 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

237 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

238 
	`nfs_gë_îr‹
(
nfs
[
i
]));

239 
	`exô
(1);

248 i‡(
i
 == 0) {

249 i‡(
	`nfs_›í
(
nfs
[0], 
uæ
->
fûe
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, &
nfsfh
) < 0) {

250 
	`Ârötf
(
°dîr
, "FailedÅo openÇfs file %s. %s\n",

251 
uæ
->
fûe
,

252 
	`nfs_gë_îr‹
(
nfs
[0]));

253 
	`exô
(1);

261 i‡(
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs
[
i
])) {

262 
	`Ârötf
(
°dîr
, "failedÅo start serviceÅhread\n");

263 
	`exô
(10);

265 
	`¥ötf
("Sîvi˚Åhªad #%d i†a˘ive. RódyÅÿdÿI/O\n", 
i
);

272 
	`¥ötf
("Sizêo‡fûe:%†i†%ld byãs\n", 
¨gv
[1], 
°
.
°_size
);

273 
chunk_size
 = (
°
.
°_size
 + 
NUM_THREADS
 - 1) / NUM_THREADS;

275 
	`¥ötf
("Usög %dÅhªad†wrôög %lu byã†óch\n", 
NUM_THREADS
, 
chunk_size
);

276 i‡((
wrôe_thªads
 = 
	`mÆloc
((
±hªad_t
Ë* 
NUM_THREADS
)Ë=
NULL
) {

277 
	`Ârötf
(
°dîr
, "FailedÅoállocated stat_thread\n");

278 
	`exô
(10);

280 i‡((
wd
 = 
	`mÆloc
((
wrôe_d©a
Ë* 
NUM_THREADS
)Ë=
NULL
) {

281 
	`Ârötf
(
°dîr
, "FailedÅoállocated write_data\n");

282 
	`exô
(10);

284 
i
 = 0; i < 
NUM_THREADS
; i++) {

285 
wd
[
i
].
nfs
 =Çfs[ò% 
NUM_CONTEXTS
];

286 
wd
[
i
].
±r
 =Ötr;

287 
wd
[
i
].
nfsfh
 =Çfsfh;

288 
wd
[
i
].
off£t
 = i * 
chunk_size
;

289 
wd
[
i
].
Àn
 = 
°
.
°_size
 - wd[i].
off£t
;

290 i‡(
wd
[
i
].
Àn
 > 
chunk_size
) {

291 
wd
[
i
].
Àn
 = 
chunk_size
;

293 
wd
[
i
].
max_out°™dög
 = 
MAX_CONCURRENCY
 / 
NUM_THREADS
;

295 i‡(
	`±hªad_¸óã
(&
wrôe_thªads
[
i
], 
NULL
,

296 &
nfs_wrôe_thªad
, &
wd
[
i
])) {

297 
	`¥ötf
("FaûedÅÿ¸óã sèàthªad %d\n", 
i
);

298 
	`exô
(10);

305 
i
 = 0; i < 
NUM_THREADS
; i++) {

306 
	`±hªad_joö
(
wrôe_thªads
[
i
], 
NULL
);

312 
	`nfs_˛o£
(
nfs
[0], 
nfsfh
);

313 
	`˛o£
(
fd
);

315 
	`¥ötf
("closing serviceÅhreads\n");

316 
i
 = 0; i < 
NUM_CONTEXTS
; i++) {

317 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs
[
i
]);

318 
	`nfs_de°roy_c⁄ãxt
(
nfs
[
i
]);

320 i‡(
uæ
) {

321 
	`nfs_de°roy_uæ
(
uæ
);

323 
	`‰ì
(
wd
);

324 
	`‰ì
(
wrôe_thªads
);

325 
	`munm≠
(
±r
, 
°
.
°_size
);

327 
	}
}

	@examples/nfs-pthreads-example.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
AROS


27 
	~"¨os_com∑t.h
"

31 #ifde‡
WIN32


32 
	~<wö32/wö32_com∑t.h
>

33 #¥agm®
commít
(
lib
, "ws2_32.lib")

34 
WSADATA
 
	gwßD©a
;

36 
	~<sys/°©.h
>

37 
	~<°rög.h
>

40 #ifde‡
HAVE_POLL_H


41 
	~<pﬁl.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°döt.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<f˙é.h
>

53 
	~<time.h
>

54 
	~<±hªad.h
>

55 
	~"libnfs.h
"

56 
	~"libnfs-øw.h
"

57 
	~"libnfs-øw-nfs.h
"

59 
	$ußge
()

61 
	`Ârötf
(
°dîr
, "Usage:Çfs-pthread-example <url> <num-threads>\n");

62 
	`Ârötf
(
°dîr
, "\tExampleÖrogram usingÖthreads.\n");

63 
	`exô
(0);

64 
	}
}

66 
	s°©_d©a
 {

67 
nfs_c⁄ãxt
 *
	mnfs
;

68 
	midx
;

69 *
	m∑th
;

70 
	mis_föished
;

73 *
	$nfs_°©_thªad
(*
¨g
)

75 
°©_d©a
 *
sd
 = 
¨g
;

76 
nfs_°©_64
 
°
;

77 
i
, 
ªt
;

79 
	`¥ötf
("Sèàthªad %03d\n", 
sd
->
idx
);

80 
i
 = 0;

81 !
sd
->
is_föished
) {

82 
ªt
 = 
	`nfs_°©64
(
sd
->
nfs
, sd->
∑th
, &
°
);

83 i‡(
ªt
 < 0) {

84 
	`¥ötf
("SèàÁûed: %s\n", 
	`nfs_gë_îr‹
(
sd
->
nfs
));

85 
	`exô
(10);

87 
i
++;

89 
	`¥ötf
("%03d:%dÑë:%d st->öo:%d\n", 
sd
->
idx
, 
i
, 
ªt
, ()
°
.
nfs_öo
);

90  
NULL
;

91 
	}
}

93 
	$maö
(
¨gc
, *
¨gv
[])

95 
i
, 
num_thªads
;

96 
ªt
 = 0;

97 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

98 
nfsfh
 *nfsfh = 
NULL
;

99 
nfs_fh3
 *
fh3
;

100 
nfs_uæ
 *
uæ
 = 
NULL
;

101 
±hªad_t
 *
°©_thªad
;

102 
°©_d©a
 *
sd
;

104 #ifde‡
WIN32


105 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

106 
	`¥ötf
("FailedÅo start Winsock2\n");

111 #ifde‡
AROS


112 
	`¨os_öô_sockë
();

115 i‡(
¨gc
 < 3) {

116 
	`ußge
();

119 
num_thªads
 = 
	`©oi
(
¨gv
[2]);

120 
	`¥ötf
("Numbî o‡thªad†: %d\n", 
num_thªads
);

122 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

123 i‡(
nfs
 =
NULL
) {

124 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

125 
föished
;

128 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

129 i‡(
uæ
 =
NULL
) {

130 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

131 
ªt
 = 1;

132 
föished
;

135 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

136 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

137 
	`nfs_gë_îr‹
(
nfs
));

138 
ªt
 = 1;

139 
föished
;

146 
	`¥ötf
("StartÅhe serviceÅhread\n");

147 i‡(
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs
)) {

148 
	`¥ötf
("failedÅo start serviceÅhread\n");

149 
	`exô
(10);

151 
	`¥ötf
("ServiceÅhread isáctive. ReadyÅo do I/O\n");

154 
	`¥ötf
("Sèπ %dÅhªad(sËˇŒög sèà⁄ %s\n", 
num_thªads
, 
uæ
->
fûe
);

155 i‡((
sd
 = 
	`mÆloc
((
°©_d©a
Ë* 
num_thªads
)Ë=
NULL
) {

156 
	`¥ötf
("FailedÅoállocated stat_data\n");

157 
	`exô
(10);

159 i‡((
°©_thªad
 = 
	`mÆloc
((
±hªad_t
Ë* 
num_thªads
)Ë=
NULL
) {

160 
	`¥ötf
("FailedÅoállocated stat_thread\n");

161 
	`exô
(10);

163 
i
 = 0; i < 
num_thªads
; i++) {

164 
sd
[
i
].
nfs
 =Çfs;

165 
sd
[
i
].
∑th
 = 
uæ
->
fûe
;

166 
sd
[
i
].
is_föished
 = 0;

167 
sd
[
i
].
idx
 = i;

168 i‡(
	`±hªad_¸óã
(&
°©_thªad
[
i
], 
NULL
,

169 &
nfs_°©_thªad
, &
sd
[
i
])) {

170 
	`¥ötf
("FaûedÅÿ¸óã sèàthªad %d\n", 
i
);

171 
	`exô
(10);

176 
	`¶ìp
(1);

180 
	`¥ötf
("Closingáll workerÅhreads\n");

181 
i
 = 0; i < 
num_thªads
; i++) {

182 
sd
[
i
].
is_föished
 = 1;

184 
i
 = 0; i < 
num_thªads
; i++) {

185 
	`±hªad_joö
(
°©_thªad
[
i
], 
NULL
);

188 
	`¥ötf
("closing serviceÅhread\n");

189 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs
);

191 
föished
:

192 i‡(
nfsfh
) {

193 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

195 
	`nfs_umou¡
(
nfs
);

196 i‡(
uæ
) {

197 
	`nfs_de°roy_uæ
(
uæ
);

199 i‡(
nfs
) {

200 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

202 
	`‰ì
(
sd
);

203 
	`‰ì
(
°©_thªad
);

204  
ªt
;

205 
	}
}

	@examples/nfs-pthreads-fstat.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
AROS


27 
	~"¨os_com∑t.h
"

31 #ifde‡
WIN32


32 
	~<wö32/wö32_com∑t.h
>

33 #¥agm®
commít
(
lib
, "ws2_32.lib")

34 
WSADATA
 
	gwßD©a
;

36 
	~<sys/°©.h
>

37 
	~<°rög.h
>

40 #ifde‡
HAVE_POLL_H


41 
	~<pﬁl.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°döt.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<f˙é.h
>

53 
	~<time.h
>

54 
	~<±hªad.h
>

55 
	~"libnfs.h
"

56 
	~"libnfs-øw.h
"

57 
	~"libnfs-øw-nfs.h
"

59 
	$ußge
()

61 
	`Ârötf
(
°dîr
, "Usage:Çfs-pthread-example <url> <num-threads>\n");

62 
	`Ârötf
(
°dîr
, "\tExampleÖrogram usingÖthreads.\n");

63 
	`exô
(0);

64 
	}
}

66 
	s°©_d©a
 {

67 
nfs_c⁄ãxt
 *
	mnfs
;

68 
	midx
;

69 *
	m∑th
;

70 
	mis_föished
;

73 *
	$nfs_°©_thªad
(*
¨g
)

75 
°©_d©a
 *
sd
 = 
¨g
;

76 
nfs_°©_64
 
°
;

77 
i
, 
ªt
;

78 
nfsfh
 *nfsfh = 
NULL
;

80 
	`¥ötf
("Sèàthªad %03d\n", 
sd
->
idx
);

81 
i
 = 0;

82 !
sd
->
is_föished
) {

83 
ªt
 = 
	`nfs_›í
(
sd
->
nfs
, sd->
∑th
, 0600, &
nfsfh
);

84 i‡(
ªt
 != 0) {

85 
	`¥ötf
("ÁûedÅÿ›í %s. %s\n", 
sd
->
∑th
, 
	`nfs_gë_îr‹
(sd->
nfs
));

86 
	`exô
(10);

88 i‡(
nfsfh
 =
NULL
) {

89 
	`¥ötf
("nfsfh is NULLáfterÇfs_open()\n");

90 
	`exô
(10);

92 
ªt
 = 
	`nfs_f°©64
(
sd
->
nfs
, 
nfsfh
, &
°
);

93 i‡(
ªt
 < 0) {

94 
	`¥ötf
("SèàÁûed: %s\n", 
	`nfs_gë_îr‹
(
sd
->
nfs
));

95 
	`exô
(10);

97 
	`nfs_˛o£
(
sd
->
nfs
, 
nfsfh
);

98 
nfsfh
 = 
NULL
;

99 
i
++;

101 
	`¥ötf
("%03d:%dÑë:%d st->öo:%d\n", 
sd
->
idx
, 
i
, 
ªt
, ()
°
.
nfs_öo
);

102  
NULL
;

103 
	}
}

105 
	$maö
(
¨gc
, *
¨gv
[])

107 
i
, 
num_thªads
;

108 
ªt
 = 0;

109 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

110 
nfsfh
 *nfsfh = 
NULL
;

111 
nfs_fh3
 *
fh3
;

112 
nfs_uæ
 *
uæ
 = 
NULL
;

113 
±hªad_t
 *
°©_thªad
;

114 
°©_d©a
 *
sd
;

116 #ifde‡
WIN32


117 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

118 
	`¥ötf
("FailedÅo start Winsock2\n");

123 #ifde‡
AROS


124 
	`¨os_öô_sockë
();

127 i‡(
¨gc
 < 3) {

128 
	`ußge
();

131 
num_thªads
 = 
	`©oi
(
¨gv
[2]);

132 
	`¥ötf
("Numbî o‡thªad†: %d\n", 
num_thªads
);

134 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

135 i‡(
nfs
 =
NULL
) {

136 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

137 
föished
;

140 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

141 i‡(
uæ
 =
NULL
) {

142 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

143 
ªt
 = 1;

144 
föished
;

147 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

148 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

149 
	`nfs_gë_îr‹
(
nfs
));

150 
ªt
 = 1;

151 
föished
;

158 
	`¥ötf
("StartÅhe serviceÅhread\n");

159 i‡(
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs
)) {

160 
	`¥ötf
("failedÅo start serviceÅhread\n");

161 
	`exô
(10);

163 
	`¥ötf
("ServiceÅhread isáctive. ReadyÅo do I/O\n");

166 
	`¥ötf
("Sèπ %dÅhªad(sËˇŒög sèà⁄ %s\n", 
num_thªads
, 
uæ
->
fûe
);

167 i‡((
sd
 = 
	`mÆloc
((
°©_d©a
Ë* 
num_thªads
)Ë=
NULL
) {

168 
	`¥ötf
("FailedÅoállocated stat_data\n");

169 
	`exô
(10);

171 i‡((
°©_thªad
 = 
	`mÆloc
((
±hªad_t
Ë* 
num_thªads
)Ë=
NULL
) {

172 
	`¥ötf
("FailedÅoállocated stat_thread\n");

173 
	`exô
(10);

175 
i
 = 0; i < 
num_thªads
; i++) {

176 
sd
[
i
].
nfs
 =Çfs;

177 
sd
[
i
].
∑th
 = 
uæ
->
fûe
;

178 
sd
[
i
].
is_föished
 = 0;

179 
sd
[
i
].
idx
 = i;

180 i‡(
	`±hªad_¸óã
(&
°©_thªad
[
i
], 
NULL
,

181 &
nfs_°©_thªad
, &
sd
[
i
])) {

182 
	`¥ötf
("FaûedÅÿ¸óã sèàthªad %d\n", 
i
);

183 
	`exô
(10);

188 
	`¶ìp
(1);

192 
	`¥ötf
("Closingáll workerÅhreads\n");

193 
i
 = 0; i < 
num_thªads
; i++) {

194 
sd
[
i
].
is_föished
 = 1;

196 
i
 = 0; i < 
num_thªads
; i++) {

197 
	`±hªad_joö
(
°©_thªad
[
i
], 
NULL
);

200 
	`¥ötf
("closing serviceÅhread\n");

201 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs
);

203 
föished
:

204 i‡(
nfsfh
) {

205 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

207 
	`nfs_umou¡
(
nfs
);

208 i‡(
uæ
) {

209 
	`nfs_de°roy_uæ
(
uæ
);

211 i‡(
nfs
) {

212 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

214 
	`‰ì
(
sd
);

215 
	`‰ì
(
°©_thªad
);

216  
ªt
;

217 
	}
}

	@examples/nfs-pthreads-writefile.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

35 
	~<sys/°©.h
>

36 
	~<°rög.h
>

39 #ifde‡
HAVE_POLL_H


40 
	~<pﬁl.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°döt.h
>

50 
	~<sys/°©.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<f˙é.h
>

53 
	~<±hªad.h
>

54 
	~<uni°d.h
>

55 
	~"libnfs.h
"

56 
	~"libnfs-øw.h
"

57 
	~"libnfs-øw-mou¡.h
"

64 
	#NUM_CONTEXTS
 4

	)

75 
	#NUM_THREADS
 8

	)

77 
	$ußge
()

79 
	`Ârötf
(
°dîr
, "Usage:Çfs-pthreads-writefile <src> <dst>\n");

80 
	`Ârötf
(
°dîr
, "<src> isáÜocal file, <dst> isánÇfs URL.\n");

81 
	`exô
(0);

82 
	}
}

84 
	swrôe_d©a
 {

85 
nfs_c⁄ãxt
 *
	mnfs
;

86 
	mfd
;

87 
nfsfh
 *
	mnfsfh
;

88 
uöt64_t
 
	moff£t
;

89 
ssize_t
 
	mÀn
;

95 *
	$nfs_wrôe_thªad
(*
¨g
)

97 
wrôe_d©a
 *
wd
 = 
¨g
;

98 *
buf
;

99 
ssize_t
 
cou¡
;

102 
buf
 = 
	`mÆloc
(1048576);

103 i‡(
buf
 =
NULL
) {

104 
	`Ârötf
(
°dîr
, "FailedÅoállocate buffer\n");

105 
	`exô
(1);

107 
wd
->
Àn
) {

108 
cou¡
 = 1048576;

109 i‡(
cou¡
 > 
wd
->
Àn
) {

110 
cou¡
 = 
wd
->
Àn
;

112 
cou¡
 = 
	`¥ód
(
wd
->
fd
, 
buf
, cou¡, wd->
off£t
);

113 i‡(
cou¡
 < 0) {

114 
	`Ârötf
(
°dîr
, "FailedÑeading from file\n");

115 
	`exô
(1);

117 i‡(
cou¡
 == 0) {

118 
	`‰ì
(
buf
);

119  
NULL
;

121 i‡(
	`nfs_pwrôe
(
wd
->
nfs
, wd->
nfsfh
, 
buf
, 
cou¡
, wd->
off£t
) < 0) {

122 
	`Ârötf
(
°dîr
, "FaûedÅÿwrôêtÿnf†fûe. %s\n", 
	`nfs_gë_îr‹
(
wd
->
nfs
));

123 
	`exô
(1);

125 
wd
->
off£t
 +
cou¡
;

126 
wd
->
Àn
 -
cou¡
;

128 
	`‰ì
(
buf
);

129  
NULL
;

130 
	}
}

132 
	$maö
(
¨gc
, *
¨gv
[])

134 
i
;

135 
fd
 = -1;

136 
uöt64_t
 
chunk_size
;

137 
nfs_c⁄ãxt
 *
nfs
[
NUM_CONTEXTS
] = {
NULL
,};

138 
nfs_uæ
 *
uæ
 = 
NULL
;

139 
°©
 
°
;

140 
±hªad_t
 *
wrôe_thªads
;

141 
wrôe_d©a
 *
wd
;

142 
nfsfh
 *nfsfh = 
NULL
;

144 #ifde‡
WIN32


145 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

146 
	`¥ötf
("FailedÅo start Winsock2\n");

151 #ifde‡
AROS


152 
	`¨os_öô_sockë
();

155 i‡(
¨gc
 != 3) {

156 
	`ußge
();

159 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

160 i‡(
fd
 < 0) {

161 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í sour˚ fûê%s\n", 
¨gv
[1]);

162 
	`exô
(1);

170 
i
 = 0; i < 
NUM_CONTEXTS
; i++) {

171 
nfs
[
i
] = 
	`nfs_öô_c⁄ãxt
();

172 i‡(
nfs
[
i
] =
NULL
) {

173 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

174 
	`exô
(1);

181 
	`nfs_£t_hash_size
(
nfs
[
i
], 50);

182 i‡(
uæ
) {

183 
	`nfs_de°roy_uæ
(
uæ
);

185 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
[
i
], 
¨gv
[2]);

186 i‡(
uæ
 =
NULL
) {

187 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
[0]));

188 
	`exô
(1);

191 i‡(
	`nfs_mou¡
(
nfs
[
i
], 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

192 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

193 
	`nfs_gë_îr‹
(
nfs
[
i
]));

194 
	`exô
(1);

203 i‡(
i
 == 0) {

204 i‡(
	`nfs_›í
(
nfs
[0], 
uæ
->
fûe
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, &
nfsfh
) < 0) {

205 
	`Ârötf
(
°dîr
, "FailedÅo openÇfs file %s. %s\n",

206 
uæ
->
fûe
,

207 
	`nfs_gë_îr‹
(
nfs
[0]));

208 
	`exô
(1);

216 i‡(
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs
[
i
])) {

217 
	`Ârötf
(
°dîr
, "failedÅo start serviceÅhread\n");

218 
	`exô
(10);

220 
	`¥ötf
("Sîvi˚Åhªad #%d i†a˘ive. RódyÅÿdÿI/O\n", 
i
);

223 i‡(
	`f°©
(
fd
, &
°
) < 0) {

224 
	`Ârötf
(
°dîr
, "ÁûedÅÿ°©(%s)\n", 
¨gv
[1]);

225 
	`exô
(10);

232 
	`¥ötf
("Sizêo‡fûe:%†i†%ld byãs\n", 
¨gv
[1], 
°
.
°_size
);

233 
chunk_size
 = (
°
.
°_size
 + 
NUM_THREADS
 - 1) / NUM_THREADS;

235 
	`¥ötf
("Usög %dÅhªad†wrôög %lu byã†óch\n", 
NUM_THREADS
, 
chunk_size
);

236 i‡((
wrôe_thªads
 = 
	`mÆloc
((
±hªad_t
Ë* 
NUM_THREADS
)Ë=
NULL
) {

237 
	`Ârötf
(
°dîr
, "FailedÅoállocated stat_thread\n");

238 
	`exô
(10);

240 i‡((
wd
 = 
	`mÆloc
((
wrôe_d©a
Ë* 
NUM_THREADS
)Ë=
NULL
) {

241 
	`Ârötf
(
°dîr
, "FailedÅoállocated write_data\n");

242 
	`exô
(10);

244 
i
 = 0; i < 
NUM_THREADS
; i++) {

245 
wd
[
i
].
nfs
 =Çfs[ò% 
NUM_CONTEXTS
];

246 
wd
[
i
].
fd
 = fd;

247 
wd
[
i
].
nfsfh
 =Çfsfh;

248 
wd
[
i
].
off£t
 = i * 
chunk_size
;

249 
wd
[
i
].
Àn
 = 
°
.
°_size
 - wd[i].
off£t
;

250 i‡(
wd
[
i
].
Àn
 > 
chunk_size
) {

251 
wd
[
i
].
Àn
 = 
chunk_size
;

254 i‡(
	`±hªad_¸óã
(&
wrôe_thªads
[
i
], 
NULL
,

255 &
nfs_wrôe_thªad
, &
wd
[
i
])) {

256 
	`¥ötf
("FaûedÅÿ¸óã sèàthªad %d\n", 
i
);

257 
	`exô
(10);

264 
i
 = 0; i < 
NUM_THREADS
; i++) {

265 
	`±hªad_joö
(
wrôe_thªads
[
i
], 
NULL
);

271 
	`nfs_˛o£
(
nfs
[0], 
nfsfh
);

272 
	`˛o£
(
fd
);

274 
	`¥ötf
("closing serviceÅhreads\n");

275 
i
 = 0; i < 
NUM_CONTEXTS
; i++) {

276 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs
[
i
]);

277 
	`nfs_de°roy_c⁄ãxt
(
nfs
[
i
]);

279 i‡(
uæ
) {

280 
	`nfs_de°roy_uæ
(
uæ
);

282 
	`‰ì
(
wd
);

283 
	`‰ì
(
wrôe_thªads
);

285 
	}
}

	@examples/nfs-writefile.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

35 
	~<sys/°©.h
>

36 
	~<°rög.h
>

39 #ifde‡
HAVE_POLL_H


40 
	~<pﬁl.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°döt.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<f˙é.h
>

52 
	~<uni°d.h
>

53 
	~"libnfs.h
"

54 
	~"libnfs-øw.h
"

55 
	~"libnfs-øw-mou¡.h
"

58 
	#MAX_CONCURRENCY
 1024

	)

59 
	#WRITE_SIZE
 65536

	)

61 
	swrôe_fûe_c⁄ãxt
 {

62 
	m°©us
;

67 
	mfd
;

68 
off_t
 
	moff£t
;

69 
	meof
;

70 
	mnum_ö_Êight
;

72 
nfs_c⁄ãxt
 *
	mnfs
;

73 
nfsfh
 *
	mnfsfh
;

74 
nfs_uæ
 *
	muæ
;

77 
	swrôe_d©a
 {

78 
wrôe_fûe_c⁄ãxt
 *
	m˘x
;

79 
off_t
 
	moff£t
;

80 
	mbuf
[0];

83 
£nd_m‹e_wrôes
(
wrôe_fûe_c⁄ãxt
 *
˘x
);

85 
	$ußge
()

87 
	`Ârötf
(
°dîr
, "Usage:Çfs-writefile <src> <dst>\n");

88 
	`Ârötf
(
°dîr
, "<src> isáÜocal file, <dst> isánÇfs URL.\n");

89 
	`exô
(0);

90 
	}
}

93 
	$‰ì_wrôe_fûe_c⁄ãxt
(
wrôe_fûe_c⁄ãxt
 *
˘x
)

95 i‡(
˘x
 =
NULL
) {

98 i‡(
˘x
->
fd
 != -1) {

99 
	`˛o£
(
˘x
->
fd
);

101 i‡(
˘x
->
nfsfh
 !
NULL
) {

102 
	`nfs_˛o£
(
˘x
->
nfs
, ctx->
nfsfh
);

104 i‡(
˘x
->
nfs
 !
NULL
) {

105 
	`nfs_de°roy_c⁄ãxt
(
˘x
->
nfs
);

107 
	`nfs_de°roy_uæ
(
˘x
->
uæ
);

108 
	`‰ì
(
˘x
);

109 
	}
}

112 
	$nfs_wrôe_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

113 *
¥iv©e_d©a
)

115 
wrôe_d©a
 *
wd©a
 = 
¥iv©e_d©a
;

116 
wrôe_fûe_c⁄ãxt
 *
˘x
 = 
wd©a
->ctx;

118 
	`‰ì
(
wd©a
);

120 i‡(
°©us
 < 0) {

121 
	`¥ötf
("wrôêˇŒ faûed wôh \"%s\"\n", (*)
d©a
);

122 
˘x
->
°©us
 = -1;

125 
˘x
->
num_ö_Êight
--;

130 
	`£nd_m‹e_wrôes
(
˘x
);

131 i‡(
˘x
->
num_ö_Êight
 == 0) {

135 
˘x
->
°©us
 = 1;

137 
	}
}

141 
	$£nd_m‹e_wrôes
(
wrôe_fûe_c⁄ãxt
 *
˘x
)

143 
wrôe_d©a
 *
wd©a
;

144 
ªt
;

146 i‡(
˘x
->
eof
) {

149 
˘x
->
num_ö_Êight
 < 
MAX_CONCURRENCY
) {

158 
wd©a
 = 
	`mÆloc
((
wrôe_d©a
Ë+ 
WRITE_SIZE
);

159 i‡(
wd©a
 =
NULL
) {

160 
	`¥ötf
("FailedÅoállocate write_data structure\n");

161 
˘x
->
°©us
 = -1;

164 
wd©a
->
˘x
 = ctx;

165 
wd©a
->
off£t
 = 
˘x
->offset;

166 
ªt
 = 
	`ªad
(
˘x
->
fd
, &
wd©a
->
buf
[0], 
WRITE_SIZE
);

167 i‡(
ªt
 == 0) {

168 
˘x
->
eof
 = 1;

169 
	`‰ì
(
wd©a
);

172 i‡(
ªt
 < 0) {

173 
	`¥ötf
("ReadÑeturnedÉrror\n");

174 
˘x
->
°©us
 = -1;

177 i‡(
	`nfs_pwrôe_async
(
˘x
->
nfs
, ctx->
nfsfh
,

178 
wd©a
->
buf
, 
ªt
, wd©a->
off£t
,

179 
nfs_wrôe_cb
, 
wd©a
) != 0) {

180 
	`¥ötf
("FailedÅo startásyncÇfsÖwrite\n");

181 
	`‰ì
(
wd©a
);

182 
˘x
->
°©us
 = -1;

186 
˘x
->
off£t
 +
ªt
;

188 
˘x
->
num_ö_Êight
++;

190 
	}
}

194 
	$nfs_¸ót_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

195 *
¥iv©e_d©a
)

197 
wrôe_fûe_c⁄ãxt
 *
˘x
 = 
¥iv©e_d©a
;

199 i‡(
°©us
 < 0) {

200 
	`¥ötf
("›í cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

201 
˘x
->
°©us
 = -1;

205 
˘x
->
nfsfh
 = 
d©a
;

206 
	`¥ötf
("File created\n");

207 
	`£nd_m‹e_wrôes
(
˘x
);

208 
	}
}

212 
	$nfs_mou¡_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

213 *
¥iv©e_d©a
)

215 
wrôe_fûe_c⁄ãxt
 *
˘x
 = 
¥iv©e_d©a
;

217 i‡(
°©us
 < 0) {

218 
	`¥ötf
("mou¡/m¡ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

219 
˘x
->
°©us
 = -1;

223 
	`¥ötf
("GotÑeply from server for MOUNT/MNTÖrocedure.\n");

224 
	`¥ötf
("O≥nög %†f‹ wrôög\n", 
˘x
->
uæ
->
fûe
);

225 i‡(
	`nfs_¸ót_async
(
˘x
->
nfs
, ctx->
uæ
->
fûe
, 0666,

226 
nfs_¸ót_cb
, 
˘x
) != 0) {

227 
	`¥ötf
("FailedÅo startásyncÇfs creat\n");

228 
˘x
->
°©us
 = -1;

231 
	}
}

235 
	$maö
(
¨gc
, *
¨gv
[])

237 
wrôe_fûe_c⁄ãxt
 *
˘x
 = 
NULL
;

238 
ªt
;

240 #ifde‡
WIN32


241 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

242 
	`¥ötf
("FailedÅo start Winsock2\n");

247 #ifde‡
AROS


248 
	`¨os_öô_sockë
();

251 i‡(
¨gc
 != 3) {

252 
	`ußge
();

255 
˘x
 = 
	`mÆloc
((
wrôe_fûe_c⁄ãxt
));

256 i‡(
˘x
 =
NULL
) {

257 
	`Ârötf
(
°dîr
, "FailedÅoállocate write-file context\n");

258 
	`exô
(10);

260 
	`mem£t
(
˘x
, 0, (
wrôe_fûe_c⁄ãxt
));

262 
˘x
->
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

263 i‡(
˘x
->
fd
 == -1) {

264 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í %s\n", 
¨gv
[1]);

268 
˘x
->
nfs
 = 
	`nfs_öô_c⁄ãxt
();

269 i‡(
˘x
->
nfs
 =
NULL
) {

270 
	`¥ötf
("failedÅo init context\n");

271 
	`‰ì_wrôe_fûe_c⁄ãxt
(
˘x
);

272 
	`exô
(10);

279 
	`nfs_£t_hash_size
(
˘x
->
nfs
, 
MAX_CONCURRENCY
 / 100 + 10);

281 
˘x
->
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(˘x->
nfs
, 
¨gv
[2]);

282 i‡(
˘x
->
uæ
 =
NULL
) {

283 
	`¥ötf
("failedÅoÖarse url: %s: %s\n",

284 
¨gv
[2], 
	`nfs_gë_îr‹
(
˘x
->
nfs
));

285 
	`‰ì_wrôe_fûe_c⁄ãxt
(
˘x
);

286 
	`exô
(10);

289 i‡(
	`nfs_mou¡_async
(
˘x
->
nfs
, ctx->
uæ
->
£rvî
, ctx->uæ->
∑th
,

290 
nfs_mou¡_cb
, 
˘x
)) {

291 
	`¥ötf
("failedÅo setupásync mount command\n");

292 
	`‰ì_wrôe_fûe_c⁄ãxt
(
˘x
);

293 
	`exô
(10);

310 
˘x
->
°©us
 == 0) {

311 
pﬁlfd
 
pfds
[1];

313 
pfds
[0].
fd
 = 
	`nfs_gë_fd
(
˘x
->
nfs
);

314 
pfds
[0].
evíts
 = 
	`nfs_which_evíts
(
˘x
->
nfs
);

316 i‡(
	`pﬁl
(&
pfds
[0], 1, 
	`nfs_gë_pﬁl_timeout
(
˘x
->
nfs
)) < 0) {

317 
	`¥ötf
("Poll failed");

320 i‡(
	`nfs_£rvi˚
(
˘x
->
nfs
, 
pfds
[0].
ªvíts
) < 0) {

321 
	`¥ötf
("nfs_service failed\n");

327 i‡(
˘x
->
°©us
 > 0) {

328 
	`¥ötf
("Finished successfully\n");

330 i‡(
˘x
->
°©us
 < 0) {

331 
	`¥ötf
("Failed\n");

334 
ªt
 = (
˘x
->
°©us
 > 0) ? 0 : -1;

336 
	`‰ì_wrôe_fûe_c⁄ãxt
(
˘x
);

337  
ªt
;

338 
	}
}

	@examples/nfs4-cat-talloc.c

35 
	#_FILE_OFFSET_BITS
 64

	)

36 
	#_GNU_SOURCE


	)

38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

42 #ifde‡
AROS


43 
	~"¨os_com∑t.h
"

47 #ifde‡
WIN32


48 
	~<wö32/wö32_com∑t.h
>

49 #¥agm®
commít
(
lib
, "ws2_32.lib")

50 
WSADATA
 
	gwßD©a
;

52 
	~<sys/°©.h
>

53 
	~<°rög.h
>

56 #ifde‡
HAVE_POLL_H


57 
	~<pﬁl.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~<¨∑/öë.h
>

65 
	~<f˙é.h
>

66 
	~<°dio.h
>

67 
	~<°dlib.h
>

68 
	~<°döt.h
>

69 
	~<sys/ty≥s.h
>

70 
	~<sys/sockë.h
>

71 
	~<time.h
>

72 
	~"libnfs.h
"

73 
	~"libnfs-øw.h
"

74 
	~"libnfs-øw-nfs4.h
"

76 
	~<ãvít.h
>

77 
	~<èŒoc.h
>

79 
ãvít_c⁄ãxt
 *
	gev
;

81 
	s˛õ¡
 {

82 
nfs_c⁄ãxt
 *
	mnfs
;

83 
Ωc_c⁄ãxt
 *
	mΩc
;

84 *
	m£rvî
;

85 *
	m∑th
;

87 
ãvít_fd
 *
	mfde
;

88 
	mˇŒback_fd
;

91 
vîifõr4
 
	mvîifõr
;

92 *
	mid
;

93 
˛õ¡id4
 
	m˛õ¡id
;

94 
vîifõr4
 
	m£t˛õ¡id_c⁄fúm
;

97 *
	mow√r
;

98 
	m›_Àn
;

101 
nfs_fh4
 
	mfh
;

102 
uöt32_t
 
	m£qid
;

103 
°©eid4
 
	m°©eid
;

106 
uöt64_t
 
	moff£t
;

108 
	mis_föished
;

111 
	$£t_n⁄blockög
(
fd
)

113 
v
 = 0;

114 #i‡
	`deföed
(
WIN32
)

115 
n⁄blockög
=1;

116 
v
 = 
	`io˘l
(
fd
, 
FIONBIO
, &
n⁄blockög
);

118 
v
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

119 
	`f˙é
(
fd
, 
F_SETFL
, 
v
 | 
O_NONBLOCK
);

121 
	}
}

123 
	$˛õ¡_de°ru˘‹
(
˛õ¡
 *
c
)

125 i‡(
c
->
nfs
) {

126 
	`nfs_de°roy_c⁄ãxt
(
c
->
nfs
);

128 i‡(
c
->
ˇŒback_fd
 != -1) {

129 
	`˛o£
(
c
->
ˇŒback_fd
);

131 
	}
};

133 
	$ußge
()

135 
	`Ârötf
(
°dîr
, "Usage:Çfs4-cat-talloc <file>\n");

136 
	`Ârötf
(
°dîr
, " <file> isánÇfs url.\n");

137 
	`exô
(0);

138 
	}
}

140 
	$upd©e_evíts
(
Ωc_c⁄ãxt
 *
Ωc
,

141 
ãvít_fd
 *
fde
)

143 
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

144 
Êags
 = 0;

146 i‡(
evíts
 & 
POLLIN
) {

147 
Êags
 |
TEVENT_FD_READ
;

150 i‡(
evíts
 & 
POLLOUT
) {

151 
Êags
 |
TEVENT_FD_WRITE
;

154 
	`ãvít_fd_£t_Êags
(
fde
, 
Êags
);

155 
	}
}

157 
	s£rvî
 {

158 
Ωc_c⁄ãxt
 *
	mΩc
;

159 
ãvít_fd
 *
	mfde
;

166 
	$£nd_£t˛õ¡id
(
Ωc_c⁄ãxt
 *
Ωc
,

167 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

169 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

170 
COMPOUND4¨gs
 
¨gs
;

171 
SETCLIENTID4¨gs
 *
sc4¨gs
;

172 
nfs_¨g›4
 
›
[1];

173 
sockaddr_°‹age
 
ss
;

174 
sockÀn_t
 
Àn
 = (
ss
);

175 
sockaddr_ö
 *
ö
;

176 
sockaddr_ö6
 *
ö6
;

177 *
√tid
;

178 
°r
[240], 
addr
[256];

179 
p‹t
;

181 i‡(
	`gësock«me
(
˛õ¡
->
ˇŒback_fd
, (
sockaddr
 *)&
ss
, &
Àn
) < 0) {

182 
	`Ârötf
(
°dîr
, "getsockaddr failed\n");

183 
	`èŒoc_‰ì
(
˛õ¡
);

184 
	`exô
(10);

187 
ss
.
ss_Ámûy
) {

188 
AF_INET
:

189 
√tid
 = "tcp";

190 
ö
 = (
sockaddr_ö
 *)&
ss
;

191 
	`öë_¡›
(
AF_INET
, &
ö
->
sö_addr
, 
°r
, (str));

192 
p‹t
 = 
	`¡ohs
(
ö
->
sö_p‹t
);

194 
AF_INET6
:

195 
√tid
 = "tcp6";

196 
ö6
 = (
sockaddr_ö6
 *)&
ss
;

197 
	`öë_¡›
(
AF_INET6
, &
ö6
->
sö6_addr
, 
°r
, (str));

198 
p‹t
 = 
	`¡ohs
(
ö6
->
sö6_p‹t
);

201 
	`•rötf
(
addr
, "%s.%d.%d", 
°r
, 
p‹t
 >> 8,Öort & 0xff);

203 
	`mem£t
(
›
, 0, (op));

205 
›
[0].
¨g›
 = 
OP_SETCLIENTID
;

206 
sc4¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
;

207 
	`mem˝y
(
sc4¨gs
->
˛õ¡
.
vîifõr
, clõ¡->vîifõr, (
vîifõr4
));

208 
sc4¨gs
->
˛õ¡
.
id
.
id_Àn
 = 
	`°æí
(client->id);

209 
sc4¨gs
->
˛õ¡
.
id
.
id_vÆ
 = client->id;

210 
sc4¨gs
->
ˇŒback
.
cb_¥ogøm
 = 
NFS4_CALLBACK
;

211 
sc4¨gs
->
ˇŒback
.
cb_loˇti⁄
.
r_√tid
 = 
√tid
;

212 
sc4¨gs
->
ˇŒback
.
cb_loˇti⁄
.
r_addr
 = 
addr
;

213 
sc4¨gs
->
ˇŒback_idít
 = 0x00000001;

215 
	`mem£t
(&
¨gs
, 0, (args));

216 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

217 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

219 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

220 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 SETCLIENTIDÑequest\n");

221 
	`èŒoc_‰ì
(
˛õ¡
);

222 
	`exô
(10);

224 
	}
}

226 
	$£nd_£t˛õ¡id_c⁄fúm
(
Ωc_c⁄ãxt
 *
Ωc
,

227 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

229 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

230 
COMPOUND4¨gs
 
¨gs
;

231 
SETCLIENTID_CONFIRM4¨gs
 *
scc4¨gs
;

232 
nfs_¨g›4
 
›
[1];

234 
	`mem£t
(
›
, 0, (op));

235 
›
[0].
¨g›
 = 
OP_SETCLIENTID_CONFIRM
;

236 
scc4¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id_c⁄fúm
;

237 
scc4¨gs
->
˛õ¡id
 = 
˛õ¡
->clientid;

238 
	`mem˝y
(
scc4¨gs
->
£t˛õ¡id_c⁄fúm
, 
˛õ¡
->setclientid_confirm,

239 
NFS4_VERIFIER_SIZE
);

241 
	`mem£t
(&
¨gs
, 0, (args));

242 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

243 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

245 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

246 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 SETCLIENTID_CONFIRMÑequest\n");

247 
	`èŒoc_‰ì
(
˛õ¡
);

248 
	`exô
(10);

250 
	}
}

252 
	$£nd_gëroŸfh
(
Ωc_c⁄ãxt
 *
Ωc
,

253 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

255 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

256 
COMPOUND4¨gs
 
¨gs
;

257 
nfs_¨g›4
 
›
[2];

259 
	`mem£t
(
›
, 0, (op));

260 
›
[0].
¨g›
 = 
OP_PUTROOTFH
;

261 
›
[1].
¨g›
 = 
OP_GETFH
;

263 
	`mem£t
(&
¨gs
, 0, (args));

264 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

265 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

266 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

267 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 GETROOTFHÑequest\n");

268 
	`èŒoc_‰ì
(
˛õ¡
);

269 
	`exô
(10);

271 
	}
}

273 
	$£nd_›í
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
dú
, *
∑th
,

274 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

276 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

277 
COMPOUND4¨gs
 
¨gs
;

278 
ACCESS4¨gs
 *
a4¨gs
;

279 
LOOKUP4¨gs
 *
l4¨gs
;

280 
OPEN4¨gs
 *
o4¨gs
;

281 
nfs_¨g›4
 *
›
;

282 
i
 = 0, 
idx
 = 0;

283 *
tmp
;

288 
tmp
 = 
∑th
;

289 
tmp
 = 
	`°rchr
(tmp, '/')) {

290 
i
++;

291 
tmp
++;

294 
›
 = 
	`èŒoc_zîo_¨øy
(
˛õ¡
, 
nfs_¨g›4
, 4 + 
i
);

296 
›
[
idx
].
¨g›
 = 
OP_PUTFH
;

297 
›
[
idx
].
nfs_¨g›4_u
.
›putfh
.
obje˘
 = 
dú
;

298 
idx
++;

300 
i
-- > 0) {

301 
tmp
 = 
	`°rchr
(
∑th
, '/');

302 *
tmp
++ = '\0';

304 
›
[
idx
].
¨g›
 = 
OP_LOOKUP
;

305 
l4¨gs
 = &
›
[
idx
].
nfs_¨g›4_u
.
›lookup
;

306 
l4¨gs
->
obj«me
.
utf8°rög_Àn
 = 
	`°æí
(
∑th
);

307 
l4¨gs
->
obj«me
.
utf8°rög_vÆ
 = 
∑th
;

308 
idx
++;

310 
∑th
 = 
tmp
;

313 
›
[
idx
].
¨g›
 = 
OP_OPEN
;

314 
o4¨gs
 = &
›
[
idx
].
nfs_¨g›4_u
.
››í
;

315 
o4¨gs
->
£qid
 = 
˛õ¡
->seqid;

316 
o4¨gs
->
sh¨e_ac˚ss
 = 
OPEN4_SHARE_ACCESS_READ
;

317 
o4¨gs
->
sh¨e_díy
 = 
OPEN4_SHARE_DENY_NONE
;

318 
o4¨gs
->
ow√r
.
˛õ¡id
 = 
˛õ¡
->clientid;

319 
o4¨gs
->
ow√r
.ow√r.
ow√r_Àn
 = 
	`°æí
(
˛õ¡
->owner);

320 
o4¨gs
->
ow√r
.ow√r.
ow√r_vÆ
 = 
˛õ¡
->owner;

321 
o4¨gs
->
›íhow
.
›íty≥
 = 
OPEN4_NOCREATE
;

322 
o4¨gs
->
˛aim
.˛aim = 
CLAIM_NULL
;

323 
o4¨gs
->
˛aim
.
›í_˛aim4_u
.
fûe
.
utf8°rög_Àn
 = 
	`°æí
(
∑th
);

324 
o4¨gs
->
˛aim
.
›í_˛aim4_u
.
fûe
.
utf8°rög_vÆ
 = 
∑th
;

325 
idx
++;

327 
›
[
idx
].
¨g›
 = 
OP_GETFH
;

328 
idx
++;

330 
›
[
idx
].
¨g›
 = 
OP_ACCESS
;

331 
a4¨gs
 = &
›
[
idx
].
nfs_¨g›4_u
.
›ac˚ss
;

332 
a4¨gs
->
ac˚ss
 = 
ACCESS4_READ
;

334 
˛õ¡
->
£qid
++;

336 
	`mem£t
(&
¨gs
, 0, (args));

337 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
idx
;

338 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

340 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

341 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 OPENÑequest\n");

342 
	`èŒoc_‰ì
(
˛õ¡
);

343 
	`exô
(10);

345 
	`èŒoc_‰ì
(
›
);

346 
	}
}

348 
	$£nd_›í_c⁄fúm
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
obje˘
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

350 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

351 
COMPOUND4¨gs
 
¨gs
;

352 
OPEN_CONFIRM4¨gs
 *
oc4¨gs
;

353 
PUTFH4¨gs
 *
pfh4¨gs
;

354 
nfs_¨g›4
 
›
[2];

356 
	`mem£t
(
›
, 0, (op));

357 
›
[0].
¨g›
 = 
OP_PUTFH
;

358 
pfh4¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›putfh
;

359 
pfh4¨gs
->
obje˘
 = object;

361 
›
[1].
¨g›
 = 
OP_OPEN_CONFIRM
;

362 
oc4¨gs
 = &
›
[1].
nfs_¨g›4_u
.
››í_c⁄fúm
;

363 
oc4¨gs
->
›í_°©eid
.
£qid
 = 
˛õ¡
->seqid;

364 
	`mem˝y
(
oc4¨gs
->
›í_°©eid
.
Ÿhî
,

365 
˛õ¡
->
°©eid
.
Ÿhî
, 12);

366 
oc4¨gs
->
£qid
 = 
˛õ¡
->seqid;

368 
˛õ¡
->
£qid
++;

370 
	`mem£t
(&
¨gs
, 0, (args));

371 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

372 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

374 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

375 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 CLOSEÑequest\n");

376 
	`èŒoc_‰ì
(
˛õ¡
);

377 
	`exô
(10);

379 
	}
}

381 
	$£nd_ªad
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
obje˘
,

382 
uöt64_t
 
off£t
, 
uöt32_t
 
cou¡
,

383 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

385 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

386 
COMPOUND4¨gs
 
¨gs
;

387 
PUTFH4¨gs
 *
pfh4¨gs
;

388 
READ4¨gs
 *
r4¨gs
;

389 
nfs_¨g›4
 
›
[3];

391 
	`mem£t
(
›
, 0, (op));

392 
›
[0].
¨g›
 = 
OP_PUTFH
;

393 
pfh4¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›putfh
;

394 
pfh4¨gs
->
obje˘
 = object;

396 
›
[1].
¨g›
 = 
OP_READ
;

397 
r4¨gs
 = &
›
[1].
nfs_¨g›4_u
.
›ªad
;

398 
r4¨gs
->
°©eid
.
£qid
 = 
˛õ¡
->seqid;

399 
	`mem˝y
(
r4¨gs
->
°©eid
.
Ÿhî
, 
˛õ¡
->stateid.other, 12);

400 
r4¨gs
->
off£t
 = offset;

401 
r4¨gs
->
cou¡
 = count;

403 
›
[2].
¨g›
 = 
OP_GETATTR
;

405 
	`mem£t
(&
¨gs
, 0, (args));

406 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

407 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

409 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

410 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 READÑequest\n");

411 
	`èŒoc_‰ì
(
˛õ¡
);

412 
	`exô
(10);

414 
	}
}

416 
	$£nd_˛o£
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
obje˘
,

417 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

419 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

420 
COMPOUND4¨gs
 
¨gs
;

421 
CLOSE4¨gs
 *
c4¨gs
;

422 
PUTFH4¨gs
 *
pfh4¨gs
;

423 
nfs_¨g›4
 
›
[2];

425 
	`mem£t
(
›
, 0, (op));

426 
›
[0].
¨g›
 = 
OP_PUTFH
;

427 
pfh4¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›putfh
;

428 
pfh4¨gs
->
obje˘
 = object;

430 
›
[1].
¨g›
 = 
OP_CLOSE
;

431 
c4¨gs
 = &
›
[1].
nfs_¨g›4_u
.
›˛o£
;

432 
c4¨gs
->
£qid
 = 
˛õ¡
->seqid;

433 
c4¨gs
->
›í_°©eid
.
£qid
 = 
˛õ¡
->seqid;

434 
	`mem˝y
(
c4¨gs
->
›í_°©eid
.
Ÿhî
, 
˛õ¡
->
°©eid
.other, 12);

436 
˛õ¡
->
£qid
++;

438 
	`mem£t
(&
¨gs
, 0, (args));

439 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

440 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

442 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

443 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 CLOSEÑequest\n");

444 
	`èŒoc_‰ì
(
˛õ¡
);

445 
	`exô
(10);

447 
	}
}

453 
	$˛o£_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

454 *
¥iv©e_d©a
)

456 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

457 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

468 
˛õ¡
->
is_föished
 = 1;

469 
	}
}

471 
	$ªad_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

472 *
¥iv©e_d©a
)

474 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

475 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

476 
READ4ªs
 *
r4ªs
;

478 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

479 
	`Ârötf
(
°dîr
, "FailedÅoÑead file on server %s\n",

480 
˛õ¡
->
£rvî
);

481 
	`èŒoc_‰ì
(
˛õ¡
);

482 
	`exô
(10);

485 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

486 
	`Ârötf
(
°dîr
, "FailedÅoÑead file on server %s\n",

487 
˛õ¡
->
£rvî
);

488 
	`èŒoc_‰ì
(
˛õ¡
);

489 
	`exô
(10);

492 
r4ªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[1].
nfs_ªs›4_u
.
›ªad
;

493 
	`wrôe
(1,

494 
r4ªs
->
READ4ªs_u
.
ªsok4
.
d©a
.
d©a_vÆ
,

495 
r4ªs
->
READ4ªs_u
.
ªsok4
.
d©a
.
d©a_Àn
);

500 i‡(
r4ªs
->
READ4ªs_u
.
ªsok4
.
eof
) {

501 
	`£nd_˛o£
(
Ωc
, 
˛õ¡
->
fh
, 
˛o£_cb
, client);

508 
˛õ¡
->
off£t
 +
r4ªs
->
READ4ªs_u
.
ªsok4
.
d©a
.
d©a_Àn
;

510 
	`£nd_ªad
(
Ωc
, 
˛õ¡
->
fh
, clõ¡->
off£t
, 4096, 
ªad_cb
, client);

511 
	}
}

513 
	$›í_c⁄fúm_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

514 *
¥iv©e_d©a
)

516 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

517 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

519 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

520 
	`Ârötf
(
°dîr
, "FailedÅo confirm open file on server %s\n",

521 
˛õ¡
->
£rvî
);

522 
	`èŒoc_‰ì
(
˛õ¡
);

523 
	`exô
(10);

526 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

527 
	`Ârötf
(
°dîr
, "FailedÅo confirm open file on server %s\n",

528 
˛õ¡
->
£rvî
);

529 
	`èŒoc_‰ì
(
˛õ¡
);

530 
	`exô
(10);

533 
	`£nd_ªad
(
Ωc
, 
˛õ¡
->
fh
, clõ¡->
off£t
, 4096, 
ªad_cb
, client);

534 
	}
}

536 
	$›í_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

537 *
¥iv©e_d©a
)

539 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

540 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

541 
GETFH4ªs
 *
gfh4ªs
;

542 
OPEN4ªs
 *
o4ªs
;

543 
idx
;

545 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

546 
	`Ârötf
(
°dîr
, "FailedÅo open file on server %s\n",

547 
˛õ¡
->
£rvî
);

548 
	`èŒoc_‰ì
(
˛õ¡
);

549 
	`exô
(10);

552 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

553 
	`Ârötf
(
°dîr
, "FailedÅo open file on server %s\n",

554 
˛õ¡
->
£rvî
);

555 
	`èŒoc_‰ì
(
˛õ¡
);

556 
	`exô
(10);

560 
idx
 = 1; idx < 
ªs
->
ªßºay
.
ªßºay_Àn
 - 1; idx++) {

561 i‡((
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
].
ªs›
 =
OP_OPEN
) &&

562 (
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
 + 1].
ªs›
 =
OP_GETFH
)) {

566 i‡(
idx
 >
ªs
->
ªßºay
.
ªßºay_Àn
 - 1) {

567 
	`Ârötf
(
°dîr
, "No OP_OPEN in serverÑesponse\n");

568 
	`èŒoc_‰ì
(
˛õ¡
);

569 
	`exô
(10);

573 
gfh4ªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
+1].
nfs_ªs›4_u
.
›gëfh
;

574 
˛õ¡
->
fh
.
nfs_fh4_Àn
 = 
gfh4ªs
->
GETFH4ªs_u
.
ªsok4
.
obje˘
.nfs_fh4_len;

575 
˛õ¡
->
fh
.
nfs_fh4_vÆ
 = 
	`èŒoc_size
(˛õ¡, clõ¡->fh.
nfs_fh4_Àn
);

576 i‡(
˛õ¡
->
fh
.
nfs_fh4_vÆ
 =
NULL
) {

577 
	`Ârötf
(
°dîr
, "FailedÅoállocate data forÇfs_fh4\n");

578 
	`èŒoc_‰ì
(
˛õ¡
);

579 
	`exô
(10);

581 
	`mem˝y
(
˛õ¡
->
fh
.
nfs_fh4_vÆ
,

582 
gfh4ªs
->
GETFH4ªs_u
.
ªsok4
.
obje˘
.
nfs_fh4_vÆ
,

583 
˛õ¡
->
fh
.
nfs_fh4_Àn
);

586 
o4ªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
].
nfs_ªs›4_u
.
››í
;

587 
˛õ¡
->
°©eid
.
£qid
 = 
o4ªs
->
OPEN4ªs_u
.
ªsok4
.stateid.seqid;

588 
	`mem˝y
(
˛õ¡
->
°©eid
.
Ÿhî
,

589 
o4ªs
->
OPEN4ªs_u
.
ªsok4
.
°©eid
.
Ÿhî
, 12);

592 i‡(
o4ªs
->
OPEN4ªs_u
.
ªsok4
.
rÊags
 & 
OPEN4_RESULT_CONFIRM
) {

593 
	`£nd_›í_c⁄fúm
(
Ωc
, 
˛õ¡
->
fh
, 
›í_c⁄fúm_cb
, client);

597 
	`£nd_ªad
(
Ωc
, 
˛õ¡
->
fh
, clõ¡->
off£t
, 4096, 
ªad_cb
, client);

598 
	}
}

600 
	$gëroŸfh_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

601 *
¥iv©e_d©a
)

603 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

604 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

605 
GETFH4ªs
 *
gfh4ªs
;

607 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

608 
	`Ârötf
(
°dîr
, "FailedÅo getÑoot filehandle of server %s\n",

609 
˛õ¡
->
£rvî
);

610 
	`èŒoc_‰ì
(
˛õ¡
);

611 
	`exô
(10);

614 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

615 
	`Ârötf
(
°dîr
, "FailedÅo getÑoot filehandle of server %s\n",

616 
˛õ¡
->
£rvî
);

617 
	`èŒoc_‰ì
(
˛õ¡
);

618 
	`exô
(10);

621 
gfh4ªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[1].
nfs_ªs›4_u
.
›gëfh
;

622 
	`£nd_›í
(
Ωc
, 
gfh4ªs
->
GETFH4ªs_u
.
ªsok4
.
obje˘
,

623 
˛õ¡
->
∑th
, 
›í_cb
, client);

624 
	}
}

626 
	$£t˛õ¡id_c⁄fúm_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

627 *
¥iv©e_d©a
)

629 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

630 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

631 *
∑th
;

633 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

634 
	`Ârötf
(
°dîr
, "FailedÅo set client id of server %s\n",

635 
˛õ¡
->
£rvî
);

636 
	`èŒoc_‰ì
(
˛õ¡
);

637 
	`exô
(10);

640 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

641 
	`Ârötf
(
°dîr
, "FailedÅo set client id of server %s\n",

642 
˛õ¡
->
£rvî
);

643 
	`èŒoc_‰ì
(
˛õ¡
);

644 
	`exô
(10);

647 
	`£nd_gëroŸfh
(
Ωc
, 
gëroŸfh_cb
, 
˛õ¡
);

648 
	}
}

650 
	$£t˛õ¡id_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

651 *
¥iv©e_d©a
)

653 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

654 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

655 
SETCLIENTID4ªs
 *
sc4ªs
;

657 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

658 
	`Ârötf
(
°dîr
, "FailedÅo set client id on server %s\n",

659 
˛õ¡
->
£rvî
);

660 
	`èŒoc_‰ì
(
˛õ¡
);

661 
	`exô
(10);

664 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

665 
	`Ârötf
(
°dîr
, "FailedÅo set client id on server %s\n",

666 
˛õ¡
->
£rvî
);

667 
	`èŒoc_‰ì
(
˛õ¡
);

668 
	`exô
(10);

671 
sc4ªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[0].
nfs_ªs›4_u
.
›£t˛õ¡id
;

672 
˛õ¡
->
˛õ¡id
 = 
sc4ªs
->
SETCLIENTID4ªs_u
.
ªsok4
.clientid;

673 
	`mem˝y
(
˛õ¡
->
£t˛õ¡id_c⁄fúm
,

674 
sc4ªs
->
SETCLIENTID4ªs_u
.
ªsok4
.
£t˛õ¡id_c⁄fúm
,

675 
NFS4_VERIFIER_SIZE
);

677 
	`£nd_£t˛õ¡id_c⁄fúm
(
Ωc
, 
£t˛õ¡id_c⁄fúm_cb
, 
˛õ¡
);

678 
	}
}

683 
	$cb_nuŒ_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

685 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, 
NULL
, (
zdΩroc_t
)
zdr_void
, 0);

688 
	}
}

694 
	$cb_compound_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

696 
CB_COMPOUND4¨gs
 *
¨gs
 = 
ˇŒ
->
body
.
cbody
.args;

698 
	`Ârötf
(
°dîr
, "cb_compund_cb. Do something here.\n");

700 
	}
}

702 
£rvi˚_¥oc
 
	g±
[] = {

703 {
CB_NULL
, 
cb_nuŒ_¥oc
,

704 (
zdΩroc_t
)
zdr_void
, 0},

705 {
CB_COMPOUND
, 
cb_compound_¥oc
,

706 (
zdΩroc_t
)
zdr_CB_COMPOUND4¨gs
, (
CB_COMPOUND4¨gs
)},

709 
	$£rvî_io
(
ãvít_c⁄ãxt
 *
ev
, 
ãvít_fd
 *
fde
,

710 
uöt16_t
 
evíts
, *
¥iv©e_d©a
)

712 
£rvî
 *£rvî = 
¥iv©e_d©a
;

713 
ªvíts
 = 0;

715 i‡(
evíts
 & 
TEVENT_FD_READ
) {

716 
ªvíts
 |
POLLIN
;

718 i‡(
evíts
 & 
TEVENT_FD_WRITE
) {

719 
ªvíts
 |
POLLOUT
;

722 i‡(
	`Ωc_£rvi˚
(
£rvî
->
Ωc
, 
ªvíts
) < 0) {

723 
	`èŒoc_‰ì
(
£rvî
);

727 
	`upd©e_evíts
(
£rvî
->
Ωc
, sîvî->
fde
);

728 
	}
}

730 
	$£rvî_de°ru˘‹
(
£rvî
 *
s
)

732 i‡(
s
->
Ωc
) {

733 
	`Ωc_de°roy_c⁄ãxt
(
s
->
Ωc
);

735 
	}
}

743 
	$˛õ¡_ac˚±
(
ãvít_c⁄ãxt
 *
ev
, 
ãvít_fd
 *
fde
,

744 
uöt16_t
 
evíts
, *
¥iv©e_d©a
)

746 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

747 
£rvî
 *server;

748 
sockaddr_°‹age
 
ss
;

749 
sockÀn_t
 
Àn
 = (
ss
);

750 
fd
;

752 
£rvî
 = 
	`èŒoc_zîo
(
˛õ¡
, server);

753 
	`èŒoc_£t_de°ru˘‹
(
£rvî
, 
£rvî_de°ru˘‹
);

755 i‡((
fd
 = 
	`ac˚±
(
˛õ¡
->
ˇŒback_fd
, (
sockaddr
 *)&
ss
, &
Àn
)) < 0) {

756 
	`Ârötf
(
°dîr
, "accept failed\n");

757 
	`èŒoc_‰ì
(
£rvî
);

760 
	`£t_n⁄blockög
(
fd
);

762 
£rvî
->
Ωc
 = 
	`Ωc_öô_£rvî_c⁄ãxt
(
fd
);

763 i‡(
£rvî
->
Ωc
 =
NULL
) {

764 
	`Ârötf
(
°dîr
, "FailedÅo create serverÑpc context\n");

765 
	`èŒoc_‰ì
(
£rvî
);

769 
	`Ωc_ªgi°î_£rvi˚
(
£rvî
->
Ωc
, 
NFS4_CALLBACK
, 
NFS_CB
,

770 
±
, (pt) / (pt[0]));

772 
£rvî
->
fde
 = 
	`ãvít_add_fd
(
ev
, sîvî, 
fd
, 
TEVENT_FD_READ
,

773 
£rvî_io
, 
£rvî
);

774 
	`ãvít_fd_£t_auto_˛o£
(
£rvî
->
fde
);

775 
	`upd©e_evíts
(
£rvî
->
Ωc
, sîvî->
fde
);

776 
	}
}

783 
	$c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

784 *
¥iv©e_d©a
)

786 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

787 
sockaddr_°‹age
 
ss
;

788 
sockÀn_t
 
Àn
 = (
ss
);

789 
sockaddr_ö
 *
ö
;

790 
sockaddr_ö6
 *
ö6
;

791 
ãvít_fd
 *
fde
;

793 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

794 
	`Ârötf
(
°dîr
, "connectionÅo NFSv4 server %s failed\n",

795 
˛õ¡
->
£rvî
);

796 
	`èŒoc_‰ì
(
˛õ¡
);

797 
	`exô
(10);

808 i‡(
	`gësock«me
(
	`Ωc_gë_fd
(
Ωc
), (
sockaddr
 *)&
ss
, &
Àn
) < 0) {

809 
	`Ârötf
(
°dîr
, "getsockaddr failed\n");

810 
	`èŒoc_‰ì
(
˛õ¡
);

811 
	`exô
(10);

813 
ss
.
ss_Ámûy
) {

814 
AF_INET
:

815 
ö
 = (
sockaddr_ö
 *)&
ss
;

816 
ö
->
sö_p‹t
=0;

818 
AF_INET6
:

819 
ö6
 = (
sockaddr_ö6
 *)&
ss
;

820 
ö6
->
sö6_p‹t
=0;

823 
	`Ârötf
(
°dîr
, "C™ÇŸ h™dÀ AF_FAMILY:%d", 
ss
.
ss_Ámûy
);

824 
	`èŒoc_‰ì
(
˛õ¡
);

825 
	`exô
(10);

828 
˛õ¡
->
ˇŒback_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

829 i‡(
˛õ¡
->
ˇŒback_fd
 == -1) {

830 
	`Ârötf
(
°dîr
, "FailedÅo create callback socket\n");

831 
	`èŒoc_‰ì
(
˛õ¡
);

832 
	`exô
(10);

834 
	`£t_n⁄blockög
(
˛õ¡
->
ˇŒback_fd
);

836 i‡(
	`böd
(
˛õ¡
->
ˇŒback_fd
, (
sockaddr
 *)&
ss
, (ss)) < 0) {

837 
	`Ârötf
(
°dîr
, "FailedÅo bind callback socket\n");

838 
	`èŒoc_‰ì
(
˛õ¡
);

839 
	`exô
(10);

842 i‡(
	`li°í
(
˛õ¡
->
ˇŒback_fd
, 16) < 0) {

843 
	`Ârötf
(
°dîr
, "failedÅoÜistenÅo callback socket\n");

844 
	`èŒoc_‰ì
(
˛õ¡
);

845 
	`exô
(10);

848 
fde
 = 
	`ãvít_add_fd
(
ev
, 
˛õ¡
, clõ¡->
ˇŒback_fd
, 
TEVENT_FD_READ
,

849 
˛õ¡_ac˚±
, 
¥iv©e_d©a
);

850 
	`ãvít_fd_£t_auto_˛o£
(
fde
);

852 
	`upd©e_evíts
(
˛õ¡
->
Ωc
, clõ¡->
fde
);

858 
	`£nd_£t˛õ¡id
(
Ωc
, 
£t˛õ¡id_cb
, 
˛õ¡
);

859 
	}
}

862 
	$˛õ¡_io
(
ãvít_c⁄ãxt
 *
ev
, 
ãvít_fd
 *
fde
,

863 
uöt16_t
 
evíts
, *
¥iv©e_d©a
)

865 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

866 
ªvíts
 = 0;

868 i‡(
evíts
 & 
TEVENT_FD_READ
) {

869 
ªvíts
 |
POLLIN
;

871 i‡(
evíts
 & 
TEVENT_FD_WRITE
) {

872 
ªvíts
 |
POLLOUT
;

875 i‡(
	`Ωc_£rvi˚
(
˛õ¡
->
Ωc
, 
ªvíts
) < 0) {

876 
	`Ârötf
(
°dîr
, "rpc_service failed\n");

877 
	`èŒoc_‰ì
(
˛õ¡
);

878 
	`exô
(10);

880 
	`upd©e_evíts
(
˛õ¡
->
Ωc
, clõ¡->
fde
);

881 i‡(
˛õ¡
->
is_föished
) {

882 
	`èŒoc_‰ì
(
˛õ¡
);

884 
	}
}

886 
	$maö
(
¨gc
, *
¨gv
[])

888 
TALLOC_CTX
 *
˘x
 = 
	`èŒoc_√w
(
NULL
);

889 
˛õ¡
 *client;

890 
nfs_uæ
 *
uæ
;

891 
i
, 
fd
;

893 #ifde‡
WIN32


894 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

895 
	`Ârötf
(
°dîr
, "FailedÅo start Winsock2\n");

896 
	`exô
(10);

900 #ifde‡
AROS


901 
	`¨os_öô_sockë
();

904 
	`§™dom
(
	`time
(
NULL
Ë^ 
	`gëpid
());

906 i‡(
¨gc
 < 2) {

907 
	`ußge
();

910 
ev
 = 
	`ãvít_c⁄ãxt_öô
(
˘x
);

912 
˛õ¡
 = 
	`èŒoc_zîo
(
˘x
, client);

913 
	`èŒoc_£t_de°ru˘‹
(
˛õ¡
, 
˛õ¡_de°ru˘‹
);

914 
˛õ¡
->
ˇŒback_fd
 = -1;

916 
˛õ¡
->
nfs
 = 
	`nfs_öô_c⁄ãxt
();

917 i‡(
˛õ¡
->
nfs
 =
NULL
) {

918 
	`Ârötf
(
°dîr
, "failedÅo initÇfs context\n");

919 
	`èŒoc_‰ì
(
˘x
);

920 
	`exô
(10);

923 
uæ
 = 
	`nfs_∑r£_uæ_dú
(
˛õ¡
->
nfs
, 
¨gv
[1]);

924 i‡(
uæ
 =
NULL
) {

925 
	`Ârötf
(
°dîr
, "failedÅoÖarse url\n");

926 
	`èŒoc_‰ì
(
˘x
);

927 
	`exô
(10);

929 
˛õ¡
->
£rvî
 = 
	`èŒoc_°rdup
(˛õ¡, 
uæ
->server);

930 
˛õ¡
->
∑th
 = 
	`èŒoc_°rdup
(˛õ¡, &
uæ
->path[1]);

931 
	`nfs_de°roy_uæ
(
uæ
);

933 
i
 = 0; i < 
NFS4_VERIFIER_SIZE
; i++) {

934 
˛õ¡
->
vîifõr
[
i
] = 
	`øndom
() & 0xff;

936 
˛õ¡
->
id
 = 
	`èŒoc_a•rötf
(client, "Libnfs %sÅcpÖid:%d",

937 
¨gv
[1], 
	`gëpid
());

938 
˛õ¡
->
ow√r
 = 
	`èŒoc_a•rötf
(client, "open id:libnfsÖid:%d",

939 
	`gëpid
());

945 
˛õ¡
->
Ωc
 = 
	`nfs_gë_Ωc_c⁄ãxt
(˛õ¡->
nfs
);

947 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
˛õ¡
->
Ωc
, clõ¡->
£rvî
,

948 
NFS4_PROGRAM
, 
NFS_V4
,

949 
c⁄√˘_cb
, 
˛õ¡
) != 0) {

950 
	`Ârötf
(
°dîr
, "FailedÅo start connection: %s\n",

951 
	`Ωc_gë_îr‹
(
˛õ¡
->
Ωc
));

952 
	`èŒoc_‰ì
(
˘x
);

953 
	`exô
(10);

959 
fd
 = 
	`Ωc_gë_fd
(
˛õ¡
->
Ωc
);

960 
˛õ¡
->
fde
 = 
	`ãvít_add_fd
(
ev
, clõ¡, 
fd
, 
TEVENT_FD_READ
,

961 
˛õ¡_io
, (*)
˛õ¡
);

962 
	`upd©e_evíts
(
˛õ¡
->
Ωc
, clõ¡->
fde
);

964 
	`ãvít_lo›_waô
(
ev
);

966 
	`èŒoc_‰ì
(
˘x
);

968 
	}
}

	@examples/nfs4-cat.c

35 
	#_FILE_OFFSET_BITS
 64

	)

36 
	#_GNU_SOURCE


	)

38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

42 #ifde‡
AROS


43 
	~"¨os_com∑t.h
"

47 #ifde‡
WIN32


48 
	~<wö32/wö32_com∑t.h
>

49 #¥agm®
commít
(
lib
, "ws2_32.lib")

50 
WSADATA
 
	gwßD©a
;

52 
	~<sys/°©.h
>

53 
	~<°rög.h
>

56 #ifde‡
HAVE_POLL_H


57 
	~<pﬁl.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~<¨∑/öë.h
>

65 
	~<f˙é.h
>

66 
	~<°dio.h
>

67 
	~<°dlib.h
>

68 
	~<°döt.h
>

69 
	~<sys/ty≥s.h
>

70 
	~<sys/sockë.h
>

71 
	~<time.h
>

72 
	~"libnfs.h
"

73 
	~"libnfs-øw.h
"

74 
	~"libnfs-øw-nfs4.h
"

76 
	~<evít2/evít.h
>

78 
evít_ba£
 *
	gba£
;

80 
	s˛õ¡
 {

81 
Ωc_c⁄ãxt
 *
	mΩc
;

82 
evít
 *
	mªad_evít
;

83 
evít
 *
	mwrôe_evít
;

84 
evít
 *
	mli°í_evít
;

86 *
	m£rvî
;

87 *
	m∑th
;

88 
	m›_Àn
;

89 
	mis_föished
;

91 
vîifõr4
 
	mvîifõr
;

92 *
	mid
;

93 *
	mow√r
;

94 
˛õ¡id4
 
	m˛õ¡id
;

95 
vîifõr4
 
	m£t˛õ¡id_c⁄fúm
;

98 
nfs_fh4
 
	mfh
;

99 
uöt32_t
 
	m£qid
;

100 
°©eid4
 
	m°©eid
;

103 
uöt64_t
 
	moff£t
;

105 
	mˇŒback_fd
;

108 
	s£rvî
 {

109 
£rvî
 *
	m√xt
;

110 
Ωc_c⁄ãxt
 *
	mΩc
;

111 
evít
 *
	mªad_evít
;

112 
evít
 *
	mwrôe_evít
;

114 
£rvî
 *
	g£rvî_li°
;

116 
	$ußge
()

118 
	`Ârötf
(
°dîr
, "Usage:Çfs4-cat <file>\n");

119 
	`Ârötf
(
°dîr
, " <file> isánÇfs url.\n");

120 
	`exô
(0);

121 
	}
}

123 
	$upd©e_evíts
(
Ωc_c⁄ãxt
 *
Ωc
, 
evít
 *
ªad_evít
,

124 
evít
 *
wrôe_evít
)

126 
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

128 i‡(
ªad_evít
) {

129 i‡(
evíts
 & 
POLLIN
) {

130 
	`evít_add
(
ªad_evít
, 
NULL
);

132 
	`evít_dñ
(
ªad_evít
);

135 i‡(
wrôe_evít
) {

136 i‡(
evíts
 & 
POLLOUT
) {

137 
	`evít_add
(
wrôe_evít
, 
NULL
);

139 
	`evít_dñ
(
wrôe_evít
);

142 
	}
}

145 
	$‰ì_£rvî
(
£rvî
 *server)

147 i‡(
£rvî
->
Ωc
) {

148 
	`Ωc_disc⁄√˘
(
£rvî
->
Ωc
, 
NULL
);

149 
	`Ωc_de°roy_c⁄ãxt
(
£rvî
->
Ωc
);

150 
£rvî
->
Ωc
 = 
NULL
;

152 i‡(
£rvî
->
ªad_evít
) {

153 
	`evít_‰ì
(
£rvî
->
ªad_evít
);

154 
£rvî
->
ªad_evít
 = 
NULL
;

156 i‡(
£rvî
->
wrôe_evít
) {

157 
	`evít_‰ì
(
£rvî
->
wrôe_evít
);

158 
£rvî
->
wrôe_evít
 = 
NULL
;

161 
	`‰ì
(
£rvî
);

162 
	}
}

164 
	$£rvî_io
(
evutû_sockë_t
 
fd
, 
evíts
, *
¥iv©e_d©a
)

166 
£rvî
 *£rvî = 
¥iv©e_d©a
;

167 
ªvíts
 = 0;

169 i‡(
evíts
 & 
EV_READ
) {

170 
ªvíts
 |
POLLIN
;

172 i‡(
evíts
 & 
EV_WRITE
) {

173 
ªvíts
 |
POLLOUT
;

176 i‡(
	`Ωc_£rvi˚
(
£rvî
->
Ωc
, 
ªvíts
) < 0) {

177 
	`Ârötf
(
°dîr
, "rpc_service() failed for server\n");

178 
	`exô
(10);

181 
	`upd©e_evíts
(
£rvî
->
Ωc
, sîvî->
ªad_evít
, sîvî->
wrôe_evít
);

182 
	}
}

184 
	$˛õ¡_io
(
evutû_sockë_t
 
fd
, 
evíts
, *
¥iv©e_d©a
)

186 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

187 
£rvî
 *server;

188 
ªvíts
 = 0;

190 i‡(
evíts
 & 
EV_READ
) {

191 
ªvíts
 |
POLLIN
;

193 i‡(
evíts
 & 
EV_WRITE
) {

194 
ªvíts
 |
POLLOUT
;

197 i‡(
	`Ωc_£rvi˚
(
˛õ¡
->
Ωc
, 
ªvíts
) < 0) {

198 
	`Ârötf
(
°dîr
, "rpc_service failed\n");

199 
	`exô
(10);

201 
	`upd©e_evíts
(
˛õ¡
->
Ωc
, clõ¡->
ªad_evít
, clõ¡->
wrôe_evít
);

203 i‡(
˛õ¡
->
is_föished
) {

207 
	`evít_‰ì
(
˛õ¡
->
li°í_evít
);

208 
˛õ¡
->
li°í_evít
 = 
NULL
;

213 
	`evít_‰ì
(
˛õ¡
->
ªad_evít
);

214 
˛õ¡
->
ªad_evít
 = 
NULL
;

215 
	`evít_‰ì
(
˛õ¡
->
wrôe_evít
);

216 
˛õ¡
->
wrôe_evít
 = 
NULL
;

221 
£rvî
 = 
£rvî_li°
; sîvî; sîvî = sîvî->
√xt
) {

222 i‡(
£rvî
->
ªad_evít
) {

223 
	`evít_‰ì
(
£rvî
->
ªad_evít
);

224 
£rvî
->
ªad_evít
 = 
NULL
;

226 i‡(
£rvî
->
wrôe_evít
) {

227 
	`evít_‰ì
(
£rvî
->
wrôe_evít
);

228 
£rvî
->
wrôe_evít
 = 
NULL
;

232 
	}
}

237 
	$£nd_£t˛õ¡id_c⁄fúm
(
Ωc_c⁄ãxt
 *
Ωc
,

238 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

240 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

241 
COMPOUND4¨gs
 
¨gs
;

242 
nfs_¨g›4
 
›
[1];

244 
	`mem£t
(
›
, 0, (op));

245 
›
[0].
¨g›
 = 
OP_SETCLIENTID_CONFIRM
;

246 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id_c⁄fúm
.
˛õ¡id
 = 
˛õ¡
->clientid;

247 
	`mem˝y
(
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id_c⁄fúm
.
£t˛õ¡id_c⁄fúm
, 
˛õ¡
->£t˛õ¡id_c⁄fúm, 
NFS4_VERIFIER_SIZE
);

249 
	`mem£t
(&
¨gs
, 0, (args));

250 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

251 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

253 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

254 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 SETCLIENTID_CONFIRMÑequest\n");

255 
	`exô
(10);

257 
	}
}

259 
	$£nd_£t˛õ¡id
(
Ωc_c⁄ãxt
 *
Ωc
,

260 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

262 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

263 
COMPOUND4¨gs
 
¨gs
;

264 
nfs_¨g›4
 
›
[1];

265 
sockaddr_°‹age
 
ss
;

266 
sockÀn_t
 
Àn
 = (
ss
);

267 
sockaddr_ö
 *
ö
;

268 
sockaddr_ö6
 *
ö6
;

269 *
√tid
;

270 
°r
[240], 
addr
[256];

271 
p‹t
;

273 i‡(
	`gësock«me
(
˛õ¡
->
ˇŒback_fd
, (
sockaddr
 *)&
ss
, &
Àn
) < 0) {

274 
	`Ârötf
(
°dîr
, "getsockaddr failed\n");

275 
	`exô
(10);

278 
ss
.
ss_Ámûy
) {

279 
AF_INET
:

280 
√tid
 = "tcp";

281 
ö
 = (
sockaddr_ö
 *)&
ss
;

282 
	`öë_¡›
(
AF_INET
, &
ö
->
sö_addr
, 
°r
, (str));

283 
p‹t
 = 
	`¡ohs
(
ö
->
sö_p‹t
);

285 
AF_INET6
:

286 
√tid
 = "tcp6";

287 
ö6
 = (
sockaddr_ö6
 *)&
ss
;

288 
	`öë_¡›
(
AF_INET6
, &
ö6
->
sö6_addr
, 
°r
, (str));

289 
p‹t
 = 
	`¡ohs
(
ö6
->
sö6_p‹t
);

292 
	`•rötf
(
addr
, "%s.%d.%d", 
°r
, 
p‹t
 >> 8,Öort & 0xff);

294 
	`mem£t
(
›
, 0, (op));

295 
›
[0].
¨g›
 = 
OP_SETCLIENTID
;

296 
	`mem˝y
(
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
˛õ¡
.
vîifõr
, clõ¡->vîifõr, (
vîifõr4
));

297 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
˛õ¡
.
id
.
id_Àn
 = 
	`°æí
(client->id);

298 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
˛õ¡
.
id
.
id_vÆ
 = client->id;

300 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
ˇŒback
.
cb_¥ogøm
 = 
NFS4_CALLBACK
;

302 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
ˇŒback
.
cb_loˇti⁄
.
r_√tid
 = 
√tid
;

303 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
ˇŒback
.
cb_loˇti⁄
.
r_addr
 = 
addr
;

305 
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
.
ˇŒback_idít
 = 0x00000001;

307 
	`mem£t
(&
¨gs
, 0, (args));

308 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

309 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

311 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

312 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 SETCLIENTIDÑequest\n");

313 
	`exô
(10);

315 
	}
}

317 
	$£nd_gëroŸfh
(
Ωc_c⁄ãxt
 *
Ωc
,

318 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

320 
COMPOUND4¨gs
 
¨gs
;

321 
nfs_¨g›4
 
›
[2];

323 
	`mem£t
(
›
, 0, (op));

324 
›
[0].
¨g›
 = 
OP_PUTROOTFH
;

325 
›
[1].
¨g›
 = 
OP_GETFH
;

327 
	`mem£t
(&
¨gs
, 0, (args));

328 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

329 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

330 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

331 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 GETROOTFHÑequest\n");

332 
	`exô
(10);

334 
	}
}

336 
	$£nd_›í
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
dú
, *
∑th
,

337 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

339 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

340 
COMPOUND4¨gs
 
¨gs
;

341 
nfs_¨g›4
 *
›
;

342 
i
 = 0, 
idx
 = 0;

343 *
tmp
;

345 
	`¥ötf
("OPEN called\n");

349 
tmp
 = 
∑th
;

350 
tmp
 = 
	`°rchr
(tmp, '/')) {

351 
i
++;

352 
tmp
++;

355 
›
 = 
	`mÆloc
((
nfs_¨g›4
Ë* (4 + 
i
));

356 
	`mem£t
(
›
, 0, (
nfs_¨g›4
Ë* (4 + 
i
));

358 
›
[
idx
].
¨g›
 = 
OP_PUTFH
;

359 
›
[
idx
].
nfs_¨g›4_u
.
›putfh
.
obje˘
 = 
dú
;

360 
idx
++;

362 
i
-- > 0) {

363 
tmp
 = 
	`°rchr
(
∑th
, '/');

364 *
tmp
++ = '\0';

366 
›
[
idx
].
¨g›
 = 
OP_LOOKUP
;

367 
›
[
idx
].
nfs_¨g›4_u
.
›lookup
.
obj«me
.
utf8°rög_Àn
 = 
	`°æí
(
∑th
);

368 
›
[
idx
].
nfs_¨g›4_u
.
›lookup
.
obj«me
.
utf8°rög_vÆ
 = 
∑th
;

369 
idx
++;

371 
∑th
 = 
tmp
;

374 
›
[
idx
].
¨g›
 = 
OP_OPEN
;

375 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
£qid
 = 
˛õ¡
->seqid;

376 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
sh¨e_ac˚ss
 = 
OPEN4_SHARE_ACCESS_READ
;

377 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
sh¨e_díy
 = 
OPEN4_SHARE_DENY_NONE
;

378 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
ow√r
.
˛õ¡id
 = 
˛õ¡
->clientid;

379 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
ow√r
.ow√r.
ow√r_Àn
 = 
	`°æí
(
˛õ¡
->owner);

380 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
ow√r
.ow√r.
ow√r_vÆ
 = 
˛õ¡
->owner;

381 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
›íhow
.
›íty≥
 = 
OPEN4_NOCREATE
;

382 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
˛aim
.˛aim = 
CLAIM_NULL
;

383 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
˛aim
.
›í_˛aim4_u
.
fûe
.
utf8°rög_Àn
 = 
	`°æí
(
∑th
);

384 
›
[
idx
].
nfs_¨g›4_u
.
››í
.
˛aim
.
›í_˛aim4_u
.
fûe
.
utf8°rög_vÆ
 = 
∑th
;

385 
idx
++;

387 
›
[
idx
].
¨g›
 = 
OP_GETFH
;

388 
idx
++;

390 
›
[
idx
].
¨g›
 = 
OP_ACCESS
;

391 
›
[
idx
].
nfs_¨g›4_u
.
›ac˚ss
.
ac˚ss
 = 
ACCESS4_READ
;

393 
˛õ¡
->
£qid
++;

395 
	`mem£t
(&
¨gs
, 0, (args));

396 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
idx
;

397 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

399 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

400 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 OPENÑequest\n");

401 
	`exô
(10);

403 
	}
}

405 
	$£nd_›í_c⁄fúm
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
obje˘
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

407 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

408 
COMPOUND4¨gs
 
¨gs
;

409 
nfs_¨g›4
 
›
[2];

411 
	`mem£t
(
›
, 0, (op));

412 
›
[0].
¨g›
 = 
OP_PUTFH
;

413 
›
[0].
nfs_¨g›4_u
.
›putfh
.
obje˘
 = object;

414 
›
[1].
¨g›
 = 
OP_OPEN_CONFIRM
;

415 
›
[1].
nfs_¨g›4_u
.
››í_c⁄fúm
.
›í_°©eid
.
£qid
 = 
˛õ¡
->seqid;

416 
	`mem˝y
(
›
[1].
nfs_¨g›4_u
.
››í_c⁄fúm
.
›í_°©eid
.
Ÿhî
, 
˛õ¡
->
°©eid
.other, 12);

417 
›
[1].
nfs_¨g›4_u
.
››í_c⁄fúm
.
£qid
 = 
˛õ¡
->seqid;

419 
˛õ¡
->
£qid
++;

421 
	`mem£t
(&
¨gs
, 0, (args));

422 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

423 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

425 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

426 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 CLOSEÑequest\n");

427 
	`exô
(10);

429 
	}
}

431 
	$£nd_ªad
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
obje˘
,

432 
uöt64_t
 
off£t
, 
uöt32_t
 
cou¡
,

433 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

435 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

436 
COMPOUND4¨gs
 
¨gs
;

437 
nfs_¨g›4
 
›
[3];

439 
	`mem£t
(
›
, 0, (op));

440 
›
[0].
¨g›
 = 
OP_PUTFH
;

441 
›
[0].
nfs_¨g›4_u
.
›putfh
.
obje˘
 = object;

442 
›
[1].
¨g›
 = 
OP_READ
;

443 
›
[1].
nfs_¨g›4_u
.
›ªad
.
°©eid
.
£qid
 = 
˛õ¡
->seqid;

444 
	`mem˝y
(
›
[1].
nfs_¨g›4_u
.
›ªad
.
°©eid
.
Ÿhî
, 
˛õ¡
->stateid.other, 12);

445 
›
[1].
nfs_¨g›4_u
.
›ªad
.
off£t
 = offset;

446 
›
[1].
nfs_¨g›4_u
.
›ªad
.
cou¡
 = count;

447 
›
[2].
¨g›
 = 
OP_GETATTR
;

449 
	`mem£t
(&
¨gs
, 0, (args));

450 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

451 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

453 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

454 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 READÑequest\n");

455 
	`exô
(10);

457 
	}
}

459 
	$£nd_˛o£
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_fh4
 
obje˘
,

460 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

462 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

463 
COMPOUND4¨gs
 
¨gs
;

464 
nfs_¨g›4
 
›
[2];

466 
	`mem£t
(
›
, 0, (op));

467 
›
[0].
¨g›
 = 
OP_PUTFH
;

468 
›
[0].
nfs_¨g›4_u
.
›putfh
.
obje˘
 = object;

469 
›
[1].
¨g›
 = 
OP_CLOSE
;

470 
›
[1].
nfs_¨g›4_u
.
›˛o£
.
£qid
 = 
˛õ¡
->seqid;

471 
›
[1].
nfs_¨g›4_u
.
›˛o£
.
›í_°©eid
.
£qid
 = 
˛õ¡
->seqid;

472 
	`mem˝y
(
›
[1].
nfs_¨g›4_u
.
›˛o£
.
›í_°©eid
.
Ÿhî
, 
˛õ¡
->
°©eid
.other, 12);

474 
˛õ¡
->
£qid
++;

476 
	`mem£t
(&
¨gs
, 0, (args));

477 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = (
›
Ë/ (
nfs_¨g›4
);

478 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

480 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
cb
, &
¨gs
, 
¥iv©e_d©a
Ë=
NULL
) {

481 
	`Ârötf
(
°dîr
, "FailedÅo sendÇfs4 CLOSEÑequest\n");

482 
	`exô
(10);

484 
	}
}

490 
	$˛o£_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

492 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

493 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

504 
˛õ¡
->
is_föished
 = 1;

505 
	}
}

507 
	$ªad_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

509 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

510 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

512 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

513 
	`Ârötf
(
°dîr
, "FailedÅoÑead file on server %s\n",

514 
˛õ¡
->
£rvî
);

515 
	`exô
(10);

518 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

519 
	`Ârötf
(
°dîr
, "FailedÅoÑead file on server %s\n",

520 
˛õ¡
->
£rvî
);

521 
	`exô
(10);

524 
	`wrôe
(1, 
ªs
->
ªßºay
.
ªßºay_vÆ
[1].
nfs_ªs›4_u
.
›ªad
.
READ4ªs_u
.
ªsok4
.
d©a
.
d©a_vÆ
,Ñes->ªßºay.ªßºay_vÆ[1].nfs_ªs›4_u.›ªad.READ4ªs_u.ªsok4.d©a.
d©a_Àn
);

529 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[1].
nfs_ªs›4_u
.
›ªad
.
READ4ªs_u
.
ªsok4
.
eof
) {

530 
	`£nd_˛o£
(
Ωc
, 
˛õ¡
->
fh
, 
˛o£_cb
, client);

537 
˛õ¡
->
off£t
 +
ªs
->
ªßºay
.
ªßºay_vÆ
[1].
nfs_ªs›4_u
.
›ªad
.
READ4ªs_u
.
ªsok4
.
d©a
.
d©a_Àn
;

539 
	`£nd_ªad
(
Ωc
, 
˛õ¡
->
fh
, clõ¡->
off£t
, 4096, 
ªad_cb
, client);

540 
	}
}

542 
	$›í_c⁄fúm_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

544 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

545 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

547 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

548 
	`Ârötf
(
°dîr
, "FailedÅo confirm open file on server %s\n",

549 
˛õ¡
->
£rvî
);

550 
	`exô
(10);

553 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

554 
	`Ârötf
(
°dîr
, "FailedÅo confirm open file on server %s\n",

555 
˛õ¡
->
£rvî
);

556 
	`exô
(10);

559 
	`£nd_ªad
(
Ωc
, 
˛õ¡
->
fh
, clõ¡->
off£t
, 4096, 
ªad_cb
, client);

560 
	}
}

562 
	$›í_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

564 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

565 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

566 
idx
;

568 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

569 
	`Ârötf
(
°dîr
, "FailedÅo open file on server %s\n",

570 
˛õ¡
->
£rvî
);

571 
	`exô
(10);

574 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

575 
	`Ârötf
(
°dîr
, "FailedÅo open file on server %s\n",

576 
˛õ¡
->
£rvî
);

577 
	`exô
(10);

581 
idx
 = 1; idx < 
ªs
->
ªßºay
.
ªßºay_Àn
 - 1; idx++) {

582 i‡((
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
].
ªs›
 =
OP_OPEN
) &&

583 (
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
 + 1].
ªs›
 =
OP_GETFH
)) {

587 i‡(
idx
 >
ªs
->
ªßºay
.
ªßºay_Àn
 - 1) {

588 
	`Ârötf
(
°dîr
, "No OP_OPEN in serverÑesponse\n");

589 
	`exô
(10);

593 
˛õ¡
->
fh
.
nfs_fh4_Àn
 = 
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
+1].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
.
obje˘
.nfs_fh4_len;

594 
˛õ¡
->
fh
.
nfs_fh4_vÆ
 = 
	`mÆloc
(˛õ¡->fh.
nfs_fh4_Àn
);

595 i‡(
˛õ¡
->
fh
.
nfs_fh4_vÆ
 =
NULL
) {

596 
	`Ârötf
(
°dîr
, "FailedÅoállocate data forÇfs_fh4\n");

597 
	`exô
(10);

599 
	`mem˝y
(
˛õ¡
->
fh
.
nfs_fh4_vÆ
, 
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
+1].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
.
obje˘
.nfs_fh4_vÆ, clõ¡->fh.
nfs_fh4_Àn
);

602 
˛õ¡
->
°©eid
.
£qid
 = 
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
].
nfs_ªs›4_u
.
››í
.
OPEN4ªs_u
.
ªsok4
.stateid.seqid;

603 
	`mem˝y
(
˛õ¡
->
°©eid
.
Ÿhî
, 
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
].
nfs_ªs›4_u
.
››í
.
OPEN4ªs_u
.
ªsok4
.stateid.other, 12);

606 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[
idx
].
nfs_ªs›4_u
.
››í
.
OPEN4ªs_u
.
ªsok4
.
rÊags
 & 
OPEN4_RESULT_CONFIRM
) {

607 
	`£nd_›í_c⁄fúm
(
Ωc
, 
˛õ¡
->
fh
, 
›í_c⁄fúm_cb
, client);

611 
	`£nd_ªad
(
Ωc
, 
˛õ¡
->
fh
, clõ¡->
off£t
, 4096, 
ªad_cb
, client);

612 
	}
}

614 
	$gëroŸfh_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

615 *
¥iv©e_d©a
)

617 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

618 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

620 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

621 
	`Ârötf
(
°dîr
, "FailedÅo getÑoot filehandle of server %s\n",

622 
˛õ¡
->
£rvî
);

623 
	`exô
(10);

626 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

627 
	`Ârötf
(
°dîr
, "FailedÅo getÑoot filehandle of server %s\n",

628 
˛õ¡
->
£rvî
);

629 
	`exô
(10);

632 
	`£nd_›í
(
Ωc
, 
ªs
->
ªßºay
.
ªßºay_vÆ
[1].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
.
obje˘
, 
˛õ¡
->
∑th
, 
›í_cb
, client);

633 
	}
}

636 
	$£t˛õ¡id_c⁄fúm_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

637 *
¥iv©e_d©a
)

639 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

640 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

641 *
∑th
;

643 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

644 
	`Ârötf
(
°dîr
, "FailedÅo set client id of server %s\n",

645 
˛õ¡
->
£rvî
);

646 
	`exô
(10);

649 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

650 
	`Ârötf
(
°dîr
, "FailedÅo set client id of server %s\n",

651 
˛õ¡
->
£rvî
);

652 
	`exô
(10);

655 
	`£nd_gëroŸfh
(
Ωc
, 
gëroŸfh_cb
, 
˛õ¡
);

656 
	}
}

658 
	$£t˛õ¡id_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

659 *
¥iv©e_d©a
)

661 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

662 
COMPOUND4ªs
 *
ªs
 = 
d©a
;

664 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

665 
	`Ârötf
(
°dîr
, "FailedÅo set client id on server %s\n",

666 
˛õ¡
->
£rvî
);

667 
	`exô
(10);

670 i‡(
ªs
->
°©us
 !
NFS4_OK
) {

671 
	`Ârötf
(
°dîr
, "FailedÅo set client id on server %s\n",

672 
˛õ¡
->
£rvî
);

673 
	`exô
(10);

676 
˛õ¡
->
˛õ¡id
 = 
ªs
->
ªßºay
.
ªßºay_vÆ
[0].
nfs_ªs›4_u
.
›£t˛õ¡id
.
SETCLIENTID4ªs_u
.
ªsok4
.clientid;

677 
	`mem˝y
(
˛õ¡
->
£t˛õ¡id_c⁄fúm
, 
ªs
->
ªßºay
.
ªßºay_vÆ
[0].
nfs_ªs›4_u
.
›£t˛õ¡id
.
SETCLIENTID4ªs_u
.
ªsok4
.£t˛õ¡id_c⁄fúm, 
NFS4_VERIFIER_SIZE
);

679 
	`£nd_£t˛õ¡id_c⁄fúm
(
Ωc
, 
£t˛õ¡id_c⁄fúm_cb
, 
˛õ¡
);

680 
	}
}

685 
	$cb_nuŒ_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

687 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, 
NULL
, (
zdΩroc_t
)
zdr_void
, 0);

690 
	}
}

696 
	$cb_compound_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

698 
CB_COMPOUND4¨gs
 *
¨gs
 = 
ˇŒ
->
body
.
cbody
.args;

700 
	`Ârötf
(
°dîr
, "cb_compund_cb. Do something here.\n");

702 
	}
}

704 
£rvi˚_¥oc
 
	g±
[] = {

705 {
CB_NULL
, 
cb_nuŒ_¥oc
,

706 (
zdΩroc_t
)
zdr_void
, 0},

707 {
CB_COMPOUND
, 
cb_compound_¥oc
,

708 (
zdΩroc_t
)
zdr_CB_COMPOUND4¨gs
, (
CB_COMPOUND4¨gs
)},

717 
	$˛õ¡_ac˚±
(
evutû_sockë_t
 
s
, 
evíts
, *
¥iv©e_d©a
)

719 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

720 
£rvî
 *server;

721 
sockaddr_°‹age
 
ss
;

722 
sockÀn_t
 
Àn
 = (
ss
);

723 
fd
;

725 
£rvî
 = 
	`mÆloc
((server));

726 i‡(
£rvî
 =
NULL
) {

727 
	`Ârötf
(
°dîr
, "failedÅo malloc server structure\n");

728 
	`exô
(10);

730 
	`mem£t
(
£rvî
, 0, (*server));

731 
£rvî
->
√xt
 = 
£rvî_li°
;

732 
£rvî_li°
 = 
£rvî
;

734 i‡((
fd
 = 
	`ac˚±
(
s
, (
sockaddr
 *)&
ss
, &
Àn
)) < 0) {

735 
	`‰ì_£rvî
(
£rvî
);

736 
	`Ârötf
(
°dîr
, "accept failed\n");

737 
	`exô
(10);

739 
	`evutû_make_sockë_n⁄blockög
(
fd
);

741 
£rvî
->
Ωc
 = 
	`Ωc_öô_£rvî_c⁄ãxt
(
fd
);

742 i‡(
£rvî
->
Ωc
 =
NULL
) {

743 
	`‰ì_£rvî
(
£rvî
);

744 
	`Ârötf
(
°dîr
, "FailedÅo create serverÑpc context\n");

745 
	`exô
(10);

748 
	`Ωc_ªgi°î_£rvi˚
(
£rvî
->
Ωc
, 
NFS4_CALLBACK
, 
NFS_CB
,

749 
±
, (pt) / (pt[0]));

751 
£rvî
->
ªad_evít
 = 
	`evít_√w
(
ba£
, 
fd
, 
EV_READ
|
EV_PERSIST
,

752 
£rvî_io
, 
£rvî
);

753 
£rvî
->
wrôe_evít
 = 
	`evít_√w
(
ba£
, 
fd
, 
EV_WRITE
|
EV_PERSIST
,

754 
£rvî_io
, 
£rvî
);

755 
	`upd©e_evíts
(
£rvî
->
Ωc
, sîvî->
ªad_evít
, sîvî->
wrôe_evít
);

756 
	}
}

763 
	$c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
,

764 *
¥iv©e_d©a
)

766 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

767 
sockaddr_°‹age
 
ss
;

768 
sockÀn_t
 
Àn
 = (
ss
);

769 
sockaddr_ö
 *
ö
;

770 
sockaddr_ö6
 *
ö6
;

772 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

773 
	`Ârötf
(
°dîr
, "connectionÅo NFSv4 server %s failed\n",

774 
˛õ¡
->
£rvî
);

775 
	`exô
(10);

786 i‡(
	`gësock«me
(
	`Ωc_gë_fd
(
Ωc
), (
sockaddr
 *)&
ss
, &
Àn
) < 0) {

787 
	`Ârötf
(
°dîr
, "getsockaddr failed\n");

788 
	`exô
(10);

790 
ss
.
ss_Ámûy
) {

791 
AF_INET
:

792 
ö
 = (
sockaddr_ö
 *)&
ss
;

793 
ö
->
sö_p‹t
=0;

795 
AF_INET6
:

796 
ö6
 = (
sockaddr_ö6
 *)&
ss
;

797 
ö6
->
sö6_p‹t
=0;

800 
	`Ârötf
(
°dîr
, "C™ÇŸ h™dÀ AF_FAMILY:%d", 
ss
.
ss_Ámûy
);

801 
	`exô
(10);

804 
˛õ¡
->
ˇŒback_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

805 i‡(
˛õ¡
->
ˇŒback_fd
 == -1) {

806 
	`Ârötf
(
°dîr
, "FailedÅo create callback socket\n");

807 
	`exô
(10);

809 
	`evutû_make_sockë_n⁄blockög
(
˛õ¡
->
ˇŒback_fd
);

811 i‡(
	`böd
(
˛õ¡
->
ˇŒback_fd
, (
sockaddr
 *)&
ss
, (ss)) < 0) {

812 
	`Ârötf
(
°dîr
, "FailedÅo bind callback socket\n");

813 
	`exô
(10);

816 i‡(
	`li°í
(
˛õ¡
->
ˇŒback_fd
, 16) < 0) {

817 
	`Ârötf
(
°dîr
, "failedÅoÜistenÅo callback socket\n");

818 
	`exô
(10);

821 
˛õ¡
->
li°í_evít
 = 
	`evít_√w
(
ba£
,

822 
˛õ¡
->
ˇŒback_fd
,

823 
EV_READ
|
EV_PERSIST
,

824 
˛õ¡_ac˚±
, 
¥iv©e_d©a
);

825 
	`evít_add
(
˛õ¡
->
li°í_evít
, 
NULL
);

832 
	`£nd_£t˛õ¡id
(
Ωc
, 
£t˛õ¡id_cb
, 
˛õ¡
);

833 
	}
}

835 
	$maö
(
¨gc
, *
¨gv
[])

837 
nfs_c⁄ãxt
 *
nfs
;

838 
nfs_uæ
 *
uæ
;

839 
˛õ¡
 client;

840 
i
, 
fd
;

842 #ifde‡
WIN32


843 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

844 
	`Ârötf
(
°dîr
, "FailedÅo start Winsock2\n");

845 
	`exô
(10);

849 #ifde‡
AROS


850 
	`¨os_öô_sockë
();

853 i‡(
¨gc
 < 2) {

854 
	`ußge
();

857 
ba£
 = 
	`evít_ba£_√w
();

858 i‡(
ba£
 =
NULL
) {

859 
	`Ârötf
(
°dîr
, "Failed createÉvent context\n");

860 
	`exô
(10);

863 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

864 i‡(
nfs
 =
NULL
) {

865 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

866 
	`exô
(10);

868 
uæ
 = 
	`nfs_∑r£_uæ_dú
(
nfs
, 
¨gv
[1]);

869 i‡(
uæ
 =
NULL
) {

870 
	`Ârötf
(
°dîr
, "failedÅoÖarse url\n");

871 
	`exô
(10);

874 
	`mem£t
(&
˛õ¡
, 0, (client));

875 
˛õ¡
.
Ωc
 = 
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
);

876 
˛õ¡
.
is_föished
 = 0;

877 
˛õ¡
.
£rvî
 = 
uæ
->server;

878 
˛õ¡
.
∑th
 = &
uæ
->path[1];

879 
	`§™dom
(
	`time
(
NULL
));

880 
i
 = 0; i < 
NFS4_VERIFIER_SIZE
; i++) {

881 
˛õ¡
.
vîifõr
[
i
] = 
	`øndom
() & 0xff;

883 
	`a•rötf
(&
˛õ¡
.
id
, "Libnf†%†t˝Öid:%d", 
¨gv
[1], 
	`gëpid
());

884 
	`a•rötf
(&
˛õ¡
.
ow√r
, "›í id:libnf†pid:%d", 
	`gëpid
());

885 
˛õ¡
.
ˇŒback_fd
 = -1;

887 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
˛õ¡
.
Ωc
, 
uæ
->
£rvî
,

888 
NFS4_PROGRAM
, 
NFS_V4
,

889 
c⁄√˘_cb
, &
˛õ¡
) != 0) {

890 
	`Ârötf
(
°dîr
, "FailedÅo start connection\n");

891 
	`exô
(10);

897 
fd
 = 
	`Ωc_gë_fd
(
˛õ¡
.
Ωc
);

898 
˛õ¡
.
ªad_evít
 = 
	`evít_√w
(
ba£
, 
fd
, 
EV_READ
|
EV_PERSIST
,

899 
˛õ¡_io
, &
˛õ¡
);

900 
˛õ¡
.
wrôe_evít
 = 
	`evít_√w
(
ba£
, 
fd
, 
EV_WRITE
|
EV_PERSIST
,

901 
˛õ¡_io
, &
˛õ¡
);

902 
	`upd©e_evíts
(
˛õ¡
.
Ωc
, clõ¡.
ªad_evít
, clõ¡.
wrôe_evít
);

907 
	`evít_ba£_di•©ch
(
ba£
);

915 
	`˛o£
(
˛õ¡
.
ˇŒback_fd
);

920 
	`‰ì
(
˛õ¡
.
id
);

921 
	`‰ì
(
˛õ¡
.
ow√r
);

922 
	`‰ì
(
˛õ¡
.
fh
.
nfs_fh4_vÆ
);

927 
£rvî_li°
) {

928 
£rvî
 *£rvî = 
£rvî_li°
;

930 
£rvî_li°
 = 
£rvî
->
√xt
;

931 
	`‰ì_£rvî
(
£rvî
);

934 
	`nfs_de°roy_uæ
(
uæ
);

938 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

940 
	`evít_ba£_‰ì
(
ba£
);

943 
	}
}

	@examples/nfsclient-async.c

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

24 #ifde‡
WIN32


25 
	~<wö32/wö32_com∑t.h
>

26 #¥agm®
commít
(
lib
, "ws2_32.lib")

27 
WSADATA
 
	gwßD©a
;

29 
	~<sys/°©.h
>

32 #ifde‡
HAVE_POLL_H


33 
	~<pﬁl.h
>

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 
	#SERVER
 "10.1.1.27"

	)

41 
	#EXPORT
 "/VIRTUAL"

	)

42 
	#NFSFILE
 "/BOOKS/Cœssics/Døcuœ.djvu"

	)

43 
	#NFSDIR
 "/BOOKS/Cœssics/"

	)

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°döt.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<f˙é.h
>

50 
	~"libnfs.h
"

51 
	~"libnfs-øw.h
"

52 
	~"libnfs-øw-mou¡.h
"

54 
Ωc_c⁄ãxt
 *
	gmou¡_c⁄ãxt
;

56 
	s˛õ¡
 {

57 *
	m£rvî
;

58 *
	mexp‹t
;

59 
uöt32_t
 
	mmou¡_p‹t
;

60 
nfsfh
 *
	mnfsfh
;

61 
	mis_föished
;

64 
	gbuf
[64];

66 
	$mou¡_exp‹t_cb
(
Ωc_c⁄ãxt
 *
mou¡_c⁄ãxt
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

68 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

69 
exp‹ts
 
exp‹t
 = *”xp‹t†*)
d©a
;

71 i‡(
°©us
 < 0) {

72 
	`¥ötf
("MOUNT/EXPORT faûed wôh \"%s\"\n", 
	`Ωc_gë_îr‹
(
mou¡_c⁄ãxt
));

73 
	`exô
(10);

76 
	`¥ötf
("GŸÉxp‹t†li° from sîvî %s\n", 
˛õ¡
->
£rvî
);

77 
exp‹t
 !
NULL
) {

78 
	`¥ötf
("Exp‹t: %s\n", 
exp‹t
->
ex_dú
);

79 
exp‹t
 =Éxp‹t->
ex_√xt
;

82 
mou¡_c⁄ãxt
 = 
NULL
;

84 
˛õ¡
->
is_föished
 = 1;

85 
	}
}

87 
	$nfs_›ídú_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

89 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

90 
nfsdú
 *nfsdú = 
d©a
;

91 
nfsdúít
 *nfsdirent;

93 i‡(
°©us
 < 0) {

94 
	`¥ötf
("›ídú faûed wôh \"%s\"\n", (*)
d©a
);

95 
	`exô
(10);

98 
	`¥ötf
("opendir successful\n");

99 (
nfsdúít
 = 
	`nfs_ªaddú
(
nfs
, 
nfsdú
)Ë!
NULL
) {

100 
	`¥ötf
("Inode:%d Name:%s\n", ()
nfsdúít
->
öode
,Çfsdúít->
«me
);

102 
	`nfs_˛o£dú
(
nfs
, 
nfsdú
);

104 
mou¡_c⁄ãxt
 = 
	`Ωc_öô_c⁄ãxt
();

105 i‡(
	`mou¡_gëexp‹ts_async
(
mou¡_c⁄ãxt
, 
˛õ¡
->
£rvî
, 
mou¡_exp‹t_cb
, client) != 0) {

106 
	`¥ötf
("FailedÅo start MOUNT/EXPORT\n");

107 
	`exô
(10);

109 
	}
}

111 
	$nfs_˛o£_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

113 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

115 i‡(
°©us
 < 0) {

116 
	`¥ötf
("˛o£ faûed wôh \"%s\"\n", (*)
d©a
);

117 
	`exô
(10);

120 
	`¥ötf
("close successful\n");

121 
	`¥ötf
("ˇŒ o≥ndú(%s)\n", 
NFSDIR
);

122 i‡(
	`nfs_›ídú_async
(
nfs
, 
NFSDIR
, 
nfs_›ídú_cb
, 
˛õ¡
) != 0) {

123 
	`¥ötf
("FailedÅo startásyncÇfs close\n");

124 
	`exô
(10);

126 
	}
}

128 
	$nfs_f°©64_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

130 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

131 
nfs_°©_64
 *
°
;

133 i‡(
°©us
 < 0) {

134 
	`¥ötf
("f°© cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

135 
	`exô
(10);

138 
	`¥ötf
("GŸÑïly from sîvî f‹ f°©(%s).\n", 
NFSFILE
);

139 
°
 = (
nfs_°©_64
 *)
d©a
;

140 
	`¥ötf
("Modê%04o\n", ()
°
->
nfs_mode
);

141 
	`¥ötf
("Sizê%d\n", ()
°
->
nfs_size
);

142 
	`¥ötf
("Inodê%04o\n", ()
°
->
nfs_öo
);

144 
	`¥ötf
("Close file\n");

145 i‡(
	`nfs_˛o£_async
(
nfs
, 
˛õ¡
->
nfsfh
, 
nfs_˛o£_cb
, client) != 0) {

146 
	`¥ötf
("FailedÅo startásyncÇfs close\n");

147 
	`exô
(10);

149 
	}
}

151 
	$nfs_ªad_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

153 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

154 *
ªad_d©a
;

155 
i
;

157 i‡(
°©us
 < 0) {

158 
	`¥ötf
("ªad faûed wôh \"%s\"\n", (*)
d©a
);

159 
	`exô
(10);

162 
	`¥ötf
("ªad suc˚ssfu»wôh %d byã†o‡d©a\n", 
°©us
);

163 
ªad_d©a
 = 
buf
;

164 
i
=0;i<16;i++) {

165 
	`¥ötf
("%02x ", 
ªad_d©a
[
i
]&0xff);

167 
	`¥ötf
("\n");

168 
	`¥ötf
("F°© fûê:%s\n", 
NFSFILE
);

169 i‡(
	`nfs_f°©64_async
(
nfs
, 
˛õ¡
->
nfsfh
, 
nfs_f°©64_cb
, client) != 0) {

170 
	`¥ötf
("FailedÅo startásyncÇfs fstat\n");

171 
	`exô
(10);

173 
	}
}

175 
	$nfs_›í_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

177 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

178 
nfsfh
 *nfsfh;

180 i‡(
°©us
 < 0) {

181 
	`¥ötf
("›í cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

182 
	`exô
(10);

185 
nfsfh
 = 
d©a
;

186 
˛õ¡
->
nfsfh
 =Çfsfh;

187 
	`¥ötf
("GŸÑïly from sîvî f‹ o≥n(%s). H™dÀ:%p\n", 
NFSFILE
, 
d©a
);

188 
	`¥ötf
("Read first 64 bytes\n");

189 i‡(
	`nfs_¥ód_async
(
nfs
, 
nfsfh
, 
buf
, 64, 0, 
nfs_ªad_cb
, 
˛õ¡
) != 0) {

190 
	`¥ötf
("FailedÅo startásyncÇfs open\n");

191 
	`exô
(10);

193 
	}
}

195 
	$nfs_°©64_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

197 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

198 
nfs_°©_64
 *
°
;

200 i‡(
°©us
 < 0) {

201 
	`¥ötf
("°© cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

202 
	`exô
(10);

205 
	`¥ötf
("GŸÑïly from sîvî f‹ sèt(%s).\n", 
NFSFILE
);

206 
°
 = (
nfs_°©_64
 *)
d©a
;

207 
	`¥ötf
("Modê%04o\n", (Ë
°
->
nfs_mode
);

208 
	`¥ötf
("Sizê%d\n", ()
°
->
nfs_size
);

209 
	`¥ötf
("Inodê%04o\n", ()
°
->
nfs_öo
);

211 
	`¥ötf
("O≥¿fûêf‹Ñódög :%s\n", 
NFSFILE
);

212 i‡(
	`nfs_›í_async
(
nfs
, 
NFSFILE
, 
O_RDONLY
, 
nfs_›í_cb
, 
˛õ¡
) != 0) {

213 
	`¥ötf
("FailedÅo startásyncÇfs open\n");

214 
	`exô
(10);

216 
	}
}

218 
	$nfs_mou¡_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

220 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

222 i‡(
°©us
 < 0) {

223 
	`¥ötf
("mou¡/m¡ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

224 
	`exô
(10);

227 
	`¥ötf
("GotÑeply from server for MOUNT/MNTÖrocedure.\n");

228 
	`¥ötf
("Sèàfûê:%s\n", 
NFSFILE
);

229 i‡(
	`nfs_°©64_async
(
nfs
, 
NFSFILE
, 
nfs_°©64_cb
, 
˛õ¡
) != 0) {

230 
	`¥ötf
("FailedÅo startásyncÇfs stat\n");

231 
	`exô
(10);

233 
	}
}

237 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

239 
nfs_c⁄ãxt
 *
nfs
;

240 
ªt
;

241 
˛õ¡
 client;

242 
pﬁlfd
 
pfds
[2];

244 #ifde‡
WIN32


245 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

246 
	`¥ötf
("FailedÅo start Winsock2\n");

247 
	`exô
(10);

251 
˛õ¡
.
£rvî
 = 
SERVER
;

252 
˛õ¡
.
exp‹t
 = 
EXPORT
;

253 
˛õ¡
.
is_föished
 = 0;

255 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

256 i‡(
nfs
 =
NULL
) {

257 
	`¥ötf
("failedÅo init context\n");

258 
	`exô
(10);

261 
ªt
 = 
	`nfs_mou¡_async
(
nfs
, 
˛õ¡
.
£rvî
, clõ¡.
exp‹t
, 
nfs_mou¡_cb
, &client);

262 i‡(
ªt
 != 0) {

263 
	`¥ötf
("FailedÅo startásyncÇfs mount\n");

264 
	`exô
(10);

268 
num_fds
;

270 
pfds
[0].
fd
 = 
	`nfs_gë_fd
(
nfs
);

271 
pfds
[0].
evíts
 = 
	`nfs_which_evíts
(
nfs
);

272 
num_fds
 = 1;

274 i‡(
mou¡_c⁄ãxt
 !0 && 
	`Ωc_gë_fd
(mount_context) != -1) {

275 
pfds
[1].
fd
 = 
	`Ωc_gë_fd
(
mou¡_c⁄ãxt
);

276 
pfds
[1].
evíts
 = 
	`Ωc_which_evíts
(
mou¡_c⁄ãxt
);

277 
num_fds
 = 2;

279 i‡(
	`pﬁl
(&
pfds
[0], 
num_fds
, -1) < 0) {

280 
	`¥ötf
("Poll failed");

281 
	`exô
(10);

283 i‡(
mou¡_c⁄ãxt
 !
NULL
) {

284 i‡(
	`Ωc_£rvi˚
(
mou¡_c⁄ãxt
, 
pfds
[1].
ªvíts
) < 0) {

285 
	`¥ötf
("rpc_service failed\n");

289 i‡(
	`nfs_£rvi˚
(
nfs
, 
pfds
[0].
ªvíts
) < 0) {

290 
	`¥ötf
("nfs_service failed\n");

293 i‡(
˛õ¡
.
is_föished
) {

298 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

299 i‡(
mou¡_c⁄ãxt
 !
NULL
) {

300 
	`Ωc_de°roy_c⁄ãxt
(
mou¡_c⁄ãxt
);

301 
mou¡_c⁄ãxt
 = 
NULL
;

303 
	`¥ötf
("nfsclient finished\n");

305 
	}
}

	@examples/nfsclient-bcast.c

20 #ifde‡
HAVE_CONFIG_H


21 
	~"c⁄fig.h
"

24 #ifde‡
WIN32


25 
	~<wö32/wö32_com∑t.h
>

26 #¥agm®
commít
(
lib
, "ws2_32.lib")

27 
WSADATA
 
	gwßD©a
;

30 #ifde‡
HAVE_POLL_H


31 
	~<pﬁl.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<î∫o.h
>

43 #ifde‡
HAVE_SYS_TIME_H


44 
	~<sys/time.h
>

47 #ifde‡
HAVE_NET_IF_H


48 
	~<√t/if.h
>

51 #ifde‡
HAVE_NETDB_H


52 
	~<√tdb.h
>

55 #ifde‡
HAVE_SYS_IOCTL_H


56 
	~<sys/io˘l.h
>

59 #ifde‡
HAVE_SYS_SOCKET_H


60 
	~<sys/sockë.h
>

63 
	~"libnfs.h
"

64 
	~"libnfs-øw.h
"

65 
	~"libnfs-¥iv©e.h
"

66 
	~"libnfs-øw-mou¡.h
"

67 
	~"libnfs-øw-p‹tm≠.h
"

69 
	snfs_li°_d©a
 {

70 
	m°©us
;

71 
nfs_£rvî_li°
 *
	m§vrs
;

74 
	$‰ì_nfs_§vr_li°
(
nfs_£rvî_li°
 *
§v
)

76 
§v
 !
NULL
) {

77 
nfs_£rvî_li°
 *
√xt
 = 
§v
->next;

79 
	`‰ì
(
§v
->
addr
);

80 
	`‰ì
(
§v
);

81 
§v
 = 
√xt
;

83 
	}
}

85 
	$pm_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
, *
¥iv©e_d©a
)

87 
nfs_li°_d©a
 *
§v_d©a
 = 
¥iv©e_d©a
;

88 
sockaddr
 *
sö
;

89 
ho°dd
[16];

90 
nfs_£rvî_li°
 *
§vr
;

92 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

95 i‡(
°©us
 != 0) {

96 
§v_d©a
->
°©us
 = -1;

100 
sö
 = 
	`Ωc_gë_ªcv_sockaddr
(
Ωc
);

101 i‡(
sö
 =
NULL
) {

102 
	`Ωc_£t_îr‹
(
Ωc
, "failedÅo get sockaddr in CALLIT callback");

103 
§v_d©a
->
°©us
 = -1;

107 i‡(
	`gë«meöfo
(
sö
, (
sockaddr_ö
), &
ho°dd
[0], (ho°dd), 
NULL
, 0, 
NI_NUMERICHOST
) < 0) {

108 
	`Ωc_£t_îr‹
(
Ωc
, "getnameinfo failed in CALLIT callback");

109 
§v_d©a
->
°©us
 = -1;

114 
§vr
 = 
	`mÆloc
((
nfs_£rvî_li°
));

115 i‡(
§vr
 =
NULL
) {

116 
	`Ωc_£t_îr‹
(
Ωc
, "Malloc failed whenállocating server structure");

117 
§v_d©a
->
°©us
 = -1;

121 
§vr
->
addr
 = 
	`°rdup
(
ho°dd
);

122 i‡(
§vr
->
addr
 =
NULL
) {

123 
	`Ωc_£t_îr‹
(
Ωc
, "Strdup failed whenállocating server structure");

124 
	`‰ì
(
§vr
);

125 
§v_d©a
->
°©us
 = -1;

129 
§vr
->
√xt
 = 
§v_d©a
->
§vrs
;

130 
§v_d©a
->
§vrs
 = 
§vr
;

131 
	}
}

133 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

135 
Ωc_c⁄ãxt
 *
Ωc
;

136 
pﬁlfd
 
pfd
;

137 
ifc⁄f
 
ifc
;

138 
size
;

139 
timevÆ
 
tv_°¨t
, 
tv_cuºít
;

140 
nfs_li°_d©a
 
d©a
 = {0, 
NULL
};

141 
nfs_£rvî_li°
 *
§vr
;

142 *
±r
;

144 #ifde‡
WIN32


145 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

146 
	`¥ötf
("FailedÅo start Winsock2\n");

147 
	`exô
(10);

151 
Ωc
 = 
	`Ωc_öô_udp_c⁄ãxt
();

152 i‡(
Ωc
 =
NULL
) {

153 
	`¥ötf
("failedÅo init context\n");

154 
	`exô
(10);

157 i‡(
	`Ωc_böd_udp
(
Ωc
, "0.0.0.0", 0) < 0) {

158 
	`¥ötf
("ÁûedÅÿbödÅÿud∞%s\n", 
	`Ωc_gë_îr‹
(
Ωc
));

159 
	`exô
(10);

164 
size
 = (
i‰eq
);

165 
ifc
.
ifc_buf
 = 
NULL
;

166 
ifc
.
ifc_Àn
 = 
size
;

168 
ifc
.
ifc_Àn
 > (
size
 - (
i‰eq
))) {

169 
size
 *= 2;

171 
	`‰ì
(
ifc
.
ifc_buf
);

172 
ifc
.
ifc_Àn
 = 
size
;

173 
ifc
.
ifc_buf
 = 
	`mÆloc
(
size
);

174 
	`mem£t
(
ifc
.
ifc_buf
, 0, 
size
);

175 i‡(
	`io˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIOCGIFCONF
, (
ˇddr_t
)&
ifc
) < 0) {

176 
	`¥ötf
("ioctl SIOCGIFCONF failed\n");

177 
	`exô
(10);

181 
±r
 =(*)
ifc
.
ifc_buf
;Öå < ((*)ifc.ifc_bufË+ ifc.
ifc_Àn
; ) {

182 
i‰eq
 *
i‰
;

183 
bcdd
[16];

185 
i‰
 = (
i‰eq
 *)
±r
;

186 #ifde‡
HAVE_SOCKADDR_LEN


187 i‡(
i‰
->
i‰_addr
.
ß_Àn
 > (
sockaddr
)) {

188 
±r
 +(
i‰
->
i‰_«me
Ë+ i‰->
i‰_addr
.
ß_Àn
;

190 
±r
 +(
i‰
->
i‰_«me
Ë+ (
sockaddr
);

193 
±r
 +(
i‰eq
);

196 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 !
AF_INET
) {

199 i‡(
	`io˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIOCGIFFLAGS
, 
i‰
) < 0) {

200 
	`¥ötf
("ioctl DRBADDR failed\n");

201 
	`exô
(10);

203 i‡(!(
i‰
->
i‰_Êags
 & 
IFF_UP
)) {

206 i‡(
i‰
->
i‰_Êags
 & 
IFF_LOOPBACK
) {

209 i‡(!(
i‰
->
i‰_Êags
 & 
IFF_BROADCAST
)) {

212 i‡(
	`io˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIOCGIFBRDADDR
, 
i‰
) < 0) {

215 i‡(
	`gë«meöfo
(&
i‰
->
i‰_brﬂdaddr
, (
sockaddr_ö
), &
bcdd
[0], (bcdd), 
NULL
, 0, 
NI_NUMERICHOST
) < 0) {

218 i‡(
	`Ωc_£t_udp_de°ö©i⁄
(
Ωc
, 
bcdd
, 111, 1) < 0) {

219 
	`¥ötf
("ÁûedÅÿ£àud∞de°ö©i⁄ %s\n", 
	`Ωc_gë_îr‹
(
Ωc
));

220 
	`exô
(10);

223 i‡(
	`Ωc_pm≠2_ˇŒô_èsk
(
Ωc
, 
MOUNT_PROGRAM
, 2, 0, 
NULL
, 0, 
pm_cb
, &
d©a
) == NULL) {

224 
	`¥ötf
("FailedÅo set up callit function\n");

225 
	`exô
(10);

228 
	`‰ì
(
ifc
.
ifc_buf
);

230 
	`gëtimeofday
(&
tv_°¨t
, 
NULL
);

232 
m±
;

234 
pfd
.
fd
 = 
	`Ωc_gë_fd
(
Ωc
);

235 
pfd
.
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

237 
	`gëtimeofday
(&
tv_cuºít
, 
NULL
);

238 
m±
 = 1000

239 - (
tv_cuºít
.
tv_£c
 *1000 +Åv_cuºít.
tv_u£c
 / 1000)

240 + (
tv_°¨t
.
tv_£c
 *1000 +Åv_°¨t.
tv_u£c
 / 1000);

242 i‡(
	`pﬁl
(&
pfd
, 1, 
m±
) < 0) {

243 
	`¥ötf
("Poll failed");

244 
	`exô
(10);

246 i‡(
pfd
.
ªvíts
 == 0) {

250 i‡(
	`Ωc_£rvi˚
(
Ωc
, 
pfd
.
ªvíts
) < 0) {

251 
	`¥ötf
("Ωc_£rvi˚ faûed wôh %s\n", 
	`Ωc_gë_îr‹
(
Ωc
));

256 
§vr
=
d©a
.
§vrs
; srvr; srv∏§vr->
√xt
) {

257 
	`¥ötf
("NFS SERVER @ %s\n", 
§vr
->
addr
);

259 
	`‰ì_nfs_§vr_li°
(
d©a
.
§vrs
);

261 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

262 
Ωc
=
NULL
;

264 
	}
}

	@examples/nfsclient-listservers.c

20 #ifde‡
AROS


21 
	~"¨os_com∑t.h
"

24 #ifde‡
WIN32


25 
	~<wö32/wö32_com∑t.h
>

26 #¥agm®
commít
(
lib
, "ws2_32.lib")

27 
WSADATA
 
	gwßD©a
;

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~"libnfs.h
"

34 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

36 
nfs_£rvî_li°
 *
§vrs
;

37 
nfs_£rvî_li°
 *
§v
;

39 #ifde‡
WIN32


40 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

41 
	`¥ötf
("FailedÅo start Winsock2\n");

42 
	`exô
(10);

46 #ifde‡
AROS


47 
	`¨os_öô_sockë
();

50 
§vrs
 = 
	`nfs_föd_loˇl_£rvîs
();

51 
§v
=
§vrs
; srv; srv = srv->
√xt
) {

52 
	`¥ötf
("NFS SERVER @ %s\n", 
§v
->
addr
);

54 
	`‰ì_nfs_§vr_li°
(
§vrs
);

56 
	}
}

	@examples/nfsclient-raw.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
WIN32


26 
	~<wö32/wö32_com∑t.h
>

27 #¥agm®
commít
(
lib
, "ws2_32.lib")

28 
WSADATA
 
	gwßD©a
;

30 
	#SERVER
 "10.10.10.11"

	)

31 
	#EXPORT
 "/d©a/SNAP-4"

	)

33 #ifde‡
HAVE_POLL_H


34 
	~<pﬁl.h
>

37 #ifde‡
HAVE_NETINET_IN_H


38 
	~<√töë/ö.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~"libnfs.h
"

45 
	~"libnfs-øw.h
"

46 
	~"libnfs-øw-mou¡.h
"

47 
	~"libnfs-øw-nfs.h
"

48 
	~"libnfs-øw-p‹tm≠.h
"

49 
	~"libnfs-øw-rquŸa.h
"

51 
	s˛õ¡
 {

52 *
	m£rvî
;

53 *
	mexp‹t
;

54 
uöt32_t
 
	mmou¡_p‹t
;

55 
uöt32_t
 
	mrquŸa_p‹t
;

56 
	mis_föished
;

57 
nfs_fh3
 
	mroŸfh
;

60 
	$rquŸa_gëquŸa_cb
(
Ωc_c⁄ãxt
 *
Ωc
 
_U_
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

62 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

65 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

66 
	`¥ötf
("rquŸa/gëquŸ®ˇŒ faûed wôh \"%s\"\n", (*)
d©a
);

67 
	`exô
(10);

69 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

70 
	`¥ötf
("rquŸa/gëquŸ®ˇŒÅÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

71 
	`exô
(10);

74 
	`¥ötf
("rquotaÑesponded ok\n");

75 
˛õ¡
->
is_föished
 = 1;

76 
	}
}

78 
	$rquŸa_c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
, *
¥iv©e_d©a
)

80 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

82 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

83 
	`¥ötf
("c⁄√˘i⁄ÅÿRPC.RQUOTAD o¿£rvî %†Áûed\n", 
˛õ¡
->
£rvî
);

84 
	`exô
(10);

87 
	`¥ötf
("C⁄√˘edÅÿRPC.RQUOTAD o¿%s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
rquŸa_p‹t
);

88 
	`¥ötf
("Send GETQUOTAÑequest for uid 100\n");

89 i‡(
	`Ωc_rquŸa1_gëquŸa_èsk
(
Ωc
, 
rquŸa_gëquŸa_cb
, 
EXPORT
, 100, 
˛õ¡
Ë=
NULL
) {

90 
	`¥ötf
("FailedÅo send getquotaÑequest\n");

91 
	`exô
(10);

93 
	}
}

95 
	$a˛_gëa˛_cb
(
Ωc_c⁄ãxt
 *
Ωc
 
_U_
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

97 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

98 
GETACL3ªs
 *
ªs
 = 
d©a
;

100 
	`¥ötf
("Got NFSACL/GETACLÑeply\n");

102 i‡(
°©us
 =
RPC_STATUS_SUCCESS
) {

103 
	`¥ötf
("GŸá¿ACL : ACL sètus:%d\n", 
ªs
->
°©us
);

104 i‡(
ªs
->
°©us
 =
NFS3_OK
) {

105 
i
;

106 
	`¥ötf
("ACL MASK 0x%08x\n", 
ªs
->
GETACL3ªs_u
.
ªsok
.
mask
);

107 
	`¥ötf
("NUM ACE %d\n", 
ªs
->
GETACL3ªs_u
.
ªsok
.
a˚_cou¡
);

108 
i
=0; i<
ªs
->
GETACL3ªs_u
.
ªsok
.
a˚
.
a˚_Àn
; i++) {

109 
	`¥ötf
("Ty≥:0x%08x\n", 
ªs
->
GETACL3ªs_u
.
ªsok
.
a˚
.
a˚_vÆ
[
i
].
ty≥
);

110 
	`¥ötf
("ID:%d\n", 
ªs
->
GETACL3ªs_u
.
ªsok
.
a˚
.
a˚_vÆ
[
i
].
id
);

111 
	`¥ötf
("Pîm:0x%08x\n", 
ªs
->
GETACL3ªs_u
.
ªsok
.
a˚
.
a˚_vÆ
[
i
].
≥rm
);

116 
	`¥ötf
("Disconnect socket fromÇfs server\n");

117 i‡(
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect") != 0) {

118 
	`¥ötf
("FailedÅo disconnect socketÅoÇfs\n");

119 
	`exô
(10);

122 
	`¥ötf
("C⁄√˘ÅÿRPC.RQUOTAD o¿%s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
rquŸa_p‹t
);

123 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
˛õ¡
->
£rvî
, clõ¡->
rquŸa_p‹t
, 
rquŸa_c⁄√˘_cb
, client) != 0) {

124 
	`¥ötf
("FailedÅo start connection\n");

125 
	`exô
(10);

127 
	}
}

129 
	$a˛_nuŒ_cb
(
Ωc_c⁄ãxt
 *
Ωc
 
_U_
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

131 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

132 
GETACL3¨gs
 
¨gs
;

134 
	`¥ötf
("Got NFSACL/NULLÑeply\n");

135 
	`¥ötf
("Get ACL forÑoot handle\n");

137 
¨gs
.
dú
 = 
˛õ¡
->
roŸfh
;

138 
¨gs
.
mask
 = 
NFSACL_MASK_ACL_ENTRY
|
NFSACL_MASK_ACL_COUNT
|
NFSACL_MASK_ACL_DEFAULT_ENTRY
|
NFSACL_MASK_ACL_DEFAULT_COUNT
;

139 i‡(
	`Ωc_nfß˛3_gëa˛_èsk
(
Ωc
, 
a˛_gëa˛_cb
, &
¨gs
, 
˛õ¡
Ë=
NULL
) {

140 
	`¥ötf
("FailedÅo send getaclÑequest\n");

141 
	`exô
(10);

144 
	}
}

146 
	$nfs_fsöfo_cb
(
Ωc_c⁄ãxt
 *
Ωc
 
_U_
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

148 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

149 
FSINFO3ªs
 *
ªs
 = 
d©a
;

151 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

152 
	`¥ötf
("nfs/fsöfÿˇŒ faûed wôh \"%s\"\n", (*)
d©a
);

153 
	`exô
(10);

155 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

156 
	`¥ötf
("nfs/fsöfÿˇŒÅÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

157 
	`exô
(10);

160 
	`¥ötf
("GotÑeply from server for NFS/FSINFOÖrocedure.\n");

161 
	`¥ötf
("Ród Max:%d\n", ()
ªs
->
FSINFO3ªs_u
.
ªsok
.
πmax
);

162 
	`¥ötf
("WrôêMax:%d\n", ()
ªs
->
FSINFO3ªs_u
.
ªsok
.
wtmax
);

164 
	`¥ötf
("Send NFSACL/NULLÑequest\n");

165 i‡(
	`Ωc_nfß˛3_nuŒ_èsk
(
Ωc
, 
a˛_nuŒ_cb
, 
˛õ¡
Ë=
NULL
) {

166 
	`¥ötf
("FailedÅo sendácl/nullÑequest\n");

167 
	`exô
(10);

169 
	}
}

172 
	$nfs_c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
, *
¥iv©e_d©a
)

174 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

175 
FSINFO3¨gs
 
¨gs
;

177 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

178 
	`¥ötf
("c⁄√˘i⁄ÅÿRPC.MOUNTD o¿£rvî %†Áûed\n", 
˛õ¡
->
£rvî
);

179 
	`exô
(10);

182 
	`¥ötf
("C⁄√˘edÅÿRPC.NFSD o¿%s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
mou¡_p‹t
);

183 
	`¥ötf
("Send FSINFOÑequest\n");

184 
¨gs
.
f§oŸ
 = 
˛õ¡
->
roŸfh
;

185 i‡(
	`Ωc_nfs3_fsöfo_èsk
(
Ωc
, 
nfs_fsöfo_cb
, &
¨gs
, 
˛õ¡
Ë=
NULL
) {

186 
	`¥ötf
("FailedÅo send fsinfoÑequest\n");

187 
	`exô
(10);

189 
	}
}

191 
	$mou¡_m¡_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

193 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

194 
mou¡ªs3
 *
m¡
 = 
d©a
;

196 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

197 
	`¥ötf
("mou¡/m¡ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

198 
	`exô
(10);

200 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

201 
	`¥ötf
("mou¡/m¡ cÆ»tÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

202 
	`exô
(10);

205 
	`¥ötf
("GotÑeply from server for MOUNT/MNTÖrocedure.\n");

206 
˛õ¡
->
roŸfh
.
d©a
.
d©a_Àn
 = 
m¡
->
mou¡ªs3_u
.
mou¡öfo
.
fh™dÀ
.
fh™dÀ3_Àn
;

207 
˛õ¡
->
roŸfh
.
d©a
.
d©a_vÆ
 = 
	`mÆloc
(˛õ¡->roŸfh.d©a.
d©a_Àn
);

208 
	`mem˝y
(
˛õ¡
->
roŸfh
.
d©a
.
d©a_vÆ
, 
m¡
->
mou¡ªs3_u
.
mou¡öfo
.
fh™dÀ
.
fh™dÀ3_vÆ
, clõ¡->roŸfh.d©a.
d©a_Àn
);

210 
	`¥ötf
("Disconnect socket from mountd server\n");

211 i‡(
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect") != 0) {

212 
	`¥ötf
("FailedÅo disconnect socketÅo mountd\n");

213 
	`exô
(10);

216 
	`¥ötf
("C⁄√˘ÅÿRPC.NFSD o¿%s:%d\n", 
˛õ¡
->
£rvî
, 2049);

217 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
˛õ¡
->
£rvî
, 2049, 
nfs_c⁄√˘_cb
, client) != 0) {

218 
	`¥ötf
("FailedÅo start connection\n");

219 
	`exô
(10);

221 
	}
}

225 
	$mou¡_exp‹t_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

227 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

228 
exp‹ts
 
exp‹t
 = *”xp‹t†*)
d©a
;

230 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

231 
	`¥ötf
("mou¡ÇuŒ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

232 
	`exô
(10);

234 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

235 
	`¥ötf
("mou¡ÇuŒ cÆ»tÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

236 
	`exô
(10);

239 
	`¥ötf
("GotÑeply from server for MOUNT/EXPORTÖrocedure.\n");

240 
exp‹t
 !
NULL
) {

241 
	`¥ötf
("Exp‹t: %s\n", 
exp‹t
->
ex_dú
);

242 
exp‹t
 =Éxp‹t->
ex_√xt
;

244 
	`¥ötf
("Síd MOUNT/MNT comm™d f‹ %s\n", 
˛õ¡
->
exp‹t
);

245 i‡(
	`Ωc_mou¡3_m¡_èsk
(
Ωc
, 
mou¡_m¡_cb
, 
˛õ¡
->
exp‹t
, clõ¡Ë=
NULL
) {

246 
	`¥ötf
("FailedÅo send mntÑequest\n");

247 
	`exô
(10);

249 
	}
}

251 
	$mou¡_nuŒ_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

253 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

255 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

256 
	`¥ötf
("mou¡ÇuŒ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

257 
	`exô
(10);

259 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

260 
	`¥ötf
("mou¡ÇuŒ cÆ»tÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

261 
	`exô
(10);

264 
	`¥ötf
("GotÑeply from server for MOUNT/NULLÖrocedure.\n");

265 
	`¥ötf
("Send MOUNT/EXPORT command\n");

266 i‡(
	`Ωc_mou¡3_exp‹t_èsk
(
Ωc
, 
mou¡_exp‹t_cb
, 
˛õ¡
Ë=
NULL
) {

267 
	`¥ötf
("FailedÅo sendÉxportÑequest\n");

268 
	`exô
(10);

270 
	}
}

272 
	$mou¡_c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
, *
¥iv©e_d©a
)

274 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

276 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

277 
	`¥ötf
("c⁄√˘i⁄ÅÿRPC.MOUNTD o¿£rvî %†Áûed\n", 
˛õ¡
->
£rvî
);

278 
	`exô
(10);

281 
	`¥ötf
("C⁄√˘edÅÿRPC.MOUNTD o¿%s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
mou¡_p‹t
);

282 
	`¥ötf
("Send NULLÑequestÅo check if RPC.MOUNTD isáctuallyÑunning\n");

283 i‡(
	`Ωc_mou¡3_nuŒ_èsk
(
Ωc
, 
mou¡_nuŒ_cb
, 
˛õ¡
Ë=
NULL
) {

284 
	`¥ötf
("FailedÅo sendÇullÑequest\n");

285 
	`exô
(10);

287 
	}
}

290 
	$pm≠_gëp‹t2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

292 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

294 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

295 
	`¥ötf
("p‹tm≠≥∏gëp‹àˇŒ faûed wôh \"%s\"\n", (*)
d©a
);

296 
	`exô
(10);

298 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

299 
	`¥ötf
("p‹tm≠≥∏gëp‹àˇŒÅÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

300 
	`exô
(10);

303 
˛õ¡
->
mou¡_p‹t
 = *(
uöt32_t
 *)
d©a
;

304 
	`¥ötf
("GETPORTÑëu∫ed RPC.MOUNTD i†⁄Ö‹t:%d\n", 
˛õ¡
->
mou¡_p‹t
);

305 i‡(
˛õ¡
->
mou¡_p‹t
 == 0) {

306 
	`¥ötf
("RPC.MOUNTD i†nŸávaûabÀ o¿£rvî : %s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
mou¡_p‹t
);

307 
	`exô
(10);

310 
	`¥ötf
("Disconnect socket fromÖortmap server\n");

311 i‡(
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect") != 0) {

312 
	`¥ötf
("FailedÅo disconnect socketÅoÖortmapper\n");

313 
	`exô
(10);

316 
	`¥ötf
("C⁄√˘ÅÿRPC.MOUNTD o¿%s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
mou¡_p‹t
);

317 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
˛õ¡
->
£rvî
, clõ¡->
mou¡_p‹t
, 
mou¡_c⁄√˘_cb
, client) != 0) {

318 
	`¥ötf
("FailedÅo start connection\n");

319 
	`exô
(10);

321 
	}
}

323 
	$pm≠_gëp‹t1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

325 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

327 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

328 
	`¥ötf
("p‹tm≠≥∏gëp‹àˇŒ faûed wôh \"%s\"\n", (*)
d©a
);

329 
	`exô
(10);

331 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

332 
	`¥ötf
("p‹tm≠≥∏gëp‹àˇŒÅÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

333 
	`exô
(10);

336 
˛õ¡
->
rquŸa_p‹t
 = *(
uöt32_t
 *)
d©a
;

337 
	`¥ötf
("GETPORTÑëu∫ed RPC.RQUOTAD o¿p‹t:%d\n", 
˛õ¡
->
rquŸa_p‹t
);

338 i‡(
˛õ¡
->
rquŸa_p‹t
 == 0) {

339 
	`¥ötf
("RPC.RQUOTAD i†nŸávaûabÀ o¿£rvî : %s:%d\n", 
˛õ¡
->
£rvî
, clõ¡->
rquŸa_p‹t
);

343 
	`¥ötf
("Send getportÑequestásking for MOUNTÖort\n");

344 i‡(
	`Ωc_pm≠2_gëp‹t_èsk
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
IPPROTO_TCP
, 
pm≠_gëp‹t2_cb
, 
˛õ¡
Ë=
NULL
) {

345 
	`¥ötf
("FailedÅo send getportÑequest\n");

346 
	`exô
(10);

348 
	}
}

350 
	$pm≠_dump_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

352 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

353 
pm≠2_dump_ªsu…
 *
dr
 = 
d©a
;

354 
pm≠2_m≠pög_li°
 *
li°
 = 
dr
->list;

356 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

357 
	`¥ötf
("p‹tm≠≥∏nuŒ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

358 
	`exô
(10);

360 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

361 
	`¥ötf
("p‹tm≠≥∏nuŒ cÆ»tÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

362 
	`exô
(10);

365 
	`¥ötf
("GotÑeply from server for PORTMAP/DUMPÖrocedure.\n");

366 
li°
) {

367 
	`¥ötf
("Prog:%d Vers:%d Protocol:%d Port:%d\n",

368 
li°
->
m≠
.
¥og
,

369 
li°
->
m≠
.
vîs
,

370 
li°
->
m≠
.
¥Ÿ
,

371 
li°
->
m≠
.
p‹t
);

372 
li°
 =Üi°->
√xt
;

375 
	`¥ötf
("Send getportÑequestásking for MOUNTÖort\n");

376 i‡(
	`Ωc_pm≠2_gëp‹t_èsk
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V1
, 
IPPROTO_TCP
, 
pm≠_gëp‹t1_cb
, 
˛õ¡
Ë=
NULL
) {

377 
	`¥ötf
("FailedÅo send getportÑequest\n");

378 
	`exô
(10);

380 
	}
}

382 
	$pm≠_nuŒ_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

384 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

386 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

387 
	`¥ötf
("p‹tm≠≥∏nuŒ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

388 
	`exô
(10);

390 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

391 
	`¥ötf
("p‹tm≠≥∏nuŒ cÆ»tÿ£rvî %†Áûed, sètus:%d\n", 
˛õ¡
->
£rvî
, 
°©us
);

392 
	`exô
(10);

395 
	`¥ötf
("GotÑeply from server for PORTMAP/NULLÖrocedure.\n");

396 
	`¥ötf
("Send PMAP/DUMP command\n");

397 i‡(
	`Ωc_pm≠2_dump_èsk
(
Ωc
, 
pm≠_dump_cb
, 
˛õ¡
Ë=
NULL
) {

398 
	`¥ötf
("FailedÅo send getportÑequest\n");

399 
	`exô
(10);

401 
	}
}

403 
	$pm≠_c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
, *
¥iv©e_d©a
)

405 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

407 
	`¥ötf
("pm≠_c⁄√˘_cb sètus:%d.\n", 
°©us
);

408 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

409 
	`¥ötf
("c⁄√˘i⁄Åÿp‹tm≠≥∏⁄ sîvî %†Áûed\n", 
˛õ¡
->
£rvî
);

410 
	`exô
(10);

413 
	`¥ötf
("Send NULLÑequestÅo check ifÖortmapper isáctuallyÑunning\n");

414 i‡(
	`Ωc_pm≠2_nuŒ_èsk
(
Ωc
, 
pm≠_nuŒ_cb
, 
˛õ¡
Ë=
NULL
) {

415 
	`¥ötf
("FailedÅo sendÇullÑequest\n");

416 
	`exô
(10);

418 
	}
}

421 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

423 
Ωc_c⁄ãxt
 *
Ωc
;

424 
pﬁlfd
 
pfd
;

425 
˛õ¡
 client;

427 #ifde‡
WIN32


428 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

429 
	`¥ötf
("FailedÅo start Winsock2\n");

430 
	`exô
(10);

434 
Ωc
 = 
	`Ωc_öô_c⁄ãxt
();

435 i‡(
Ωc
 =
NULL
) {

436 
	`¥ötf
("failedÅo init context\n");

437 
	`exô
(10);

440 
˛õ¡
.
£rvî
 = 
SERVER
;

441 
˛õ¡
.
exp‹t
 = 
EXPORT
;

442 
˛õ¡
.
is_föished
 = 0;

443 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
˛õ¡
.
£rvî
, 111, 
pm≠_c⁄√˘_cb
, &client) != 0) {

444 
	`¥ötf
("FailedÅo start connection\n");

445 
	`exô
(10);

449 
pfd
.
fd
 = 
	`Ωc_gë_fd
(
Ωc
);

450 
pfd
.
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

452 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

453 
	`¥ötf
("Poll failed");

454 
	`exô
(10);

456 i‡(
	`Ωc_£rvi˚
(
Ωc
, 
pfd
.
ªvíts
) < 0) {

457 
	`¥ötf
("rpc_service failed\n");

460 i‡(
˛õ¡
.
is_föished
) {

465 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

466 
Ωc
=
NULL
;

467 
	`¥ötf
("nfsclient finished\n");

469 
	}
}

	@examples/nfsclient-sync.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 #ifde‡
AROS


28 
	~"¨os_com∑t.h
"

31 #ifde‡
WIN32


32 
	~<wö32/wö32_com∑t.h
>

33 #¥agm®
commít
(
lib
, "ws2_32.lib")

34 
WSADATA
 
	gwßD©a
;

35 
	#PRId64
 "Œ"

	)

37 
	~<öây≥s.h
>

38 
	~<°rög.h
>

39 
	~<sys/°©.h
>

40 #i‚de‡
AROS


41 
	~<sys/°©vfs.h
>

45 #ifde‡
HAVE_UNISTD_H


46 
	~<uni°d.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°döt.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/°©.h
>

54 
	~<f˙é.h
>

55 
	~"libnfs.h
"

56 
	~"libnfs-øw.h
"

57 
	~"libnfs-øw-mou¡.h
"

59 
	s˛õ¡
 {

60 *
	m£rvî
;

61 *
	mexp‹t
;

62 
uöt32_t
 
	mmou¡_p‹t
;

63 
	mis_föished
;

67 
	gbuf
[3*1024*1024+337];

69 
	$¥öt_ußge
()

71 
	`Ârötf
(
°dîr
, "Usage:Çfsclient-sync [-?|--help] [--usage] <url>\n");

72 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

77 
ªt
;

78 
˛õ¡
 client;

79 
nfs_°©_64
 
°
;

80 
nfsdú
 *nfsdir;

81 
nfsdúít
 *nfsdirent;

82 c⁄° *
uæ
 = 
NULL
;

83 *
£rvî
 = 
NULL
, *
∑th
 = NULL, *
°Ω
;

85 #ifde‡
WIN32


86 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

87 
	`¥ötf
("FailedÅo start Winsock2\n");

88 
	`exô
(10);

92 #ifde‡
AROS


93 
	`¨os_öô_sockë
();

96 
uæ
 = 
¨gv
[1];

98 i‡(
uæ
 =
NULL
) {

99 
	`Ârötf
(
°dîr
, "No URL specified.\n");

100 
	`¥öt_ußge
();

101 
	`exô
(0);

104 i‡(
	`°∫cmp
(
uæ
, "nfs://", 6)) {

105 
	`Ârötf
(
°dîr
, "Invalid URL specified.\n");

106 
	`¥öt_ußge
();

107 
	`exô
(0);

110 
£rvî
 = 
	`°rdup
(
uæ
 + 6);

111 i‡(
£rvî
 =
NULL
) {

112 
	`Ârötf
(
°dîr
, "FailedÅo strdup server string\n");

113 
	`exô
(10);

115 i‡(
£rvî
[0] == '/' || server[0] == '\0') {

116 
	`Ârötf
(
°dîr
, "Invalid server string.\n");

117 
	`‰ì
(
£rvî
);

118 
	`exô
(10);

120 
°Ω
 = 
	`°rchr
(
£rvî
, '/');

121 i‡(
°Ω
 =
NULL
) {

122 
	`Ârötf
(
°dîr
, "Invalid URL specified.\n");

123 
	`¥öt_ußge
();

124 
	`‰ì
(
£rvî
);

125 
	`exô
(0);

127 
∑th
 = 
	`°rdup
(
°Ω
);

128 i‡(
∑th
 =
NULL
) {

129 
	`Ârötf
(
°dîr
, "FailedÅo strdup server string\n");

130 
	`‰ì
(
£rvî
);

131 
	`exô
(10);

133 i‡(
∑th
[0] != '/') {

134 
	`Ârötf
(
°dîr
, "InvalidÖath.\n");

135 
	`‰ì
(
£rvî
);

136 
	`‰ì
(
∑th
);

137 
	`exô
(10);

139 *
°Ω
 = 0;

141 
˛õ¡
.
£rvî
 = server;

142 
˛õ¡
.
exp‹t
 = 
∑th
;

143 
˛õ¡
.
is_föished
 = 0;

146 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

147 i‡(
nfs
 =
NULL
) {

148 
	`¥ötf
("failedÅo init context\n");

149 
föished
;

152 
ªt
 = 
	`nfs_mou¡
(
nfs
, 
˛õ¡
.
£rvî
, clõ¡.
exp‹t
);

153 i‡(
ªt
 != 0) {

154 
	`¥ötf
("FaûedÅÿmou¡Çf†sh¨ê: %s\n", 
	`nfs_gë_îr‹
(
nfs
));

155 
föished
;

159 
ªt
 = 
	`nfs_›ídú
(
nfs
, "/", &
nfsdú
);

160 i‡(
ªt
 != 0) {

161 
	`¥ötf
("FaûedÅÿ›ídú(\"/\"Ë%s\n", 
	`nfs_gë_îr‹
(
nfs
));

162 
	`exô
(10);

164 (
nfsdúít
 = 
	`nfs_ªaddú
(
nfs
, 
nfsdú
)Ë!
NULL
) {

165 
∑th
[1024];

167 i‡(!
	`°rcmp
(
nfsdúít
->
«me
, ".") || !strcmp(nfsdirent->name, "..")) {

171 
	`•rötf
(
∑th
, "%s/%s", "/", 
nfsdúít
->
«me
);

172 
ªt
 = 
	`nfs_°©64
(
nfs
, 
∑th
, &
°
);

173 i‡(
ªt
 != 0) {

174 
	`Ârötf
(
°dîr
, "FaûedÅÿ°©(%sË%s\n", 
∑th
, 
	`nfs_gë_îr‹
(
nfs
));

178 
°
.
nfs_mode
 & 
S_IFMT
) {

179 #i‚de‡
WIN32


180 
S_IFLNK
:

182 
S_IFREG
:

183 
	`¥ötf
("-");

185 
S_IFDIR
:

186 
	`¥ötf
("d");

188 
S_IFCHR
:

189 
	`¥ötf
("c");

191 
S_IFBLK
:

192 
	`¥ötf
("b");

195 
	`¥ötf
("%c%c%c",

196 "-r"[!!(
°
.
nfs_mode
 & 
S_IRUSR
)],

197 "-w"[!!(
°
.
nfs_mode
 & 
S_IWUSR
)],

198 "-x"[!!(
°
.
nfs_mode
 & 
S_IXUSR
)]

200 
	`¥ötf
("%c%c%c",

201 "-r"[!!(
°
.
nfs_mode
 & 
S_IRGRP
)],

202 "-w"[!!(
°
.
nfs_mode
 & 
S_IWGRP
)],

203 "-x"[!!(
°
.
nfs_mode
 & 
S_IXGRP
)]

205 
	`¥ötf
("%c%c%c",

206 "-r"[!!(
°
.
nfs_mode
 & 
S_IROTH
)],

207 "-w"[!!(
°
.
nfs_mode
 & 
S_IWOTH
)],

208 "-x"[!!(
°
.
nfs_mode
 & 
S_IXOTH
)]

210 
	`¥ötf
(" %2d", ()
°
.
nfs_∆ök
);

211 
	`¥ötf
(" %5d", ()
°
.
nfs_uid
);

212 
	`¥ötf
(" %5d", ()
°
.
nfs_gid
);

213 
	`¥ötf
(" %12" 
PRId64
, 
°
.
nfs_size
);

215 
	`¥ötf
(" %s\n", 
nfsdúít
->
«me
);

217 
	`nfs_˛o£dú
(
nfs
, 
nfsdú
);

220 
föished
:

221 
	`‰ì
(
£rvî
);

222 
	`‰ì
(
∑th
);

223 i‡(
nfs
 !
NULL
) {

224 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

227 
	}
}

	@examples/portmap-client.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
WIN32


26 
	~<wö32/wö32_com∑t.h
>

27 #¥agm®
commít
(
lib
, "ws2_32.lib")

28 
WSADATA
 
	gwßD©a
;

31 #ifde‡
HAVE_POLL_H


32 
	~<pﬁl.h
>

35 #ifde‡
HAVE_NETINET_IN_H


36 
	~<√töë/ö.h
>

39 #ifde‡
HAVE_NETDB_H


40 
	~<√tdb.h
>

43 
	~<°dio.h
>

45 #ifde‡
HAVE_STDLIB_H


46 
	~<°dlib.h
>

49 #ifde‡
HAVE_STRING_H


50 
	~<°rög.h
>

53 #ifde‡
HAVE_SYS_SOCKET_H


54 
	~<sys/sockë.h
>

57 
	~<time.h
>

58 
	~"libnfs.h
"

59 
	~"libnfs-øw.h
"

60 
	~"libnfs-øw-mou¡.h
"

61 
	~"libnfs-øw-nfs.h
"

62 
	~"libnfs-øw-p‹tm≠.h
"

63 
	~"libnfs-øw-rquŸa.h
"

65 
	s˛õ¡
 {

66 
	mis_föished
;

69 
	$pm≠2_dump_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

71 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

72 
pm≠2_dump_ªsu…
 *
dr
 = 
d©a
;

73 
pm≠2_m≠pög_li°
 *
li°
 = 
dr
->list;

75 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

76 
	`¥ötf
("PORTMAP2/DUMP cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

77 
	`exô
(10);

79 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

80 
	`¥ötf
("PORTMAP2/DUMP cÆ»Áûed, sètus:%d\n", 
°©us
);

81 
	`exô
(10);

84 
	`¥ötf
("PORTMAP2/DUMP:\n");

85 
li°
) {

86 
	`¥ötf
(" Prog:%d Vers:%d Protocol:%d Port:%d\n",

87 
li°
->
m≠
.
¥og
,

88 
li°
->
m≠
.
vîs
,

89 
li°
->
m≠
.
¥Ÿ
,

90 
li°
->
m≠
.
p‹t
);

91 
li°
 =Üi°->
√xt
;

93 
˛õ¡
->
is_föished
 = 1;

94 
	}
}

96 
	$pm≠3_dump_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

98 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

99 
pm≠3_dump_ªsu…
 *
dr
 = 
d©a
;

100 
pm≠3_m≠pög_li°
 *
li°
 = 
dr
->list;

102 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

103 
	`¥ötf
("PORTMAP3/DUMP cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

104 
	`exô
(10);

106 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

107 
	`¥ötf
("PORTMAP3/DUMP cÆ»Áûed, sètus:%d\n", 
°©us
);

108 
	`exô
(10);

111 
	`¥ötf
("PORTMAP3/DUMP:\n");

112 
li°
) {

113 
	`¥ötf
(" Prog:%d Vers:%d Netid:%s Addr:%s Owner:%s\n",

114 
li°
->
m≠
.
¥og
,

115 
li°
->
m≠
.
vîs
,

116 
li°
->
m≠
.
√tid
,

117 
li°
->
m≠
.
addr
,

118 
li°
->
m≠
.
ow√r
);

119 
li°
 =Üi°->
√xt
;

121 
˛õ¡
->
is_föished
 = 1;

122 
	}
}

124 
	$pm≠3_gëaddr_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

126 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

127 
pm≠3_°rög_ªsu…
 *
g¨
 = 
d©a
;

129 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

130 
	`¥ötf
("PORTMAP3/GETADDR cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

131 
	`exô
(10);

133 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

134 
	`¥ötf
("PORTMAP3/GETADDR cÆ»Áûed, sètus:%d\n", 
°©us
);

135 
	`exô
(10);

138 
	`¥ötf
("PORTMAP3/GETADDR:\n");

139 
	`¥ötf
(" Addr:%s\n", 
g¨
->
addr
);

141 
˛õ¡
->
is_föished
 = 1;

142 
	}
}

144 
	$pm≠2_£t_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

146 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

147 
uöt32_t
 
ªs
 = *(uöt32_à*)
d©a
;

149 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

150 
	`¥ötf
("PORTMAP2/SET cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

151 
	`exô
(10);

153 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

154 
	`¥ötf
("PORTMAP2/SET cÆ»Áûed, sètus:%d\n", 
°©us
);

155 
	`exô
(10);

158 
	`¥ötf
("PORTMAP2/SET:\n");

159 
	`¥ötf
(" Res:%d\n", 
ªs
);

161 
˛õ¡
->
is_föished
 = 1;

162 
	}
}

164 
	$pm≠2_un£t_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

166 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

167 
uöt32_t
 
ªs
 = *(uöt32_à*)
d©a
;

169 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

170 
	`¥ötf
("PORTMAP2/UNSET cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

171 
	`exô
(10);

173 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

174 
	`¥ötf
("PORTMAP2/UNSET cÆ»Áûed, sètus:%d\n", 
°©us
);

175 
	`exô
(10);

178 
	`¥ötf
("PORTMAP2/UNSET:\n");

179 
	`¥ötf
(" Res:%d\n", 
ªs
);

181 
˛õ¡
->
is_föished
 = 1;

182 
	}
}

184 
	$pm≠3_£t_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

186 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

187 
uöt32_t
 
ªs
 = *(uöt32_à*)
d©a
;

189 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

190 
	`¥ötf
("PORTMAP3/SET cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

191 
	`exô
(10);

193 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

194 
	`¥ötf
("PORTMAP3/SET cÆ»Áûed, sètus:%d\n", 
°©us
);

195 
	`exô
(10);

198 
	`¥ötf
("PORTMAP3/SET:\n");

199 
	`¥ötf
(" Res:%d\n", 
ªs
);

201 
˛õ¡
->
is_föished
 = 1;

202 
	}
}

204 
	$pm≠3_un£t_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

206 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

207 
uöt32_t
 
ªs
 = *(uöt32_à*)
d©a
;

209 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

210 
	`¥ötf
("PORTMAP3/UNSET cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

211 
	`exô
(10);

213 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

214 
	`¥ötf
("PORTMAP3/UNSET cÆ»Áûed, sètus:%d\n", 
°©us
);

215 
	`exô
(10);

218 
	`¥ötf
("PORTMAP3/UNSET:\n");

219 
	`¥ötf
(" Res:%d\n", 
ªs
);

221 
˛õ¡
->
is_föished
 = 1;

222 
	}
}

224 
	$pm≠3_gëtime_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

226 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

227 
time_t
 
t
 = *(
uöt32_t
 *)
d©a
;

229 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

230 
	`¥ötf
("PORTMAP3/GETTIME cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

231 
	`exô
(10);

233 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

234 
	`¥ötf
("PORTMAP3/GETTIME cÆ»Áûed, sètus:%d\n", 
°©us
);

235 
	`exô
(10);

238 
	`¥ötf
("PORTMAP3/GETTIME:\n");

239 
	`¥ötf
(" Time:%d %s\n", ()
t
, 
	`˘ime
(&t));

241 
˛õ¡
->
is_föished
 = 1;

242 
	}
}

244 
	$pm≠3_uaddr2èddr_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

246 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

247 
pm≠3_√tbuf
 *
nb
 = 
d©a
;

248 
sockaddr_°‹age
 *
ss
;

249 
ho°
[256], 
p‹t
[6];

250 
i
;

252 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

253 
	`¥ötf
("PORTMAP3/UADDR2TADDR cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

254 
	`exô
(10);

256 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

257 
	`¥ötf
("PORTMAP3/UADDR2TADDR cÆ»Áûed, sètus:%d\n", 
°©us
);

258 
	`exô
(10);

261 
	`¥ötf
("PORTMAP3/UADDR2TADDR:\n");

262 
	`¥ötf
(" MaxLí:%d\n", 
nb
->
maxÀn
);

263 
	`¥ötf
(" ");

264 
i
 = 0; i < 
nb
->
maxÀn
; i++) {

265 
	`¥ötf
("%02x ", 
nb
->
buf
.
buf_vÆ
[
i
]);

266 i‡(
i
 %16 == 15) {

267 
	`¥ötf
("\n ");

270 
	`¥ötf
("\n");

271 
	`¥ötf
(" ---\n");

272 
ss
 = (
sockaddr_°‹age
 *)&
nb
->
buf
.
buf_vÆ
[0];

273 
	`gë«meöfo
((
sockaddr
 *)
ss
, (
sockaddr_°‹age
),

274 &
ho°
[0], (ho°), &
p‹t
[0], (port),

275 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

276 
ss
->
ss_Ámûy
) {

277 
AF_INET
:

278 
	`¥ötf
(" IPv4: %s:%s\n", &
ho°
[0], &
p‹t
[0]);

280 
AF_INET6
:

281 
	`¥ötf
(" IPv6: %s:%s\n", &
ho°
[0], &
p‹t
[0]);

284 
˛õ¡
->
is_föished
 = 1;

285 
	}
}

287 
	$pm≠2_nuŒ_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

289 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

291 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

292 
	`¥ötf
("PORTMAP2/NULL cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

293 
	`exô
(10);

295 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

296 
	`¥ötf
("PORTMAP2/NULL cÆ»Áûed, sètus:%d\n", 
°©us
);

297 
	`exô
(10);

300 
	`¥ötf
("PORTMAP2/NULLÑespondedánd server isálive\n");

301 
˛õ¡
->
is_föished
 = 1;

302 
	}
}

304 
	$pm≠3_nuŒ_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

306 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

308 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

309 
	`¥ötf
("PORTMAP3/NULL cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

310 
	`exô
(10);

312 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

313 
	`¥ötf
("PORTMAP3/NULL cÆ»Áûed, sètus:%d\n", 
°©us
);

314 
	`exô
(10);

317 
	`¥ötf
("PORTMAP3/NULLÑespondedánd server isálive\n");

318 
˛õ¡
->
is_föished
 = 1;

319 
	}
}

321 
	$pm≠_nuŒ_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
, *
¥iv©e_d©a
)

323 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

325 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

326 
	`¥ötf
("PORTMAP/NULL cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

327 
	`exô
(10);

329 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

330 
	`¥ötf
("PORTMAP/NULL cÆ»Áûed, sètus:%d\n", 
°©us
);

331 
	`exô
(10);

334 
˛õ¡
->
is_föished
 = 1;

335 
	}
}

337 
	$pm≠_c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
, *
¥iv©e_d©a
)

339 
˛õ¡
 *˛õ¡ = 
¥iv©e_d©a
;

341 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

342 
	`¥ötf
("connectionÅoÖortmapper failed\n");

343 
	`exô
(10);

346 i‡(
	`Ωc_pm≠2_nuŒ_èsk
(
Ωc
, 
pm≠_nuŒ_cb
, 
˛õ¡
Ë=
NULL
) {

347 
	`¥ötf
("FailedÅo sendÇullÑequest\n");

348 
	`exô
(10);

350 
	}
}

353 
	$waô_u¡û_föished
(
Ωc_c⁄ãxt
 *
Ωc
, 
˛õ¡
 *client)

355 
pﬁlfd
 
pfd
;

357 
˛õ¡
->
is_föished
 = 0;

359 
pfd
.
fd
 = 
	`Ωc_gë_fd
(
Ωc
);

360 
pfd
.
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

362 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

363 
	`¥ötf
("Poll failed");

364 
	`exô
(10);

366 i‡(
	`Ωc_£rvi˚
(
Ωc
, 
pfd
.
ªvíts
) < 0) {

367 
	`¥ötf
("rpc_service failed\n");

370 i‡(
˛õ¡
->
is_föished
) {

374 
	}
}

376 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

378 
Ωc_c⁄ãxt
 *
Ωc
;

379 
˛õ¡
 client;

380 *
£rvî
 = 
NULL
;

381 
i
;

382 
nuŒ2
 = 0;

383 
dump2
 = 0;

384 
nuŒ3
 = 0;

385 
£t2
 = 0;

386 
un£t2
 = 0;

387 
£t3
 = 0;

388 
un£t3
 = 0;

389 
gëaddr3
 = 0;

390 
dump3
 = 0;

391 
gëtime3
 = 0;

392 
u2t3
 = 0;

393 
comm™d_found
 = 0;

395 
£t2¥og
, 
£t2vîs
, 
£t2¥Ÿ
, 
£t2p‹t
;

396 
un£t2¥og
, 
un£t2vîs
, 
un£t2¥Ÿ
, 
un£t2p‹t
;

397 
£t3¥og
, 
£t3vîs
;

398 *
£t3√tid
, *
£t3addr
, *
£t3ow√r
;

399 
un£t3¥og
, 
un£t3vîs
;

400 *
un£t3√tid
, *
un£t3addr
, *
un£t3ow√r
;

401 
gëaddr3¥og
, 
gëaddr3vîs
;

402 *
gëaddr3√tid
, *
gëaddr3addr
, *
gëaddr3ow√r
;

403 *
u2t3°rög
;

405 #ifde‡
WIN32


406 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

407 
	`¥ötf
("FailedÅo start Winsock2\n");

408 
	`exô
(10);

412 
Ωc
 = 
	`Ωc_öô_c⁄ãxt
();

413 i‡(
Ωc
 =
NULL
) {

414 
	`¥ötf
("failedÅo init context\n");

415 
	`exô
(10);

418 
i
 = 1; i < 
¨gc
; i++) {

419 i‡(!
	`°rcmp
(
¨gv
[
i
], "dump2")) {

420 
dump2
 = 1;

421 
comm™d_found
++;

422 } i‡(!
	`°rcmp
(
¨gv
[
i
], "null2")) {

423 
nuŒ2
 = 1;

424 
comm™d_found
++;

425 } i‡(!
	`°rcmp
(
¨gv
[
i
], "set2")) {

426 
£t2
 = 1;

427 
£t2¥og
 = 
	`©oi
(
¨gv
[++
i
]);

428 
£t2vîs
 = 
	`©oi
(
¨gv
[++
i
]);

429 
£t2¥Ÿ
 = 
	`©oi
(
¨gv
[++
i
]);

430 
£t2p‹t
 = 
	`©oi
(
¨gv
[++
i
]);

431 
comm™d_found
++;

432 } i‡(!
	`°rcmp
(
¨gv
[
i
], "unset2")) {

433 
un£t2
 = 1;

434 
un£t2¥og
 = 
	`©oi
(
¨gv
[++
i
]);

435 
un£t2vîs
 = 
	`©oi
(
¨gv
[++
i
]);

436 
un£t2¥Ÿ
 = 
	`©oi
(
¨gv
[++
i
]);

437 
un£t2p‹t
 = 
	`©oi
(
¨gv
[++
i
]);

438 
comm™d_found
++;

439 } i‡(!
	`°rcmp
(
¨gv
[
i
], "dump3")) {

440 
dump3
 = 1;

441 
comm™d_found
++;

442 } i‡(!
	`°rcmp
(
¨gv
[
i
], "gettime3")) {

443 
gëtime3
 = 1;

444 
comm™d_found
++;

445 } i‡(!
	`°rcmp
(
¨gv
[
i
], "u2t3")) {

446 
u2t3
 = 1;

447 
u2t3°rög
 = 
¨gv
[++
i
];

448 
comm™d_found
++;

449 } i‡(!
	`°rcmp
(
¨gv
[
i
], "getaddr3")) {

450 
gëaddr3
 = 1;

451 
gëaddr3¥og
 = 
	`©oi
(
¨gv
[++
i
]);

452 
gëaddr3vîs
 = 
	`©oi
(
¨gv
[++
i
]);

453 
gëaddr3√tid
 = 
¨gv
[++
i
];

454 
gëaddr3addr
 = 
¨gv
[++
i
];

455 
gëaddr3ow√r
 = 
¨gv
[++
i
];

456 
comm™d_found
++;

457 } i‡(!
	`°rcmp
(
¨gv
[
i
], "set3")) {

458 
£t3
 = 1;

459 
£t3¥og
 = 
	`©oi
(
¨gv
[++
i
]);

460 
£t3vîs
 = 
	`©oi
(
¨gv
[++
i
]);

461 
£t3√tid
 = 
¨gv
[++
i
];

462 
£t3addr
 = 
¨gv
[++
i
];

463 
£t3ow√r
 = 
¨gv
[++
i
];

464 
comm™d_found
++;

465 } i‡(!
	`°rcmp
(
¨gv
[
i
], "unset3")) {

466 
un£t3
 = 1;

467 
un£t3¥og
 = 
	`©oi
(
¨gv
[++
i
]);

468 
un£t3vîs
 = 
	`©oi
(
¨gv
[++
i
]);

469 
un£t3√tid
 = 
¨gv
[++
i
];

470 
un£t3addr
 = 
¨gv
[++
i
];

471 
un£t3ow√r
 = 
¨gv
[++
i
];

472 
comm™d_found
++;

473 } i‡(!
	`°rcmp
(
¨gv
[
i
], "null3")) {

474 
nuŒ3
 = 1;

475 
comm™d_found
++;

477 
£rvî
 = 
¨gv
[
i
];

480 i‡(
comm™d_found
 =0 || 
£rvî
 =
NULL
) {

481 
	`Ârötf
(
°dîr
, "Usage:Öortmap-client <command*> <server>\n");

482 
	`exô
(10);

485 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
£rvî
, 111, 
pm≠_c⁄√˘_cb
, &
˛õ¡
) != 0) {

486 
	`¥ötf
("FailedÅo start connection\n");

487 
	`exô
(10);

489 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

491 i‡(
nuŒ2
) {

492 i‡(
	`Ωc_pm≠2_nuŒ_èsk
(
Ωc
, 
pm≠2_nuŒ_cb
, &
˛õ¡
Ë=
NULL
) {

493 
	`¥ötf
("FailedÅo send NULL2Ñequest\n");

494 
	`exô
(10);

496 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

498 i‡(
dump2
) {

499 i‡(
	`Ωc_pm≠2_dump_èsk
(
Ωc
, 
pm≠2_dump_cb
, &
˛õ¡
Ë=
NULL
) {

500 
	`¥ötf
("FailedÅo send DUMP2Ñequest\n");

501 
	`exô
(10);

503 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

505 i‡(
nuŒ3
) {

506 i‡(
	`Ωc_pm≠3_nuŒ_èsk
(
Ωc
, 
pm≠3_nuŒ_cb
, &
˛õ¡
Ë=
NULL
) {

507 
	`¥ötf
("FailedÅo send NULL3Ñequest\n");

508 
	`exô
(10);

510 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

512 i‡(
dump3
) {

513 i‡(
	`Ωc_pm≠3_dump_èsk
(
Ωc
, 
pm≠3_dump_cb
, &
˛õ¡
Ë=
NULL
) {

514 
	`¥ötf
("FailedÅo send DUMP3Ñequest\n");

515 
	`exô
(10);

517 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

519 i‡(
gëtime3
) {

520 i‡(
	`Ωc_pm≠3_gëtime_èsk
(
Ωc
, 
pm≠3_gëtime_cb
, &
˛õ¡
Ë=
NULL
) {

521 
	`¥ötf
("FailedÅo send GETTIME3Ñequest\n");

522 
	`exô
(10);

524 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

526 i‡(
u2t3
) {

527 i‡(
	`Ωc_pm≠3_uaddr2èddr_èsk
(
Ωc
, 
u2t3°rög
, 
pm≠3_uaddr2èddr_cb
, &
˛õ¡
Ë=
NULL
) {

528 
	`¥ötf
("FailedÅo send UADDR2TADDR3Ñequest\n");

529 
	`exô
(10);

531 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

533 i‡(
gëaddr3
) {

534 
pm≠3_m≠pög
 
m≠
;

536 
m≠
.
¥og
 = 
gëaddr3¥og
;

537 
m≠
.
vîs
 = 
gëaddr3vîs
;

538 
m≠
.
√tid
 = 
gëaddr3√tid
;

539 
m≠
.
addr
 = 
gëaddr3addr
;

540 
m≠
.
ow√r
 = 
gëaddr3ow√r
;

541 i‡(
	`Ωc_pm≠3_gëaddr_èsk
(
Ωc
, &
m≠
, 
pm≠3_gëaddr_cb
, &
˛õ¡
Ë=
NULL
) {

542 
	`¥ötf
("FailedÅo send GETADDR3Ñequest\n");

543 
	`exô
(10);

545 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

547 i‡(
£t2
) {

548 i‡(
	`Ωc_pm≠2_£t_èsk
(
Ωc
, 
£t2¥og
, 
£t2vîs
, 
£t2¥Ÿ
, 
£t2p‹t
, 
pm≠2_£t_cb
, &
˛õ¡
Ë=
NULL
) {

549 
	`¥ötf
("FailedÅo send SET2Ñequest\n");

550 
	`exô
(10);

552 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

554 i‡(
un£t2
) {

555 i‡(
	`Ωc_pm≠2_un£t_èsk
(
Ωc
, 
un£t2¥og
, 
un£t2vîs
, 
un£t2¥Ÿ
, 
un£t2p‹t
, 
pm≠2_un£t_cb
, &
˛õ¡
Ë=
NULL
) {

556 
	`¥ötf
("FailedÅo send UNSET2Ñequest\n");

557 
	`exô
(10);

559 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

561 i‡(
£t3
) {

562 
pm≠3_m≠pög
 
m≠
;

564 
m≠
.
¥og
 = 
£t3¥og
;

565 
m≠
.
vîs
 = 
£t3vîs
;

566 
m≠
.
√tid
 = 
£t3√tid
;

567 
m≠
.
addr
 = 
£t3addr
;

568 
m≠
.
ow√r
 = 
£t3ow√r
;

569 i‡(
	`Ωc_pm≠3_£t_èsk
(
Ωc
, &
m≠
, 
pm≠3_£t_cb
, &
˛õ¡
Ë=
NULL
) {

570 
	`¥ötf
("FailedÅo send SET3Ñequest\n");

571 
	`exô
(10);

573 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

575 i‡(
un£t3
) {

576 
pm≠3_m≠pög
 
m≠
;

578 
m≠
.
¥og
 = 
un£t3¥og
;

579 
m≠
.
vîs
 = 
un£t3vîs
;

580 
m≠
.
√tid
 = 
un£t3√tid
;

581 
m≠
.
addr
 = 
un£t3addr
;

582 
m≠
.
ow√r
 = 
un£t3ow√r
;

583 i‡(
	`Ωc_pm≠3_un£t_èsk
(
Ωc
, &
m≠
, 
pm≠3_un£t_cb
, &
˛õ¡
Ë=
NULL
) {

584 
	`¥ötf
("FailedÅo send UNSET3Ñequest\n");

585 
	`exô
(10);

587 
	`waô_u¡û_föished
(
Ωc
, &
˛õ¡
);

591 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

592 
Ωc
=
NULL
;

594 
	}
}

	@examples/portmap-server.c

28 
	#_FILE_OFFSET_BITS
 64

	)

29 
	#_GNU_SOURCE


	)

31 #ifde‡
HAVE_CONFIG_H


32 
	~"c⁄fig.h
"

35 #ifde‡
AROS


36 
	~"¨os_com∑t.h
"

40 #ifde‡
WIN32


41 
	~<wö32/wö32_com∑t.h
>

42 #¥agm®
commít
(
lib
, "ws2_32.lib")

43 
WSADATA
 
	gwßD©a
;

45 
	~<sys/°©.h
>

46 
	~<°rög.h
>

49 #ifde‡
HAVE_POLL_H


50 
	~<pﬁl.h
>

53 #ifde‡
HAVE_UNISTD_H


54 
	~<uni°d.h
>

57 
	~<¨∑/öë.h
>

58 
	~<f˙é.h
>

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°döt.h
>

62 
	~<sys/ty≥s.h
>

63 
	~<sys/sockë.h
>

64 
	~<time.h
>

65 
	~"libnfs.h
"

66 
	~"libnfs-øw.h
"

67 
	~"libnfs-øw-p‹tm≠.h
"

69 
	~<evít2/evít.h
>

71 
evít_ba£
 *
	gba£
;

73 
	s£rvî
 {

74 
Ωc_c⁄ãxt
 *
	mΩc
;

75 
evít
 *
	mªad_evít
;

76 
evít
 *
	mwrôe_evít
;

80 
evít
 *
	gli°í_evít
;

81 
	gli°í_sockë
 = -1;

84 
£rvî
 
	gudp_£rvî
;

85 
	gudp_sockë
 = -1;

87 
	sm≠pög
 {

88 
m≠pög
 *
	m√xt
;

89 
u_öt
 
	m¥og
;

90 
u_öt
 
	mvîs
;

91 
	mp‹t
;

92 *
	m√tid
;

93 *
	maddr
;

94 *
	mow√r
;

96 
m≠pög
 *
	gm≠
;

99 
	$‰ì_m≠_ôem
(
m≠pög
 *
ôem
)

101 
	`‰ì
(
ôem
->
√tid
);

102 
	`‰ì
(
ôem
->
addr
);

103 
	`‰ì
(
ôem
->
ow√r
);

104 
	`‰ì
(
ôem
);

105 
	}
}

107 
	$‰ì_£rvî
(
£rvî
 *server)

109 i‡(
£rvî
->
Ωc
) {

110 
	`Ωc_disc⁄√˘
(
£rvî
->
Ωc
, 
NULL
);

111 
	`Ωc_de°roy_c⁄ãxt
(
£rvî
->
Ωc
);

113 i‡(
£rvî
->
ªad_evít
) {

114 
	`evít_‰ì
(
£rvî
->
ªad_evít
);

116 i‡(
£rvî
->
wrôe_evít
) {

117 
	`evít_‰ì
(
£rvî
->
wrôe_evít
);

120 
	`‰ì
(
£rvî
);

121 
	}
}

127 
	$upd©e_evíts
(
Ωc_c⁄ãxt
 *
Ωc
, 
evít
 *
ªad_evít
,

128 
evít
 *
wrôe_evít
)

130 
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

132 i‡(
ªad_evít
) {

133 i‡(
evíts
 & 
POLLIN
) {

134 
	`evít_add
(
ªad_evít
, 
NULL
);

136 
	`evít_dñ
(
ªad_evít
);

139 i‡(
wrôe_evít
) {

140 i‡(
evíts
 & 
POLLOUT
) {

141 
	`evít_add
(
wrôe_evít
, 
NULL
);

143 
	`evít_dñ
(
wrôe_evít
);

146 
	}
}

151 
	$pm≠_ªgi°î
(
¥og
, 
vîs
, *
√tid
, *
addr
,

152 *
ow√r
)

154 
m≠pög
 *
ôem
;

155 *
°r
;

156 
cou¡
 = 0;

158 
ôem
 = 
	`mÆloc
((
m≠pög
));

159 
ôem
->
¥og
 =Örog;

160 
ôem
->
vîs
 = vers;

161 
ôem
->
√tid
 =Çetid;

162 
ôem
->
addr
 =áddr;

163 
ôem
->
ow√r
 = owner;

166 
°r
 = 
ôem
->
addr
 + 
	`°æí
(item->addr) - 1; str >= item->addr; str--) {

167 i‡(*
°r
 != '.') {

168 i‡(*
°r
 < '0' || *str > '9') {

174 
cou¡
++;

175 i‡(
cou¡
 == 2) {

176 
high
, 
low
;

178 
	`ssˇnf
(
°r
, ".%d.%d", &
high
, &
low
);

179 
ôem
->
p‹t
 = 
high
 * 256 + 
low
;

184 
ôem
->
√xt
 = 
m≠
;

185 
m≠
 = 
ôem
;

186 
	}
}

191 
m≠pög
 *
	$m≠_lookup
(
¥og
, 
vîs
, *
√tid
)

193 
m≠pög
 *
tmp
;

195 
tmp
 = 
m≠
;Åmp;Åm∞tmp->
√xt
) {

196 i‡(
tmp
->
¥og
 !=Örog) {

199 i‡(
tmp
->
vîs
 != vers) {

202 i‡(
	`°rcmp
(
tmp
->
√tid
,Çetid)) {

206  
tmp
;

209  
NULL
;

210 
	}
}

215 
	$m≠_ªmove
(
¥og
, 
vîs
, *
√tid
)

217 
m≠pög
 *
¥ev
 = 
NULL
;

218 
m≠pög
 *
tmp
;

220 
tmp
 = 
m≠
;Åmp; 
¥ev
 =Åmp,Åm∞tmp->
√xt
) {

221 i‡(
tmp
->
¥og
 !=Örog) {

224 i‡(
tmp
->
vîs
 != vers) {

227 i‡(
	`°rcmp
(
tmp
->
√tid
,Çetid)) {

232 i‡(
tmp
 =
NULL
) {

235 i‡(
¥ev
) {

236 
¥ev
->
√xt
 = 
tmp
->next;

238 
m≠
 = 
tmp
->
√xt
;

241 
	`‰ì_m≠_ôem
(
tmp
);

243 
	}
}

251 
	$pm≠2_nuŒ_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

253 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, 
NULL
, (
zdΩroc_t
)
zdr_void
, 0);

256 
	}
}

265 
	$pm≠2_gëp‹t_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

267 
PMAP2GETPORT¨gs
 *
¨gs
 = 
ˇŒ
->
body
.
cbody
.args;

268 
m≠pög
 *
tmp
;

269 *
√tid
;

270 
uöt32_t
 
p‹t
 = 0;

272 i‡(
¨gs
->
¥Ÿ
 =
IPPROTO_TCP
) {

273 
√tid
 = "tcp";

275 
√tid
 = "udp";

278 
tmp
 = 
	`m≠_lookup
(
¨gs
->
¥og
,árgs->
vîs
, 
√tid
);

279 i‡(
tmp
) {

280 
p‹t
 = 
tmp
->port;

283 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, &
p‹t
, (
zdΩroc_t
)
zdr_uöt32_t
, (
uöt32_t
));

286 
	}
}

293 
	$pm≠2_dump_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

295 
PMAP2DUMPªs
 
ª∂y
;

296 
m≠pög
 *
tmp
;

298 
ª∂y
.
li°
 = 
NULL
;

299 
tmp
 = 
m≠
;Åmp;Åm∞tmp->
√xt
) {

300 
pm≠2_m≠pög_li°
 *
tmp_li°
;

301 
¥Ÿo
;

304 i‡(!
	`°rcmp
(
tmp
->
√tid
, "tcp")) {

305 
¥Ÿo
 = 
IPPROTO_TCP
;

306 } i‡(!
	`°rcmp
(
tmp
->
√tid
, "udp")) {

307 
¥Ÿo
 = 
IPPROTO_UDP
;

312 
tmp_li°
 = 
	`mÆloc
((
pm≠2_m≠pög_li°
));

313 
tmp_li°
->
m≠
.
¥og
 = 
tmp
->prog;

314 
tmp_li°
->
m≠
.
vîs
 = 
tmp
->vers;

315 
tmp_li°
->
m≠
.
¥Ÿ
 = 
¥Ÿo
;

316 
tmp_li°
->
m≠
.
p‹t
 = 
tmp
->port;

318 
tmp_li°
->
√xt
 = 
ª∂y
.
li°
;

320 
ª∂y
.
li°
 = 
tmp_li°
;

323 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, &
ª∂y
,

324 (
zdΩroc_t
)
zdr_PMAP2DUMPªs
, (
PMAP2DUMPªs
));

326 
ª∂y
.
li°
) {

327 
pm≠2_m≠pög_li°
 *
tmp_li°
 = 
ª∂y
.
li°
->
√xt
;

328 
	`‰ì
(
ª∂y
.
li°
);

329 
ª∂y
.
li°
 = 
tmp_li°
;

333 
	}
}

339 
	$pm≠2_£t_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

341 
PMAP2GETPORT¨gs
 *
¨gs
 = 
ˇŒ
->
body
.
cbody
.args;

342 *
¥Ÿ
;

343 *
addr
;

344 
uöt32_t
 
ª•⁄£
 = 1;

346 i‡(
¨gs
->
¥Ÿ
 =
IPPROTO_TCP
) {

347 
¥Ÿ
 = "tcp";

349 
¥Ÿ
 = "udp";

353 i‡(
	`m≠_lookup
(
¨gs
->
¥og
,árgs->
vîs
, 
¥Ÿ
)) {

354 
ª•⁄£
 = 0;

355 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, &
ª•⁄£
, (
zdΩroc_t
)
zdr_uöt32_t
, (
uöt32_t
));

359 
	`a•rötf
(&
addr
, "0.0.0.0.%d.%d", 
¨gs
->
p‹t
 >> 8,árgs->port & 0xff);

360 
	`pm≠_ªgi°î
(
¨gs
->
¥og
,árgs->
vîs
, 
	`°rdup
(
¥Ÿ
), 
addr
,

361 
	`°rdup
("<unknown>"));

363 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, &
ª•⁄£
, (
zdΩroc_t
)
zdr_uöt32_t
, (
uöt32_t
));

365 
	}
}

372 
	$pm≠2_un£t_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

374 
PMAP2GETPORT¨gs
 *
¨gs
 = 
ˇŒ
->
body
.
cbody
.args;

375 *
¥Ÿ
;

376 *
addr
;

377 
uöt32_t
 
ª•⁄£
 = 1;

379 i‡(
¨gs
->
¥Ÿ
 =
IPPROTO_TCP
) {

380 
¥Ÿ
 = "tcp";

382 
¥Ÿ
 = "udp";

385 
	`m≠_ªmove
(
¨gs
->
¥og
,árgs->
vîs
, 
¥Ÿ
);

387 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, &
ª•⁄£
, (
zdΩroc_t
)
zdr_uöt32_t
, (
uöt32_t
));

389 
	}
}

407 
£rvi˚_¥oc
 
	gpm≠2_±
[] = {

408 {
PMAP2_NULL
, 
pm≠2_nuŒ_¥oc
,

409 (
zdΩroc_t
)
zdr_void
, 0},

410 {
PMAP2_SET
, 
pm≠2_£t_¥oc
,

411 (
zdΩroc_t
)
zdr_PMAP2SET¨gs
, (
PMAP2SET¨gs
)},

412 {
PMAP2_UNSET
, 
pm≠2_un£t_¥oc
,

413 (
zdΩroc_t
)
zdr_PMAP2UNSET¨gs
, (
PMAP2UNSET¨gs
)},

414 {
PMAP2_GETPORT
, 
pm≠2_gëp‹t_¥oc
,

415 (
zdΩroc_t
)
zdr_PMAP2GETPORT¨gs
, (
PMAP2GETPORT¨gs
)},

416 {
PMAP2_DUMP
, 
pm≠2_dump_¥oc
,

417 (
zdΩroc_t
)
zdr_void
, 0},

427 
	$pm≠3_nuŒ_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

429 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, 
NULL
, (
zdΩroc_t
)
zdr_void
, 0);

432 
	}
}

439 
	$pm≠3_dump_¥oc
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
, *
›aque
)

441 
PMAP3DUMPªs
 
ª∂y
;

442 
m≠pög
 *
tmp
;

444 
ª∂y
.
li°
 = 
NULL
;

445 
tmp
 = 
m≠
;Åmp;Åm∞tmp->
√xt
) {

446 
pm≠3_m≠pög_li°
 *
tmp_li°
;

448 
tmp_li°
 = 
	`mÆloc
((
pm≠3_m≠pög_li°
));

449 
tmp_li°
->
m≠
.
¥og
 = 
tmp
->prog;

450 
tmp_li°
->
m≠
.
vîs
 = 
tmp
->vers;

451 
tmp_li°
->
m≠
.
√tid
 = 
tmp
->netid;

452 
tmp_li°
->
m≠
.
addr
 = 
tmp
->addr;

453 
tmp_li°
->
m≠
.
ow√r
 = 
tmp
->owner;

455 
tmp_li°
->
√xt
 = 
ª∂y
.
li°
;

457 
ª∂y
.
li°
 = 
tmp_li°
;

460 
	`Ωc_£nd_ª∂y
(
Ωc
, 
ˇŒ
, &
ª∂y
,

461 (
zdΩroc_t
)
zdr_PMAP3DUMPªs
, (
PMAP3DUMPªs
));

463 
ª∂y
.
li°
) {

464 
pm≠3_m≠pög_li°
 *
tmp_li°
 = 
ª∂y
.
li°
->
√xt
;

465 
	`‰ì
(
ª∂y
.
li°
);

466 
ª∂y
.
li°
 = 
tmp_li°
;

470 
	}
}

486 
£rvi˚_¥oc
 
	gpm≠3_±
[] = {

487 {
PMAP3_NULL
, 
pm≠3_nuŒ_¥oc
,

488 (
zdΩroc_t
)
zdr_void
, 0},

492 {
PMAP3_DUMP
, 
pm≠3_dump_¥oc
,

493 (
zdΩroc_t
)
zdr_void
, 0},

504 
	$£rvî_io
(
evutû_sockë_t
 
fd
, 
evíts
, *
¥iv©e_d©a
)

506 
£rvî
 *£rvî = 
¥iv©e_d©a
;

507 
ªvíts
 = 0;

513 i‡(
evíts
 & 
EV_READ
) {

514 
ªvíts
 |
POLLIN
;

516 i‡(
evíts
 & 
EV_WRITE
) {

517 
ªvíts
 |
POLLOUT
;

523 i‡(
	`Ωc_£rvi˚
(
£rvî
->
Ωc
, 
ªvíts
) < 0) {

524 
	`‰ì_£rvî
(
£rvî
);

533 
	`upd©e_evíts
(
£rvî
->
Ωc
, sîvî->
ªad_evít
, sîvî->
wrôe_evít
);

534 
	}
}

541 
	$do_ac˚±
(
evutû_sockë_t
 
s
, 
evíts
, *
¥iv©e_d©a
)

543 
sockaddr_°‹age
 
ss
;

544 
sockÀn_t
 
Àn
 = (
ss
);

545 
£rvî
 *server;

546 
fd
;

548 
£rvî
 = 
	`mÆloc
((server));

549 i‡(
£rvî
 =
NULL
) {

552 
	`mem£t
(
£rvî
, 0, (*server));

554 i‡((
fd
 = 
	`ac˚±
(
s
, (
sockaddr
 *)&
ss
, &
Àn
)) < 0) {

555 
	`‰ì_£rvî
(
£rvî
);

558 
	`evutû_make_sockë_n⁄blockög
(
fd
);

560 
£rvî
->
Ωc
 = 
	`Ωc_öô_£rvî_c⁄ãxt
(
fd
);

561 i‡(
£rvî
->
Ωc
 =
NULL
) {

562 
	`˛o£
(
fd
);

563 
	`‰ì_£rvî
(
£rvî
);

571 
	`Ωc_ªgi°î_£rvi˚
(
£rvî
->
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
,

572 
pm≠2_±
, (pmap2_pt) / (pmap2_pt[0]));

573 
	`Ωc_ªgi°î_£rvi˚
(
£rvî
->
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
,

574 
pm≠3_±
, (pmap3_pt) / (pmap3_pt[0]));

579 
£rvî
->
ªad_evít
 = 
	`evít_√w
(
ba£
, 
fd
, 
EV_READ
|
EV_PERSIST
,

580 
£rvî_io
, 
£rvî
);

581 
£rvî
->
wrôe_evít
 = 
	`evít_√w
(
ba£
, 
fd
, 
EV_WRITE
|
EV_PERSIST
,

582 
£rvî_io
, 
£rvî
);

583 
	`upd©e_evíts
(
£rvî
->
Ωc
, sîvî->
ªad_evít
, sîvî->
wrôe_evít
);

584 
	}
}

586 
	$maö
(
¨gc
, *
¨gv
[])

588 
sockaddr_ö
 
ö
;

589 
⁄e
 = 1;

591 #ifde‡
WIN32


592 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

593 
	`¥ötf
("FailedÅo start Winsock2\n");

598 #ifde‡
AROS


599 
	`¨os_öô_sockë
();

602 
ba£
 = 
	`evít_ba£_√w
();

603 i‡(
ba£
 =
NULL
) {

604 
	`¥ötf
("Failed createÉvent context\n");

605 
	`exô
(10);

613 
ö
.
sö_Ámûy
 = 
AF_INET
;

614 
ö
.
sö_p‹t
 = 
	`ht⁄s
(111);

615 
ö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_ANY
);

621 
	`pm≠_ªgi°î
(100000, 2, 
	`°rdup
("tcp"), strdup("0.0.0.0.0.111"),

622 
	`°rdup
("portmapper-service"));

623 
	`pm≠_ªgi°î
(100000, 2, 
	`°rdup
("udp"), strdup("0.0.0.0.0.111"),

624 
	`°rdup
("portmapper-service"));

625 
	`pm≠_ªgi°î
(100000, 3, 
	`°rdup
("tcp"), strdup("0.0.0.0.0.111"),

626 
	`°rdup
("portmapper-service"));

627 
	`pm≠_ªgi°î
(100000, 3, 
	`°rdup
("udp"), strdup("0.0.0.0.0.111"),

628 
	`°rdup
("portmapper-service"));

636 
li°í_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

637 i‡(
li°í_sockë
 == -1) {

638 
	`¥ötf
("FailedÅo createÜistening socket\n");

639 
	`exô
(10);

641 
	`evutû_make_sockë_n⁄blockög
(
li°í_sockë
);

642 
	`£tsock›t
(
li°í_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄e
, (one));

644 i‡(
	`böd
(
li°í_sockë
, (
sockaddr
 *)&
ö
, (in)) < 0) {

645 
	`¥ötf
("FailedÅo bindÜistening socket\n");

646 
	`exô
(10);

648 i‡(
	`li°í
(
li°í_sockë
, 16) < 0) {

649 
	`¥ötf
("failedÅoÜistenÅo socket\n");

650 
	`exô
(10);

652 
li°í_evít
 = 
	`evít_√w
(
ba£
,

653 
li°í_sockë
,

654 
EV_READ
|
EV_PERSIST
,

655 
do_ac˚±
, 
NULL
);

656 
	`evít_add
(
li°í_evít
, 
NULL
);

662 
udp_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

663 i‡(
udp_sockë
 == -1) {

664 
	`¥ötf
("FailedÅo create udp socket\n");

665 
	`exô
(10);

667 
	`evutû_make_sockë_n⁄blockög
(
udp_sockë
);

668 
	`£tsock›t
(
udp_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄e
, (one));

670 i‡(
	`böd
(
udp_sockë
, (
sockaddr
 *)&
ö
, (in)) < 0) {

671 
	`¥ötf
("FailedÅo bind udp socket\n");

672 
	`exô
(10);

678 
	`mem£t
(&
udp_£rvî
, 0, (udp_server));

679 
udp_£rvî
.
Ωc
 = 
	`Ωc_öô_£rvî_c⁄ãxt
(
udp_sockë
);

685 
	`Ωc_ªgi°î_£rvi˚
(
udp_£rvî
.
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
,

686 
pm≠2_±
, (pmap2_pt) / (pmap2_pt[0]));

687 
	`Ωc_ªgi°î_£rvi˚
(
udp_£rvî
.
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
,

688 
pm≠3_±
, (pmap3_pt) / (pmap3_pt[0]));

690 
udp_£rvî
.
ªad_evít
 = 
	`evít_√w
(
ba£
,

691 
udp_sockë
,

692 
EV_READ
|
EV_PERSIST
,

693 
£rvî_io
, &
udp_£rvî
);

694 
	`evít_add
(
udp_£rvî
.
ªad_evít
, 
NULL
);

700 
	`evít_ba£_di•©ch
(
ba£
);

703 
	}
}

	@include/libnfs-multithreading.h

19 #i‚de‡
_LIBNFS_MULTITHREADING_H_


20 
	#_LIBNFS_MULTITHREADING_H_


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
__˝lu•lus


30 #ifde‡
HAVE_MULTITHREADING


32 #ifde‡
HAVE_PTHREAD


33 
	~<±hªad.h
>

34 
±hªad_t
 
	tlibnfs_thªad_t
;

35 
±hªad_muãx_t
 
	tlibnfs_muãx_t
;

37 #i‡
deföed
(
__APPLE__
Ë&& deföed(
HAVE_DISPATCH_DISPATCH_H
)

38 
	~<di•©ch/di•©ch.h
>

39 
di•©ch_£m≠h‹e_t
 
	tlibnfs_£m_t
;

41 
	~<£m≠h‹e.h
>

42 
£m_t
 
	tlibnfs_£m_t
;

44 #ifde‡
HAVE_PTHREAD_THREADID_NP


45 
uöt64_t
 
	tnfs_tid_t
;

47 
pid_t
 
	tnfs_tid_t
;

51 #ifde‡
WIN32


52 
HANDLE
 
	tlibnfs_thªad_t
;

53 
HANDLE
 
	tlibnfs_muãx_t
;

54 
HANDLE
 
	tlibnfs_£m_t
;

55 
DWORD
 
	tnfs_tid_t
;

58 
nfs_tid_t
 
nfs_mt_gë_tid
();

59 
nfs_mt_muãx_öô
(
libnfs_muãx_t
 *
muãx
);

60 
nfs_mt_muãx_de°roy
(
libnfs_muãx_t
 *
muãx
);

61 
nfs_mt_muãx_lock
(
libnfs_muãx_t
 *
muãx
);

62 
nfs_mt_muãx_u∆ock
(
libnfs_muãx_t
 *
muãx
);

64 
nfs_mt_£m_öô
(
libnfs_£m_t
 *
£m
, 
vÆue
);

65 
nfs_mt_£m_de°roy
(
libnfs_£m_t
 *
£m
);

66 
nfs_mt_£m_po°
(
libnfs_£m_t
 *
£m
);

67 
nfs_mt_£m_waô
(
libnfs_£m_t
 *
£m
);

71 #ifde‡
__˝lu•lus


	@include/libnfs-private.h

19 #i‚de‡
_LIBNFS_PRIVATE_H_


20 
	#_LIBNFS_PRIVATE_H_


	)

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #i‡!
deföed
(
WIN32
Ë&& !deföed(
PS2_EE
)

27 
	~<sys/sockë.h
>

30 #ifde‡
HAVE_NET_IF_H


31 
	~<√t/if.h
>

34 #ifde‡
HAVE_LIBKRB5


35 
	~"lib/krb5-wøµî.h
"

38 #ifde‡
HAVE_TLS


39 
	~<gnués/gnués.h
>

42 #i‡
deföed
(
WIN32
Ë&& !deföed(
IFNAMSIZ
)

43 
	#IFNAMSIZ
 255

	)

46 #i‡
deföed
(
PS3_PPU
Ë&& !deföed(
IFNAMSIZ
)

47 
	#IFNAMSIZ
 16

	)

50 #i‡
deföed
(
PS2_EE
Ë&& !deföed(
IFNAMSIZ
)

51 
	#IFNAMSIZ
 16

	)

54 #ifde‡
HAVE_MULTITHREADING


55 #ifde‡
HAVE_STDATOMIC_H


56 
	~<°d©omic.h
>

57 
	#ATOMIC_INC
(
Ωc
, 
x
) \

58 
	`©omic_„tch_add_ex∂icô
(&
x
, 1, 
mem‹y_‹dî_ªœxed
)

	)

59 
	#ATOMIC_DEC
(
Ωc
, 
x
) \

60 
	`©omic_„tch_sub_ex∂icô
(&
x
, 1, 
mem‹y_‹dî_ªœxed
)

	)

62 
	#ATOMIC_INC
(
Ωc
, 
x
) \

63 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) { \

64 
	`nfs_mt_muãx_lock
(&
Ωc
->
©omic_öt_muãx
); \

66 
x
++; \

67 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) { \

68 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
©omic_öt_muãx
); \

69 }

	)

70 
	#ATOMIC_DEC
(
Ωc
, 
x
) \

71 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) { \

72 
	`nfs_mt_muãx_lock
(&
Ωc
->
©omic_öt_muãx
); \

74 
x
--; \

75 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) { \

76 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
©omic_öt_muãx
); \

77 }

	)

81 
	#ATOMIC_INC
(
Ωc
, 
x
Ëx++

	)

82 
	#ATOMIC_DEC
(
Ωc
, 
x
Ëx--

	)

85 
	~"libnfs-mu…ôhªadög.h
"

86 
	~"libnfs-zdr.h
"

87 
	~"../nfs/libnfs-øw-nfs.h
"

88 
	~"../nfs4/libnfs-øw-nfs4.h
"

90 #ifde‡
__˝lu•lus


94 #i‚de‡
MIN


95 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

97 #i‚de‡
MAX


98 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

101 #i‡!
deföed
(
HAVE_SOCKADDR_STORAGE
Ë&& !deföed(
WIN32
Ë&& !deföed(
PS2_EE
)

105 
	#_SS_MAXSIZE
 128

	)

106 
	#_SS_ALIGNSIZE
 (())

	)

107 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - (Ë* 2)

	)

108 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () * 2 - \

109 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

111 
	ssockaddr_°‹age
 {

112 #ifde‡
HAVE_SOCKADDR_LEN


113 
ss_Àn
;

114 
ss_Ámûy
;

116 
ss_Ámûy
;

118 
__ss_∑d1
[
_SS_PAD1SIZE
];

119 
__ss_Æign
;

120 
__ss_∑d2
[
_SS_PAD2SIZE
];

125 
	sΩc_‰agmít
 {

126 
Ωc_‰agmít
 *
	g√xt
;

127 
uöt32_t
 
	gsize
;

128 *
	gd©a
;

131 
	#RPC_CONTEXT_MAGIC
 0xc6e46435

	)

132 
	#RPC_PARAM_UNDEFINED
 -1

	)

137 
	sΩc_queue
 {

138 
Ωc_pdu
 *
	ghód
, *
	gèû
;

141 
	#DEFAULT_HASHES
 4

	)

142 
	#NFS_RA_TIMEOUT
 5

	)

143 
	#NFS_MAX_XFER_SIZE
 (1024 * 1024)

	)

144 
	#ZDR_ENCODE_OVERHEAD
 1024

	)

145 
	#ZDR_ENCODEBUF_MINSIZE
 4096

	)

147 
	sΩc_ídpoöt
 {

148 
Ωc_ídpoöt
 *
	g√xt
;

149 
	g¥ogøm
;

150 
	gvîsi⁄
;

151 
£rvi˚_¥oc
 *
	g¥ocs
;

152 
	gnum_¥ocs
;

155 
	#RPC_MAX_VECTORS
 8

	)

157 
	sΩc_iovec
 {

158 *
	gbuf
;

159 
size_t
 
	gÀn
;

160 (*
	g‰ì
)(*);

163 
	sΩc_io_ve˘‹s
 {

164 
size_t
 
	gnum_d⁄e
;

165 
	gtŸÆ_size
;

166 
	gniov
;

167 
Ωc_iovec
 
	giov
[
RPC_MAX_VECTORS
];

170 
	eöput_°©e
 {

171 
	gREAD_RM
 = 0,

172 
	gREAD_PAYLOAD
 = 1,

173 
	gREAD_FRAGMENT
 = 2,

174 
	gREAD_IOVEC
 = 3,

175 
	gREAD_PADDING
 = 4,

176 
	gREAD_UNKNOWN
 = 5,

179 #ifde‡
HAVE_TLS


180 
	sés_cb_d©a
 {

181 
Ωc_cb
 
	gcb
;

182 *
	g¥iv©e_d©a
;

185 
	eés_h™dshake_°©e
 {

186 
	gTLS_HANDSHAKE_UNDEFINED
 = 0,

187 
	gTLS_HANDSHAKE_WAITING_FOR_STARTTLS
,

188 
	gTLS_HANDSHAKE_IN_PROGRESS
,

189 
	gTLS_HANDSHAKE_COMPLETED
,

190 
	gTLS_HANDSHAKE_FAILED
,

191 } 
	tés_h™dshake_°©e_t
;

196 
	sés_c⁄ãxt
 {

198 
és_h™dshake_°©e
 
	g°©e
;

201 
és_cb_d©a
 
	gd©a
;

204 
gnués_£ssi⁄_t
 
	g£ssi⁄
;

208 
	ggss_˘x_id_°ru˘
;

209 
	sΩc_c⁄ãxt
 {

210 
uöt32_t
 
	gmagic
;

211 
	gfd
;

212 
	gﬁd_fd
;

213 
	gis_c⁄√˘ed
;

214 
	gis_n⁄blockög
;

216 *
	gîr‹_°rög
;

218 
Ωc_cb
 
	gc⁄√˘_cb
;

219 *
	gc⁄√˘_d©a
;

221 
AUTH
 *
	gauth
;

222 
uöt32_t
 
	gxid
;

224 
Ωc_queue
 
	goutqueue
;

225 
sockaddr_°‹age
 
	gudp_§c
;

226 
uöt32_t
 
	gnum_hashes
;

227 
Ωc_queue
 *
	gwaôpdu
;

228 
uöt32_t
 
	gwaôpdu_Àn
;

229 
uöt32_t
 
	gmax_waôpdu_Àn
;

231 #ifde‡
HAVE_MULTITHREADING


232 
	gmu…ôhªadög_íabÀd
;

233 
libnfs_muãx_t
 
	gΩc_muãx
;

234 #i‚de‡
HAVE_STDATOMIC_H


235 
libnfs_muãx_t
 
	g©omic_öt_muãx
;

239 
uöt32_t
 
	göpos
;

240 
uöt32_t
 
	göbuf_size
;

241 *
	göbuf
;

242 
öput_°©e
 
	g°©e
;

243 
uöt32_t
 
	grm_xid
[2];

244 
uöt32_t
 
	gpdu_size
;

245 *
	gbuf
;

246 
Ωc_pdu
 *
	gpdu
;

249 
	gis_udp
;

250 
sockaddr_°‹age
 
	gudp_de°
;

251 
	gis_brﬂdˇ°
;

254 
sockaddr_°‹age
 
	gs
;

255 
	gauto_ªc⁄√˘
;

256 
	gnum_ªåõs
;

268 *
	g£rvî
;

271 
Ωc_‰agmít
 *
	g‰agmíts
;

274 
	gt˝_syn˙t
;

275 
	guid
;

276 
	ggid
;

277 
	gdebug
;

278 
uöt64_t
 
	gœ°_timeout_sˇn
;

288 
uöt64_t
 
	gœ°_suc˚ssful_Ωc_ª•⁄£
;

296 
	gtimeout
;

314 
	gªå™s
;

316 
	gi‚ame
[
IFNAMSIZ
];

317 
	gpﬁl_timeout
;

319 #ifde‡
HAVE_TLS


324 
Ωc_x¥t£c
 
	gw™ãd_x¥t£c
;

339 
boﬁ_t
 
	gu£_és
;

342 
	gnfs_vîsi⁄
;

345 
és_c⁄ãxt
 
	gés_c⁄ãxt
;

348 #ifde‡
HAVE_LIBKRB5


349 c⁄° *
	gu£∫ame
;

350 
Ωc_£c
 
	gw™ãd_£c
;

351 
Ωc_£c
 
	g£c
;

352 
uöt32_t
 
	ggss_£qno
;

353 
	gc⁄ãxt_Àn
;

354 *
	gc⁄ãxt
;

356 *
	gauth_d©a
;

357 
gss_˘x_id_°ru˘
 *
	ggss_c⁄ãxt
;

361 
	gis_£rvî_c⁄ãxt
;

362 
Ωc_ídpoöt
 *
	gídpoöts
;

365 
	sΩc_pdu
 {

366 
Ωc_pdu
 *
	g√xt
;

368 
uöt32_t
 
	gxid
;

370 
ZDR
 
	gzdr
;

371 
	g‰ì_zdr
;

372 
	g‰ì_pdu
;

374 
Ωc_d©a
 
	goutd©a
;

382 
Ωc_io_ve˘‹s
 
	gout
;

385 
uöt32_t
 
	gªad_cou¡
;

386 
size_t
 
	göpos
;

387 
Ωc_iovec
 
	gö
;

388 
uöt32_t
 
	gªque°ed_ªad_cou¡
;

392 
Ωc_cb
 
	gcb
;

393 *
	g¥iv©e_d©a
;

396 
zdΩroc_t
 
	gzdr_decode_‚
;

397 
ˇddr_t
 
	gzdr_decode_buf
;

398 
uöt32_t
 
	gzdr_decode_bufsize
;

400 
	#PDU_DISCARD_AFTER_SENDING
 0x00000001

	)

401 
uöt32_t
 
	gÊags
;

424 
boﬁ_t
 
	gdo_nŸ_ªåy
;

434 
uöt64_t
 
	gtimeout
;

446 
uöt64_t
 
	gmaj‹_timeout
;

455 
boﬁ_t
 
	g¢r_logged
;

457 #ifde‡
HAVE_LIBKRB5


458 
uöt32_t
 
	ggss_£qno
;

459 
	g¸eds
[64];

460 
	g°¨t_of_∑ylﬂd
;

461 
gss_buf„r_desc
 
	gouçut_buf„r
;

464 #ifde‡
HAVE_TLS


466 
boﬁ_t
 
	gex≥˘_°¨âls
;

470 
Ωc_ª£t_queue
(
Ωc_queue
 *
q
);

471 
Ωc_íqueue
(
Ωc_queue
 *
q
, 
Ωc_pdu
 *
pdu
);

472 
Ωc_ªtu∫_to_queue
(
Ωc_queue
 *
q
, 
Ωc_pdu
 *
pdu
);

473 
Ωc_hash_xid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
xid
);

474 
Ωc_pdu
 *
Ωc_Æloˇã_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
, 
zdΩroc_t
 
zdr_decode_‚
, 
zdr_bufsize
);

475 
Ωc_pdu
 *
Ωc_Æloˇã_pdu2
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
, 
zdΩroc_t
 
zdr_decode_‚
, 
zdr_bufsize
, 
size_t
 
Æloc_höt
);

476 
pdu_£t_timeout
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
, 
uöt64_t
 
now_m£cs
);

478 
Ωc_‰ì_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
);

479 
Ωc_queue_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
);

480 
Ωc_¥o˚ss_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, *
buf
, 
size
);

481 
Ωc_pdu
 *
Ωc_föd_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
xid
);

482 
Ωc_îr‹_Æl_pdus
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹
);

488 
Ωc_£t_îr‹
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹_°rög
, ...)

489 #ifde‡
__GNUC__


490 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

499 
Ωc_£t_îr‹_locked
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹_°rög
, ...)

500 #ifde‡
__GNUC__


501 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

505 
nfs_£t_îr‹
(
nfs_c⁄ãxt
 *
nfs
, *
îr‹_°rög
, ...)

506 #ifde‡
__GNUC__


507 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

511 
nfs_£t_îr‹_locked
(
nfs_c⁄ãxt
 *
nfs
, *
îr‹_°rög
, ...)

512 #ifde‡
__GNUC__


513 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

517 #i‡
deföed
(
PS2_EE
)

518 
	#RPC_LOG
(
Ωc
, 
Àvñ
, 
f‹m©
, ...Ë;

	)

519 
	#LOG
(
Ωc
, 
Àvñ
, 
f‹m©
, ...Ë;

	)

521 
	#RPC_LOG
(
Ωc
, 
Àvñ
, 
f‹m©
, ...) \

523 i‡(
Àvñ
 <
Ωc
->
debug
) { \

524 
	`Ârötf
(
°dîr
, "libnfs:%dÑp¯%∞" 
f‹m©
 "\n", 
Àvñ
, 
Ωc
, ## 
__VA_ARGS__
); \

526 } 0)

	)

535 
	#LOG
(
f‹m©
, ...) \

537 
	`Ârötf
(
°dîr
, "libnfs: " 
f‹m©
 "\n", ## 
__VA_ARGS__
); \

538 } 0)

	)

541 c⁄° *
nfs_gë_£rvî
(
nfs_c⁄ãxt
 *
nfs
);

542 c⁄° *
nfs_gë_exp‹t
(
nfs_c⁄ãxt
 *
nfs
);

545 
Ωc_böd_udp
(
Ωc_c⁄ãxt
 *
Ωc
, *
addr
, 
p‹t
);

546 
Ωc_£t_udp_de°ö©i⁄
(
Ωc_c⁄ãxt
 *
Ωc
, *
addr
, 
p‹t
, 
is_brﬂdˇ°
);

547 
Ωc_c⁄ãxt
 *
Ωc_öô_udp_c⁄ãxt
();

548 
sockaddr
 *
Ωc_gë_ªcv_sockaddr
(
Ωc_c⁄ãxt
 *
Ωc
);

550 
Ωc_£t_ªsûõncy
(
Ωc_c⁄ãxt
 *
Ωc
,

551 
num_t˝_ªc⁄√˘
,

552 
timeout
,

553 
ªå™s
);

555 
Ωc_£t_öãrÁ˚
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
i‚ame
);

557 
Ωc_£t_t˝_syn˙t
(
Ωc_c⁄ãxt
 *
Ωc
, 
v
);

558 
Ωc_£t_debug
(
Ωc_c⁄ãxt
 *
Ωc
, 
Àvñ
);

559 
Ωc_£t_pﬁl_timeout
(
Ωc_c⁄ãxt
 *
Ωc
, 
pﬁl_timeout
);

560 
Ωc_gë_pﬁl_timeout
(
Ωc_c⁄ãxt
 *
Ωc
);

561 
Ωc_£t_timeout
(
Ωc_c⁄ãxt
 *
Ωc
, 
timeout
);

562 
Ωc_gë_timeout
(
Ωc_c⁄ãxt
 *
Ωc
);

563 
Ωc_add_‰agmít
(
Ωc_c⁄ãxt
 *
Ωc
, *
d©a
, 
uöt32_t
 
size
);

564 
Ωc_‰ì_Æl_‰agmíts
(
Ωc_c⁄ãxt
 *
Ωc
);

565 
Ωc_is_udp_sockë
(
Ωc_c⁄ãxt
 *
Ωc
);

566 
uöt64_t
 
Ωc_cuºít_time
();

568 *
zdr_mÆloc
(
ZDR
 *
zdrs
, 
uöt32_t
 
size
);

571 
	gnfs_cb_d©a
;

572 
‰ì_nfs_cb_d©a
(
nfs_cb_d©a
 *
d©a
);

574 
	snfs_•ecd©a
 {

575 
uöt32_t
 
	g•ecd©a1
;

576 
uöt32_t
 
	g•ecd©a2
;

578 
	snfs_time
 {

579 
uöt32_t
 
	g£c⁄ds
;

580 
uöt32_t
 
	gn£c⁄ds
;

582 
	snfs_©å
 {

583 
uöt32_t
 
	gty≥
;

584 
uöt32_t
 
	gmode
;

585 
uöt32_t
 
	guid
;

586 
uöt32_t
 
	ggid
;

587 
uöt32_t
 
	g∆ök
;

588 
uöt64_t
 
	gsize
;

589 
uöt64_t
 
	gu£d
;

590 
uöt64_t
 
	gfsid
;

591 
nfs_•ecd©a
 
	grdev
;

592 
nfs_time
 
	g©ime
;

593 
nfs_time
 
	gmtime
;

594 
nfs_time
 
	g˘ime
;

597 
	snfs_fh
 {

598 
	gÀn
;

599 *
	gvÆ
;

602 
	snfs_c⁄ãxt_öã∫Æ
 {

603 *
	g£rvî
;

604 *
	gexp‹t
;

605 *
	gcwd
;

606 
nfs_fh
 
	groŸfh
;

607 
size_t
 
	gªadmax
;

608 
size_t
 
	gwrôemax
;

614 
	gauto_ªc⁄√˘
;

615 
	gtimeout
;

616 
	gªå™s
;

618 
	gdúˇche_íabÀd
;

619 
nfsdú
 *
	gdúˇche
;

620 
uöt16_t
 
	gmask
;

621 
	gauto_åavî£_mou¡s
;

622 
√°ed_mou¡s
 *
	g√°ed_mou¡s
;

623 
	gdeÁu…_vîsi⁄
;

626 
	gvîsi⁄
;

627 
	gnf•‹t
;

628 
	gmou¡p‹t
;

629 
uöt32_t
 
	gªaddú_dúcou¡
;

630 
uöt32_t
 
	gªaddú_maxcou¡
;

633 
vîifõr4
 
	gvîifõr
;

634 *
	g˛õ¡_«me
;

635 
uöt64_t
 
	g˛õ¡id
;

636 
vîifõr4
 
	g£t˛õ¡id_c⁄fúm
;

637 
uöt32_t
 
	g›í_cou¡î
;

638 
	ghas_lock_ow√r
;

639 #ifde‡
HAVE_MULTITHREADING


640 
libnfs_thªad_t
 
	g£rvi˚_thªad
;

641 
libnfs_muãx_t
 
	gnfs_muãx
;

642 
libnfs_muãx_t
 
	gnfs4_›í_cou¡î_muãx
;

643 
libnfs_muãx_t
 
	gnfs4_›í_ˇŒ_muãx
;

644 
nfs_thªad_c⁄ãxt
 *
	gthªad_˘x
;

648 
	snfs_c⁄ãxt
 {

649 
Ωc_c⁄ãxt
 *
	gΩc
;

650 
nfs_c⁄ãxt_öã∫Æ
 *
	gnfsi
;

651 *
	gîr‹_°rög
;

653 #ifde‡
HAVE_MULTITHREADING


654 
nfs_c⁄ãxt
 *
	gma°î_˘x
;

658 #ifde‡
HAVE_MULTITHREADING


659 
	snfs_thªad_c⁄ãxt
 {

660 
nfs_thªad_c⁄ãxt
 *
	g√xt
;

661 
nfs_tid_t
 
	gtid
;

662 
nfs_c⁄ãxt
 
	gnfs
;

666 (*
	gc⁄töue_func
)(
	tnfs_c⁄ãxt
 *
	tnfs
, 
	tnfs_©å
 *
	t©å
,

667 
	tnfs_cb_d©a
 *
	td©a
);

669 
	snfs_cb_d©a
 {

670 
nfs_c⁄ãxt
 *
	gnfs
;

671 
nfsfh
 *
	gnfsfh
;

672 *
	gßved_∑th
, *
	g∑th
;

673 
	glök_cou¡
, 
	gno_fﬁlow
;

675 
nfs_cb
 
	gcb
;

676 *
	g¥iv©e_d©a
;

678 
c⁄töue_func
 
	gc⁄töue_cb
;

679 *
	gc⁄töue_d©a
;

680 (*
	g‰ì_c⁄töue_d©a
)(*);

681 
uöt64_t
 
	gc⁄töue_öt
;

683 
nfs_fh
 
	gfh
;

686 
	gîr‹
;

687 
	gˇn˚l
;

688 
	goom
;

689 #i‡
deföed
(
HAVE_MULTITHREADING
Ë&& deföed(
HAVE_STDATOMIC_H
)

690 
©omic_öt
 
	gnum_ˇŒs
;

692 
	gnum_ˇŒs
;

694 
size_t
 
	gcou¡
, 
	g‹g_cou¡
;

695 
uöt64_t
 
	goff£t
, 
	gmax_off£t
, 
	g‹g_off£t
;

696 *
	gbuf„r
;

697 
	gnŸ_my_buf„r
;

698 c⁄° *
	gu§buf
;

699 
	gupd©e_pos
;

702 
	s√°ed_mou¡s
 {

703 
√°ed_mou¡s
 *
	g√xt
;

704 *
	g∑th
;

705 
nfs_fh
 
	gfh
;

706 
nfs_©å
 
	g©å
;

709 
	#MAX_DIR_CACHE
 128

	)

710 
	#MAX_LINK_COUNT
 40

	)

712 
	snfsdú
 {

713 
nfs_fh
 
	gfh
;

714 
nfs_©å
 
	g©å
;

715 
nfsdú
 *
	g√xt
;

717 
nfsdúít
 *
	gíåõs
;

718 
nfsdúít
 *
	gcuºít
;

721 
	s°©eid
 {

722 
uöt32_t
 
	g£qid
;

723 
	gŸhî
[12];

726 
	snfsfh
 {

727 
nfs_fh
 
	gfh
;

728 
	gis_sync
;

729 
	gis_≠≥nd
;

730 
	gis_dúty
;

731 
uöt64_t
 
	goff£t
;

734 
°©eid
 
	g°©eid
;

735 
uöt32_t
 
	g›í_ow√r
;

737 
uöt32_t
 
	g›í_£qid
;

738 
uöt32_t
 
	glock_£qid
;

739 
°©eid
 
	glock_°©eid
;

742 
Ωc_‰ì_iove˘‹
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_io_ve˘‹s
 *
v
);

743 
Ωc_add_iove˘‹
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_io_ve˘‹s
 *
v
,

744 *
buf
, 
Àn
, (*
‰ì
)(*));

745 c⁄° 
nfs_fh
 *
nfs_gë_roŸfh
(
nfs_c⁄ãxt
 *
nfs
);

747 
nfs_n‹mÆize_∑th
(
nfs_c⁄ãxt
 *
nfs
, *
∑th
);

748 
nfs_‰ì_nfsdú
(
nfsdú
 *nfsdir);

749 
nfs_‰ì_nfsfh
(
nfsfh
 *nfsfh);

751 
nfs_dúˇche_add
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir);

752 
nfsdú
 *
nfs_dúˇche_föd
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_fh
 *
fh
);

753 
nfs_dúˇche_dr›
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_fh
 *
fh
);

755 
nfs3_ac˚ss_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

756 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

757 
nfs3_ac˚ss2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

758 *
¥iv©e_d©a
);

759 
nfs3_chdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

760 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

761 
nfs3_chmod_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

762 
no_fﬁlow
, 
mode
, 
nfs_cb
 
cb
,

763 *
¥iv©e_d©a
);

764 
nfs3_chown_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

765 
no_fﬁlow
, 
uid
, 
gid
,

766 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

767 
nfs3_˛o£_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

768 *
¥iv©e_d©a
);

769 
nfs3_¸ót_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

770 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

771 
nfs3_fchmod_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
mode
,

772 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

773 
nfs3_fchown_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uid
,

774 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

775 
nfs3_f°©_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

776 *
¥iv©e_d©a
);

777 
nfs3_f°©64_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

778 *
¥iv©e_d©a
);

779 
nfs3_fsync_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

780 *
¥iv©e_d©a
);

781 
nfs3_·runˇã_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

782 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

783 
nfs3_lök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

784 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

785 
nfs3_l£ek_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

786 
öt64_t
 
off£t
, 
whí˚
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

787 
nfs3_mkdú2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

788 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

789 
nfs3_mknod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

790 
dev
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

791 
nfs3_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

792 c⁄° *
exp‹t
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

793 
nfs3_›í_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

794 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

795 
nfs3_›ídú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

796 *
¥iv©e_d©a
);

797 
nfs3_¥ód_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

798 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

799 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
);

800 
nfs3_pwrôe_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

801 c⁄° *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

802 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
);

803 
nfs3_ªadlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

804 *
¥iv©e_d©a
);

805 
nfs3_ª«me_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

806 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

807 
nfs3_rmdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

808 *
¥iv©e_d©a
);

809 
nfs3_°©_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

810 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

811 
nfs3_°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

812 
no_fﬁlow
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

813 
nfs3_°©vfs_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

814 *
¥iv©e_d©a
);

815 
nfs3_°©vfs64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

816 *
¥iv©e_d©a
);

817 
nfs3_symlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

818 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

819 
nfs3_åunˇã_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

820 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

821 
nfs3_umou¡_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

822 
nfs3_u∆ök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

823 *
¥iv©e_d©a
);

824 
nfs3_utime_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

825 
utimbuf
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

826 
nfs3_utimes_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

827 
no_fﬁlow
, 
timevÆ
 *
times
,

828 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

829 
nfs3_wrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

830 c⁄° *
buf
, 
size_t
 
cou¡
, 
nfs_cb
 
cb
,

831 *
¥iv©e_d©a
);

833 
nfs4_ac˚ss_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

834 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

835 
nfs4_ac˚ss2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

836 *
¥iv©e_d©a
);

837 
nfs4_chdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

838 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

839 
nfs4_chmod_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

840 
no_fﬁlow
, 
mode
, 
nfs_cb
 
cb
,

841 *
¥iv©e_d©a
);

842 
nfs4_chown_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

843 
no_fﬁlow
, 
uid
, 
gid
,

844 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

845 
nfs4_˛o£_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

846 *
¥iv©e_d©a
);

847 
nfs4_¸ót_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

848 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

849 
nfs4_fchmod_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
mode
,

850 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

851 
nfs4_fchown_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uid
,

852 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

853 
nfs4_f˙é_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

854 
nfs4_f˙é_›
 
cmd
, *
¨g
,

855 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

856 
nfs4_f°©64_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

857 *
¥iv©e_d©a
);

858 
nfs4_fsync_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

859 *
¥iv©e_d©a
);

860 
nfs4_·runˇã_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

861 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

862 
nfs4_lök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

863 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

864 
nfs4_l£ek_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

865 
öt64_t
 
off£t
, 
whí˚
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

866 
nfs4_lockf_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

867 
nfs4_lock_›
 
›
, 
uöt64_t
 
cou¡
,

868 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

869 
nfs4_mkdú2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

870 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

871 
nfs4_mknod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

872 
dev
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

873 
nfs4_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

874 c⁄° *
exp‹t
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

875 
nfs4_›í_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

876 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

877 
nfs4_›ídú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

878 *
¥iv©e_d©a
);

879 
nfs4_¥ód_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

880 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

881 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
);

882 
nfs4_pwrôe_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

883 
uöt64_t
 
off£t
, 
size_t
 
cou¡
, c⁄° *
buf
,

884 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
);

885 
nfs4_ªadlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

886 *
¥iv©e_d©a
);

887 
nfs4_ª«me_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

888 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

889 
nfs4_rmdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

890 *
¥iv©e_d©a
);

891 
nfs4_°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

892 
no_fﬁlow
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

893 
nfs4_°©vfs_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

894 *
¥iv©e_d©a
);

895 
nfs4_°©vfs64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

896 *
¥iv©e_d©a
);

897 
nfs4_symlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

898 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

899 
nfs4_åunˇã_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

900 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

901 
nfs4_u∆ök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

902 *
¥iv©e_d©a
);

903 
nfs4_utime_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

904 
utimbuf
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

905 
nfs4_utimes_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

906 
no_fﬁlow
, 
timevÆ
 *
times
,

907 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

908 
nfs4_wrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

909 
uöt64_t
 
cou¡
, c⁄° *
buf
, 
nfs_cb
 
cb
,

910 *
¥iv©e_d©a
);

912 
Ωc_wrôe_to_sockë
(
Ωc_c⁄ãxt
 *
Ωc
);

913 
_nfs_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

914 c⁄° *
exp‹äame
, 
nfs_cb
 
cb
,

915 *
¥iv©e_d©a
);

917 #ifde‡
HAVE_TLS


918 
és_globÆ_öô
(
Ωc_c⁄ãxt
 *
Ωc
);

919 
és_h™dshake_°©e
 
do_és_h™dshake
(
Ωc_c⁄ãxt
 *
Ωc
);

922 #ifde‡
__˝lu•lus


	@include/nfsc/libnfs-raw.h

23 #i‚de‡
_LIBNFS_RAW_H_


24 
	#_LIBNFS_RAW_H_


	)

26 
	~<°döt.h
>

27 
	~<nfsc/libnfs-zdr.h
>

29 #ifde‡
__˝lu•lus


33 
	sΩc_d©a
 {

34 
size
;

35 *
d©a
;

38 
Ωc_c⁄ãxt
;

39 
EXTERN
 
Ωc_c⁄ãxt
 *
Ωc_öô_c⁄ãxt
();

40 
EXTERN
 
Ωc_de°roy_c⁄ãxt
(
Ωc_c⁄ãxt
 *
Ωc
);

58 
EXTERN
 
Ωc_£t_hash_size
(
Ωc_c⁄ãxt
 *
Ωc
, 
hashes
);

60 
EXTERN
 
Ωc_£t_auth
(
Ωc_c⁄ãxt
 *
Ωc
, 
AUTH
 *
auth
);

88 
EXTERN
 
Ωc_gë_fd
(
Ωc_c⁄ãxt
 *
Ωc
);

89 
EXTERN
 
Ωc_which_evíts
(
Ωc_c⁄ãxt
 *
Ωc
);

90 
EXTERN
 
Ωc_£rvi˚
(
Ωc_c⁄ãxt
 *
Ωc
, 
ªvíts
);

100 
EXTERN
 
Ωc_queue_Àngth
(
Ωc_c⁄ãxt
 *
Ωc
);

108 
EXTERN
 
Ωc_gë_num_awaôög
(
Ωc_c⁄ãxt
 *
Ωc
);

117 
EXTERN
 
Ωc_£t_awaôög_limô
(
Ωc_c⁄ãxt
 *
Ωc
, 
limô
);

124 
EXTERN
 
Ωc_£t_uid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uid
);

125 
EXTERN
 
Ωc_£t_gid
(
Ωc_c⁄ãxt
 *
Ωc
, 
gid
);

126 
EXTERN
 
Ωc_£t_auxûüry_gids
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
Àn
, uöt32_t* 
gids
);

131 
EXTERN
 
Ωc_£t_u£∫ame
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
u£∫ame
);

136 
EXTERN
 
Ωc_c⁄ãxt
 *
Ωc_öô_£rvî_c⁄ãxt
(
s
);

161 (*
£rvi˚_‚
)(
	tΩc_c⁄ãxt
 *
	tΩc
, 
	tΩc_msg
 *
	tˇŒ
, *
	t›aque
);

163 
	s£rvi˚_¥oc
 {

164 
¥oc
;

165 
£rvi˚_‚
 
func
;

166 
zdΩroc_t
 
decode_‚
;

167 
decode_buf_size
;

168 *
›aque
;

175 
EXTERN
 
Ωc_ªgi°î_£rvi˚
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
,

176 
vîsi⁄
, 
£rvi˚_¥oc
 *
¥ocs
,

177 
num_¥ocs
);

179 
EXTERN
 
Ωc_£nd_ª∂y
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_msg
 *
ˇŒ
,

180 *
ª∂y
, 
zdΩroc_t
 
ícode_‚
,

181 
Æloc_höt
);

186 
EXTERN
 *
Ωc_gë_îr‹
(
Ωc_c⁄ãxt
 *
Ωc
);

191 
EXTERN
 
Ωc_c⁄ãxt
 *
nfs_gë_Ωc_c⁄ãxt
(
nfs_c⁄ãxt
 *
nfs
);

197 
EXTERN
 
nfs_fh
 *
nfs_gë_fh
(
nfsfh
 *nfsfh);

203 
EXTERN
 
Ωc_£t_√xt_xid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
xid
);

217 
EXTERN
 
Ωc_£t_fd
(
Ωc_c⁄ãxt
 *
Ωc
, 
fd
);

219 
	#RPC_STATUS_SUCCESS
 0

	)

220 
	#RPC_STATUS_ERROR
 1

	)

221 
	#RPC_STATUS_CANCEL
 2

	)

222 
	#RPC_STATUS_TIMEOUT
 3

	)

241 
EXTERN
 
Ωc_c⁄√˘_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
,

242 
p‹t
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

261 
EXTERN
 
Ωc_c⁄√˘_¥ogøm_async
(
Ωc_c⁄ãxt
 *
Ωc
,

262 c⁄° *
£rvî
,

263 
¥ogøm
, 
vîsi⁄
,

264 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

285 
EXTERN
 
Ωc_c⁄√˘_p‹t_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
,

286 
p‹t
,

287 
¥ogøm
, 
vîsi⁄
,

288 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

295 
EXTERN
 
Ωc_disc⁄√˘
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹
);

320 
Ωc_pdu
;

321 
Ωc_ˇn˚l_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
);

344 
EXTERN
 
Ωc_pdu
 *

345 
Ωc_pm≠2_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

346 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

365 
EXTERN
 
Ωc_pdu
 *

366 
Ωc_pm≠2_gëp‹t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
,

367 
vîsi⁄
, 
¥Ÿocﬁ
,

368 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

387 
EXTERN
 
Ωc_pdu
 *

388 
Ωc_pm≠2_£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
,

389 
vîsi⁄
, 
¥Ÿocﬁ
, 
p‹t
,

390 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

409 
EXTERN
 
Ωc_pdu
 *

410 
Ωc_pm≠2_un£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
,

411 
vîsi⁄
, 
¥Ÿocﬁ
, 
p‹t
,

412 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

431 
EXTERN
 
Ωc_pdu
 *

432 
Ωc_pm≠2_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

433 *
¥iv©e_d©a
);

452 
EXTERN
 
Ωc_pdu
 *

453 
Ωc_pm≠2_ˇŒô_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
,

454 
vîsi⁄
, 
¥o˚duª
,

455 *
d©a
, 
d©Æí
,

456 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

479 
EXTERN
 
Ωc_pdu
 *

480 
Ωc_pm≠3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

481 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

500 
pm≠3_m≠pög
;

501 
EXTERN
 
Ωc_pdu
 *

502 
Ωc_pm≠3_£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

503 
pm≠3_m≠pög
 *
m≠
,

504 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

523 
EXTERN
 
Ωc_pdu
 *

524 
Ωc_pm≠3_un£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

525 
pm≠3_m≠pög
 *
m≠
,

526 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

545 
EXTERN
 
Ωc_pdu
 *

546 
Ωc_pm≠3_gëaddr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

547 
pm≠3_m≠pög
 *
m≠
,

548 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

567 
EXTERN
 
Ωc_pdu
 *

568 
Ωc_pm≠3_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

569 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

588 
EXTERN
 
Ωc_pdu
 *

589 
Ωc_pm≠3_ˇŒô_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
,

590 
vîsi⁄
, 
¥o˚duª
,

591 *
d©a
, 
d©Æí
,

592 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

611 
EXTERN
 
Ωc_pdu
 *

612 
Ωc_pm≠3_gëtime_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

613 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

632 
EXTERN
 
Ωc_pdu
 *

633 
Ωc_pm≠3_uaddr2èddr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, *
uaddr
,

634 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

653 
pm≠3_√tbuf
;

654 
EXTERN
 
Ωc_pdu
 *

655 
Ωc_pm≠3_èddr2uaddr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

656 
pm≠3_√tbuf
 *
√tbuf
,

657 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

662 
EXTERN
 *
mou¡°©3_to_°r
(
°©
);

663 
EXTERN
 
mou¡°©3_to_î∫o
(
îr‹
);

682 
EXTERN
 
Ωc_pdu
 *

683 
Ωc_mou¡3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

684 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

703 
EXTERN
 
Ωc_pdu
 *

704 
Ωc_mou¡3_m¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

705 *
exp‹äame
, *
¥iv©e_d©a
);

724 
EXTERN
 
Ωc_pdu
 *

725 
Ωc_mou¡3_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

726 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

745 
EXTERN
 
Ωc_pdu
 *

746 
Ωc_mou¡3_um¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

747 *
exp‹äame
,

748 *
¥iv©e_d©a
);

767 
EXTERN
 
Ωc_pdu
 *

768 
Ωc_mou¡3_um¡Æl_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

769 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

788 
EXTERN
 
Ωc_pdu
 *

789 
Ωc_mou¡3_exp‹t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

790 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

812 
EXTERN
 
Ωc_pdu
 *

813 
Ωc_mou¡1_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

814 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

833 
EXTERN
 
Ωc_pdu
 *

834 
Ωc_mou¡1_m¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

835 *
exp‹äame
,

836 *
¥iv©e_d©a
);

855 
EXTERN
 
Ωc_pdu
 *

856 
Ωc_mou¡1_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

857 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

876 
EXTERN
 
Ωc_pdu
 *

877 
Ωc_mou¡1_um¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

878 *
exp‹äame
,

879 *
¥iv©e_d©a
);

898 
EXTERN
 
Ωc_pdu
 *

899 
Ωc_mou¡1_um¡Æl_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

900 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

919 
EXTERN
 
Ωc_pdu
 *

920 
Ωc_mou¡1_exp‹t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

921 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

927 
nfs_fh3
;

928 
EXTERN
 *
nfs°©3_to_°r
(
îr‹
);

929 
EXTERN
 
nfs°©3_to_î∫o
(
îr‹
);

948 
EXTERN
 
Ωc_pdu
 *

949 
Ωc_nfs3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

950 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

969 
GETATTR3¨gs
;

970 
EXTERN
 
Ωc_pdu
 *

971 
Ωc_nfs3_gë©å_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

972 
GETATTR3¨gs
 *
¨gs
,

973 *
¥iv©e_d©a
);

992 
PATHCONF3¨gs
;

993 
EXTERN
 
Ωc_pdu
 *

994 
Ωc_nfs3_∑thc⁄f_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

995 
PATHCONF3¨gs
 *
¨gs
,

996 *
¥iv©e_d©a
);

1015 
LOOKUP3¨gs
;

1016 
EXTERN
 
Ωc_pdu
 *

1017 
Ωc_nfs3_lookup_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1018 
LOOKUP3¨gs
 *
¨gs
,

1019 *
¥iv©e_d©a
);

1038 
ACCESS3¨gs
;

1039 
EXTERN
 
Ωc_pdu
 *

1040 
Ωc_nfs3_ac˚ss_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1041 
ACCESS3¨gs
 *
¨gs
,

1042 *
¥iv©e_d©a
);

1061 
READ3¨gs
;

1062 
EXTERN
 
Ωc_pdu
 *

1063 
Ωc_nfs3_ªad_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1064 *
buf
, 
size_t
 
cou¡
,

1065 
READ3¨gs
 *
¨gs
,

1066 *
¥iv©e_d©a
);

1085 
WRITE3¨gs
;

1086 
EXTERN
 
Ωc_pdu
 *

1087 
Ωc_nfs3_wrôe_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1088 
WRITE3¨gs
 *
¨gs
,

1089 *
¥iv©e_d©a
);

1108 
COMMIT3¨gs
;

1109 
EXTERN
 
Ωc_pdu
 *

1110 
Ωc_nfs3_commô_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1111 
COMMIT3¨gs
 *
¨gs
,

1112 *
¥iv©e_d©a
);

1131 
SETATTR3¨gs
;

1132 
EXTERN
 
Ωc_pdu
 *

1133 
Ωc_nfs3_£èâr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1134 
SETATTR3¨gs
 *
¨gs
,

1135 *
¥iv©e_d©a
);

1154 
MKDIR3¨gs
;

1155 
EXTERN
 
Ωc_pdu
 *

1156 
Ωc_nfs3_mkdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1157 
MKDIR3¨gs
 *
¨gs
,

1158 *
¥iv©e_d©a
);

1177 
RMDIR3¨gs
;

1178 
EXTERN
 
Ωc_pdu
 *

1179 
Ωc_nfs3_rmdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1180 
RMDIR3¨gs
 *
¨gs
,

1181 *
¥iv©e_d©a
);

1200 
CREATE3¨gs
;

1201 
EXTERN
 
Ωc_pdu
 *

1202 
Ωc_nfs3_¸óã_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1203 
CREATE3¨gs
 *
¨gs
,

1204 *
¥iv©e_d©a
);

1223 
MKNOD3¨gs
;

1224 
EXTERN
 
Ωc_pdu
 *

1225 
Ωc_nfs3_mknod_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1226 
MKNOD3¨gs
 *
¨gs
,

1227 *
¥iv©e_d©a
);

1246 
REMOVE3¨gs
;

1247 
EXTERN
 
Ωc_pdu
 *

1248 
Ωc_nfs3_ªmove_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1249 
REMOVE3¨gs
 *
¨gs
,

1250 *
¥iv©e_d©a
);

1269 
READDIR3¨gs
;

1270 
EXTERN
 
Ωc_pdu
 *

1271 
Ωc_nfs3_ªaddú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1272 
READDIR3¨gs
 *
¨gs
,

1273 *
¥iv©e_d©a
);

1292 
READDIRPLUS3¨gs
;

1293 
EXTERN
 
Ωc_pdu
 *

1294 
Ωc_nfs3_ªaddú∂us_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1295 
READDIRPLUS3¨gs
 *
¨gs
,

1296 *
¥iv©e_d©a
);

1315 
FSSTAT3¨gs
;

1316 
EXTERN
 
Ωc_pdu
 *

1317 
Ωc_nfs3_fs°©_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1318 
FSSTAT3¨gs
 *
¨gs
,

1319 *
¥iv©e_d©a
);

1338 
FSINFO3¨gs
;

1339 
EXTERN
 
Ωc_pdu
 *

1340 
Ωc_nfs3_fsöfo_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1341 
FSINFO3¨gs
 *
¨gs
,

1342 *
¥iv©e_d©a
);

1361 
READLINK3¨gs
;

1362 
EXTERN
 
Ωc_pdu
 *

1363 
Ωc_nfs3_ªadlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1364 
READLINK3¨gs
 *
¨gs
,

1365 *
¥iv©e_d©a
);

1384 
SYMLINK3¨gs
;

1385 
EXTERN
 
Ωc_pdu
 *

1386 
Ωc_nfs3_symlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1387 
SYMLINK3¨gs
 *
¨gs
,

1388 *
¥iv©e_d©a
);

1407 
RENAME3¨gs
;

1408 
EXTERN
 
Ωc_pdu
 *

1409 
Ωc_nfs3_ª«me_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1410 
RENAME3¨gs
 *
¨gs
,

1411 *
¥iv©e_d©a
);

1430 
LINK3¨gs
;

1431 
EXTERN
 
Ωc_pdu
 *

1432 
Ωc_nfs3_lök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1433 
LINK3¨gs
 *
¨gs
,

1434 *
¥iv©e_d©a
);

1457 
EXTERN
 
Ωc_pdu
 *

1458 
Ωc_nfs2_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

1459 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

1478 
GETATTR2¨gs
;

1479 
EXTERN
 
Ωc_pdu
 *

1480 
Ωc_nfs2_gë©å_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1481 
GETATTR2¨gs
 *
¨gs
,

1482 *
¥iv©e_d©a
);

1501 
SETATTR2¨gs
;

1502 
EXTERN
 
Ωc_pdu
 *

1503 
Ωc_nfs2_£èâr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1504 
SETATTR2¨gs
 *
¨gs
,

1505 *
¥iv©e_d©a
);

1524 
LOOKUP2¨gs
;

1525 
EXTERN
 
Ωc_pdu
 *

1526 
Ωc_nfs2_lookup_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1527 
LOOKUP2¨gs
 *
¨gs
,

1528 *
¥iv©e_d©a
);

1547 
READLINK2¨gs
;

1548 
EXTERN
 
Ωc_pdu
 *

1549 
Ωc_nfs2_ªadlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1550 
READLINK2¨gs
 *
¨gs
,

1551 *
¥iv©e_d©a
);

1570 
READ2¨gs
;

1571 
EXTERN
 
Ωc_pdu
 *

1572 
Ωc_nfs2_ªad_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1573 
READ2¨gs
 *
¨gs
,

1574 *
¥iv©e_d©a
);

1593 
WRITE2¨gs
;

1594 
EXTERN
 
Ωc_pdu
 *

1595 
Ωc_nfs2_wrôe_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1596 
WRITE2¨gs
 *
¨gs
,

1597 *
¥iv©e_d©a
);

1616 
CREATE2¨gs
;

1617 
EXTERN
 
Ωc_pdu
 *

1618 
Ωc_nfs2_¸óã_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1619 
CREATE2¨gs
 *
¨gs
,

1620 *
¥iv©e_d©a
);

1639 
REMOVE2¨gs
;

1640 
EXTERN
 
Ωc_pdu
 *

1641 
Ωc_nfs2_ªmove_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1642 
REMOVE2¨gs
 *
¨gs
,

1643 *
¥iv©e_d©a
);

1662 
RENAME2¨gs
;

1663 
EXTERN
 
Ωc_pdu
 *

1664 
Ωc_nfs2_ª«me_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1665 
RENAME2¨gs
 *
¨gs
,

1666 *
¥iv©e_d©a
);

1685 
LINK2¨gs
;

1686 
EXTERN
 
Ωc_pdu
 *

1687 
Ωc_nfs2_lök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1688 
LINK2¨gs
 *
¨gs
,

1689 *
¥iv©e_d©a
);

1708 
SYMLINK2¨gs
;

1709 
EXTERN
 
Ωc_pdu
 *

1710 
Ωc_nfs2_symlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1711 
SYMLINK2¨gs
 *
¨gs
,

1712 *
¥iv©e_d©a
);

1731 
MKDIR2¨gs
;

1732 
EXTERN
 
Ωc_pdu
 *

1733 
Ωc_nfs2_mkdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1734 
MKDIR2¨gs
 *
¨gs
,

1735 *
¥iv©e_d©a
);

1754 
RMDIR2¨gs
;

1755 
EXTERN
 
Ωc_pdu
 *

1756 
Ωc_nfs2_rmdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1757 
RMDIR2¨gs
 *
¨gs
,

1758 *
¥iv©e_d©a
);

1777 
READDIR2¨gs
;

1778 
EXTERN
 
Ωc_pdu
 *

1779 
Ωc_nfs2_ªaddú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1780 
READDIR2¨gs
 *
¨gs
,

1781 *
¥iv©e_d©a
);

1800 
STATFS2¨gs
;

1801 
EXTERN
 
Ωc_pdu
 *

1802 
Ωc_nfs2_°©fs_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1803 
STATFS2¨gs
 *
¨gs
,

1804 *
¥iv©e_d©a
);

1809 
EXTERN
 *
rquŸa°©_to_°r
(
îr‹
);

1810 
EXTERN
 
rquŸa°©_to_î∫o
(
îr‹
);

1829 
EXTERN
 
Ωc_pdu
 *

1830 
Ωc_rquŸa1_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

1831 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

1850 
EXTERN
 
Ωc_pdu
 *

1851 
Ωc_rquŸa1_gëquŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1852 *
exp‹äame
, 
uid
,

1853 *
¥iv©e_d©a
);

1872 
EXTERN
 
Ωc_pdu
 *

1873 
Ωc_rquŸa1_gëa˘ivequŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1874 *
exp‹äame
, 
uid
,

1875 *
¥iv©e_d©a
);

1895 
EXTERN
 
Ωc_pdu
 *

1896 
Ωc_rquŸa2_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
,

1897 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

1916 
EXTERN
 
Ωc_pdu
 *

1917 
Ωc_rquŸa2_gëquŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1918 *
exp‹äame
, 
ty≥
, 
uid
,

1919 *
¥iv©e_d©a
);

1938 
EXTERN
 
Ωc_pdu
 *

1939 
Ωc_rquŸa2_gëa˘ivequŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1940 *
exp‹äame
, 
ty≥
, 
uid
,

1941 *
¥iv©e_d©a
);

1965 
EXTERN
 
Ωc_pdu
 *

1966 
Ωc_nfß˛3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1967 *
¥iv©e_d©a
);

1986 
GETACL3¨gs
;

1987 
EXTERN
 
Ωc_pdu
 *

1988 
Ωc_nfß˛3_gëa˛_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1989 
GETACL3¨gs
 *
¨gs
,

1990 *
¥iv©e_d©a
);

2009 
SETACL3¨gs
;

2010 
EXTERN
 
Ωc_pdu
 *

2011 
Ωc_nfß˛3_£è˛_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2012 
SETACL3¨gs
 *
¨gs
,

2013 *
¥iv©e_d©a
);

2021 
EXTERN
 *
∆m°©4_to_°r
(
°©
);

2040 
EXTERN
 
Ωc_pdu
 *

2041 
Ωc_∆m4_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2042 *
¥iv©e_d©a
);

2061 
NLM4_TEST¨gs
;

2062 
EXTERN
 
Ωc_pdu
 *

2063 
Ωc_∆m4_ã°_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2064 
NLM4_TEST¨gs
 *
¨gs
,

2065 *
¥iv©e_d©a
);

2084 
NLM4_LOCK¨gs
;

2085 
EXTERN
 
Ωc_pdu
 *

2086 
Ωc_∆m4_lock_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2087 
NLM4_LOCK¨gs
 *
¨gs
,

2088 *
¥iv©e_d©a
);

2107 
NLM4_CANC¨gs
;

2108 
EXTERN
 
Ωc_pdu
 *

2109 
Ωc_∆m4_ˇn˚l_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2110 
NLM4_CANC¨gs
 *
¨gs
,

2111 *
¥iv©e_d©a
);

2130 
NLM4_UNLOCK¨gs
;

2131 
EXTERN
 
Ωc_pdu
 *

2132 
Ωc_∆m4_u∆ock_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2133 
NLM4_UNLOCK¨gs
 *
¨gs
,

2134 *
¥iv©e_d©a
);

2153 
NLM4_SHARE¨gs
;

2154 
EXTERN
 
Ωc_pdu
 *

2155 
Ωc_∆m4_sh¨e_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2156 
NLM4_SHARE¨gs
 *
¨gs
,

2157 *
¥iv©e_d©a
);

2176 
EXTERN
 
Ωc_pdu
 *

2177 
Ωc_∆m4_unsh¨e_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2178 
NLM4_SHARE¨gs
 *
¨gs
,

2179 *
¥iv©e_d©a
);

2184 
EXTERN
 *
nsm°©1_to_°r
(
°©
);

2203 
EXTERN
 
Ωc_pdu
 *

2204 
Ωc_nsm1_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2205 *
¥iv©e_d©a
);

2224 
NSM1_STAT¨gs
;

2225 
EXTERN
 
Ωc_pdu
 *

2226 
Ωc_nsm1_°©_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2227 
NSM1_STAT¨gs
 *
¨gs
,

2228 *
¥iv©e_d©a
);

2247 
NSM1_MON¨gs
;

2248 
EXTERN
 
Ωc_pdu
 *

2249 
Ωc_nsm1_m⁄_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2250 
NSM1_MON¨gs
 *
¨gs
,

2251 *
¥iv©e_d©a
);

2270 
NSM1_UNMON¨gs
;

2271 
EXTERN
 
Ωc_pdu
 *

2272 
Ωc_nsm1_unm⁄_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2273 
NSM1_UNMON¨gs
 *
¨gs
,

2274 *
¥iv©e_d©a
);

2293 
NSM1_UNMONALL¨gs
;

2294 
EXTERN
 
Ωc_pdu
 *

2295 
Ωc_nsm1_unm⁄Æl_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2296 
NSM1_UNMONALL¨gs
 *
¨gs
,

2297 *
¥iv©e_d©a
);

2316 
EXTERN
 
Ωc_pdu
 *

2317 
Ωc_nsm1_simu¸ash_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2318 *
¥iv©e_d©a
);

2337 
NSM1_NOTIFY¨gs
;

2338 
EXTERN
 
Ωc_pdu
 *

2339 
Ωc_nsm1_nŸify_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2340 
NSM1_NOTIFY¨gs
 *
¨gs
,

2341 *
¥iv©e_d©a
);

2346 
EXTERN
 *
nfs°©4_to_°r
(
îr‹
);

2347 
EXTERN
 
nfs°©4_to_î∫o
(
îr‹
);

2365 
EXTERN
 
Ωc_pdu
 *

2366 
Ωc_nfs4_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2367 *
¥iv©e_d©a
);

2387 
COMPOUND4¨gs
;

2388 
EXTERN
 
Ωc_pdu
 *

2389 
Ωc_nfs4_compound_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2390 
COMPOUND4¨gs
 *
¨gs
,

2391 *
¥iv©e_d©a
);

2410 
COMPOUND4¨gs
;

2411 
EXTERN
 
Ωc_pdu
 *

2412 
Ωc_nfs4_compound_èsk2
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2413 
COMPOUND4¨gs
 *
¨gs
,

2414 *
¥iv©e_d©a
,

2415 
size_t
 
Æloc_höt
);

2437 
EXTERN
 
Ωc_pdu
 *

2438 
Ωc_nfs4_ªad_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2439 *
buf
, 
size_t
 
cou¡
,

2440 
COMPOUND4¨gs
 *
¨gs
,

2441 *
¥iv©e_d©a
);

2463 
EXTERN
 
Ωc_pdu
 *

2464 
Ωc_nfs4_wrôe_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

2465 c⁄° *
buf
, 
size_t
 
cou¡
,

2466 
COMPOUND4¨gs
 *
¨gs
,

2467 *
¥iv©e_d©a
);

2485 
EXTERN
 
Ωc_pdu
 *

2486 
Ωc_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
,

2487 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

2489 #ifde‡
HAVE_TLS


2510 
EXTERN
 
Ωc_pdu
 *

2511 
Ωc_nuŒ_èsk_authés
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_vîsi⁄
, 
Ωc_cb
 
cb
,

2512 *
¥iv©e_d©a
);

2515 #ifde‡
__˝lu•lus


	@include/nfsc/libnfs-zdr.h

30 #i‚de‡
_LIBNFS_ZDR_H_


31 
	#_LIBNFS_ZDR_H_


	)

33 #ifde‡
WIN32


34 #i‚de‡
CADDR_T_DEFINED


35 
	#CADDR_T_DEFINED


	)

36 *
	tˇddr_t
;

38 
	~<wösock2.h
>

41 
	~<°dio.h
>

42 
	~<as£π.h
>

43 
	~<°döt.h
>

44 
	~<sys/ty≥s.h
>

46 #ifde‡
__˝lu•lus


50 
	#_RPC_RPC_H
 1

	)

51 
	#_RPC_ZDR_H
 1

	)

52 
	#_RPC_AUTH_H
 1

	)

55 
	tCLIENT
;

56 
	ssvc_ªq
 {

57 
_dummy_
;

59 
	tSVCXPRT
;

65 
	#ZDR_INLINE
(...Ë
NULL


	)

66 
	#IZDR_PUT_U_LONG
(...Ë
	`as£π
(0)

	)

67 
	#IZDR_GET_U_LONG
(...Ë(
	`as£π
(0), 0)

	)

68 
	#IZDR_PUT_LONG
(...Ë
	`as£π
(0)

	)

69 
	#IZDR_GET_LONG
(...Ë(
	`as£π
(0), 0)

	)

70 
	#IZDR_PUT_BOOL
(...Ë
	`as£π
(0)

	)

71 
	#IZDR_GET_BOOL
(...Ë(
	`as£π
(0), 0)

	)

73 #i‚de‡
TRUE


74 
	#TRUE
 1

	)

76 #i‚de‡
FALSE


77 
	#FALSE
 0

	)

80 
	ezdr_›
 {

81 
ZDR_ENCODE
 = 0,

82 
ZDR_DECODE
 = 1

85 
zdr_mem
;

87 
	sZDR
 {

88 
zdr_›
 
x_›
;

89 
ˇddr_t
 
buf
;

90 
size
;

91 
pos
;

92 
zdr_mem
 *
mem
;

94 
ZDR
 
	tZDR
;

97 #ifde‡
__MINGW32__


98 
uöt32_t
 
	tu_öt
;

100 
uöt32_t
 
	tíum_t
;

101 
uöt32_t
 
	tboﬁ_t
;

103 
uöt32_t
 (*
	tzdΩroc_t
Ë(
	tZDR
 *, *,...);

105 
	#AUTH_NONE
 0

	)

106 
	#AUTH_NULL
 0

	)

107 
	#AUTH_SYS
 1

	)

108 
	#AUTH_UNIX
 1

	)

109 
	#AUTH_GSS
 6

	)

111 #ifde‡
HAVE_TLS


112 
	#AUTH_TLS
 7

	)

115 
	s›aque_¸ed
 {

116 
uöt32_t
 
ﬂ_Êav‹
;

117 
ˇddr_t
 
ﬂ_ba£
;

118 
uöt32_t
 
ﬂ_Àngth
;

121 
gss_˘x_id_°ru˘
;

122 
	s›aque_vîf
 {

123 
uöt32_t
 
ﬂ_Êav‹
;

124 
ˇddr_t
 
ﬂ_ba£
;

125 
uöt32_t
 
ﬂ_Àngth
;

128 
gss_˘x_id_°ru˘
 *
gss_c⁄ãxt
;

130 
›aque_vîf
 
_nuŒ_auth
;

132 
	sAUTH
 {

133 
›aque_¸ed
 
	gah_¸ed
;

134 
›aque_vîf
 
	gah_vîf
;

135 
ˇddr_t
 
	gah_¥iv©e
;

138 
	#RPC_MSG_VERSION
 2

	)

140 
	emsg_ty≥
 {

141 
	gCALL
 = 0,

142 
	gREPLY
 = 1

145 
	eª∂y_°©
 {

146 
	gMSG_ACCEPTED
=0,

147 
	gMSG_DENIED
=1

150 
	eac˚±_°©
 {

151 
	gSUCCESS
 = 0,

152 
	gPROG_UNAVAIL
 = 1,

153 
	gPROG_MISMATCH
 = 2,

154 
	gPROC_UNAVAIL
 = 3,

155 
	gGARBAGE_ARGS
 = 4,

156 
	gSYSTEM_ERR
 = 5

159 
	eªje˘_°©
 {

160 
	gRPC_MISMATCH
 = 0,

161 
	gAUTH_ERROR
 = 1

164 
	eauth_°©
 {

165 
	gAUTH_OK
=0,

169 
	gAUTH_BADCRED
 = 1,

170 
	gAUTH_REJECTEDCRED
 = 2,

171 
	gAUTH_BADVERF
 = 3,

172 
	gAUTH_REJECTEDVERF
 = 4,

173 
	gAUTH_TOOWEAK
 = 5,

177 
	gAUTH_INVALIDRESP
 = 6,

178 
	gAUTH_FAILED
 = 7

181 
	sˇŒ_body
 {

182 
uöt32_t
 
	gΩcvîs
;

183 
uöt32_t
 
	g¥og
;

184 
uöt32_t
 
	gvîs
;

185 
uöt32_t
 
	g¥oc
;

186 
›aque_¸ed
 
	g¸ed
;

187 
›aque_vîf
 
	gvîf
;

188 *
	g¨gs
;

191 
	sac˚±ed_ª∂y
 {

192 
›aque_vîf
 
	gvîf
;

193 
uöt32_t
 
	g°©
;

196 
ˇddr_t
 
	gwhîe
;

197 
zdΩroc_t
 
	g¥oc
;

200 
uöt32_t
 
	gkrb5i
;

201 
uöt32_t
 
	gkrb5p
;

202 *
	gouçut_buf„r
;

203 } 
	gªsu…s
;

205 
uöt32_t
 
	glow
;

206 
uöt32_t
 
	ghigh
;

207 } 
	gmism©ch_öfo
;

208 } 
	gª∂y_d©a
;

211 
	sªje˘ed_ª∂y
 {

212 
ªje˘_°©
 
	g°©
;

215 
uöt32_t
 
	glow
;

216 
uöt32_t
 
	ghigh
;

217 } 
	gmism©ch_öfo
;

218 
auth_°©
 
	g°©
;

219 } 
	gªje˘_d©a
;

222 
	sª∂y_body
 {

223 
uöt32_t
 
	g°©
;

225 
ac˚±ed_ª∂y
 
	g¨ïly
;

226 
ªje˘ed_ª∂y
 
	gºïly
;

227 } 
	gª∂y
;

230 
	sΩc_msg
 {

231 
uöt32_t
 
	gxid
;

233 
uöt32_t
 
	gdúe˘i⁄
;

235 
ˇŒ_body
 
	gcbody
;

236 
ª∂y_body
 
	grbody
;

237 } 
	gbody
;

240 
	#zdrmem_¸óã
 
libnfs_zdrmem_¸óã


	)

241 
libnfs_zdrmem_¸óã
(
ZDR
 *
zdrs
, c⁄° 
ˇddr_t
 
addr
, 
uöt32_t
 
size
, 
zdr_›
 
x›
);

243 
	#zdr_de°roy
 
libnfs_zdr_de°roy


	)

244 
libnfs_zdr_de°roy
(
ZDR
 *
zdrs
);

246 
	#zdr_byãs
 
libnfs_zdr_byãs


	)

247 
boﬁ_t
 
libnfs_zdr_byãs
(
ZDR
 *
zdrs
, **
buÂ
, 
uöt32_t
 *
size
, uöt32_à
maxsize
);

249 
	#zdr_u_öt
 
libnfs_zdr_u_öt


	)

250 
	#zdr_uöt32_t
 
libnfs_zdr_u_öt


	)

251 
boﬁ_t
 
libnfs_zdr_u_öt
(
ZDR
 *
zdrs
, 
uöt32_t
 *
u
);

253 
	#zdr_öt
 
libnfs_zdr_öt


	)

254 
	#zdr_öt32_t
 
libnfs_zdr_öt


	)

255 
boﬁ_t
 
libnfs_zdr_öt
(
ZDR
 *
zdrs
, 
öt32_t
 *
i
);

257 
	#zdr_uöt64_t
 
libnfs_zdr_uöt64_t


	)

258 
boﬁ_t
 
libnfs_zdr_uöt64_t
(
ZDR
 *
zdrs
, 
uöt64_t
 *
u
);

260 
	#zdr_öt64_t
 
libnfs_zdr_öt64_t


	)

261 
boﬁ_t
 
libnfs_zdr_öt64_t
(
ZDR
 *
zdrs
, 
öt64_t
 *
i
);

263 
	#zdr_íum
 
libnfs_zdr_íum


	)

264 
boﬁ_t
 
libnfs_zdr_íum
(
ZDR
 *
zdrs
, 
íum_t
 *
e
);

266 
	#zdr_boﬁ
 
libnfs_zdr_boﬁ


	)

267 
boﬁ_t
 
libnfs_zdr_boﬁ
(
ZDR
 *
zdrs
, boﬁ_à*
b
);

269 
	#zdr_void
 
libnfs_zdr_void


	)

270 
boﬁ_t
 
libnfs_zdr_void
(
ZDR
 *
zdrs
, *);

272 
	#zdr_poöãr
 
libnfs_zdr_poöãr


	)

273 
boﬁ_t
 
libnfs_zdr_poöãr
(
ZDR
 *
zdrs
, **
objp
, 
uöt32_t
 
size
, 
zdΩroc_t
 
¥oc
);

275 
	#zdr_›aque
 
libnfs_zdr_›aque


	)

276 
boﬁ_t
 
libnfs_zdr_›aque
(
ZDR
 *
zdrs
, *
objp
, 
uöt32_t
 
size
);

278 
	#zdr_°rög
 
libnfs_zdr_°rög


	)

279 
boﬁ_t
 
libnfs_zdr_°rög
(
ZDR
 *
zdrs
, **
°Ω
, 
uöt32_t
 
maxsize
);

281 
	#zdr_¨øy
 
libnfs_zdr_¨øy


	)

282 
boﬁ_t
 
libnfs_zdr_¨øy
(
ZDR
 *
zdrs
, **
¨Ω
, 
uöt32_t
 *
size
, uöt32_à
maxsize
, uöt32_à
ñsize
, 
zdΩroc_t
 
¥oc
);

284 
	#zdr_£ços
 
libnfs_zdr_£ços


	)

285 
boﬁ_t
 
libnfs_zdr_£ços
(
ZDR
 *
zdrs
, 
uöt32_t
 
pos
);

287 
	#zdr_gëpos
 
libnfs_zdr_gëpos


	)

288 
uöt32_t
 
libnfs_zdr_gëpos
(
ZDR
 *
zdrs
);

290 
	#zdr_gë±r
 
libnfs_zdr_gë±r


	)

291 *
libnfs_zdr_gë±r
(
ZDR
 *
zdrs
);

293 
	#zdr_‰ì
 
libnfs_zdr_‰ì


	)

294 
libnfs_zdr_‰ì
(
zdΩroc_t
 
¥oc
, *
objp
);

296 
	gΩc_c⁄ãxt
;

298 
	#zdr_ˇŒmsg
 
libnfs_zdr_ˇŒmsg


	)

299 
boﬁ_t
 
libnfs_zdr_ˇŒmsg
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
Ωc_msg
 *
msg
);

301 
	#zdr_ª∂ymsg
 
libnfs_zdr_ª∂ymsg


	)

302 
boﬁ_t
 
libnfs_zdr_ª∂ymsg
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
Ωc_msg
 *
msg
);

304 
	#authn⁄e_¸óã
 
libnfs_authn⁄e_¸óã


	)

305 
AUTH
 *
libnfs_authn⁄e_¸óã
();

307 
	#authunix_¸óã
 
libnfs_authunix_¸óã


	)

308 
AUTH
 *
libnfs_authunix_¸óã
(c⁄° *
ho°
, 
uöt32_t
 
uid
, uöt32_à
gid
, uöt32_à
Àn
, uöt32_à*
groups
);

310 
	#authunix_¸óã_deÁu…
 
libnfs_authunix_¸óã_deÁu…


	)

311 
AUTH
 *
libnfs_authunix_¸óã_deÁu…
();

313 
libnfs_authgss_öô
(
Ωc_c⁄ãxt
 *
Ωc
);

314 
libnfs_authgss_gí_¸eds
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdr
, 
Àvñ
);

316 
	#auth_de°roy
 
libnfs_auth_de°roy


	)

317 
libnfs_auth_de°roy
(
AUTH
 *
auth
);

319 #ifde‡
__˝lu•lus


	@include/nfsc/libnfs.h

23 #i‚de‡
_LIBNFS_H_


24 
	#_LIBNFS_H_


	)

26 #ifde‡
PS2_EE


27 
	~"ps2_com∑t.h
"

30 
	~<°döt.h
>

31 #i‡
deföed
(
__ANDROID__
Ë|| deföed(
AROS
Ë|| deföed(
__PPU__
) \

32 || ( 
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
ËË|| deföed(
__FªeBSD__
Ë|| 
	$deföed
(
__O≥nBSD__
)

33 
	~<sys/time.h
>

35 
	~<time.h
>

38 #ifde‡
__˝lu•lus


42 
	#LIBNFS_API_V2


	)

43 
	#LIBNFS_FEATURE_DEBUG


	)

44 
	#LIBNFS_FEATURE_UMOUNT


	)

45 
	#LIBNFS_FEATURE_MULTITHREADING


	)

47 
	#NFS_BLKSIZE
 4096

	)

49 
nfs_c⁄ãxt
;

50 
Ωc_c⁄ãxt
;

52 
	snfs_uæ
 {

53 *
£rvî
;

54 *
∑th
;

55 *
fûe
;

58 #i‡
	`deföed
(
WIN32
Ë&& deföed(
libnfs_EXPORTS
)

59 
	#EXTERN
 
	`__de˛•ec
–
dŒexp‹t
 )

	)

61 #i‚de‡
EXTERN


62 
	#EXTERN


	)

66 #ifde‡
WIN32


67 
	~<wösock2.h
>

68 #ifde‡
HAVE_FUSE_H


69 
	~<fu£.h
>

71 
	s°©vfs
 {

72 
uöt32_t
 
f_bsize
;

73 
uöt32_t
 
f_‰size
;

74 
uöt64_t
 
f_blocks
;

75 
uöt64_t
 
f_b‰ì
;

76 
uöt64_t
 
f_bavaû
;

77 
uöt32_t
 
f_fûes
;

78 
uöt32_t
 
f_f‰ì
;

79 
uöt32_t
 
f_Ávaû
;

80 
uöt32_t
 
f_fsid
;

81 
uöt32_t
 
f_Êag
;

82 
uöt32_t
 
f_«memax
;

85 #i‡!
	`deföed
(
__MINGW32__
)

86 
	sutimbuf
 {

87 
time_t
 
a˘ime
;

88 
time_t
 
modtime
;

91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

124 
EXTERN
 
	`nfs_gë_fd
(
nfs_c⁄ãxt
 *
nfs
);

125 
EXTERN
 
	`nfs_which_evíts
(
nfs_c⁄ãxt
 *
nfs
);

126 
EXTERN
 
	`nfs_£rvi˚
(
nfs_c⁄ãxt
 *
nfs
, 
ªvíts
);

133 
EXTERN
 
	`nfs_queue_Àngth
(
nfs_c⁄ãxt
 *
nfs
);

138 
AUTH
;

139 
EXTERN
 
	`nfs_£t_auth
(
nfs_c⁄ãxt
 *
nfs
, 
AUTH
 *
auth
);

144 
	eΩc_£c
 {

145 
RPC_SEC_UNDEFINED
 = 0,

146 
RPC_SEC_KRB5
,

147 
RPC_SEC_KRB5I
,

148 
RPC_SEC_KRB5P
,

150 
EXTERN
 
	`nfs_£t_£curôy
(
nfs_c⁄ãxt
 *
nfs
, 
Ωc_£c
 
£c
);

152 #ifde‡
HAVE_TLS


157 
	eΩc_x¥t£c
 {

158 
RPC_XPRTSEC_UNDEFINED
 = 0,

159 
RPC_XPRTSEC_NONE
,

160 
RPC_XPRTSEC_TLS
,

161 
RPC_XPRTSEC_MTLS
,

164 
EXTERN
 
	`nfs_£t_x¥t£curôy
(
nfs_c⁄ãxt
 *
nfs
, 
Ωc_x¥t£c
 
x¥t£c
);

171 
EXTERN
 
	`nfs_£t_öãrÁ˚
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
i‚ame
);

176 
EXTERN
 *
	`nfs_gë_îr‹
(
nfs_c⁄ãxt
 *
nfs
);

182 (*
	tnfs_cb
)(
	tîr
, 
	tnfs_c⁄ãxt
 *
	tnfs
, *
	td©a
,

183 *
	t¥iv©e_d©a
);

188 (*
	tΩc_cb
)(
	tΩc_c⁄ãxt
 *
	tΩc
, 
	t°©us
, *
	td©a
,

189 *
	t¥iv©e_d©a
);

202 
EXTERN
 
nfs_c⁄ãxt
 *
	`nfs_öô_c⁄ãxt
();

206 
EXTERN
 
	`nfs_de°roy_c⁄ãxt
(
nfs_c⁄ãxt
 *
nfs
);

236 
EXTERN
 
	`nfs_£t_hash_size
(
nfs_c⁄ãxt
 *
nfs
, 
hashes
);

293 
EXTERN
 
nfs_uæ
 *
	`nfs_∑r£_uæ_fuŒ
(
nfs_c⁄ãxt
 *
nfs
,

294 c⁄° *
uæ
);

300 
EXTERN
 
nfs_uæ
 *
	`nfs_∑r£_uæ_dú
(
nfs_c⁄ãxt
 *
nfs
,

301 c⁄° *
uæ
);

307 
EXTERN
 
nfs_uæ
 *
	`nfs_∑r£_uæ_öcom∂ëe
(
nfs_c⁄ãxt
 *
nfs
,

308 c⁄° *
uæ
);

314 
EXTERN
 
	`nfs_de°roy_uæ
(
nfs_uæ
 *
uæ
);

317 
nfsfh
;

322 
EXTERN
 
size_t
 
	`nfs_gë_ªadmax
(
nfs_c⁄ãxt
 *
nfs
);

327 
EXTERN
 
size_t
 
	`nfs_gë_wrôemax
(
nfs_c⁄ãxt
 *
nfs
);

332 
EXTERN
 
	`nfs_£t_ªadmax
(
nfs_c⁄ãxt
 *
nfs
, 
size_t
 
ªadmax
);

337 
EXTERN
 
	`nfs_£t_wrôemax
(
nfs_c⁄ãxt
 *
nfs
, 
size_t
 
wrôemax
);

343 
EXTERN
 
	`nfs_£t_t˝_syn˙t
(
nfs_c⁄ãxt
 *
nfs
, 
v
);

344 
EXTERN
 
	`nfs_£t_uid
(
nfs_c⁄ãxt
 *
nfs
, 
uid
);

345 
EXTERN
 
	`nfs_£t_gid
(
nfs_c⁄ãxt
 *
nfs
, 
gid
);

346 
EXTERN
 
	`nfs_£t_auxûüry_gids
(
nfs_c⁄ãxt
 *
nfs
, 
uöt32_t
 
Àn
, uöt32_t* 
gids
);

347 
EXTERN
 
	`nfs_£t_debug
(
nfs_c⁄ãxt
 *
nfs
, 
Àvñ
);

348 
EXTERN
 
	`nfs_£t_auto_åavî£_mou¡s
(
nfs_c⁄ãxt
 *
nfs
, 
íabÀd
);

349 
EXTERN
 
	`nfs_£t_dúˇche
(
nfs_c⁄ãxt
 *
nfs
, 
íabÀd
);

350 
EXTERN
 
	`nfs_£t_aut‹ec⁄√˘
(
nfs_c⁄ãxt
 *
nfs
, 
num_ªåõs
);

351 
EXTERN
 
	`nfs_£t_ªå™s
(
nfs_c⁄ãxt
 *
nfs
, 
ªå™s
);

352 
EXTERN
 
	`nfs_£t_nf•‹t
(
nfs_c⁄ãxt
 *
nfs
, 
p‹t
);

353 
EXTERN
 
	`nfs_£t_mou¡p‹t
(
nfs_c⁄ãxt
 *
nfs
, 
p‹t
);

354 
EXTERN
 
	`nfs_£t_ªaddú_max_buf„r_size
(
nfs_c⁄ãxt
 *
nfs
, 
uöt32_t
 
dúcou¡
, uöt32_à
maxcou¡
);

361 
EXTERN
 
	`nfs_£t_vîsi⁄
(
nfs_c⁄ãxt
 *
nfs
, 
vîsi⁄
);

367 
EXTERN
 
	`nfs_gë_vîsi⁄
(
nfs_c⁄ãxt
 *
nfs
);

386 
EXTERN
 
	`nfs_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

387 c⁄° *
exp‹äame
, 
nfs_cb
 
cb
,

388 *
¥iv©e_d©a
);

390 
	`nfs_avi_func
();

397 
EXTERN
 
	`nfs_mou¡
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

398 c⁄° *
exp‹äame
);

420 
EXTERN
 
	`nfs_umou¡_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_cb
 
cb
,

421 *
¥iv©e_d©a
);

431 
EXTERN
 
	`nfs_umou¡
(
nfs_c⁄ãxt
 *
nfs
);

454 
°©
;

455 
EXTERN
 
	`nfs_°©_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

456 *
¥iv©e_d©a
);

464 #ifde‡
WIN32


465 
EXTERN
 
	`nfs_°©
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

466 
__°©64
 *
°
);

468 
EXTERN
 
	`nfs_°©
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
°©
 *
°
);

480 
	snfs_°©_64
 {

481 
uöt64_t
 
nfs_dev
;

482 
uöt64_t
 
nfs_öo
;

483 
uöt64_t
 
nfs_mode
;

484 
uöt64_t
 
nfs_∆ök
;

485 
uöt64_t
 
nfs_uid
;

486 
uöt64_t
 
nfs_gid
;

487 
uöt64_t
 
nfs_rdev
;

488 
uöt64_t
 
nfs_size
;

489 
uöt64_t
 
nfs_blksize
;

490 
uöt64_t
 
nfs_blocks
;

491 
uöt64_t
 
nfs_©ime
;

492 
uöt64_t
 
nfs_mtime
;

493 
uöt64_t
 
nfs_˘ime
;

494 
uöt64_t
 
nfs_©ime_n£c
;

495 
uöt64_t
 
nfs_mtime_n£c
;

496 
uöt64_t
 
nfs_˘ime_n£c
;

497 
uöt64_t
 
nfs_u£d
;

514 
EXTERN
 
	`nfs_°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

515 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

522 
EXTERN
 
	`nfs_°©64
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

523 
nfs_°©_64
 *
°
);

543 
EXTERN
 
	`nfs_l°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

544 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

555 
EXTERN
 
	`nfs_l°©64
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

556 
nfs_°©_64
 *
°
);

576 
EXTERN
 
	`nfs_f°©_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

577 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

584 #ifde‡
WIN32


585 
EXTERN
 
	`nfs_f°©
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

586 
__°©64
 *
°
);

588 
EXTERN
 
	`nfs_f°©
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

589 
°©
 *
°
);

614 
EXTERN
 
	`nfs_f°©64_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

615 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

622 
EXTERN
 
	`nfs_f°©64
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

623 
nfs_°©_64
 *
°
);

632 
EXTERN
 
uöt16_t
 
	`nfs_umask
(
nfs_c⁄ãxt
 *
nfs
, uöt16_à
mask
);

667 
EXTERN
 
	`nfs_›í_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

668 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

669 
EXTERN
 
	`nfs_›í2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

670 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

677 
EXTERN
 
	`nfs_›í
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

678 
nfsfh
 **nfsfh);

679 
EXTERN
 
	`nfs_›í2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

680 
mode
, 
nfsfh
 **nfsfh);

703 
EXTERN
 
	`nfs_˛o£_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

704 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

711 
EXTERN
 
	`nfs_˛o£
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh);

732 
EXTERN
 
	`nfs_¥ód_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

733 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

734 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

741 
EXTERN
 
	`nfs_¥ód
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

742 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
);

764 
EXTERN
 
	`nfs_ªad_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

765 *
buf
, 
size_t
 
cou¡
,

766 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

773 
EXTERN
 
	`nfs_ªad
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

774 *
buf
, 
size_t
 
cou¡
);

794 
EXTERN
 
	`nfs_pwrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

795 c⁄° *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

796 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

803 
EXTERN
 
	`nfs_pwrôe
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

804 c⁄° *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
);

825 
EXTERN
 
	`nfs_wrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

826 c⁄° *
buf
, 
size_t
 
cou¡
,

827 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

834 
EXTERN
 
	`nfs_wrôe
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

835 c⁄° *
buf
, 
uöt64_t
 
cou¡
);

856 
EXTERN
 
	`nfs_l£ek_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

857 
öt64_t
 
off£t
, 
whí˚
, 
nfs_cb
 
cb
,

858 *
¥iv©e_d©a
);

865 
EXTERN
 
	`nfs_l£ek
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

866 
öt64_t
 
off£t
, 
whí˚
, 
uöt64_t
 *
cuºít_off£t
);

886 
	enfs4_lock_›
 {

887 
NFS4_F_LOCK
 = 0,

888 
NFS4_F_TLOCK
 = 1,

889 
NFS4_F_ULOCK
 = 2,

890 
NFS4_F_TEST
 = 3,

892 
EXTERN
 
	`nfs_lockf_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

893 
nfs4_lock_›
 
›
, 
uöt64_t
 
cou¡
,

894 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

901 
EXTERN
 
	`nfs_lockf
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

902 
nfs4_lock_›
 
›
, 
uöt64_t
 
cou¡
);

924 
	enfs4_f˙é_›
 {

925 
NFS4_F_SETLK
 = 0,

926 
NFS4_F_SETLKW
,

928 
	snfs4_Êock
 {

929 
l_ty≥
;

930 
l_whí˚
;

931 
uöt32_t
 
l_pid
;

932 
uöt64_t
 
l_°¨t
;

933 
uöt64_t
 
l_Àn
;

936 
EXTERN
 
	`nfs_f˙é_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

937 
nfs4_f˙é_›
 
cmd
, *
¨g
,

938 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

945 
EXTERN
 
	`nfs_f˙é
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

946 
nfs4_f˙é_›
 
cmd
, *
¨g
);

965 
EXTERN
 
	`nfs_fsync_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

966 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

973 
EXTERN
 
	`nfs_fsync
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh);

994 
EXTERN
 
	`nfs_åunˇã_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

995 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1002 
EXTERN
 
	`nfs_åunˇã
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1003 
uöt64_t
 
Àngth
);

1024 
EXTERN
 
	`nfs_·runˇã_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1025 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1032 
EXTERN
 
	`nfs_·runˇã
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1033 
uöt64_t
 
Àngth
);

1057 
EXTERN
 
	`nfs_mkdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1058 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1065 
EXTERN
 
	`nfs_mkdú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
);

1081 
EXTERN
 
	`nfs_mkdú2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1082 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1089 
EXTERN
 
	`nfs_mkdú2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
);

1110 
EXTERN
 
	`nfs_rmdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1111 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1118 
EXTERN
 
	`nfs_rmdú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
);

1141 
EXTERN
 
	`nfs_¸ót_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1142 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1149 
EXTERN
 
	`nfs_¸ót
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1150 
nfsfh
 **nfsfh);

1170 
EXTERN
 
	`nfs_mknod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1171 
dev
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1178 
EXTERN
 
	`nfs_mknod
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1179 
dev
);

1201 
EXTERN
 
	`nfs_u∆ök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1202 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1209 
EXTERN
 
	`nfs_u∆ök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
);

1217 
nfsdú
;

1235 
EXTERN
 
	`nfs_›ídú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1236 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1243 
EXTERN
 
	`nfs_›ídú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1244 
nfsdú
 **nfsdir);

1251 
	snfsdúít
 {

1252 
nfsdúít
 *
√xt
;

1253 *
«me
;

1254 
uöt64_t
 
öode
;

1258 
uöt32_t
 
ty≥
;

1259 
uöt32_t
 
mode
;

1260 
uöt64_t
 
size
;

1261 
timevÆ
 
©ime
;

1262 
timevÆ
 
mtime
;

1263 
timevÆ
 
˘ime
;

1264 
uöt32_t
 
uid
;

1265 
uöt32_t
 
gid
;

1266 
uöt32_t
 
∆ök
;

1267 
uöt64_t
 
dev
;

1268 
uöt64_t
 
rdev
;

1269 
uöt64_t
 
blksize
;

1270 
uöt64_t
 
blocks
;

1271 
uöt64_t
 
u£d
;

1272 
uöt32_t
 
©ime_n£c
;

1273 
uöt32_t
 
mtime_n£c
;

1274 
uöt32_t
 
˘ime_n£c
;

1279 
EXTERN
 
nfsdúít
 *
	`nfs_ªaddú
(
nfs_c⁄ãxt
 *
nfs
,

1280 
nfsdú
 *nfsdir);

1289 
EXTERN
 
	`nfs_£ekdú
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir,

1290 
loc
);

1301 
EXTERN
 
	`nfs_ãŒdú
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir);

1311 
EXTERN
 
	`nfs_ªwöddú
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir);

1320 
EXTERN
 
	`nfs_˛o£dú
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir);

1341 
EXTERN
 
	`nfs_chdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1342 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1349 
EXTERN
 
	`nfs_chdú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
);

1367 
EXTERN
 
	`nfs_gëcwd
(
nfs_c⁄ãxt
 *
nfs
, c⁄° **
cwd
);

1373 
	snfs_°©vfs_64
 {

1374 
uöt64_t
 
f_bsize
;

1375 
uöt64_t
 
f_‰size
;

1376 
uöt64_t
 
f_blocks
;

1377 
uöt64_t
 
f_b‰ì
;

1378 
uöt64_t
 
f_bavaû
;

1379 
uöt64_t
 
f_fûes
;

1380 
uöt64_t
 
f_f‰ì
;

1381 
uöt64_t
 
f_Ávaû
;

1382 
uöt64_t
 
f_fsid
;

1383 
uöt64_t
 
f_Êag
;

1384 
uöt64_t
 
f_«memax
;

1402 
°©vfs
;

1403 
EXTERN
 
	`nfs_°©vfs_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1404 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1413 
EXTERN
 
	`nfs_°©vfs
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1414 
°©vfs
 *
svfs
);

1430 
EXTERN
 
	`nfs_°©vfs64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1431 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1439 
EXTERN
 
	`nfs_°©vfs64
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1440 
nfs_°©vfs_64
 *
svfs
);

1461 
EXTERN
 
	`nfs_ªadlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1462 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1469 
EXTERN
 
	`nfs_ªadlök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, *
buf
,

1470 
bufsize
);

1480 
EXTERN
 
	`nfs_ªadlök2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1481 **
buÂå
);

1502 
EXTERN
 
	`nfs_chmod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1503 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1510 
EXTERN
 
	`nfs_chmod
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
);

1529 
EXTERN
 
	`nfs_lchmod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1530 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1541 
EXTERN
 
	`nfs_lchmod
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
);

1562 
EXTERN
 
	`nfs_fchmod_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1563 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1570 
EXTERN
 
	`nfs_fchmod
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
mode
);

1591 
EXTERN
 
	`nfs_chown_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
,

1592 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1599 
EXTERN
 
	`nfs_chown
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
,

1600 
gid
);

1619 
EXTERN
 
	`nfs_lchown_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
,

1620 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1631 
EXTERN
 
	`nfs_lchown
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
,

1632 
gid
);

1653 
EXTERN
 
	`nfs_fchown_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1654 
uid
, 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1661 
EXTERN
 
	`nfs_fchown
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uid
,

1662 
gid
);

1684 
EXTERN
 
	`nfs_utimes_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1685 
timevÆ
 *
times
, 
nfs_cb
 
cb
,

1686 *
¥iv©e_d©a
);

1693 
EXTERN
 
	`nfs_utimes
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1694 
timevÆ
 *
times
);

1713 
EXTERN
 
	`nfs_lutimes_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1714 
timevÆ
 *
times
, 
nfs_cb
 
cb
,

1715 *
¥iv©e_d©a
);

1726 
EXTERN
 
	`nfs_lutimes
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1727 
timevÆ
 *
times
);

1747 
utimbuf
;

1748 
EXTERN
 
	`nfs_utime_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1749 
utimbuf
 *
times
, 
nfs_cb
 
cb
,

1750 *
¥iv©e_d©a
);

1757 
EXTERN
 
	`nfs_utime
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1758 
utimbuf
 *
times
);

1780 
EXTERN
 
	`nfs_ac˚ss_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1781 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1788 
EXTERN
 
	`nfs_ac˚ss
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
);

1812 
EXTERN
 
	`nfs_ac˚ss2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1813 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1821 
EXTERN
 
	`nfs_ac˚ss2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
);

1843 
EXTERN
 
	`nfs_symlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
èrgë
,

1844 c⁄° *
lök«me
, 
nfs_cb
 
cb
,

1845 *
¥iv©e_d©a
);

1852 
EXTERN
 
	`nfs_symlök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
èrgë
,

1853 c⁄° *
lök«me
);

1873 
EXTERN
 
	`nfs_ª«me_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

1874 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1881 
EXTERN
 
	`nfs_ª«me
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

1882 c⁄° *
√w∑th
);

1903 
EXTERN
 
	`nfs_lök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

1904 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

1911 
EXTERN
 
	`nfs_lök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

1912 c⁄° *
√w∑th
);

1938 
EXTERN
 
	`mou¡_gëexp‹ts_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
,

1939 
Ωc_cb
 
cb
, *
¥iv©e_d©a
);

1948 
EXTERN
 
exp‹äode
 *
	`mou¡_gëexp‹ts
(c⁄° *
£rvî
);

1958 
EXTERN
 
exp‹äode
 *
	`mou¡_gëexp‹ts_timeout
(c⁄° *
£rvî
, 
timeout
);

1960 
EXTERN
 
	`mou¡_‰ì_exp‹t_li°
(
exp‹äode
 *
exp‹ts
);

1963 
	snfs_£rvî_li°
 {

1964 
nfs_£rvî_li°
 *
√xt
;

1965 *
addr
;

1981 
nfs_£rvî_li°
 *
	`nfs_föd_loˇl_£rvîs
();

1982 
	`‰ì_nfs_§vr_li°
(
nfs_£rvî_li°
 *
§v
);

1993 
EXTERN
 
	`nfs_£t_pﬁl_timeout
(
nfs_c⁄ãxt
 *
nfs
, 
mûli£c⁄ds
);

2003 
EXTERN
 
	`nfs_gë_pﬁl_timeout
(
nfs_c⁄ãxt
 *
nfs
);

2018 
EXTERN
 
	`nfs_£t_timeout
(
nfs_c⁄ãxt
 *
nfs
, 
mûli£c⁄ds
);

2028 
EXTERN
 
	`nfs_gë_timeout
(
nfs_c⁄ãxt
 *
nfs
);

2033 
EXTERN
 
	`nfs4_£t_˛õ¡_«me
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
id
);

2039 
EXTERN
 
	`nfs4_£t_vîifõr
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
vîifõr
);

2049 
EXTERN
 
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs_c⁄ãxt
 *
nfs
);

2053 
EXTERN
 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs_c⁄ãxt
 *
nfs
);

2055 #ifde‡
__˝lu•lus


2056 
	}
}

	@include/slist.h

18 #i‚de‡
_LIBNFS_SLIST_H_


19 
	#_LIBNFS_SLIST_H_


	)

21 
	#LIBNFS_LIST_ADD
(
li°
, 
ôem
) \

23 (
ôem
)->
√xt
 = (*
li°
); \

24 (*
li°
Ë(
ôem
); \

25 } 0);

	)

27 
	#LIBNFS_LIST_ADD_END
(
li°
, 
ôem
) \

28 i‡((*
li°
Ë=
NULL
) { \

29 
	`LIBNFS_LIST_ADD
((
li°
), (
ôem
)); \

31 *
hód
 = (*
li°
); \

32 (*
li°
)->
√xt
) \

33 (*
li°
Ë(*li°)->
√xt
; \

34 (*
li°
)->
√xt
 = (
ôem
); \

35 (
ôem
)->
√xt
 = 
NULL
; \

36 (*
li°
Ë
hód
; \

37 }

	)

39 
	#LIBNFS_LIST_REMOVE
(
li°
, 
ôem
) \

40 i‡((*
li°
Ë=(
ôem
)) { \

41 (*
li°
Ë(
ôem
)->
√xt
; \

43 *
hód
 = (*
li°
); \

44 (*
li°
)->
√xt
 && (*li°)->√xà!(
ôem
)) \

45 (*
li°
Ë(*li°)->
√xt
; \

46 i‡((*
li°
)->
√xt
 !
NULL
) { \

47 (*
li°
)->
√xt
 = (*list)->next->next; \

49 (*
li°
Ë
hód
; \

50 }

	)

	@include/win32/win32_compat.h

25 #i‚de‡
wö32_COMPAT_H_


26 
	#wö32_COMPAT_H_


	)

27 
	#NO_IPv6
 1

	)

29 
	~<wösock2.h
>

30 
	~<ws2t˝ù.h
>

31 
	~<ws2ùdef.h
>

32 
	~<ba£tsd.h
>

33 
	~<io.h
>

34 
	~<sys/°©.h
>

35 
	~<time.h
>

36 
	~<°ddef.h
>

38 
	tfsblk˙t_t
;

39 
	tfsfû˙t_t
;

40 
	tuid_t
;

41 
	tgid_t
;

42 
	tsockÀn_t
;

44 #i‚de‡
S_IRUSR


45 
	#S_IRUSR
 0000400

	)

46 
	#S_IWUSR
 0000200

	)

47 
	#S_IXUSR
 0000100

	)

49 #i‚de‡
S_IRWXG


50 
	#S_IRWXG
 0000070

	)

51 
	#S_IRGRP
 0000040

	)

52 
	#S_IWGRP
 0000020

	)

53 
	#S_IXGRP
 0000010

	)

54 
	#S_IRWXO
 0000007

	)

55 
	#S_IROTH
 0000004

	)

56 
	#S_IWOTH
 0000002

	)

57 
	#S_IXOTH
 0000001

	)

60 #i‚de‡
MSG_NOSIGNAL


61 
	#MSG_NOSIGNAL
 0

	)

64 
	#F_GETFL
 3

	)

65 
	#F_SETFL
 4

	)

67 #i‚de‡
S_IFLNK


68 
	#S_IFLNK
 0xA000

	)

71 #i‚de‡
F_RDLCK


72 
	#F_RDLCK
 0

	)

73 
	#F_WRLCK
 1

	)

74 
	#F_UNLCK
 2

	)

77 #i‚de‡
S_IFIFO


78 
	#S_IFIFO
 0x1000

	)

81 #i‚de‡
S_IFBLK


82 
	#S_IFBLK
 0x3000

	)

85 #i‚de‡
S_IFSOCK


86 
	#S_IFSOCK
 0x0

	)

89 #i‚de‡
maj‹


90 
	#maj‹
(
a
Ë0

	)

93 #i‚de‡
mö‹


94 
	#mö‹
(
a
Ë0

	)

97 #i‚de‡
O_NONBLOCK


98 
	#O_NONBLOCK
 0x40000000

	)

101 #i‚de‡
O_SYNC


102 
	#O_SYNC
 0

	)

105 #i‚de‡
O_NOFOLLOW


106 
	#O_NOFOLLOW
 00400000

	)

109 
	#MSG_DONTWAIT
 0

	)

110 
	#ssize_t
 
SSIZE_T


	)

112 #if(
_WIN32_WINNT
 < 0x0600)

114 
	#POLLIN
 0x0001

	)

115 
	#POLLPRI
 0x0002

	)

116 
	#POLLOUT
 0x0004

	)

117 
	#POLLERR
 0x0008

	)

118 
	#POLLHUP
 0x0010

	)

119 
	#POLLNVAL
 0x0020

	)

121 
	spﬁlfd
 {

122 
SOCKET
 
	mfd
;

123 
	mevíts
;

124 
	mªvíts
;

128 
	#˛o£
 
˛o£sockë


	)

129 
	#io˘l
 
io˘lsockë


	)

131 #i‚de‡
ESTALE


132 
	#ESTALE
 116

	)

136 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`wö32_pﬁl
(x, y, z)

	)

138 
	#öë_±⁄
(
x
,
y
,
z
Ë
	`wö32_öë_±⁄
(x,y,z)

	)

139 
	#›í
(
x
, 
y
, 
z
Ë
	`_›í
(x, y, z)

	)

140 #i‚de‡
l£ek


141 
	#l£ek
(
x
, 
y
, 
z
Ë
	`_l£ek
(x, y, z)

	)

143 
	#ªad
(
x
, 
y
, 
z
Ë
	`_ªad
(x, y, z)

	)

144 
	#wrôe
(
x
, 
y
, 
z
Ë
	`_wrôe
(x, y, z)

	)

145 
gëpid
();

146 
wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
);

147 
wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfsd
, 
timeout
);

148 
wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

149 #ifde‡
__MINGW32__


150 
	#wö32_gëtimeofday
 
mögw_gëtimeofday


	)

153 
	#DŒExp‹t


	)

155 #ifde‡
__MINGW32__


156 * 
°∫dup
(c⁄° *
s
, 
size_t
 
n
);

159 
	siovec


161 
	miov_Àn
;

162 *
	miov_ba£
;

165 
ölöe
 
	$wrôev
(
SOCKET
 
sock
, 
iovec
 *
iov
, 
nvecs
)

167 
DWORD
 
ªt
;

169 
ªs
 = 
	`WSASíd
(
sock
, (
LPWSABUF
)
iov
, 
nvecs
, &
ªt
, 0, 
NULL
, NULL);

171 i‡(
ªs
 == 0) {

172  ()
ªt
;

175 
	}
}

177 
ölöe
 
	$ªadv
(
SOCKET
 
sock
, 
iovec
 *
iov
, 
nvecs
)

179 
DWORD
 
ªt
;

180 
DWORD
 
Êags
 = 0;

182 
ªs
 = 
	`WSARecv
(
sock
, (
LPWSABUF
)
iov
, 
nvecs
, &
ªt
, &
Êags
, 
NULL
, NULL);

184 i‡(
ªs
 == 0) {

185  ()
ªt
;

188 
	}
}

	@lib/init.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
AROS


23 
	~"¨os_com∑t.h
"

26 #ifde‡
PS2_EE


27 
	~"ps2_com∑t.h
"

30 #ifde‡
PS3_PPU


31 
	~"ps3_com∑t.h
"

34 #ifde‡
WIN32


35 
	~<wö32/wö32_com∑t.h
>

38 #i‚de‡
_GNU_SOURCE


39 
	#_GNU_SOURCE


	)

42 #ifde‡
HAVE_UNISTD_H


43 
	~<uni°d.h
>

46 #ifde‡
HAVE_STRINGS_H


47 
	~<°rögs.h
>

50 
	~<°dio.h
>

51 
	~<°d¨g.h
>

52 
	~<°rög.h
>

53 
	~<°dlib.h
>

54 
	~<as£π.h
>

55 
	~<f˙é.h
>

56 
	~<time.h
>

57 
	~"¶i°.h
"

58 
	~"libnfs-zdr.h
"

59 
	~"libnfs.h
"

60 
	~"libnfs-øw.h
"

61 
	~"libnfs-¥iv©e.h
"

63 #ifde‡
HAVE_LIBKRB5


64 
	~"krb5-wøµî.h
"

67 #i‚de‡
disˇrd_c⁄°


68 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

71 c⁄° *
	goom
 = "out of memory";

73 
uöt64_t
 
	$Ωc_cuºít_time
()

75 #ifde‡
HAVE_CLOCK_GETTIME


76 
time•ec
 
ç
;

78 
	`˛ock_gëtime
(
CLOCK_MONOTONIC_COARSE
, &
ç
);

79  (
uöt64_t
)
ç
.
tv_£c
 * 1000 +Åp.
tv_n£c
 / 1000000;

81  (
uöt64_t
)
	`time
(
NULL
) * 1000;

83 
	}
}

85 
	$Ωc_£t_hash_size
(
Ωc_c⁄ãxt
 *
Ωc
, 
hashes
)

87 
uöt32_t
 
i
;

89 #ifde‡
HAVE_MULTITHREADING


90 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

91 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

94 
Ωc
->
num_hashes
 = 
hashes
;

95 
	`‰ì
(
Ωc
->
waôpdu
);

96 
Ωc
->
waôpdu
 = 
	`mÆloc
((
Ωc_queue
Ë*Ñpc->
num_hashes
);

97 i‡(
Ωc
->
waôpdu
 =
NULL
) {

100 
i
 = 0; i < 
Ωc
->
num_hashes
; i++)

101 
	`Ωc_ª£t_queue
(&
Ωc
->
waôpdu
[
i
]);

102 #ifde‡
HAVE_MULTITHREADING


103 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

104 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

108 
	}
}

110 
	$nfs_£t_hash_size
(
nfs_c⁄ãxt
 *
nfs
, 
hashes
)

112  
	`Ωc_£t_hash_size
(
nfs
->
Ωc
, 
hashes
);

113 
	}
}

115 
Ωc_c⁄ãxt
 *
	$Ωc_öô_c⁄ãxt
()

117 
Ωc_c⁄ãxt
 *
Ωc
;

118 
uöt32_t
 
ß…
 = 0;

120 
Ωc
 = 
	`ˇŒoc
(1, (
Ωc_c⁄ãxt
));

121 i‡(
Ωc
 =
NULL
) {

122  
NULL
;

125 i‡(
	`Ωc_£t_hash_size
(
Ωc
, 
DEFAULT_HASHES
)) {

126 
	`‰ì
(
Ωc
);

127  
NULL
;

130 
Ωc
->
magic
 = 
RPC_CONTEXT_MAGIC
;

131 
Ωc
->
öpos
 = 0;

132 
Ωc
->
°©e
 = 
READ_RM
;

134 #ifde‡
HAVE_MULTITHREADING


135 
	`nfs_mt_muãx_öô
(&
Ωc
->
Ωc_muãx
);

136 #i‚de‡
HAVE_STDATOMIC_H


137 
	`nfs_mt_muãx_öô
(&
Ωc
->
©omic_öt_muãx
);

141 
Ωc
->
auth
 = 
	`authunix_¸óã_deÁu…
();

142 i‡(
Ωc
->
auth
 =
NULL
) {

143 
	`‰ì
(
Ωc
->
waôpdu
);

144 
	`‰ì
(
Ωc
);

145  
NULL
;

149 
Ωc
->
xid
 = 
ß…
 + (
uöt32_t
)
	`Ωc_cuºít_time
(Ë+ ((uöt32_t)
	`gëpid
() << 16);

150 
ß…
 += 0x01000000;

151 
Ωc
->
fd
 = -1;

152 
Ωc
->
t˝_syn˙t
 = 
RPC_PARAM_UNDEFINED
;

153 #i‡
	`deföed
(
WIN32
Ë|| deföed(
ANDROID
Ë|| deföed(
PS3_PPU
)

154 
Ωc
->
uid
 = 65534;

155 
Ωc
->
gid
 = 65534;

157 
Ωc
->
uid
 = 
	`gëuid
();

158 
Ωc
->
gid
 = 
	`gëgid
();

160 
	`Ωc_ª£t_queue
(&
Ωc
->
outqueue
);

162 
Ωc
->
max_waôpdu_Àn
 = 0;

170 
Ωc
->
timeout
 = 60 * 1000;

178 
Ωc
->
ªå™s
 = 0;

181 
Ωc
->
pﬁl_timeout
 = 100;

183  
Ωc
;

184 
	}
}

187 
	$is_n⁄blockög
(
s
)

189 #i‡
	`deföed
(
WIN32
)

192 
v
;

193 
v
 = 
	`f˙é
(
s
, 
F_GETFL
, 0);

194  (
v
 & 
O_NONBLOCK
) != 0;

196 
	}
}

198 
Ωc_c⁄ãxt
 *
	$Ωc_öô_£rvî_c⁄ãxt
(
s
)

200 
Ωc_c⁄ãxt
 *
Ωc
;

202 
Ωc
 = 
	`ˇŒoc
(1, (
Ωc_c⁄ãxt
));

203 i‡(
Ωc
 =
NULL
) {

204  
NULL
;

207 
Ωc
->
magic
 = 
RPC_CONTEXT_MAGIC
;

209 
Ωc
->
is_£rvî_c⁄ãxt
 = 1;

210 
Ωc
->
fd
 = 
s
;

211 
Ωc
->
is_c⁄√˘ed
 = 1;

213 
Ωc
->
is_n⁄blockög
 = 
	`is_n⁄blockög
(
s
);

215 
Ωc
->
is_udp
 = 
	`Ωc_is_udp_sockë
(rpc);

216 
	`Ωc_ª£t_queue
(&
Ωc
->
outqueue
);

218 #ifde‡
HAVE_MULTITHREADING


219 
	`nfs_mt_muãx_öô
(&
Ωc
->
Ωc_muãx
);

220 #i‚de‡
HAVE_STDATOMIC_H


221 
	`nfs_mt_muãx_öô
(&
Ωc
->
©omic_öt_muãx
);

224  
Ωc
;

225 
	}
}

227 #ifde‡
HAVE_SO_BINDTODEVICE


228 
	$Ωc_£t_öãrÁ˚
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
i‚ame
)

236 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

238 i‡(
i‚ame
) {

243 
	`°∫˝y
(
Ωc
->
i‚ame
, ifname, (rpc->ifname) - 1);

245 
	}
}

248 
	$Ωc_£t_debug
(
Ωc_c⁄ãxt
 *
Ωc
, 
Àvñ
)

250 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

252 
Ωc
->
debug
 = 
Àvñ
;

253 
	}
}

255 
Ωc_c⁄ãxt
 *
	$Ωc_öô_udp_c⁄ãxt
()

257 
Ωc_c⁄ãxt
 *
Ωc
;

259 
Ωc
 = 
	`Ωc_öô_c⁄ãxt
();

260 i‡(
Ωc
 !
NULL
) {

261 
Ωc
->
is_udp
 = 1;

264  
Ωc
;

265 
	}
}

267 
	$Ωc_£t_u£∫ame
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
u£∫ame
)

269 #ifde‡
HAVE_LIBKRB5


270 
	`‰ì
(
	`disˇrd_c⁄°
(
Ωc
->
u£∫ame
));

271 
Ωc
->
u£∫ame
 = 
	`°rdup
(username);

272 i‡(
Ωc
->
u£∫ame
 =
NULL
) {

273 
	`Ωc_£t_îr‹
(
Ωc
,

279 
	}
}

281 
	$Ωc_£t_auth
(
Ωc_c⁄ãxt
 *
Ωc
, 
AUTH
 *
auth
)

283 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

285 i‡(
Ωc
->
auth
 !
NULL
) {

286 
	`auth_de°roy
(
Ωc
->
auth
);

288 
Ωc
->
auth
 =áuth;

289 
	}
}

291 
	$Ωc_£t_uid_gid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uid
, 
gid
) {

292 i‡(
uid
 !
Ωc
->uid || 
gid
 !=Ñpc->gid) {

293 
AUTH
 *
auth
 = 
	`libnfs_authunix_¸óã
("libnfs", 
uid
, 
gid
, 0, 
NULL
);

294 i‡(
auth
 !
NULL
) {

295 
	`Ωc_£t_auth
(
Ωc
, 
auth
);

296 
Ωc
->
uid
 = uid;

297 
Ωc
->
gid
 = gid;

300 
	}
}

302 
	$Ωc_£t_uid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uid
) {

303 
	`Ωc_£t_uid_gid
(
Ωc
, 
uid
,Ñpc->
gid
);

304 
	}
}

306 
	$Ωc_£t_gid
(
Ωc_c⁄ãxt
 *
Ωc
, 
gid
) {

307 
	`Ωc_£t_uid_gid
(
Ωc
,Ñpc->
uid
, 
gid
);

308 
	}
}

310 
	$Ωc_£t_auxûüry_gids
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
Àn
, uöt32_t* 
gids
) {

311 
AUTH
 *
auth
 = 
	`libnfs_authunix_¸óã
("libnfs", 
Ωc
->
uid
,Ñpc->
gid
, 
Àn
, 
gids
);

312 i‡(
auth
 !
NULL
) {

313 
	`Ωc_£t_auth
(
Ωc
, 
auth
);

315 
	}
}

317 
	$Ωc_£t_îr‹
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹_°rög
, ...)

319 
va_li°
 
≠
;

320 *
ﬁd_îr‹_°rög
 = 
NULL
;

322 #ifde‡
HAVE_MULTITHREADING


323 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

324 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

327 
ﬁd_îr‹_°rög
 = 
Ωc
->
îr‹_°rög
;

328 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

329 
Ωc
->
îr‹_°rög
 = 
	`mÆloc
(1024);

330 i‡(
Ωc
->
îr‹_°rög
 =
NULL
) {

331 
Ωc
->
îr‹_°rög
 = 
	`disˇrd_c⁄°
(
oom
);

332 
föished
;

334 
	`v¢¥ötf
(
Ωc
->
îr‹_°rög
, 1024,Éº‹_°rög, 
≠
);

335 
	`va_íd
(
≠
);

337 
	`RPC_LOG
(
Ωc
, 1, "îr‹: %s",Ñpc->
îr‹_°rög
);

339 
föished
:

340 i‡(
ﬁd_îr‹_°rög
 && old_îr‹_°rög !
oom
) {

341 
	`‰ì
(
ﬁd_îr‹_°rög
);

343 #ifde‡
HAVE_MULTITHREADING


344 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

345 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

348 
	}
}

350 
	$Ωc_£t_îr‹_locked
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹_°rög
, ...)

352 
va_li°
 
≠
;

353 *
ﬁd_îr‹_°rög
 = 
Ωc
->
îr‹_°rög
;

355 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

356 
Ωc
->
îr‹_°rög
 = 
	`mÆloc
(1024);

357 i‡(
Ωc
->
îr‹_°rög
 =
NULL
) {

358 
	`‰ì
(
ﬁd_îr‹_°rög
);

359 
Ωc
->
îr‹_°rög
 = 
	`disˇrd_c⁄°
(
oom
);

362 
	`v¢¥ötf
(
Ωc
->
îr‹_°rög
, 1024,Éº‹_°rög, 
≠
);

363 
	`va_íd
(
≠
);

365 
	`RPC_LOG
(
Ωc
, 1, "îr‹: %s",Ñpc->
îr‹_°rög
);

367 i‡(
ﬁd_îr‹_°rög
 && old_îr‹_°rög !
oom
) {

368 
	`‰ì
(
ﬁd_îr‹_°rög
);

370 
	}
}

372 *
	$Ωc_gë_îr‹
(
Ωc_c⁄ãxt
 *
Ωc
)

374 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

376  
Ωc
->
îr‹_°rög
 ?Ñpc->error_string : "";

377 
	}
}

379 
	$Ωc_purge_Æl_pdus
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, c⁄° *
îr‹
)

381 
Ωc_queue
 
outqueue
;

382 
Ωc_pdu
 *
pdu
;

383 
i
;

385 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

394 #ifde‡
HAVE_MULTITHREADING


395 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

396 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

399 
outqueue
 = 
Ωc
->outqueue;

401 
	`Ωc_ª£t_queue
(&
Ωc
->
outqueue
);

402 (
pdu
 = 
outqueue
.
hód
Ë!
NULL
) {

403 
outqueue
.
hód
 = 
pdu
->
√xt
;

404 
pdu
->
√xt
 = 
NULL
;

405 
pdu
->
	`cb
(
Ωc
, 
°©us
, (*Ë
îr‹
,Ödu->
¥iv©e_d©a
);

406 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

408 #ifde‡
HAVE_MULTITHREADING


409 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

410 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

414 
i
 = 0; i < 
Ωc
->
num_hashes
; i++) {

415 
Ωc_queue
 
waôqueue
;

417 #ifde‡
HAVE_MULTITHREADING


418 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

419 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

422 
waôqueue
 = 
Ωc
->
waôpdu
[
i
];

423 
	`Ωc_ª£t_queue
(&
Ωc
->
waôpdu
[
i
]);

424 #ifde‡
HAVE_MULTITHREADING


425 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

426 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

429 (
pdu
 = 
waôqueue
.
hód
Ë!
NULL
) {

430 
waôqueue
.
hód
 = 
pdu
->
√xt
;

431 
pdu
->
√xt
 = 
NULL
;

432 
pdu
->
	`cb
(
Ωc
, 
°©us
, (*Ë
îr‹
,Ödu->
¥iv©e_d©a
);

433 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

437 
	`as£π
(!
Ωc
->
outqueue
.
hód
);

438 
	}
}

440 
	$Ωc_îr‹_Æl_pdus
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹
)

442 
	`Ωc_purge_Æl_pdus
(
Ωc
, 
RPC_STATUS_ERROR
, 
îr‹
);

443 
	}
}

445 
	$Ωc_‰ì_‰agmít
(
Ωc_‰agmít
 *
‰agmít
)

447 i‡(
‰agmít
->
d©a
 !
NULL
) {

448 
	`‰ì
(
‰agmít
->
d©a
);

450 
	`‰ì
(
‰agmít
);

451 
	}
}

453 
	$Ωc_‰ì_Æl_‰agmíts
(
Ωc_c⁄ãxt
 *
Ωc
)

455 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

457 
Ωc
->
‰agmíts
 !
NULL
) {

458 
Ωc_‰agmít
 *
‰agmít
 = 
Ωc
->
‰agmíts
;

460 
Ωc
->
‰agmíts
 = 
‰agmít
->
√xt
;

461 
	`Ωc_‰ì_‰agmít
(
‰agmít
);

463 
	}
}

465 
	$Ωc_add_‰agmít
(
Ωc_c⁄ãxt
 *
Ωc
, *
d©a
, 
uöt32_t
 
size
)

467 
Ωc_‰agmít
 *
‰agmít
;

469 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

471 
‰agmít
 = 
	`mÆloc
((
Ωc_‰agmít
));

472 i‡(
‰agmít
 =
NULL
) {

476 
‰agmít
->
size
 = size;

477 
‰agmít
->
d©a
 = 
	`mÆloc
(‰agmít->
size
);

478 if(
‰agmít
->
d©a
 =
NULL
) {

479 
	`‰ì
(
‰agmít
);

483 
	`mem˝y
(
‰agmít
->
d©a
, d©a, føgmít->
size
);

484 
	`LIBNFS_LIST_ADD_END
(&
Ωc
->
‰agmíts
, 
‰agmít
);

486 
	}
}

488 
	$Ωc_de°roy_c⁄ãxt
(
Ωc_c⁄ãxt
 *
Ωc
)

490 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

492 
	`Ωc_purge_Æl_pdus
(
Ωc
, 
RPC_STATUS_CANCEL
, 
NULL
);

494 
	`Ωc_‰ì_Æl_‰agmíts
(
Ωc
);

496 i‡(
Ωc
->
auth
) {

497 
	`auth_de°roy
(
Ωc
->
auth
);

498 
Ωc
->
auth
 =
NULL
;

501 i‡(
Ωc
->
fd
 != -1) {

502 
	`˛o£
(
Ωc
->
fd
);

505 i‡(
Ωc
->
îr‹_°rög
 &&Ñpc->îr‹_°rög !
oom
) {

506 
	`‰ì
(
Ωc
->
îr‹_°rög
);

507 
Ωc
->
îr‹_°rög
 = 
NULL
;

510 
	`‰ì
(
Ωc
->
waôpdu
);

511 
Ωc
->
waôpdu
 = 
NULL
;

512 
	`‰ì
(
Ωc
->
öbuf
);

513 
Ωc
->
öbuf
 = 
NULL
;

515 
Ωc
->
magic
 = 0;

516 #ifde‡
HAVE_MULTITHREADING


517 
	`nfs_mt_muãx_de°roy
(&
Ωc
->
Ωc_muãx
);

518 #i‚de‡
HAVE_STDATOMIC_H


519 
	`nfs_mt_muãx_de°roy
(&
Ωc
->
©omic_öt_muãx
);

522 #ifde‡
HAVE_LIBKRB5


523 i‡(
Ωc
->
auth_d©a
) {

524 
	`krb5_‰ì_auth_d©a
(
Ωc
->
auth_d©a
);

526 
	`‰ì
(
	`disˇrd_c⁄°
(
Ωc
->
u£∫ame
));

527 
	`‰ì
(
Ωc
->
c⁄ãxt
);

529 
	`‰ì
(
Ωc
->
£rvî
);

530 
	`‰ì
(
Ωc
);

531 
	}
}

533 
	$Ωc_£t_pﬁl_timeout
(
Ωc_c⁄ãxt
 *
Ωc
, 
pﬁl_timeout
)

535 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

537 
Ωc
->
pﬁl_timeout
 =Öoll_timeout;

538 
	}
}

540 
	$Ωc_gë_pﬁl_timeout
(
Ωc_c⁄ãxt
 *
Ωc
)

542 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

544  
Ωc
->
pﬁl_timeout
;

545 
	}
}

547 
	$Ωc_£t_timeout
(
Ωc_c⁄ãxt
 *
Ωc
, 
timeout_m£cs
)

549 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

551 
Ωc
->
timeout
 = 
timeout_m£cs
;

552 
	}
}

554 
	$Ωc_gë_timeout
(
Ωc_c⁄ãxt
 *
Ωc
)

556 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

558  
Ωc
->
timeout
;

559 
	}
}

561 
	$Ωc_ªgi°î_£rvi˚
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
,

562 
£rvi˚_¥oc
 *
¥ocs
, 
num_¥ocs
)

564 
Ωc_ídpoöt
 *
ídpoöt
;

566 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

568 i‡(!
Ωc
->
is_£rvî_c⁄ãxt
) {

569 
	`Ωc_£t_îr‹
(
Ωc
, "Notá server context.");

573 
ídpoöt
 = 
	`mÆloc
((*endpoint));

574 i‡(
ídpoöt
 =
NULL
) {

575 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory: FailedÅoállocateÉndpoint "

580 
ídpoöt
->
¥ogøm
 =Örogram;

581 
ídpoöt
->
vîsi⁄
 = version;

582 
ídpoöt
->
¥ocs
 =Örocs;

583 
ídpoöt
->
num_¥ocs
 =Çum_procs;

584 
ídpoöt
->
√xt
 = 
Ωc
->
ídpoöts
;

585 
Ωc
->
ídpoöts
 = 
ídpoöt
;

588 
	}
}

590 
	$Ωc_‰ì_iove˘‹
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_io_ve˘‹s
 *
v
)

592 
i
;

594 
i
 = 0; i < 
v
->
niov
; i++) {

595 i‡(
v
->
iov
[
i
].
‰ì
) {

596 
v
->
iov
[
i
].
	`‰ì
(v->iov[i].
buf
);

599 
v
->
niov
 = 0;

600 
	}
}

602 
	$Ωc_add_iove˘‹
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_io_ve˘‹s
 *
v
,

603 *
buf
, 
Àn
, (*
‰ì
)(*))

605 i‡(
v
->
niov
 >
RPC_MAX_VECTORS
) {

606 
	`Ωc_£t_îr‹
(
Ωc
, "Too many io vectors");

610 
v
->
iov
[v->
niov
].
buf
 = buf;

611 
v
->
iov
[v->
niov
].
Àn
 =Üen;

612 
v
->
iov
[v->
niov
].
‰ì
 = free;

613 
v
->
niov
++;

616 
	}
}

	@lib/krb5-wrapper.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_LIBKRB5


24 #i‚de‡
_GNU_SOURCE


25 
	#_GNU_SOURCE


	)

28 #ifde‡
HAVE_STDINT_H


29 
	~<°döt.h
>

32 #ifde‡
HAVE_STDLIB_H


33 
	~<°dlib.h
>

36 #ifde‡
HAVE_STRING_H


37 
	~<°rög.h
>

40 #ifde‡
STDC_HEADERS


41 
	~<°ddef.h
>

44 #ifde‡
HAVE_SYS_TYPES_H


45 
	~<sys/ty≥s.h
>

48 #ifde‡
HAVE_SYS_STAT_H


49 
	~<sys/°©.h
>

52 #ifde‡
HAVE_UNISTD_H


53 
	~<uni°d.h
>

56 #ifde‡
HAVE_SYS_UNISTD_H


57 
	~<sys/uni°d.h
>

60 
	~<krb5/krb5.h
>

61 #i‡
__APPLE__


62 
	~<GSS/GSS.h
>

64 
	~<gsßpi/gsßpi_krb5.h
>

65 
	~<gsßpi/gsßpi.h
>

67 
	~<°dio.h
>

69 
	~"¶i°.h
"

70 
	~"libnfs.h
"

71 
	~"libnfs-øw.h
"

72 
	~"libnfs-øw-mou¡.h
"

73 
	~"libnfs-øw-p‹tm≠.h
"

74 
	~"libnfs-¥iv©e.h
"

76 
	~"krb5-wøµî.h
"

78 #i‚de‡
disˇrd_c⁄°


79 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

83 
	$krb5_‰ì_auth_d©a
(
¥iv©e_auth_d©a
 *
auth
)

85 
uöt32_t
 
maj
, 
mö
;

88 i‡(
auth
->
c⁄ãxt
) {

89 
maj
 = 
	`gss_dñëe_£c_c⁄ãxt
(&
mö
, &
auth
->
c⁄ãxt
,

90 &
auth
->
ouçut_tokí
);

91 i‡(
maj
 !
GSS_S_COMPLETE
) {

96 
	`gss_ªÀa£_¸ed
(&
mö
, &
auth
->
¸ed
);

97 
	`gss_ªÀa£_buf„r
(&
mö
, &
auth
->
ouçut_tokí
);

99 i‡(
auth
->
èrgë_«me
) {

100 
	`gss_ªÀa£_«me
(&
mö
, &
auth
->
èrgë_«me
);

103 i‡(
auth
->
u£r_«me
) {

104 
	`gss_ªÀa£_«me
(&
mö
, &
auth
->
u£r_«me
);

107 
	`‰ì
(
auth
->
g_£rvî
);

108 
	`‰ì
(
auth
);

109 
	}
}

112 
	$di•œy_°©us
(
ty≥
, 
uöt32_t
 
îr
)

114 
gss_buf„r_desc
 
ãxt
;

115 
uöt32_t
 
msg_˘x
;

116 *
msg
, *
tmp
;

117 
uöt32_t
 
maj
, 
mö
;

119 
msg
 = 
NULL
;

120 
msg_˘x
 = 0;

122 
maj
 = 
	`gss_di•œy_°©us
(&
mö
, 
îr
, 
ty≥
,

123 
GSS_C_NO_OID
, &
msg_˘x
, &
ãxt
);

124 i‡(
maj
 !
GSS_S_COMPLETE
) {

125  
msg
;

128 
tmp
 = 
NULL
;

129 i‡(
msg
) {

130 
tmp
 = 
msg
;

131 
mö
 = 
	`a•rötf
(&
msg
, "%s, %*s", msg,

132 ()
ãxt
.
Àngth
, (*Èext.
vÆue
);

134 
mö
 = 
	`a•rötf
(&
msg
, "%*s", ()
ãxt
.
Àngth
,

135 (*)
ãxt
.
vÆue
);

137 i‡(
mö
 =-1Ë 
tmp
;

138 
	`‰ì
(
tmp
);

139 
	`gss_ªÀa£_buf„r
(&
mö
, &
ãxt
);

140 } 
msg_˘x
 != 0);

142  
msg
;

143 
	}
}

146 
¥iv©e_auth_d©a
 *

147 
	$krb5_auth_öô
(
Ωc_c⁄ãxt
 *
Ωc
,

148 c⁄° *
£rvî
,

149 c⁄° *
u£r_«me
,

150 
w™ãd_£c
)

152 
¥iv©e_auth_d©a
 *
auth_d©a
;

153 
gss_buf„r_desc
 
èrgë
 = 
GSS_C_EMPTY_BUFFER
;

154 
uöt32_t
 
maj
, 
mö
;

155 
gss_buf„r_desc
 
u£r
;

157 *
nc_∑ssw‹d
 = 
NULL
;

159 
gss_OID_£t_desc
 
mechOidSë
;

160 
gss_OID_£t_desc
 
w™tMech
;

162 
auth_d©a
 = 
	`ˇŒoc
(1, (
¥iv©e_auth_d©a
));

163 i‡(
auth_d©a
 =
NULL
) {

164 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖrivate_auth_data");

165  
NULL
;

167 
auth_d©a
->
c⁄ãxt
 = 
GSS_C_NO_CONTEXT
;

168 
auth_d©a
->
w™ãd_£c
 = wanted_sec;

170 i‡(
	`a•rötf
(&
auth_d©a
->
g_£rvî
, "nfs@%s", 
£rvî
) < 0) {

171 
	`krb5_‰ì_auth_d©a
(
auth_d©a
);

172 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocate server string");

173  
NULL
;

176 
èrgë
.
vÆue
 = 
auth_d©a
->
g_£rvî
;

177 
èrgë
.
Àngth
 = 
	`°æí
(
auth_d©a
->
g_£rvî
);

179 
maj
 = 
	`gss_imp‹t_«me
(&
mö
, &
èrgë
, 
GSS_C_NT_HOSTBASED_SERVICE
,

180 &
auth_d©a
->
èrgë_«me
);

182 i‡(
maj
 !
GSS_S_COMPLETE
) {

183 
	`krb5_‰ì_auth_d©a
(
auth_d©a
);

184 
	`krb5_£t_gss_îr‹
(
Ωc
, "gss_imp‹t_«me", 
maj
, 
mö
);

185  
NULL
;

188 
u£r
.
vÆue
 = 
	`disˇrd_c⁄°
(
u£r_«me
);

189 
u£r
.
Àngth
 = 
	`°æí
(
u£r_«me
);

192 
maj
 = 
	`gss_imp‹t_«me
(&
mö
, &
u£r
, 
GSS_C_NT_USER_NAME
,

193 &
auth_d©a
->
u£r_«me
);

195 i‡(
maj
 !
GSS_S_COMPLETE
) {

196 
	`krb5_‰ì_auth_d©a
(
auth_d©a
);

197 
	`krb5_£t_gss_îr‹
(
Ωc
, "gss_imp‹t_«me", 
maj
, 
mö
);

198  
NULL
;

203 #ifde‡
__APPLE__


204 
auth_d©a
->
mech_ty≥
 = 
GSS_SPNEGO_MECHANISM
;

206 
auth_d©a
->
mech_ty≥
 = &
•√go_mech_krb5
;

208 
auth_d©a
->
¸ed
 = 
GSS_C_NO_CREDENTIAL
;

211 
mechOidSë
.
cou¡
 = 1;

212 #ifde‡
__APPLE__


213 
mechOidSë
.
ñemíts
 = 
	`disˇrd_c⁄°
(
GSS_SPNEGO_MECHANISM
);

215 
mechOidSë
.
ñemíts
 = 
	`disˇrd_c⁄°
(&
gss_mech_•√go
);

218 
maj
 = 
	`gss_acquúe_¸ed
(&
mö
, 
auth_d©a
->
u£r_«me
, 0,

219 &
mechOidSë
, 
GSS_C_INITIATE
,

220 &
auth_d©a
->
¸ed
, 
NULL
, NULL);

222 i‡(
maj
 !
GSS_S_COMPLETE
) {

223 
	`krb5_‰ì_auth_d©a
(
auth_d©a
);

224 
	`krb5_£t_gss_îr‹
(
Ωc
, "gss_acquúe_¸ed", 
maj
, 
mö
);

225  
NULL
;

228 #i‚de‡
__APPLE__


229 i‡(
Ωc
->
£c
 !
RPC_SEC_UNDEFINED
) {

230 
w™tMech
.
cou¡
 = 1;

232 
Ωc
->
£c
) {

233 
RPC_SEC_KRB5
:

234 
RPC_SEC_KRB5I
:

235 
RPC_SEC_KRB5P
:

236 
w™tMech
.
ñemíts
 = 
	`disˇrd_c⁄°
(&
•√go_mech_krb5
);

238 
RPC_SEC_UNDEFINED
:

242 
maj
 = 
	`gss_£t_√g_mechs
(&
mö
, 
auth_d©a
->
¸ed
, &
w™tMech
);

243 i‡(
	`GSS_ERROR
(
maj
)) {

244 
	`krb5_‰ì_auth_d©a
(
auth_d©a
);

245 
	`krb5_£t_gss_îr‹
(
Ωc
, "gss_£t_√g_mechs", 
maj
, 
mö
);

246  
NULL
;

251 i‡(
nc_∑ssw‹d
) {

252 
	`‰ì
(
nc_∑ssw‹d
);

253 
nc_∑ssw‹d
 = 
NULL
;

255  
auth_d©a
;

256 
	}
}

259 
	$krb5_£t_gss_îr‹
(
Ωc_c⁄ãxt
 *
Ωc
, *
func
,

260 
uöt32_t
 
maj
, uöt32_à
mö
)

262 *
îr_maj
 = 
	`di•œy_°©us
(
GSS_C_GSS_CODE
, 
maj
);

263 *
îr_mö
 = 
	`di•œy_°©us
(
GSS_C_MECH_CODE
, 
mö
);

264 
	`Ωc_£t_îr‹
(
Ωc
, "%s: (%s, %s)", 
func
, 
îr_maj
, 
îr_mö
);

265 
	`‰ì
(
îr_mö
);

266 
	`‰ì
(
îr_maj
);

267 
	}
}

270 
	$krb5_auth_ªque°
(
Ωc_c⁄ãxt
 *
Ωc
,

271 
¥iv©e_auth_d©a
 *
auth_d©a
,

272 *
buf
, 
Àn
)

274 
uöt32_t
 
maj
, 
mö
;

275 
gss_buf„r_desc
 *
öput_tokí
 = 
NULL
;

276 
gss_buf„r_desc
 
tokí
 = 
GSS_C_EMPTY_BUFFER
;

278 i‡(
buf
) {

280 
	`gss_ªÀa£_buf„r
(&
mö
, &
auth_d©a
->
ouçut_tokí
);

281 
auth_d©a
->
ouçut_tokí
.
Àngth
 = 0;

282 
auth_d©a
->
ouçut_tokí
.
vÆue
 = 
NULL
;

284 
tokí
.
vÆue
 = 
buf
;

285 
tokí
.
Àngth
 = 
Àn
;

286 
öput_tokí
 = &
tokí
;

292 
auth_d©a
->
ªq_Êags
 = 
GSS_C_MUTUAL_FLAG
;

293 i‡(
auth_d©a
->
w™ãd_£c
 =
RPC_SEC_KRB5I
) {

294 
auth_d©a
->
ªq_Êags
 |
GSS_C_INTEG_FLAG
;

296 i‡(
auth_d©a
->
w™ãd_£c
 =
RPC_SEC_KRB5P
) {

297 
auth_d©a
->
ªq_Êags
 |
GSS_C_CONF_FLAG
;

299 i‡(
auth_d©a
->
¸ed
 =
GSS_C_NO_CREDENTIAL
) {

300 
öput_tokí
=
GSS_C_NO_BUFFER
;

302 
maj
 = 
	`gss_öô_£c_c⁄ãxt
(&
mö
, 
auth_d©a
->
¸ed
,

303 &
auth_d©a
->
c⁄ãxt
,

304 
auth_d©a
->
èrgë_«me
,

305 
	`disˇrd_c⁄°
(
auth_d©a
->
mech_ty≥
),

306 
auth_d©a
->
ªq_Êags
,

307 
GSS_C_INDEFINITE
,

308 
GSS_C_NO_CHANNEL_BINDINGS
,

309 
öput_tokí
,

310 
NULL
,

311 &
auth_d©a
->
ouçut_tokí
,

312 
NULL
,

313 
NULL
);

314 
Ωc
->
gss_c⁄ãxt
 = 
auth_d©a
->
c⁄ãxt
;

320 i‡(
maj
 & 
GSS_S_CONTINUE_NEEDED
) {

323 i‡(
	`GSS_ERROR
(
maj
)) {

324 
	`krb5_£t_gss_îr‹
(
Ωc
, "gss_öô_£c_c⁄ãxt", 
maj
, 
mö
);

329 
	}
}

332 
	$krb5_gë_ouçut_tokí_Àngth
(
¥iv©e_auth_d©a
 *
auth_d©a
)

334  
auth_d©a
->
ouçut_tokí
.
Àngth
;

335 
	}
}

338 
	$krb5_gë_ouçut_tokí_buf„r
(
¥iv©e_auth_d©a
 *
auth_d©a
)

340  
auth_d©a
->
ouçut_tokí
.
vÆue
;

341 
	}
}

	@lib/krb5-wrapper.h

2 #i‚de‡
_KRB5_WRAPPER_H_


3 
	#_KRB5_WRAPPER_H_


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
HAVE_LIBKRB5


27 #i‚de‡
_GNU_SOURCE


28 
	#_GNU_SOURCE


	)

31 #ifde‡
__˝lu•lus


35 #i‡
__APPLE__


36 #imp‹à<
GSS
/GSS.
h
>

38 
	~<gsßpi/gsßpi.h
>

40 c⁄° 
gss_OID_desc
 
gss_mech_•√go
 = {

45 c⁄° 
gss_OID_desc
 
	g•√go_mech_krb5
 = {

49 
	s¥iv©e_auth_d©a
 {

50 
gss_˘x_id_t
 
	gc⁄ãxt
;

51 
gss_¸ed_id_t
 
	g¸ed
;

52 
gss_«me_t
 
	gu£r_«me
;

53 
gss_«me_t
 
	gèrgë_«me
;

54 
gss_c⁄°_OID
 
	gmech_ty≥
;

55 
uöt32_t
 
	gªq_Êags
;

56 
gss_buf„r_desc
 
	gouçut_tokí
;

57 *
	gg_£rvî
;

58 
	gw™ãd_£c
;

62 
krb5_‰ì_auth_d©a
(
¥iv©e_auth_d©a
 *
auth
);

64 
¥iv©e_auth_d©a
 *

65 
krb5_auth_öô
(
Ωc_c⁄ãxt
 *
Ωc
,

66 c⁄° *
£rvî
,

67 c⁄° *
u£r_«me
,

68 
w™ãd_£c
);

71 
krb5_£t_gss_îr‹
(
Ωc_c⁄ãxt
 *
Ωc
, *
func
,

72 
uöt32_t
 
maj
, uöt32_à
mö
);

75 
krb5_auth_ªque°
(
Ωc_c⁄ãxt
 *
Ωc
,

76 
¥iv©e_auth_d©a
 *
auth_d©a
,

77 *
buf
, 
Àn
);

80 
krb5_gë_ouçut_tokí_buf„r
(
¥iv©e_auth_d©a
 *
auth_d©a
);

83 
krb5_gë_ouçut_tokí_Àngth
(
¥iv©e_auth_d©a
 *
auth_d©a
);

85 #ifde‡
__˝lu•lus


	@lib/libnfs-sync.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

29 #ifde‡
PS2_EE


30 
	~"ps2_com∑t.h
"

33 #ifde‡
PS3_PPU


34 
	~"ps3_com∑t.h
"

37 #ifde‡
WIN32


38 
	~<wö32/wö32_com∑t.h
>

41 #ifde‡
HAVE_SYS_SOCKET_H


42 
	~<sys/sockë.h
>

45 #ifde‡
HAVE_NET_IF_H


46 
	~<√t/if.h
>

49 #ifde‡
HAVE_SYS_VFS_H


50 
	~<sys/vfs.h
>

53 #ifde‡
HAVE_SYS_STATVFS_H


54 
	~<sys/°©vfs.h
>

57 #i‡
deföed
(
__ANDROID__
Ë&& !deföed(
HAVE_SYS_STATVFS_H
)

58 
	#°©vfs
 
°©fs


	)

61 #ifde‡
HAVE_SYS_IOCTL_H


62 
	~<sys/io˘l.h
>

65 #ifde‡
HAVE_POLL_H


66 
	~<pﬁl.h
>

69 #ifde‡
HAVE_NETDB_H


70 
	~<√tdb.h
>

73 #ifde‡
HAVE_UNISTD_H


74 
	~<uni°d.h
>

77 #ifde‡
HAVE_NETINET_IN_H


78 
	~<√töë/ö.h
>

81 #ifde‡
HAVE_STRINGS_H


82 
	~<°rögs.h
>

85 
	~<°dio.h
>

86 
	~<°dlib.h
>

87 
	~<°rög.h
>

88 
	~<as£π.h
>

89 
	~<sys/ty≥s.h
>

90 
	~<sys/°©.h
>

91 
	~<f˙é.h
>

92 
	~<î∫o.h
>

94 #ifde‡
HAVE_SYS_SOCKIO_H


95 
	~<sys/sockio.h
>

98 #i‡
deföed
(
__sun
)

99 
	~<sys/sockio.h
>

102 #ifde‡
HAVE_SYS_TIME_H


103 
	~<sys/time.h
>

106 
	~"libnfs-zdr.h
"

107 
	~"libnfs.h
"

108 
	~"libnfs-øw.h
"

109 
	~"libnfs-øw-mou¡.h
"

110 
	~"libnfs-øw-nfs.h
"

111 
	~"libnfs-øw-nfs4.h
"

112 
	~"libnfs-¥iv©e.h
"

114 
	ssync_cb_d©a
 {

115 
	mis_föished
;

116 
	m°©us
;

117 
uöt64_t
 
	moff£t
;

118 *
	mªtu∫_d©a
;

119 
	mªtu∫_öt
;

120 c⁄° *
	mˇŒ
;

121 #ifde‡
HAVE_MULTITHREADING


122 
	mhas_£m
;

123 
libnfs_£m_t
 
	mwaô_£m
;

127 
ölöe
 

128 
	$nfs_öô_cb_d©a
(
nfs_c⁄ãxt
 **
nfs
, 
sync_cb_d©a
 *
cb_d©a
)

130 
cb_d©a
->
is_föished
 = 0;

131 #ifde‡
HAVE_MULTITHREADING


132 i‡(
nfs
 && (*nfs)->
Ωc
->
mu…ôhªadög_íabÀd
 && (*nfs)->
ma°î_˘x
 =
NULL
) {

133 
nfs_thªad_c⁄ãxt
 *
¡c
;

135 
¡c
 = (*
nfs
)->
nfsi
->
thªad_˘x
;Çtc;Çt¯¡c->
√xt
) {

136 i‡(
	`nfs_mt_gë_tid
(Ë=
¡c
->
tid
) {

140 i‡(
¡c
) {

141 *
nfs
 = &
¡c
->nfs;

143 
¡c
 = 
	`ˇŒoc
(1, (
nfs_thªad_c⁄ãxt
));

144 i‡(
¡c
 =
NULL
) {

147 
	`nfs_mt_muãx_lock
(&(*
nfs
)->
Ωc
->
Ωc_muãx
);

148 
¡c
->
√xt
 = (*
nfs
)->
nfsi
->
thªad_˘x
;

149 
¡c
->
tid
 = 
	`nfs_mt_gë_tid
();

150 (*
nfs
)->
nfsi
->
thªad_˘x
 = 
¡c
;

151 
	`nfs_mt_muãx_u∆ock
(&(*
nfs
)->
Ωc
->
Ωc_muãx
);

152 
	`mem˝y
(&
¡c
->
nfs
, *nfs, (
nfs_c⁄ãxt
));

153 
¡c
->
nfs
.
îr‹_°rög
 = 
NULL
;

154 
¡c
->
nfs
.
ma°î_˘x
 = *nfs;

156 *
nfs
 = &
¡c
->nfs;

165 i‡(
	`nfs_mt_£m_öô
(&
cb_d©a
->
waô_£m
, 0)) {

166 i‡(
nfs
 && *nfs) {

167 
	`nfs_£t_îr‹
(*
nfs
, "FailedÅo initialize semaphore");

171 
cb_d©a
->
has_£m
 = 1;

174 
	}
}

176 
ölöe
 

177 
	$nfs_de°roy_cb_£m
(
sync_cb_d©a
 *
cb_d©a
)

179 #ifde‡
HAVE_MULTITHREADING


180 i‡(
cb_d©a
->
has_£m
) {

181 
	`nfs_mt_£m_de°roy
(&
cb_d©a
->
waô_£m
);

183 
cb_d©a
->
has_£m
 = 0;

185 
	}
}

187 
ölöe
 

188 
	$cb_d©a_is_föished
(
sync_cb_d©a
 *
cb_d©a
, 
°©us
)

190 
cb_d©a
->
is_föished
 = 1;

191 
cb_d©a
->
°©us
 = status;

192 #ifde‡
HAVE_MULTITHREADING


193 i‡(
cb_d©a
->
has_£m
) {

194 
	`nfs_mt_£m_po°
(&
cb_d©a
->
waô_£m
);

197 
	}
}

200 
	$waô_f‹_ª∂y
(
Ωc_c⁄ãxt
 *
Ωc
, 
sync_cb_d©a
 *
cb_d©a
)

202 
pﬁlfd
 
pfd
;

203 
ªvíts
;

204 
ªt
;

205 
uöt64_t
 
timeout
;

207 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

209 i‡(
Ωc
->
timeout
 > 0) {

210 
timeout
 = 
	`Ωc_cuºít_time
(Ë+ 
Ωc
->timeout;

211 #i‚de‡
HAVE_CLOCK_GETTIME


219 
timeout
 += 1000;

223 
timeout
 = 0;

226 !
cb_d©a
->
is_föished
) {

228 
pfd
.
fd
 = 
	`Ωc_gë_fd
(
Ωc
);

229 
pfd
.
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

230 
pfd
.
ªvíts
 = 0;

232 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
Ωc
->
pﬁl_timeout
);

233 i‡(
ªt
 < 0) {

234 
	`Ωc_£t_îr‹
(
Ωc
, "Poll failed");

235 
ªvíts
 = -1;

237 
ªvíts
 = 
pfd
.revents;

240 i‡(
	`Ωc_£rvi˚
(
Ωc
, 
ªvíts
) < 0) {

241 i‡(
ªvíts
 != -1)

242 
	`Ωc_£t_îr‹
(
Ωc
, "rpc_service failed");

243 
cb_d©a
->
°©us
 = -
EIO
;

247 i‡(
	`Ωc_gë_fd
(
Ωc
) == -1) {

248 
	`Ωc_£t_îr‹
(
Ωc
, "Socket closed");

252 i‡(
timeout
 > 0 && 
	`Ωc_cuºít_time
() >Åimeout) {

253 
	`Ωc_£t_îr‹
(
Ωc
, "TimeoutÑeached");

257 
	}
}

260 
	$waô_f‹_nfs_ª∂y
(
nfs_c⁄ãxt
 *
nfs
, 
sync_cb_d©a
 *
cb_d©a
)

262 
pﬁlfd
 
pfd
;

263 
ªvíts
;

264 
ªt
;

266 #ifde‡
HAVE_MULTITHREADING


267 if(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

268 
	`nfs_mt_£m_waô
(&
cb_d©a
->
waô_£m
);

272 !
cb_d©a
->
is_föished
) {

274 
pfd
.
fd
 = 
	`nfs_gë_fd
(
nfs
);

275 
pfd
.
evíts
 = 
	`nfs_which_evíts
(
nfs
);

276 
pfd
.
ªvíts
 = 0;

278 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
nfs
->
Ωc
->
pﬁl_timeout
);

279 i‡(
ªt
 < 0) {

280 
	`nfs_£t_îr‹
(
nfs
, "Poll failed");

281 
ªvíts
 = -1;

283 
ªvíts
 = 
pfd
.revents;

286 i‡(
	`nfs_£rvi˚
(
nfs
, 
ªvíts
) < 0) {

287 i‡(
ªvíts
 != -1)

288 
	`nfs_£t_îr‹
(
nfs
, "nfs_service failed");

289 
cb_d©a
->
°©us
 = -
EIO
;

290 
	`Ωc_îr‹_Æl_pdus
(
nfs
->
Ωc
, "RPC ERROR: FailedÅoÑeconnectásync");

294 
	}
}

302 
	$mou¡_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

304 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

306 i‡(
°©us
 < 0) {

307 
	`nfs_£t_îr‹
(
nfs
, "%s: %s",

308 
__FUNCTION__
, 
	`nfs_gë_îr‹
(
nfs
));

309 
föished
;

312 
föished
:

313 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

314 
	}
}

317 
	$_nfs_mou¡
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
, c⁄° *
exp‹t
)

319 
sync_cb_d©a
 
cb_d©a
;

320 
Ωc_c⁄ãxt
 *
Ωc
 = 
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
);

322 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

324 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

328 i‡(
	`nfs_mou¡_async
(
nfs
, 
£rvî
, 
exp‹t
, 
mou¡_cb
, &
cb_d©a
) != 0) {

329 
	`nfs_£t_îr‹
(
nfs
, "nfs_mount_async failed. %s",

330 
	`nfs_gë_îr‹
(
nfs
));

331 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

335 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

336 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

339 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

345 i‡(
cb_d©a
.
°©us
) {

346 
	`Ωc_disc⁄√˘
(
Ωc
, "failed mount");

349  
cb_d©a
.
°©us
;

350 
	}
}

353 
	$nfs_mou¡
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
, c⁄° *
exp‹t
)

355 
ªt
;

356 
ªt
 = 
	`_nfs_mou¡
(
nfs
, 
£rvî
, 
exp‹t
);

361 i‡(
ªt
 && 
nfs
->
nfsi
->
deÁu…_vîsi⁄
) {

362 
	`‰ì
(
nfs
->
nfsi
->
roŸfh
.
vÆ
);

363 
nfs
->
nfsi
->
roŸfh
.
Àn
 = 0;

364 
nfs
->
nfsi
->
vîsi⁄
 = 
NFS_V4
;

365 
	`Ωc_disc⁄√˘
(
nfs
->
Ωc
, "disconnectÅoÅry different dialect");

366 
ªt
 = 
	`_nfs_mou¡
(
nfs
, 
£rvî
, 
exp‹t
);

369  
ªt
;

370 
	}
}

376 
	$umou¡_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

378 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

380 i‡(
°©us
 < 0) {

381 
	`nfs_£t_îr‹
(
nfs
, "%s: %s",

382 
__FUNCTION__
, 
	`nfs_gë_îr‹
(
nfs
));

383 
föished
;

386 
föished
:

387 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

388 
	}
}

391 
	$nfs_umou¡
(
nfs_c⁄ãxt
 *
nfs
)

393 
sync_cb_d©a
 
cb_d©a
;

394 
Ωc_c⁄ãxt
 *
Ωc
 = 
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
);

396 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

398 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

402 i‡(
	`nfs_umou¡_async
(
nfs
, 
umou¡_cb
, &
cb_d©a
) != 0) {

403 
	`nfs_£t_îr‹
(
nfs
, "nfs_umount_async failed. %s",

404 
	`nfs_gë_îr‹
(
nfs
));

405 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

409 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

410 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

413 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

419 i‡(
cb_d©a
.
°©us
) {

420 
	`Ωc_disc⁄√˘
(
Ωc
, "failed mount");

423  
cb_d©a
.
°©us
;

424 
	}
}

431 
	$°©_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

433 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

435 i‡(
°©us
 < 0) {

436 
	`nfs_£t_îr‹
(
nfs
, "stat call failed with \"%s\"",

437 (*)
d©a
);

438 
föished
;

440 #ifde‡
WIN32


441 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, (
__°©64
));

443 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, (
°©
));

446 
föished
:

447 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

448 
	}
}

451 #ifde‡
WIN32


452 
	$nfs_°©
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
__°©64
 *
°
)

454 
	$nfs_°©
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
°©
 *
°
)

457 
sync_cb_d©a
 
cb_d©a
;

459 
cb_d©a
.
ªtu∫_d©a
 = 
°
;

460 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

464 i‡(
	`nfs_°©_async
(
nfs
, 
∑th
, 
°©_cb
, &
cb_d©a
) != 0) {

465 
	`nfs_£t_îr‹
(
nfs
, "nfs_stat_async failed");

466 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

470 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

471 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

473  
cb_d©a
.
°©us
;

474 
	}
}

477 
	$°©64_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

479 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

481 i‡(
°©us
 < 0) {

482 
	`nfs_£t_îr‹
(
nfs
, "stat call failed with \"%s\"",

483 (*)
d©a
);

484 
föished
;

486 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, (
nfs_°©_64
));

488 
föished
:

489 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

490 
	}
}

493 
	$nfs_°©64
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_°©_64
 *
°
)

495 
sync_cb_d©a
 
cb_d©a
;

497 
cb_d©a
.
ªtu∫_d©a
 = 
°
;

498 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

502 i‡(
	`nfs_°©64_async
(
nfs
, 
∑th
, 
°©64_cb
, &
cb_d©a
) != 0) {

503 
	`nfs_£t_îr‹
(
nfs
, "nfs_stat64_async failed. %s",

504 
	`nfs_gë_îr‹
(
nfs
));

505 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

509 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

510 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

512  
cb_d©a
.
°©us
;

513 
	}
}

516 
	$nfs_l°©64
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_°©_64
 *
°
)

518 
sync_cb_d©a
 
cb_d©a
;

520 
cb_d©a
.
ªtu∫_d©a
 = 
°
;

521 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

525 i‡(
	`nfs_l°©64_async
(
nfs
, 
∑th
, 
°©64_cb
, &
cb_d©a
) != 0) {

526 
	`nfs_£t_îr‹
(
nfs
, "nfs_lstat64_async failed. %s",

527 
	`nfs_gë_îr‹
(
nfs
));

528 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

532 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

533 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

535  
cb_d©a
.
°©us
;

536 
	}
}

542 
	$›í_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

544 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

545 
nfsfh
 *
fh
, **nfsfh;

547 i‡(
°©us
 < 0) {

548 
	`nfs_£t_îr‹
(
nfs
, "open call failed with \"%s\"",

549 (*)
d©a
);

550 
föished
;

553 
fh
 = 
d©a
;

554 
nfsfh
 = 
cb_d©a
->
ªtu∫_d©a
;

555 *
nfsfh
 = 
fh
;

557 
föished
:

558 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

559 
	}
}

562 
	$nfs_›í
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

563 
nfsfh
 **nfsfh)

565 
sync_cb_d©a
 
cb_d©a
;

566 
ªåy
 = 0;

567 
nfs_c⁄ãxt
 *
⁄fs
 = 
nfs
;

569 
åy_agaö
:

570 
nfs
 = 
⁄fs
;

571 
cb_d©a
.
ªtu∫_d©a
 = 
nfsfh
;

572 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

576 i‡(
	`nfs_›í_async
(
nfs
, 
∑th
, 
Êags
, 
›í_cb
, &
cb_d©a
) != 0) {

577 
	`nfs_£t_îr‹
(
nfs
, "nfs_open_async failed. %s",

578 
	`nfs_gë_îr‹
(
nfs
));

579 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

583 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

584 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

586 i‡(
cb_d©a
.
°©us
 =-
EIO
 && 
ªåy
 < 10) {

587 
ªåy
++;

588 
åy_agaö
;

590  
cb_d©a
.
°©us
;

591 
	}
}

594 
	$nfs_›í2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

595 
mode
, 
nfsfh
 **nfsfh)

597 
sync_cb_d©a
 
cb_d©a
;

599 
cb_d©a
.
ªtu∫_d©a
 = 
nfsfh
;

600 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

604 i‡(
	`nfs_›í2_async
(
nfs
, 
∑th
, 
Êags
, 
mode
, 
›í_cb
, &
cb_d©a
) != 0) {

605 
	`nfs_£t_îr‹
(
nfs
, "nfs_open2_async failed. %s",

606 
	`nfs_gë_îr‹
(
nfs
));

607 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

611 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

612 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

614  
cb_d©a
.
°©us
;

615 
	}
}

621 
	$chdú_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

623 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

625 i‡(
°©us
 < 0) {

626 
	`nfs_£t_îr‹
(
nfs
, "chdir call failed with \"%s\"",

627 (*)
d©a
);

628 
föished
;

631 
föished
:

632 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

633 
	}
}

636 
	$nfs_chdú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

638 
sync_cb_d©a
 
cb_d©a
;

640 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

644 i‡(
	`nfs_chdú_async
(
nfs
, 
∑th
, 
chdú_cb
, &
cb_d©a
) != 0) {

645 
	`nfs_£t_îr‹
(
nfs
, "nfs_chdir_async failed with %s",

646 
	`nfs_gë_îr‹
(
nfs
));

647 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

651 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

652 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

654  
cb_d©a
.
°©us
;

655 
	}
}

662 
	$¥ód_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

664 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

666 i‡(
°©us
 < 0) {

667 
	`nfs_£t_îr‹
(
nfs
, "%†ˇŒ faûed wôh \"%s\"", 
cb_d©a
->
ˇŒ
,

668 (*)
d©a
);

669 
föished
;

672 
föished
:

673 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

674 
	}
}

677 
	$nfs_¥ód
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

678 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
)

680 
sync_cb_d©a
 
cb_d©a
;

682 
cb_d©a
.
ˇŒ
 = "pread";

683 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

687 i‡(
	`nfs_¥ód_async
(
nfs
, 
nfsfh
, 
buf
, 
cou¡
, 
off£t
,

688 
¥ód_cb
, &
cb_d©a
) != 0) {

689 
	`nfs_£t_îr‹
(
nfs
, "nfs_pread_async failed. %s",

690 
	`nfs_gë_îr‹
(
nfs
));

691 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

695 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

696 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

698  
cb_d©a
.
°©us
;

699 
	}
}

705 
	$nfs_ªad
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

706 *
buf
, 
size_t
 
cou¡
)

708 
sync_cb_d©a
 
cb_d©a
;

710 
cb_d©a
.
ˇŒ
 = "read";

711 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

715 i‡(
	`nfs_ªad_async
(
nfs
, 
nfsfh
, 
buf
, 
cou¡
, 
¥ód_cb
, &
cb_d©a
) != 0) {

716 
	`nfs_£t_îr‹
(
nfs
, "nfs_read_async failed. %s",

717 
	`nfs_gë_îr‹
(
nfs
));

718 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

722 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

723 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

725  
cb_d©a
.
°©us
;

726 
	}
}

732 
	$˛o£_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

734 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

736 i‡(
°©us
 < 0) {

737 
	`nfs_£t_îr‹
(
nfs
, "close call failed with \"%s\"",

738 (*)
d©a
);

739 
föished
;

742 
föished
:

743 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

744 
	}
}

747 
	$nfs_˛o£
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh)

749 
sync_cb_d©a
 
cb_d©a
;

751 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

755 i‡(
	`nfs_˛o£_async
(
nfs
, 
nfsfh
, 
˛o£_cb
, &
cb_d©a
) != 0) {

756 
	`nfs_£t_îr‹
(
nfs
, "nfs_close_async failed. %s",

757 
	`nfs_gë_îr‹
(
nfs
));

758 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

762 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

763 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

765  
cb_d©a
.
°©us
;

766 
	}
}

773 #ifde‡
WIN32


774 
	$nfs_f°©
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
__°©64
 *
°
)

776 
	$nfs_f°©
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
°©
 *
°
)

779 
sync_cb_d©a
 
cb_d©a
;

781 
cb_d©a
.
ªtu∫_d©a
 = 
°
;

782 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

786 i‡(
	`nfs_f°©_async
(
nfs
, 
nfsfh
, 
°©_cb
, &
cb_d©a
) != 0) {

787 
	`nfs_£t_îr‹
(
nfs
, "nfs_fstat_async failed");

788 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

792 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

793 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

795  
cb_d©a
.
°©us
;

796 
	}
}

802 
	$nfs_f°©64
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

803 
nfs_°©_64
 *
°
)

805 
sync_cb_d©a
 
cb_d©a
;

807 
cb_d©a
.
ªtu∫_d©a
 = 
°
;

808 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

812 i‡(
	`nfs_f°©64_async
(
nfs
, 
nfsfh
, 
°©64_cb
, &
cb_d©a
) != 0) {

813 
	`nfs_£t_îr‹
(
nfs
, "nfs_fstat64_async failed. %s",

814 
	`nfs_gë_îr‹
(
nfs
));

815 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

819 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

820 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

822  
cb_d©a
.
°©us
;

823 
	}
}

830 
	$pwrôe_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

832 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

834 i‡(
°©us
 < 0) {

835 
	`nfs_£t_îr‹
(
nfs
, "%s call failed with \"%s\"",

836 
cb_d©a
->
ˇŒ
, (*)
d©a
);

837 
föished
;

840 
föished
:

841 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

842 
	}
}

845 
	$nfs_pwrôe
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

846 c⁄° *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
)

848 
sync_cb_d©a
 
cb_d©a
;

850 
cb_d©a
.
ˇŒ
 = "pwrite";

851 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

855 i‡(
	`nfs_pwrôe_async
(
nfs
, 
nfsfh
, 
buf
, 
cou¡
, 
off£t
, 
pwrôe_cb
,

856 &
cb_d©a
) != 0) {

857 
	`nfs_£t_îr‹
(
nfs
, "nfs_pwrite_async failed. %s",

858 
	`nfs_gë_îr‹
(
nfs
));

859 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

863 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

864 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

866  
cb_d©a
.
°©us
;

867 
	}
}

873 
	$nfs_wrôe
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

874 c⁄° *
buf
, 
uöt64_t
 
cou¡
)

876 
sync_cb_d©a
 
cb_d©a
;

878 
cb_d©a
.
ˇŒ
 = "write";

879 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

883 i‡(
	`nfs_wrôe_async
(
nfs
, 
nfsfh
, 
buf
, 
cou¡
, 
pwrôe_cb
, &
cb_d©a
) != 0) {

884 
	`nfs_£t_îr‹
(
nfs
, "nfs_write_async failed. %s",

885 
	`nfs_gë_îr‹
(
nfs
));

886 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

890 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

891 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

893  
cb_d©a
.
°©us
;

894 
	}
}

901 
	$fsync_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

903 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

905 i‡(
°©us
 < 0) {

906 
	`nfs_£t_îr‹
(
nfs
, "fsync call failed with \"%s\"",

907 (*)
d©a
);

908 
föished
;

911 
föished
:

912 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

913 
	}
}

916 
	$nfs_fsync
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh)

918 
sync_cb_d©a
 
cb_d©a
;

920 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

924 i‡(
	`nfs_fsync_async
(
nfs
, 
nfsfh
, 
fsync_cb
, &
cb_d©a
) != 0) {

925 
	`nfs_£t_îr‹
(
nfs
, "nfs_fsync_async failed. %s",

926 
	`nfs_gë_îr‹
(
nfs
));

927 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

931 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

932 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

934  
cb_d©a
.
°©us
;

935 
	}
}

942 
	$·runˇã_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

943 *
¥iv©e_d©a
)

945 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

947 i‡(
°©us
 < 0) {

948 
	`nfs_£t_îr‹
(
nfs
, "ftruncate call failed with \"%s\"",

949 (*)
d©a
);

950 
föished
;

953 
föished
:

954 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

955 
	}
}

958 
	$nfs_·runˇã
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uöt64_t
 
Àngth
)

960 
sync_cb_d©a
 
cb_d©a
;

962 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

966 i‡(
	`nfs_·runˇã_async
(
nfs
, 
nfsfh
, 
Àngth
, 
·runˇã_cb
,

967 &
cb_d©a
) != 0) {

968 
	`nfs_£t_îr‹
(
nfs
, "nfs_ftruncate_async failed. %s",

969 
	`nfs_gë_îr‹
(
nfs
));

970 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

974 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

975 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

977  
cb_d©a
.
°©us
;

978 
	}
}

986 
	$åunˇã_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

988 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

990 i‡(
°©us
 < 0) {

991 
	`nfs_£t_îr‹
(
nfs
, "truncate call failed with \"%s\"",

992 (*)
d©a
);

993 
föished
;

996 
föished
:

997 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

998 
	}
}

1000 
	$nfs_åunˇã
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uöt64_t
 
Àngth
)

1002 
sync_cb_d©a
 
cb_d©a
;

1004 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1008 i‡(
	`nfs_åunˇã_async
(
nfs
, 
∑th
, 
Àngth
, 
åunˇã_cb
, &
cb_d©a
) != 0) {

1009 
	`nfs_£t_îr‹
(
nfs
, "nfs_ftruncate_async failed. %s",

1010 
	`nfs_gë_îr‹
(
nfs
));

1011 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1015 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1016 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1018  
cb_d©a
.
°©us
;

1019 
	}
}

1026 
	$mkdú_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1028 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1030 i‡(
°©us
 < 0) {

1031 
	`nfs_£t_îr‹
(
nfs
, "mkdir call failed with \"%s\"",

1032 (*)
d©a
);

1033 
föished
;

1036 
föished
:

1037 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1038 
	}
}

1041 
	$nfs_mkdú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

1043 
sync_cb_d©a
 
cb_d©a
;

1045 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1049 i‡(
	`nfs_mkdú_async
(
nfs
, 
∑th
, 
mkdú_cb
, &
cb_d©a
) != 0) {

1050 
	`nfs_£t_îr‹
(
nfs
, "nfs_mkdir_async failed. %s",

1051 
	`nfs_gë_îr‹
(
nfs
));

1052 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1056 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1057 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1059  
cb_d©a
.
°©us
;

1060 
	}
}

1063 
	$nfs_mkdú2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
)

1065 
sync_cb_d©a
 
cb_d©a
;

1067 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1071 i‡(
	`nfs_mkdú2_async
(
nfs
, 
∑th
, 
mode
, 
mkdú_cb
, &
cb_d©a
) != 0) {

1072 
	`nfs_£t_îr‹
(
nfs
, "nfs_mkdir2_async failed");

1073 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1077 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1078 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1080  
cb_d©a
.
°©us
;

1081 
	}
}

1090 
	$rmdú_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1092 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1094 i‡(
°©us
 < 0) {

1095 
	`nfs_£t_îr‹
(
nfs
, "rmdir call failed with \"%s\"",

1096 (*)
d©a
);

1097 
föished
;

1100 
föished
:

1101 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1102 
	}
}

1104 
	$nfs_rmdú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

1106 
sync_cb_d©a
 
cb_d©a
;

1108 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1112 i‡(
	`nfs_rmdú_async
(
nfs
, 
∑th
, 
rmdú_cb
, &
cb_d©a
) != 0) {

1113 
	`nfs_£t_îr‹
(
nfs
, "nfs_rmdir_async failed. %s",

1114 
	`nfs_gë_îr‹
(
nfs
));

1115 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1119 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1120 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1122  
cb_d©a
.
°©us
;

1123 
	}
}

1131 
	$¸ót_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1133 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1134 
nfsfh
 *
fh
, **nfsfh;

1136 i‡(
°©us
 < 0) {

1137 
	`nfs_£t_îr‹
(
nfs
, "creat call failed with \"%s\"",

1138 (*)
d©a
);

1139 
föished
;

1142 
fh
 = 
d©a
;

1143 
nfsfh
 = 
cb_d©a
->
ªtu∫_d©a
;

1144 *
nfsfh
 = 
fh
;

1146 
föished
:

1147 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1148 
	}
}

1151 
	$nfs_¸ót
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1152 
nfsfh
 **nfsfh)

1154 
sync_cb_d©a
 
cb_d©a
;

1156 
cb_d©a
.
ªtu∫_d©a
 = 
nfsfh
;

1157 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1161 i‡(
	`nfs_¸ót_async
(
nfs
, 
∑th
, 
mode
, 
¸ót_cb
, &
cb_d©a
) != 0) {

1162 
	`nfs_£t_îr‹
(
nfs
, "nfs_create_async failed. %s",

1163 
	`nfs_gë_îr‹
(
nfs
));

1164 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1168 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1169 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1171  
cb_d©a
.
°©us
;

1172 
	}
}

1178 
	$mknod_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1180 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1182 i‡(
°©us
 < 0) {

1183 
	`nfs_£t_îr‹
(
nfs
, "mknod call failed with \"%s\"",

1184 (*)
d©a
);

1185 
föished
;

1188 
föished
:

1189 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1190 
	}
}

1193 
	$nfs_mknod
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
, 
dev
)

1195 
sync_cb_d©a
 
cb_d©a
;

1197 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1201 i‡(
	`nfs_mknod_async
(
nfs
, 
∑th
, 
mode
, 
dev
, 
mknod_cb
, &
cb_d©a
) != 0) {

1202 
	`nfs_£t_îr‹
(
nfs
, "nfs_creat_async failed. %s",

1203 
	`nfs_gë_îr‹
(
nfs
));

1204 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1208 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1209 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1211  
cb_d©a
.
°©us
;

1212 
	}
}

1219 
	$u∆ök_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1221 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1223 i‡(
°©us
 < 0) {

1224 
	`nfs_£t_îr‹
(
nfs
, "unlink call failed with \"%s\"",

1225 (*)
d©a
);

1226 
föished
;

1229 
föished
:

1230 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1231 
	}
}

1234 
	$nfs_u∆ök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

1236 
sync_cb_d©a
 
cb_d©a
;

1238 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1242 i‡(
	`nfs_u∆ök_async
(
nfs
, 
∑th
, 
u∆ök_cb
, &
cb_d©a
) != 0) {

1243 
	`nfs_£t_îr‹
(
nfs
, "nfs_unlink_async failed. %s",

1244 
	`nfs_gë_îr‹
(
nfs
));

1245 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1249 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1250 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1252  
cb_d©a
.
°©us
;

1253 
	}
}

1261 
	$›ídú_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1263 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1264 
nfsdú
 *
dú
, **nfsdir;

1266 i‡(
°©us
 < 0) {

1267 
	`nfs_£t_îr‹
(
nfs
, "opendir call failed with \"%s\"",

1268 (*)
d©a
);

1269 
föished
;

1272 
dú
 = 
d©a
;

1273 
nfsdú
 = 
cb_d©a
->
ªtu∫_d©a
;

1274 *
nfsdú
 = 
dú
;

1276 
föished
:

1277 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1278 
	}
}

1281 
	$nfs_›ídú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfsdú
 **nfsdir)

1283 
sync_cb_d©a
 
cb_d©a
;

1285 
cb_d©a
.
ªtu∫_d©a
 = 
nfsdú
;

1286 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1290 i‡(
	`nfs_›ídú_async
(
nfs
, 
∑th
, 
›ídú_cb
, &
cb_d©a
) != 0) {

1291 
	`nfs_£t_îr‹
(
nfs
, "nfs_opendir_async failed. %s",

1292 
	`nfs_gë_îr‹
(
nfs
));

1293 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1297 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1298 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1300  
cb_d©a
.
°©us
;

1301 
	}
}

1308 
	$l£ek_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1310 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1312 i‡(
°©us
 < 0) {

1313 
	`nfs_£t_îr‹
(
nfs
, "lseek call failed with \"%s\"",

1314 
	`nfs_gë_îr‹
(
nfs
));

1315 
föished
;

1318 i‡(
cb_d©a
->
ªtu∫_d©a
 !
NULL
) {

1319 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, (
uöt64_t
));

1322 
föished
:

1323 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1324 
	}
}

1327 
	$nfs_l£ek
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
öt64_t
 
off£t
, 
whí˚
, 
uöt64_t
 *
cuºít_off£t
)

1329 
sync_cb_d©a
 
cb_d©a
;

1331 
cb_d©a
.
ªtu∫_d©a
 = 
cuºít_off£t
;

1332 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1336 i‡(
	`nfs_l£ek_async
(
nfs
, 
nfsfh
, 
off£t
, 
whí˚
, 
l£ek_cb
,

1337 &
cb_d©a
) != 0) {

1338 
	`nfs_£t_îr‹
(
nfs
, "nfs_lseek_async failed. %s",

1339 
	`nfs_gë_îr‹
(
nfs
));

1340 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1344 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1345 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1347  
cb_d©a
.
°©us
;

1348 
	}
}

1355 
	$lockf_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1357 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1359 i‡(
°©us
 < 0) {

1360 
	`nfs_£t_îr‹
(
nfs
, "lockf call failed with \"%s\"",

1361 
	`nfs_gë_îr‹
(
nfs
));

1362 
föished
;

1365 
föished
:

1366 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1367 
	}
}

1370 
	$nfs_lockf
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1371 
nfs4_lock_›
 
cmd
, 
uöt64_t
 
cou¡
)

1373 
sync_cb_d©a
 
cb_d©a
;

1375 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1379 i‡(
	`nfs_lockf_async
(
nfs
, 
nfsfh
, 
cmd
, 
cou¡
,

1380 
lockf_cb
, &
cb_d©a
) != 0) {

1381 
	`nfs_£t_îr‹
(
nfs
, "nfs_lockf_async failed. %s",

1382 
	`nfs_gë_îr‹
(
nfs
));

1383 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1387 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1388 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1390  
cb_d©a
.
°©us
;

1391 
	}
}

1397 
	$f˙é_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1399 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1401 i‡(
°©us
 < 0) {

1402 
	`nfs_£t_îr‹
(
nfs
, "fcntl call failed with \"%s\"",

1403 
	`nfs_gë_îr‹
(
nfs
));

1404 
föished
;

1407 
föished
:

1408 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1409 
	}
}

1412 
	$nfs_f˙é
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1413 
nfs4_f˙é_›
 
cmd
, *
¨g
)

1415 
sync_cb_d©a
 
cb_d©a
;

1417 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1421 i‡(
	`nfs_f˙é_async
(
nfs
, 
nfsfh
, 
cmd
, 
¨g
,

1422 
f˙é_cb
, &
cb_d©a
) != 0) {

1423 
	`nfs_£t_îr‹
(
nfs
, "nfs_fcntl_async failed. %s",

1424 
	`nfs_gë_îr‹
(
nfs
));

1425 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1429 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1430 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1432  
cb_d©a
.
°©us
;

1433 
	}
}

1439 
	$°©vfs_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1441 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1443 i‡(
°©us
 < 0) {

1444 
	`nfs_£t_îr‹
(
nfs
, "statvfs call failed with \"%s\"",

1445 (*)
d©a
);

1446 
föished
;

1449 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, (
°©vfs
));

1451 
föished
:

1452 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1453 
	}
}

1456 
	$nfs_°©vfs
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
°©vfs
 *
svfs
)

1458 
sync_cb_d©a
 
cb_d©a
;

1460 
cb_d©a
.
ªtu∫_d©a
 = 
svfs
;

1461 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1465 i‡(
	`nfs_°©vfs_async
(
nfs
, 
∑th
, 
°©vfs_cb
, &
cb_d©a
) != 0) {

1466 
	`nfs_£t_îr‹
(
nfs
, "nfs_statvfs_async failed. %s",

1467 
	`nfs_gë_îr‹
(
nfs
));

1468 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1472 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1473 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1475  
cb_d©a
.
°©us
;

1476 
	}
}

1482 
	$°©vfs64_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

1483 *
¥iv©e_d©a
)

1485 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1487 i‡(
°©us
 < 0) {

1488 
	`nfs_£t_îr‹
(
nfs
, "statvfs64 call failed with \"%s\"",

1489 (*)
d©a
);

1490 
föished
;

1493 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, (
nfs_°©vfs_64
));

1495 
föished
:

1496 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1497 
	}
}

1500 
	$nfs_°©vfs64
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1501 
nfs_°©vfs_64
 *
svfs
)

1503 
sync_cb_d©a
 
cb_d©a
;

1505 
cb_d©a
.
ªtu∫_d©a
 = 
svfs
;

1506 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1510 i‡(
	`nfs_°©vfs64_async
(
nfs
, 
∑th
, 
°©vfs64_cb
, &
cb_d©a
) != 0) {

1511 
	`nfs_£t_îr‹
(
nfs
, "nfs_statvfs64_async failed. %s",

1512 
	`nfs_gë_îr‹
(
nfs
));

1513 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1517 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1518 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1520  
cb_d©a
.
°©us
;

1521 
	}
}

1527 
	$ªadlök_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1529 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1531 i‡(
°©us
 < 0) {

1532 
	`nfs_£t_îr‹
(
nfs
, "readlink call failed with \"%s\"",

1533 (*)
d©a
);

1534 
föished
;

1537 i‡(
	`°æí
(
d©a
Ë> (
size_t
)
cb_d©a
->
ªtu∫_öt
) {

1538 
	`nfs_£t_îr‹
(
nfs
, "Too small buffer forÑeadlink");

1539 
cb_d©a
->
°©us
 = -
ENAMETOOLONG
;

1540 
föished
;

1543 
	`mem˝y
(
cb_d©a
->
ªtu∫_d©a
, 
d©a
, 
	`°æí
(data)+1);

1545 
föished
:

1546 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1547 
	}
}

1550 
	$nfs_ªadlök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, *
buf
, 
bufsize
)

1552 
sync_cb_d©a
 
cb_d©a
;

1554 
cb_d©a
.
ªtu∫_d©a
 = 
buf
;

1555 
cb_d©a
.
ªtu∫_öt
 = 
bufsize
;

1556 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1560 i‡(
	`nfs_ªadlök_async
(
nfs
, 
∑th
, 
ªadlök_cb
, &
cb_d©a
) != 0) {

1561 
	`nfs_£t_îr‹
(
nfs
, "nfs_readlink_async failed. %s",

1562 
	`nfs_gë_îr‹
(
nfs
));

1563 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1567 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1568 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1570  
cb_d©a
.
°©us
;

1571 
	}
}

1574 
	$ªadlök2_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1576 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1577 **
buÂå
;

1578 *
buf
;

1580 i‡(
°©us
 < 0) {

1581 
	`nfs_£t_îr‹
(
nfs
, "readlink call failed with \"%s\"",

1582 (*)
d©a
);

1583 
föished
;

1586 
buf
 = 
	`°rdup
(
d©a
);

1587 i‡(
buf
 =
NULL
) {

1588 
cb_d©a
->
°©us
 = 
î∫o
 ? -î∫ÿ: -
ENOMEM
;

1589 
föished
;

1592 
buÂå
 = 
cb_d©a
->
ªtu∫_d©a
;

1593 i‡(
buÂå
)

1594 *
buÂå
 = 
buf
;

1596 
föished
:

1597 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1598 
	}
}

1601 
	$nfs_ªadlök2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, **
buÂå
)

1603 
sync_cb_d©a
 
cb_d©a
;

1605 *
buÂå
 = 
NULL
;

1606 
cb_d©a
.
ªtu∫_d©a
 = 
buÂå
;

1607 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1611 i‡(
	`nfs_ªadlök_async
(
nfs
, 
∑th
, 
ªadlök2_cb
, &
cb_d©a
) != 0) {

1612 
	`nfs_£t_îr‹
(
nfs
, "nfs_readlink_async failed");

1613 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1617 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1618 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1620  
cb_d©a
.
°©us
;

1621 
	}
}

1629 
	$chmod_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1631 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1633 i‡(
°©us
 < 0) {

1634 
	`nfs_£t_îr‹
(
nfs
, "chmod call failed with \"%s\"",

1635 (*)
d©a
);

1636 
föished
;

1639 
föished
:

1640 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1641 
	}
}

1644 
	$nfs_chmod
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
)

1646 
sync_cb_d©a
 
cb_d©a
;

1648 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1652 i‡(
	`nfs_chmod_async
(
nfs
, 
∑th
, 
mode
, 
chmod_cb
, &
cb_d©a
) != 0) {

1653 
	`nfs_£t_îr‹
(
nfs
, "nfs_chmod_async failed. %s",

1654 
	`nfs_gë_îr‹
(
nfs
));

1655 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1659 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1660 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1662  
cb_d©a
.
°©us
;

1663 
	}
}

1666 
	$nfs_lchmod
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
)

1668 
sync_cb_d©a
 
cb_d©a
;

1670 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1674 i‡(
	`nfs_lchmod_async
(
nfs
, 
∑th
, 
mode
, 
chmod_cb
, &
cb_d©a
) != 0) {

1675 
	`nfs_£t_îr‹
(
nfs
, "nfs_lchmod_async failed. %s",

1676 
	`nfs_gë_îr‹
(
nfs
));

1677 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1681 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1682 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1684  
cb_d©a
.
°©us
;

1685 
	}
}

1694 
	$fchmod_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1696 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1698 i‡(
°©us
 < 0) {

1699 
	`nfs_£t_îr‹
(
nfs
, "fchmod call failed with \"%s\"",

1700 (*)
d©a
);

1701 
föished
;

1704 
föished
:

1705 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1706 
	}
}

1709 
	$nfs_fchmod
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
mode
)

1711 
sync_cb_d©a
 
cb_d©a
;

1713 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1717 i‡(
	`nfs_fchmod_async
(
nfs
, 
nfsfh
, 
mode
, 
fchmod_cb
, &
cb_d©a
) != 0) {

1718 
	`nfs_£t_îr‹
(
nfs
, "nfs_fchmod_async failed. %s",

1719 
	`nfs_gë_îr‹
(
nfs
));

1720 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1724 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1725 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1727  
cb_d©a
.
°©us
;

1728 
	}
}

1737 
	$chown_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1739 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1741 i‡(
°©us
 < 0) {

1742 
	`nfs_£t_îr‹
(
nfs
, "chown call failed with \"%s\"",

1743 (*)
d©a
);

1744 
föished
;

1747 
föished
:

1748 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1749 
	}
}

1752 
	$nfs_chown
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
, 
gid
)

1754 
sync_cb_d©a
 
cb_d©a
;

1756 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1760 i‡(
	`nfs_chown_async
(
nfs
, 
∑th
, 
uid
, 
gid
, 
chown_cb
, &
cb_d©a
) != 0) {

1761 
	`nfs_£t_îr‹
(
nfs
, "nfs_chown_async failed. %s",

1762 
	`nfs_gë_îr‹
(
nfs
));

1763 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1767 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1768 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1770  
cb_d©a
.
°©us
;

1771 
	}
}

1777 
	$nfs_lchown
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
, 
gid
)

1779 
sync_cb_d©a
 
cb_d©a
;

1781 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1785 i‡(
	`nfs_lchown_async
(
nfs
, 
∑th
, 
uid
, 
gid
, 
chown_cb
, &
cb_d©a
) != 0) {

1786 
	`nfs_£t_îr‹
(
nfs
, "nfs_lchown_async failed. %s",

1787 
	`nfs_gë_îr‹
(
nfs
));

1788 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1792 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1793 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1795  
cb_d©a
.
°©us
;

1796 
	}
}

1802 
	$fchown_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1804 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1806 i‡(
°©us
 < 0) {

1807 
	`nfs_£t_îr‹
(
nfs
, "fchown call failed with \"%s\"",

1808 (*)
d©a
);

1809 
föished
;

1812 
föished
:

1813 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1814 
	}
}

1817 
	$nfs_fchown
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uid
, 
gid
)

1819 
sync_cb_d©a
 
cb_d©a
;

1821 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1825 i‡(
	`nfs_fchown_async
(
nfs
, 
nfsfh
, 
uid
, 
gid
, 
fchown_cb
, &
cb_d©a
) != 0) {

1826 
	`nfs_£t_îr‹
(
nfs
, "nfs_fchown_async failed. %s",

1827 
	`nfs_gë_îr‹
(
nfs
));

1828 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1832 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1833 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1835  
cb_d©a
.
°©us
;

1836 
	}
}

1844 
	$utimes_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1846 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1848 i‡(
°©us
 < 0) {

1849 
	`nfs_£t_îr‹
(
nfs
, "utimes call failed with \"%s\"",

1850 (*)
d©a
);

1851 
föished
;

1854 
föished
:

1855 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1856 
	}
}

1859 
	$nfs_utimes
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
timevÆ
 *
times
)

1861 
sync_cb_d©a
 
cb_d©a
;

1863 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1867 i‡(
	`nfs_utimes_async
(
nfs
, 
∑th
, 
times
, 
utimes_cb
, &
cb_d©a
) != 0) {

1868 
	`nfs_£t_îr‹
(
nfs
, "nfs_utimes_async failed. %s",

1869 
	`nfs_gë_îr‹
(
nfs
));

1870 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1874 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1875 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1877  
cb_d©a
.
°©us
;

1878 
	}
}

1881 
	$nfs_lutimes
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
timevÆ
 *
times
)

1883 
sync_cb_d©a
 
cb_d©a
;

1885 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1889 i‡(
	`nfs_lutimes_async
(
nfs
, 
∑th
, 
times
, 
utimes_cb
, &
cb_d©a
) != 0) {

1890 
	`nfs_£t_îr‹
(
nfs
, "nfs_lutimes_async failed. %s",

1891 
	`nfs_gë_îr‹
(
nfs
));

1892 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1896 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1897 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1899  
cb_d©a
.
°©us
;

1900 
	}
}

1908 
	$utime_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1910 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1912 i‡(
°©us
 < 0) {

1913 
	`nfs_£t_îr‹
(
nfs
, "utime call failed with \"%s\"",

1914 (*)
d©a
);

1915 
föished
;

1918 
föished
:

1919 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1920 
	}
}

1923 
	$nfs_utime
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
utimbuf
 *
times
)

1925 
sync_cb_d©a
 
cb_d©a
;

1927 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1931 i‡(
	`nfs_utime_async
(
nfs
, 
∑th
, 
times
, 
utime_cb
, &
cb_d©a
) != 0) {

1932 
	`nfs_£t_îr‹
(
nfs
, "nfs_utimes_async failed");

1933 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1937 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1938 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1940  
cb_d©a
.
°©us
;

1941 
	}
}

1948 
	$ac˚ss_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1950 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1952 i‡(
°©us
 < 0) {

1953 
	`nfs_£t_îr‹
(
nfs
, "access call failed with \"%s\"",

1954 (*)
d©a
);

1955 
föished
;

1958 
föished
:

1959 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

1960 
	}
}

1963 
	$nfs_ac˚ss
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
)

1965 
sync_cb_d©a
 
cb_d©a
;

1967 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

1971 i‡(
	`nfs_ac˚ss_async
(
nfs
, 
∑th
, 
mode
, 
ac˚ss_cb
, &
cb_d©a
) != 0) {

1972 
	`nfs_£t_îr‹
(
nfs
, "nfs_access_async failed. %s",

1973 
	`nfs_gë_îr‹
(
nfs
));

1974 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1978 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

1979 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

1981  
cb_d©a
.
°©us
;

1982 
	}
}

1990 
	$ac˚ss2_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

1992 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

1994 i‡(
°©us
 < 0) {

1995 
	`nfs_£t_îr‹
(
nfs
, "access2 call failed with \"%s\"",

1996 (*)
d©a
);

1997 
föished
;

2000 
föished
:

2001 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2002 
	}
}

2005 
	$nfs_ac˚ss2
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

2007 
sync_cb_d©a
 
cb_d©a
;

2009 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

2013 i‡(
	`nfs_ac˚ss2_async
(
nfs
, 
∑th
, 
ac˚ss2_cb
, &
cb_d©a
) != 0) {

2014 
	`nfs_£t_îr‹
(
nfs
, "nfs_access2_async failed. %s",

2015 
	`nfs_gë_îr‹
(
nfs
));

2016 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2020 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

2021 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2023  
cb_d©a
.
°©us
;

2024 
	}
}

2032 
	$symlök_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

2034 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

2036 i‡(
°©us
 < 0) {

2037 
	`nfs_£t_îr‹
(
nfs
, "symlink call failed with \"%s\"",

2038 (*)
d©a
);

2039 
föished
;

2042 
föished
:

2043 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2044 
	}
}

2047 
	$nfs_symlök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
èrgë
, c⁄° *
lök«me
)

2049 
sync_cb_d©a
 
cb_d©a
;

2051 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

2055 i‡(
	`nfs_symlök_async
(
nfs
, 
èrgë
, 
lök«me
, 
symlök_cb
,

2056 &
cb_d©a
) != 0) {

2057 
	`nfs_£t_îr‹
(
nfs
, "nfs_symlink_async failed: %s",

2058 
	`nfs_gë_îr‹
(
nfs
));

2059 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2063 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

2064 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2066  
cb_d©a
.
°©us
;

2067 
	}
}

2074 
	$ª«me_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

2076 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

2078 i‡(
°©us
 < 0) {

2079 
	`nfs_£t_îr‹
(
nfs
, "rename call failed with \"%s\"",

2080 (*)
d©a
);

2081 
föished
;

2084 
föished
:

2085 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2086 
	}
}

2089 
	$nfs_ª«me
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
)

2091 
sync_cb_d©a
 
cb_d©a
;

2093 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

2097 i‡(
	`nfs_ª«me_async
(
nfs
, 
ﬁd∑th
, 
√w∑th
, 
ª«me_cb
, &
cb_d©a
) != 0) {

2098 
	`nfs_£t_îr‹
(
nfs
, "nfs_rename_async failed: %s",

2099 
	`nfs_gë_îr‹
(
nfs
));

2100 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2104 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

2105 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2107  
cb_d©a
.
°©us
;

2108 
	}
}

2116 
	$lök_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

2118 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

2120 i‡(
°©us
 < 0) {

2121 
	`nfs_£t_îr‹
(
nfs
, "link call failed with \"%s\"",

2122 (*)
d©a
);

2123 
föished
;

2126 
föished
:

2127 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2128 
	}
}

2131 
	$nfs_lök
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
)

2133 
sync_cb_d©a
 
cb_d©a
;

2135 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

2139 i‡(
	`nfs_lök_async
(
nfs
, 
ﬁd∑th
, 
√w∑th
, 
lök_cb
, &
cb_d©a
) != 0) {

2140 
	`nfs_£t_îr‹
(
nfs
, "nfs_link_async failed: %s",

2141 
	`nfs_gë_îr‹
(
nfs
));

2142 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2146 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

2147 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2149  
cb_d©a
.
°©us
;

2150 
	}
}

2156 
	$nfs3_a˛_‰ì
(
Áâr3_a˛
 *
nfs3a˛
)

2158 i‡(
nfs3a˛
 =
NULL
) {

2161 i‡(
nfs3a˛
->
a˚
) {

2162 
	`‰ì
(
nfs3a˛
->
a˚
);

2164 i‡(
nfs3a˛
->
deÁu…_a˚
) {

2165 
	`‰ì
(
nfs3a˛
->
deÁu…_a˚
);

2167 
	}
}

2170 
	$nfs3_gëa˛_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

2172 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

2173 
Áâr3_a˛
 *
§c
 = 
d©a
;

2174 
Áâr3_a˛
 *
d°
 = 
cb_d©a
->
ªtu∫_d©a
;

2176 i‡(
°©us
 < 0) {

2177 
	`nfs_£t_îr‹
(
nfs
, "getacl call failed with \"%s\"",

2178 (*)
d©a
);

2179 
föished
;

2181 
	`mem˝y
(
d°
, 
§c
, (
Áâr3_a˛
));

2182 
§c
->
a˚
 = 
NULL
;

2183 
§c
->
deÁu…_a˚
 = 
NULL
;

2185 
föished
:

2186 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2187 
	}
}

2190 
	$nfs3_gëa˛
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

2191 
Áâr3_a˛
 *
a˛
)

2193 
sync_cb_d©a
 
cb_d©a
;

2195 
cb_d©a
.
ªtu∫_d©a
 = 
a˛
;

2196 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

2200 i‡(
	`nfs3_gëa˛_async
(
nfs
, 
nfsfh
, 
nfs3_gëa˛_cb
, &
cb_d©a
) != 0) {

2201 
	`nfs_£t_îr‹
(
nfs
, "nfs_getacl_async failed. %s",

2202 
	`nfs_gë_îr‹
(
nfs
));

2203 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2207 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

2208 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2210  
cb_d©a
.
°©us
;

2211 
	}
}

2217 
	$nfs4_a˛_‰ì
(
Áâr4_a˛
 *
a˛
)

2219 
i
;

2221 
i
 = 0; i < 
a˛
->
Áâr4_a˛_Àn
; i++) {

2222 
	`‰ì
(
a˛
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_vÆ
);

2224 
	`‰ì
(
a˛
->
Áâr4_a˛_vÆ
);

2225 
	}
}

2228 
	$nfs4_gëa˛_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
)

2230 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

2231 
Áâr4_a˛
 *
§c
 = 
d©a
;

2232 
Áâr4_a˛
 *
d°
 = 
cb_d©a
->
ªtu∫_d©a
;

2233 
i
;

2235 i‡(
°©us
 < 0) {

2236 
	`nfs_£t_îr‹
(
nfs
, "getacl call failed with \"%s\"",

2237 (*)
d©a
);

2238 
föished
;

2240 
d°
->
Áâr4_a˛_Àn
 = 
§c
->fattr4_acl_len;

2241 
d°
->
Áâr4_a˛_vÆ
 = 
	`ˇŒoc
(d°->
Áâr4_a˛_Àn
, (
nfß˚4
));

2242 i‡(
d°
->
Áâr4_a˛_vÆ
 =
NULL
) {

2243 
cb_d©a
->
°©us
 = -
ENOMEM
;

2244 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocate fattr4_acl_val");

2245 
föished
;

2247 
i
 = 0; i < 
d°
->
Áâr4_a˛_Àn
; i++) {

2248 
d°
->
Áâr4_a˛_vÆ
[
i
].
ty≥
 = 
§c
->fattr4_acl_val[i].type;

2249 
d°
->
Áâr4_a˛_vÆ
[
i
].
Êag
 = 
§c
->fattr4_acl_val[i].flag;

2250 
d°
->
Áâr4_a˛_vÆ
[
i
].
ac˚ss_mask
 = 
§c
->fattr4_acl_val[i].access_mask;

2251 
d°
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_Àn
 = 
§c
->fattr4_acl_val[i].who.utf8string_len;

2252 
d°
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_vÆ
 = 
	`ˇŒoc
(d°->Áâr4_a˛_vÆ[i].who.
utf8°rög_Àn
 + 1, 1);

2253 i‡(
d°
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_vÆ
 =
NULL
) {

2254 
cb_d©a
->
°©us
 = -
ENOMEM
;

2255 
	`nfs4_a˛_‰ì
(
d°
);

2256 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocateáclÇame");

2257 
föished
;

2259 
	`mem˝y
(
d°
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_vÆ
,

2260 
§c
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_vÆ
,

2261 
d°
->
Áâr4_a˛_vÆ
[
i
].
who
.
utf8°rög_Àn
);

2264 
föished
:

2265 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2266 
	}
}

2269 
	$nfs4_gëa˛
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

2270 
Áâr4_a˛
 *
a˛
)

2272 
sync_cb_d©a
 
cb_d©a
;

2274 
cb_d©a
.
ªtu∫_d©a
 = 
a˛
;

2275 i‡(
	`nfs_öô_cb_d©a
(&
nfs
, &
cb_d©a
)) {

2279 i‡(
	`nfs4_gëa˛_async
(
nfs
, 
nfsfh
, 
nfs4_gëa˛_cb
, &
cb_d©a
) != 0) {

2280 
	`nfs_£t_îr‹
(
nfs
, "nfs_getacl_async failed. %s",

2281 
	`nfs_gë_îr‹
(
nfs
));

2282 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2286 
	`waô_f‹_nfs_ª∂y
(
nfs
, &
cb_d©a
);

2287 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2289  
cb_d©a
.
°©us
;

2290 
	}
}

2293 
	$mou¡_gëexp‹ts_cb
(
Ωc_c⁄ãxt
 *
mou¡_c⁄ãxt
, 
°©us
, *
d©a
,

2294 *
¥iv©e_d©a
)

2296 
sync_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

2297 
exp‹ts
 
exp‹t
;

2299 
	`as£π
(
mou¡_c⁄ãxt
->
magic
 =
RPC_CONTEXT_MAGIC
);

2301 
cb_d©a
->
ªtu∫_d©a
 = 
NULL
;

2303 i‡(
°©us
 != 0) {

2304 
	`Ωc_£t_îr‹
(
mou¡_c⁄ãxt
, "mount/export call failed with "

2305 "\"%s\"", (*)
d©a
);

2306 
föished
;

2309 
exp‹t
 = *(
exp‹ts
 *)
d©a
;

2310 
exp‹t
 !
NULL
) {

2311 
exp‹ts
 
√w_exp‹t
;

2313 
√w_exp‹t
 = 
	`ˇŒoc
(1, (*new_export));

2314 
√w_exp‹t
->
ex_dú
 = 
	`°rdup
(
exp‹t
->ex_dir);

2315 
√w_exp‹t
->
ex_√xt
 = 
cb_d©a
->
ªtu∫_d©a
;

2317 
cb_d©a
->
ªtu∫_d©a
 = 
√w_exp‹t
;

2319 
exp‹t
 =Éxp‹t->
ex_√xt
;

2322 
föished
:

2323 
	`cb_d©a_is_föished
(
cb_d©a
, 
°©us
);

2324 
	}
}

2326 
exp‹äode
 *

2327 
	$mou¡_gëexp‹ts_timeout
(c⁄° *
£rvî
, 
timeout
)

2329 
sync_cb_d©a
 
cb_d©a
;

2330 
Ωc_c⁄ãxt
 *
Ωc
;

2333 
cb_d©a
.
ªtu∫_d©a
 = 
NULL
;

2334 i‡(
	`nfs_öô_cb_d©a
(
NULL
, &
cb_d©a
)) {

2335  
NULL
;

2338 
Ωc
 = 
	`Ωc_öô_c⁄ãxt
();

2339 
	`Ωc_£t_timeout
(
Ωc
, 
timeout
);

2340 i‡(
	`mou¡_gëexp‹ts_async
(
Ωc
, 
£rvî
, 
mou¡_gëexp‹ts_cb
,

2341 &
cb_d©a
) != 0) {

2342 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2343 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2344  
NULL
;

2347 
	`waô_f‹_ª∂y
(
Ωc
, &
cb_d©a
);

2348 
	`nfs_de°roy_cb_£m
(&
cb_d©a
);

2349 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2351  
cb_d©a
.
ªtu∫_d©a
;

2352 
	}
}

2354 
exp‹äode
 *

2355 
	$mou¡_gëexp‹ts
(c⁄° *
£rvî
)

2357  
	`mou¡_gëexp‹ts_timeout
(
£rvî
, -1);

2358 
	}
}

2361 
	$mou¡_‰ì_exp‹t_li°
(
exp‹äode
 *
exp
)

2363 
exp‹äode
 *
tmp
;

2365 (
tmp
 = 
exp
)) {

2366 
exp
 =Éxp->
ex_√xt
;

2367 
	`‰ì
(
tmp
->
ex_dú
);

2368 
	`‰ì
(
tmp
);

2370 
	}
}

2372 #i‡!
deföed
(
NO_SRV_AUTOSCAN
)

2375 
	$‰ì_nfs_§vr_li°
(
nfs_£rvî_li°
 *
§v
)

2377 
§v
 !
NULL
) {

2378 
nfs_£rvî_li°
 *
√xt
 = 
§v
->next;

2380 
	`‰ì
(
§v
->
addr
);

2381 
	`‰ì
(
§v
);

2382 
§v
 = 
√xt
;

2384 
	}
}

2386 
	snfs_li°_d©a
 {

2387 
	m°©us
;

2388 
nfs_£rvî_li°
 *
	m§vrs
;

2392 
	$ˇŒô_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
 
_U_
,

2393 *
¥iv©e_d©a
)

2395 
nfs_li°_d©a
 *
§v_d©a
 = 
¥iv©e_d©a
;

2396 
sockaddr
 *
sö
;

2397 
ho°dd
[16];

2398 
nfs_£rvî_li°
 *
§vr
;

2400 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2402 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

2405 i‡(
°©us
 != 0) {

2406 
§v_d©a
->
°©us
 = -1;

2410 
sö
 = 
	`Ωc_gë_ªcv_sockaddr
(
Ωc
);

2411 i‡(
sö
 =
NULL
) {

2412 
	`Ωc_£t_îr‹
(
Ωc
, "failedÅo get sockaddr in CALLIT callback");

2413 
§v_d©a
->
°©us
 = -1;

2417 i‡(
	`gë«meöfo
(
sö
, (
sockaddr_ö
), &
ho°dd
[0],

2418 (
ho°dd
), 
NULL
, 0, 
NI_NUMERICHOST
) < 0) {

2419 
	`Ωc_£t_îr‹
(
Ωc
, "getnameinfo failed in CALLIT callback");

2420 
§v_d©a
->
°©us
 = -1;

2425 
§vr
 = 
§v_d©a
->
§vrs
; srvr; srv∏§vr->
√xt
) {

2426 i‡(!
	`°rcmp
(
ho°dd
, 
§vr
->
addr
)) {

2431 
§vr
 = 
	`mÆloc
((
nfs_£rvî_li°
));

2432 i‡(
§vr
 =
NULL
) {

2433 
	`Ωc_£t_îr‹
(
Ωc
, "Malloc failed whenállocating server "

2435 
§v_d©a
->
°©us
 = -1;

2439 
§vr
->
addr
 = 
	`°rdup
(
ho°dd
);

2440 i‡(
§vr
->
addr
 =
NULL
) {

2441 
	`Ωc_£t_îr‹
(
Ωc
, "Strdup failed whenállocating server "

2443 
	`‰ì
(
§vr
);

2444 
§v_d©a
->
°©us
 = -1;

2448 
§vr
->
√xt
 = 
§v_d©a
->
§vrs
;

2449 
§v_d©a
->
§vrs
 = 
§vr
;

2450 
	}
}

2452 #ifde‡
WIN32


2455 
	$£nd_nfsd_¥obes
(
Ωc_c⁄ãxt
 *
Ωc
, 
INTERFACE_INFO
 *
I¡îÁ˚Li°
,

2456 
numIfs
, 
nfs_li°_d©a
 *
d©a
)

2458 
i
=0;

2460 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2462 
i
 = 0; i < 
numIfs
; i++)

2464 
SOCKADDR
 *
pAddªss
;

2465 
bcdd
[16];

2466 
nFœgs
 = 0;

2468 
pAddªss
 = (
SOCKADDR
 *Ë& (
I¡îÁ˚Li°
[
i
].
iiBrﬂdˇ°Addªss
);

2470 if(
pAddªss
->
ß_Ámûy
 !
AF_INET
)

2473 
nFœgs
 = 
I¡îÁ˚Li°
[
i
].
iiFœgs
;

2475 i‡(!(
nFœgs
 & 
IFF_UP
))

2480 i‡(
nFœgs
 & 
IFF_LOOPBACK
)

2485 i‡(!(
nFœgs
 & 
IFF_BROADCAST
))

2490 i‡(
	`gë«meöfo
(
pAddªss
, (
sockaddr_ö
), &
bcdd
[0], (bcdd), 
NULL
, 0, 
NI_NUMERICHOST
) < 0)

2495 i‡(
	`Ωc_£t_udp_de°ö©i⁄
(
Ωc
, 
bcdd
, 111, 1) < 0)

2500 i‡(
	`Ωc_pm≠2_ˇŒô_èsk
(
Ωc
, 
MOUNT_PROGRAM
, 2, 0, 
NULL
, 0, 
ˇŒô_cb
, 
d©a
) == NULL)

2506 
	}
}

2508 
nfs_£rvî_li°
 *

2509 
	$nfs_föd_loˇl_£rvîs
()

2511 
Ωc_c⁄ãxt
 *
Ωc
;

2512 
nfs_li°_d©a
 
d©a
 = {0, 
NULL
};

2513 
timevÆ
 
tv_°¨t
, 
tv_cuºít
;

2514 
lo›
;

2515 
pﬁlfd
 
pfd
;

2516 
INTERFACE_INFO
 
I¡îÁ˚Li°
[20];

2517 
nByãsRëu∫ed
;

2518 
nNumI¡îÁ˚s
 = 0;

2520 
Ωc
 = 
	`Ωc_öô_udp_c⁄ãxt
();

2521 i‡(
Ωc
 =
NULL
)

2523  
NULL
;

2526 i‡(
	`Ωc_böd_udp
(
Ωc
, "0.0.0.0", 0) < 0)

2528 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2529  
NULL
;

2532 i‡(
	`WSAIo˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIO_GET_INTERFACE_LIST
, 0, 0, &
I¡îÁ˚Li°
, (I¡îÁ˚Li°), &
nByãsRëu∫ed
, 0, 0Ë=
SOCKET_ERROR
)

2534  
NULL
;

2537 
nNumI¡îÁ˚s
 = 
nByãsRëu∫ed
 / (
INTERFACE_INFO
);

2539 
lo›
=0;Üoop<3;Üoop++)

2541 i‡(
	`£nd_nfsd_¥obes
(
Ωc
, 
I¡îÁ˚Li°
, 
nNumI¡îÁ˚s
, &
d©a
) != 0)

2543 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2544  
NULL
;

2547 
	`wö32_gëtimeofday
(&
tv_°¨t
, 
NULL
);

2550 
m±
;

2552 
pfd
.
fd
 = 
	`Ωc_gë_fd
(
Ωc
);

2553 
pfd
.
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

2555 
	`wö32_gëtimeofday
(&
tv_cuºít
, 
NULL
);

2556 
m±
 = 1000

2557 - (
tv_cuºít
.
tv_£c
 *1000 +Åv_cuºít.
tv_u£c
 / 1000)

2558 + (
tv_°¨t
.
tv_£c
 *1000 +Åv_°¨t.
tv_u£c
 / 1000);

2560 i‡(
	`pﬁl
(&
pfd
, 1, 
m±
) < 0)

2562 
	`‰ì_nfs_§vr_li°
(
d©a
.
§vrs
);

2563 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2564  
NULL
;

2566 i‡(
pfd
.
ªvíts
 == 0)

2571 i‡(
	`Ωc_£rvi˚
(
Ωc
, 
pfd
.
ªvíts
) < 0)

2578 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2580 i‡(
d©a
.
°©us
 != 0)

2582 
	`‰ì_nfs_§vr_li°
(
d©a
.
§vrs
);

2583  
NULL
;

2585  
d©a
.
§vrs
;

2586 
	}
}

2590 
	$£nd_nfsd_¥obes
(
Ωc_c⁄ãxt
 *
Ωc
, 
ifc⁄f
 *
ifc
,

2591 
nfs_li°_d©a
 *
d©a
)

2593 *
±r
;

2595 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2597 
±r
 =(*)(
ifc
->
ifc_buf
);

2598 
±r
 < (*)(
ifc
->
ifc_buf
Ë+ ifc->
ifc_Àn
;

2600 
i‰eq
 
i‰
;

2601 
bcdd
[16];

2603 
	`mem˝y
(&
i‰
, 
±r
, (
i‰eq
));

2604 #ifde‡
HAVE_SOCKADDR_LEN


2605 i‡(
i‰
.
i‰_addr
.
ß_Àn
 > (
sockaddr
)) {

2606 
±r
 +(
i‰
.
i‰_«me
Ë+ i‰.
i‰_addr
.
ß_Àn
;

2608 
±r
 +(
i‰
.
i‰_«me
Ë+ (
sockaddr
);

2611 
±r
 +(
i‰eq
);

2614 i‡(
i‰
.
i‰_addr
.
ß_Ámûy
 !
AF_INET
) {

2617 #i‚de‡
PS3_PPU


2618 i‡(
	`io˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIOCGIFFLAGS
, &
i‰
) < 0) {

2622 i‡(!(
i‰
.
i‰_Êags
 & 
IFF_UP
)) {

2625 i‡(
i‰
.
i‰_Êags
 & 
IFF_LOOPBACK
) {

2628 i‡(!(
i‰
.
i‰_Êags
 & 
IFF_BROADCAST
)) {

2631 #i‚de‡
PS3_PPU


2632 i‡(
	`io˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIOCGIFBRDADDR
, &
i‰
) < 0) {

2636 i‡(
	`gë«meöfo
(&
i‰
.
i‰_brﬂdaddr
, (
sockaddr_ö
),

2637 &
bcdd
[0], (bcdd), 
NULL
, 0,

2638 
NI_NUMERICHOST
) < 0) {

2641 i‡(
	`Ωc_£t_udp_de°ö©i⁄
(
Ωc
, 
bcdd
, 111, 1) < 0) {

2645 i‡(
	`Ωc_pm≠2_ˇŒô_èsk
(
Ωc
, 
MOUNT_PROGRAM
, 2, 0, 
NULL
, 0,

2646 
ˇŒô_cb
, 
d©a
Ë=
NULL
) {

2652 
	}
}

2654 
nfs_£rvî_li°
 *

2655 
	$nfs_föd_loˇl_£rvîs
()

2657 
Ωc_c⁄ãxt
 *
Ωc
;

2658 
nfs_li°_d©a
 
d©a
 = {0, 
NULL
};

2659 
timevÆ
 
tv_°¨t
, 
tv_cuºít
;

2660 
ifc⁄f
 
ifc
;

2661 
size
, 
lo›
;

2662 
pﬁlfd
 
pfd
;

2664 
Ωc
 = 
	`Ωc_öô_udp_c⁄ãxt
();

2665 i‡(
Ωc
 =
NULL
) {

2666  
NULL
;

2669 i‡(
	`Ωc_böd_udp
(
Ωc
, "0.0.0.0", 0) < 0) {

2670 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2671  
NULL
;

2676 
size
 = (
i‰eq
);

2677 
ifc
.
ifc_buf
 = 
NULL
;

2678 
ifc
.
ifc_Àn
 = 
size
;

2680 
ifc
.
ifc_Àn
 > (
size
 - (
i‰eq
))) {

2681 
size
 *= 2;

2683 
	`‰ì
(
ifc
.
ifc_buf
);

2684 
ifc
.
ifc_Àn
 = 
size
;

2685 
ifc
.
ifc_buf
 = 
	`ˇŒoc
(1, 
size
);

2686 #i‚de‡
PS3_PPU


2687 i‡(
	`io˘l
(
	`Ωc_gë_fd
(
Ωc
), 
SIOCGIFCONF
, (
ˇddr_t
)&
ifc
) < 0) {

2688 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2689 
	`‰ì
(
ifc
.
ifc_buf
);

2690  
NULL
;

2695 
lo›
=0;Üoop<3;Üoop++) {

2696 i‡(
	`£nd_nfsd_¥obes
(
Ωc
, &
ifc
, &
d©a
) != 0) {

2697 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2698 
	`‰ì
(
ifc
.
ifc_buf
);

2699  
NULL
;

2702 
	`gëtimeofday
(&
tv_°¨t
, 
NULL
);

2704 
m±
;

2706 
pfd
.
fd
 = 
	`Ωc_gë_fd
(
Ωc
);

2707 
pfd
.
evíts
 = 
	`Ωc_which_evíts
(
Ωc
);

2709 
	`gëtimeofday
(&
tv_cuºít
, 
NULL
);

2710 
m±
 = 1000

2711 - (
tv_cuºít
.
tv_£c
 *1000 +Åv_cuºít.
tv_u£c
 / 1000)

2712 + (
tv_°¨t
.
tv_£c
 *1000 +Åv_°¨t.
tv_u£c
 / 1000);

2714 i‡(
	`pﬁl
(&
pfd
, 1, 
m±
) < 0) {

2715 
	`‰ì_nfs_§vr_li°
(
d©a
.
§vrs
);

2716 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2717  
NULL
;

2719 i‡(
pfd
.
ªvíts
 == 0) {

2723 i‡(
	`Ωc_£rvi˚
(
Ωc
, 
pfd
.
ªvíts
) < 0) {

2729 
	`‰ì
(
ifc
.
ifc_buf
);

2730 
	`Ωc_de°roy_c⁄ãxt
(
Ωc
);

2732 i‡(
d©a
.
°©us
 != 0) {

2733 
	`‰ì_nfs_§vr_li°
(
d©a
.
§vrs
);

2734  
NULL
;

2736  
d©a
.
§vrs
;

2737 
	}
}

	@lib/libnfs-zdr.c

30 #ifde‡
HAVE_CONFIG_H


31 
	~"c⁄fig.h
"

34 #ifde‡
WIN32


35 
	~<wö32/wö32_com∑t.h
>

38 #ifde‡
AROS


39 
	~"¨os_com∑t.h
"

42 #ifde‡
PS2_EE


43 
	~"ps2_com∑t.h
"

46 #ifde‡
PS3_PPU


47 
	~"ps3_com∑t.h
"

50 #ifde‡
HAVE_ARPA_INET_H


51 
	~<¨∑/öë.h
>

54 #ifde‡
HAVE_UNISTD_H


55 
	~<uni°d.h
>

58 
	~<°ddef.h
>

59 
	~<°dlib.h
>

60 
	~<°rög.h
>

61 
	~<time.h
>

62 
	~"libnfs-zdr.h
"

63 
	~"libnfs.h
"

64 
	~"libnfs-øw.h
"

65 
	~"libnfs-¥iv©e.h
"

66 
	~"libnfs-øw-nfs4.h
"

68 #ifde‡
HAVE_LIBKRB5


69 
	~"krb5-wøµî.h
"

72 
	szdr_mem
 {

73 
zdr_mem
 *
	m√xt
;

74 
uöt32_t
 
	msize
;

75 
	mbuf
[1];

78 
›aque_vîf
 
	g_nuŒ_auth
;

80 
boﬁ_t
 
	$libnfs_zdr_£ços
(
ZDR
 *
zdrs
, 
uöt32_t
 
pos
)

82 
zdrs
->
pos
 =Öos;

84  
TRUE
;

85 
	}
}

87 
uöt32_t
 
	$libnfs_zdr_gëpos
(
ZDR
 *
zdrs
)

89  
zdrs
->
pos
;

90 
	}
}

92 *
	$libnfs_zdr_gë±r
(
ZDR
 *
zdrs
)

94  
zdrs
->
buf
;

95 
	}
}

97 
	$libnfs_zdrmem_¸óã
(
ZDR
 *
zdrs
, c⁄° 
ˇddr_t
 
addr
, 
uöt32_t
 
size
, 
zdr_›
 
x›
)

99 
zdrs
->
x_›
 = 
x›
;

100 
zdrs
->
buf
 = 
addr
;

101 
zdrs
->
size
 = size;

102 
zdrs
->
pos
 = 0;

103 
zdrs
->
mem
 = 
NULL
;

104 
	}
}

106 *
	$zdr_mÆloc
(
ZDR
 *
zdrs
, 
uöt32_t
 
size
)

108 
zdr_mem
 *
mem
;

109 
mem_size
;

111 
mem_size
 = 
	`off£tof
(
zdr_mem
, 
buf
Ë+ 
size
;

112 
mem
 = 
	`mÆloc
(
mem_size
);

114 
mem
->
√xt
 = 
zdrs
->mem;

115 
mem
->
size
 = size;

117 
zdrs
->
mem
 = mem;

119  &
mem
->
buf
[0];

120 
	}
}

122 
	$libnfs_zdr_de°roy
(
ZDR
 *
zdrs
)

124 
zdrs
->
mem
 !
NULL
) {

125 
zdr_mem
 *
mem
 = 
zdrs
->mem->
√xt
;

126 
	`‰ì
(
zdrs
->
mem
);

127 
zdrs
->
mem
 = mem;

129 
	}
}

131 
boﬁ_t
 
	$libnfs_zdr_u_öt
(
ZDR
 *
zdrs
, 
uöt32_t
 *
u
)

133 i‡(
zdrs
->
pos
 + 4 > zdrs->
size
) {

134  
FALSE
;

137 
zdrs
->
x_›
) {

138 
ZDR_ENCODE
:

139 *(
uöt32_t
 *)(*)&
zdrs
->
buf
[zdrs->
pos
] = 
	`ht⁄l
(*
u
);

140 
zdrs
->
pos
 += 4;

141  
TRUE
;

142 
ZDR_DECODE
:

143 *
u
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)&
zdrs
->
buf
[zdrs->
pos
]);

144 
zdrs
->
pos
 += 4;

145  
TRUE
;

148  
FALSE
;

149 
	}
}

151 
boﬁ_t
 
	$libnfs_zdr_öt
(
ZDR
 *
zdrs
, 
öt32_t
 *
i
)

153  
	`libnfs_zdr_u_öt
(
zdrs
, (
uöt32_t
 *)
i
);

154 
	}
}

156 
boﬁ_t
 
	$libnfs_zdr_uöt64_t
(
ZDR
 *
zdrs
, 
uöt64_t
 *
u
)

158 i‡(
zdrs
->
pos
 + 8 > zdrs->
size
) {

159  
FALSE
;

162 
zdrs
->
x_›
) {

163 
ZDR_ENCODE
:

164 *(
uöt32_t
 *)(*)&
zdrs
->
buf
[zdrs->
pos
] = 
	`ht⁄l
((*
u
 >> 32));

165 
zdrs
->
pos
 += 4;

166 *(
uöt32_t
 *)(*)&
zdrs
->
buf
[zdrs->
pos
] = 
	`ht⁄l
((*
u
 & 0xffffffff));

167 
zdrs
->
pos
 += 4;

168  
TRUE
;

169 
ZDR_DECODE
:

170 *
u
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)&
zdrs
->
buf
[zdrs->
pos
]);

171 
zdrs
->
pos
 += 4;

172 *
u
 <<= 32;

173 *
u
 |(
uöt32_t
)
	`¡ohl
(*(uöt32_à*)(*)&
zdrs
->
buf
[zdrs->
pos
]);

174 
zdrs
->
pos
 += 4;

175  
TRUE
;

178  
FALSE
;

179 
	}
}

181 
boﬁ_t
 
	$libnfs_zdr_öt64_t
(
ZDR
 *
zdrs
, 
öt64_t
 *
i
)

183  
	`libnfs_zdr_uöt64_t
(
zdrs
, (
uöt64_t
 *)
i
);

184 
	}
}

186 
boﬁ_t
 
	$libnfs_zdr_byãs
(
ZDR
 *
zdrs
, **
buÂ
, 
uöt32_t
 *
size
, uöt32_à
maxsize
)

188 
uöt32_t
 
zîo
 = 0;

189 
∑d
;

191 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, 
size
)) {

192  
FALSE
;

195 i‡(
zdrs
->
pos
 + ()*
size
 > zdrs->size) {

196  
FALSE
;

199 
zdrs
->
x_›
) {

200 
ZDR_ENCODE
:

201 
	`mem˝y
(&
zdrs
->
buf
[zdrs->
pos
], *
buÂ
, *
size
);

202 
zdrs
->
pos
 +*
size
;

204 
∑d
 = (4 - (
zdrs
->
pos
 & 0x03)) & 0x03;

205 i‡(
∑d
) {

207 
	`mem˝y
(&
zdrs
->
buf
[zdrs->
pos
], &
zîo
, 
∑d
);

208 
zdrs
->
pos
 +
∑d
;

210  
TRUE
;

211 
ZDR_DECODE
:

212 i‡(*
buÂ
 !
NULL
) {

213 
	`mem˝y
(*
buÂ
, &
zdrs
->
buf
[zdrs->
pos
], *
size
);

215 *
buÂ
 = &
zdrs
->
buf
[zdrs->
pos
];

217 
zdrs
->
pos
 +*
size
;

218 
zdrs
->
pos
 = (zdrs->pos + 3) & ~3;

219  
TRUE
;

222  
FALSE
;

223 
	}
}

226 
boﬁ_t
 
	$libnfs_zdr_íum
(
ZDR
 *
zdrs
, 
íum_t
 *
e
)

228 
boﬁ_t
 
ªt
;

229 
öt32_t
 
i
 = *
e
;

231 
ªt
 = 
	`libnfs_zdr_u_öt
(
zdrs
, (
uöt32_t
 *)&
i
);

232 *
e
 = 
i
;

234  
ªt
;

235 
	}
}

237 
boﬁ_t
 
	$libnfs_zdr_boﬁ
(
ZDR
 *
zdrs
, 
boﬁ_t
 *
b
)

239  
	`libnfs_zdr_u_öt
(
zdrs
, (
uöt32_t
 *)
b
);

240 
	}
}

242 
boﬁ_t
 
	$libnfs_zdr_void
(
ZDR
 *
zdrs
, *
v
)

244  
TRUE
;

245 
	}
}

247 
boﬁ_t
 
	$libnfs_zdr_poöãr
(
ZDR
 *
zdrs
, **
objp
, 
uöt32_t
 
size
, 
zdΩroc_t
 
¥oc
)

249 
boﬁ_t
 
m‹e_d©a
;

251 
m‹e_d©a
 = (*
objp
 !
NULL
);

253 i‡(!
	`libnfs_zdr_boﬁ
(
zdrs
, &
m‹e_d©a
)) {

254  
FALSE
;

256 i‡(
m‹e_d©a
 == 0) {

257 *
objp
 = 
NULL
;

258  
TRUE
;

261 i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

262 *
objp
 = 
	`zdr_mÆloc
(
zdrs
, 
size
);

263 i‡(*
objp
 =
NULL
) {

264  
FALSE
;

266 
	`mem£t
(*
objp
, 0, 
size
);

268  
	`¥oc
(
zdrs
, *
objp
);

269 
	}
}

271 
boﬁ_t
 
	$libnfs_zdr_›aque
(
ZDR
 *
zdrs
, *
objp
, 
uöt32_t
 
size
)

273 
zdrs
->
x_›
) {

274 
ZDR_ENCODE
:

275 
	`mem˝y
(&
zdrs
->
buf
[zdrs->
pos
], 
objp
, 
size
);

276 
zdrs
->
pos
 +
size
;

277 i‡(
zdrs
->
pos
 & 3) {

278 
	`mem£t
(&
zdrs
->
buf
[zdrs->
pos
], 0x00, 4 - (zdrs->pos & 3));

280 
zdrs
->
pos
 = (zdrs->pos + 3) & ~3;

281  
TRUE
;

282 
ZDR_DECODE
:

283 
	`mem˝y
(
objp
, &
zdrs
->
buf
[zdrs->
pos
], 
size
);

284 
zdrs
->
pos
 +
size
;

285 
zdrs
->
pos
 = (zdrs->pos + 3) & ~3;

286  
TRUE
;

289  
FALSE
;

290 
	}
}

292 
boﬁ_t
 
	$libnfs_zdr_°rög
(
ZDR
 *
zdrs
, **
°Ω
, 
uöt32_t
 
maxsize
)

294 
uöt32_t
 
size
;

296 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

297 
size
 = 
	`°æí
(*
°Ω
);

300 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
size
)) {

301  
FALSE
;

304 i‡(
zdrs
->
pos
 + ()
size
 > zdrs->size) {

305  
FALSE
;

308 
zdrs
->
x_›
) {

309 
ZDR_ENCODE
:

310  
	`libnfs_zdr_›aque
(
zdrs
, *
°Ω
, 
size
);

311 
ZDR_DECODE
:

315 i‡(
zdrs
->
size
 > zdrs->
pos
 + ()sizê&& zdrs->
buf
[zdrs->pos + size] == 0) {

316 *
°Ω
 = &
zdrs
->
buf
[zdrs->
pos
];

317 (*
°Ω
)[
size
] = 0;

318 
zdrs
->
pos
 +
size
;

319 
zdrs
->
pos
 = (zdrs->pos + 3) & ~3;

320  
TRUE
;

326 *
°Ω
 = 
	`zdr_mÆloc
(
zdrs
, 
size
 + 1);

327 i‡(*
°Ω
 =
NULL
) {

328  
FALSE
;

330 (*
°Ω
)[
size
] = 0;

331  
	`libnfs_zdr_›aque
(
zdrs
, *
°Ω
, 
size
);

334  
FALSE
;

335 
	}
}

337 
boﬁ_t
 
	$libnfs_zdr_¨øy
(
ZDR
 *
zdrs
, **
¨Ω
, 
uöt32_t
 *
size
, uöt32_à
maxsize
, uöt32_à
ñsize
, 
zdΩroc_t
 
¥oc
)

339 
i
;

340 
uöt32_t
 
s
;

342 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, 
size
)) {

343  
FALSE
;

346 i‡(*
size
 > 
UINT32_MAX
/
ñsize
) {

347  
FALSE
;

349 
s
 = *
size
 * 
ñsize
;

351 i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

352 *
¨Ω
 = 
	`zdr_mÆloc
(
zdrs
, 
s
);

353 i‡(*
¨Ω
 =
NULL
) {

354  
FALSE
;

356 
	`mem£t
(*
¨Ω
, 0, 
s
);

359 
i
 = 0; i < ()*
size
; i++) {

360 i‡(!
	`¥oc
(
zdrs
, *
¨Ω
 + 
i
 * 
ñsize
)) {

361  
FALSE
;

364  
TRUE
;

365 
	}
}

367 
	$libnfs_zdr_‰ì
(
zdΩroc_t
 
¥oc
, *
objp
)

369 
	}
}

371 
boﬁ_t
 
	$libnfs_›aque_¸ed
(
ZDR
 *
zdrs
, 
›aque_¸ed
 *
¸ed
)

373 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
¸ed
->
ﬂ_Êav‹
)) {

374  
FALSE
;

377 i‡(!
	`libnfs_zdr_byãs
(
zdrs
, &
¸ed
->
ﬂ_ba£
, &¸ed->
ﬂ_Àngth
, cred->oa_length)) {

378  
FALSE
;

381  
TRUE
;

382 
	}
}

384 
boﬁ_t
 
	$libnfs_›aque_vîf
(
ZDR
 *
zdrs
, 
›aque_vîf
 *
vîf
)

386 #ifde‡
HAVE_LIBKRB5


387 
uöt32_t
 
maj
, 
mö
;

388 
gss_buf„r_desc
 
mesßge_buf„r
, 
ouçut_tokí
;

389 *
buf
;

390 
uöt32_t
 
Àn
;

392 
vîf
->
ﬂ_Êav‹
) {

393 #ifde‡
HAVE_LIBKRB5


394 
AUTH_GSS
:

395 i‡(
zdrs
->
x_›
 ==
ZDR_ENCODE
 && 
vîf
->
gss_c⁄ãxt
) {

396 
mesßge_buf„r
.
Àngth
 = 
	`zdr_gëpos
(
zdrs
);

397 
mesßge_buf„r
.
vÆue
 = 
	`zdr_gë±r
(
zdrs
);

398 
maj
 = 
	`gss_gë_mic
(&
mö
, 
vîf
->
gss_c⁄ãxt
,

399 
GSS_C_QOP_DEFAULT
,

400 &
mesßge_buf„r
,

401 &
ouçut_tokí
);

402 i‡(
maj
 !
GSS_S_COMPLETE
) {

403  
FALSE
;

405 
buf
 = 
ouçut_tokí
.
vÆue
;

406 
Àn
 = 
ouçut_tokí
.
Àngth
;

407 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
vîf
->
ﬂ_Êav‹
)) {

408 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

409  
FALSE
;

411 i‡(!
	`libnfs_zdr_byãs
(
zdrs
, &
buf
, &
Àn
,Üen)) {

412 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

413  
FALSE
;

415 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

421 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
vîf
->
ﬂ_Êav‹
)) {

422  
FALSE
;

424 i‡(!
	`libnfs_zdr_byãs
(
zdrs
, &
vîf
->
ﬂ_ba£
, &vîf->
ﬂ_Àngth
, verf->oa_length)) {

425  
FALSE
;

429  
TRUE
;

430 
	}
}

432 
boﬁ_t
 
	$libnfs_Ωc_ˇŒ_body
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
ˇŒ_body
 *
cmb
)

434 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
cmb
->
Ωcvîs
)) {

435 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_call_body failedÅoÉncode "

437  
FALSE
;

440 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
cmb
->
¥og
)) {

441 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_call_body failedÅoÉncode "

443  
FALSE
;

446 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
cmb
->
vîs
)) {

447 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_call_body failedÅoÉncode "

449  
FALSE
;

452 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
cmb
->
¥oc
)) {

453 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_call_body failedÅoÉncode "

455  
FALSE
;

458 i‡(!
	`libnfs_›aque_¸ed
(
zdrs
, &
cmb
->
¸ed
)) {

459 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_call_body failedÅoÉncode "

461  
FALSE
;

464 i‡(!
	`libnfs_›aque_vîf
(
zdrs
, &
cmb
->
vîf
)) {

465 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_call_body failedÅoÉncode "

467  
FALSE
;

470  
TRUE
;

471 
	}
}

473 
boﬁ_t
 
	$libnfs_ac˚±ed_ª∂y
(
ZDR
 *
zdrs
, 
ac˚±ed_ª∂y
 *
¨
)

475 #ifde‡
HAVE_LIBKRB5


476 
uöt32_t
 
maj
, 
mö
, 
Àn
, 
tmp
;

477 
gss_buf„r_desc
 
mesßge_buf„r
, *
ouçut_buf„r
;

480 i‡(!
	`libnfs_›aque_vîf
(
zdrs
, &
¨
->
vîf
)) {

481  
FALSE
;

484 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
¨
->
°©
)) {

485  
FALSE
;

488 
¨
->
°©
) {

489 
SUCCESS
:

490 #ifde‡
HAVE_LIBKRB5


491 i‡(
zdrs
->
x_›
 ==
ZDR_DECODE
 && 
¨
->
ª∂y_d©a
.
ªsu…s
.
krb5p
) {

492 
	`libnfs_zdr_u_öt
(
zdrs
, &
Àn
);

494 
mesßge_buf„r
.
Àngth
 = 
Àn
;

495 
mesßge_buf„r
.
vÆue
 = 
	`zdr_gë±r
(
zdrs
Ë+ 
	`zdr_gëpos
(zdrs);

496 
ouçut_buf„r
 = 
¨
->
ª∂y_d©a
.
ªsu…s
.output_buffer;

497 
maj
 = 
	`gss_unwøp
 (&
mö
, 
¨
->
vîf
.
gss_c⁄ãxt
,

498 &
mesßge_buf„r
,

499 
ouçut_buf„r
,

500 
NULL
,

501 
NULL
);

502 i‡(
maj
) {

503  
FALSE
;

505 
zdrs
->
buf
 = (*)
ouçut_buf„r
->
vÆue
 + 4;

506 
zdrs
->
pos
 = 0;

507 
zdrs
->
size
 = 
ouçut_buf„r
->
Àngth
 - 4;

509 i‡(
zdrs
->
x_›
 ==
ZDR_DECODE
 && 
¨
->
ª∂y_d©a
.
ªsu…s
.
krb5i
) {

511 
	`libnfs_zdr_u_öt
(
zdrs
, &
tmp
);

512 
	`libnfs_zdr_u_öt
(
zdrs
, &
tmp
);

515 i‡(!
¨
->
ª∂y_d©a
.
ªsu…s
.
	`¥oc
(
zdrs
,ár->ª∂y_d©a.ªsu…s.
whîe
)) {

516  
FALSE
;

518  
TRUE
;

519 
PROG_MISMATCH
:

520 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
¨
->
ª∂y_d©a
.
mism©ch_öfo
.
low
)) {

521  
FALSE
;

523 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
¨
->
ª∂y_d©a
.
mism©ch_öfo
.
high
)) {

524  
FALSE
;

526  
TRUE
;

528  
TRUE
;

531  
FALSE
;

532 
	}
}

534 
boﬁ_t
 
	$libnfs_ªje˘ed_ª∂y
(
ZDR
 *
zdrs
, 
ªje˘ed_ª∂y
 *
º
)

536 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, (
uöt32_t
 *)&
º
->
°©
)) {

537  
FALSE
;

540 
º
->
°©
) {

541 
RPC_MISMATCH
:

542 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
º
->
ªje˘_d©a
.
mism©ch_öfo
.
low
)) {

543  
FALSE
;

545 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
º
->
ªje˘_d©a
.
mism©ch_öfo
.
high
)) {

546  
FALSE
;

548  
TRUE
;

549 
AUTH_ERROR
:

550 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, (
uöt32_t
 *)&
º
->
ªje˘_d©a
.
°©
)) {

551  
FALSE
;

553  
TRUE
;

555  
TRUE
;

558  
FALSE
;

559 
	}
}

561 
boﬁ_t
 
	$libnfs_Ωc_ª∂y_body
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
ª∂y_body
 *
rmb
)

563 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
rmb
->
°©
)) {

564 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_reply_body failedÅo decode "

566  
FALSE
;

569 
rmb
->
°©
) {

570 
MSG_ACCEPTED
:

571 i‡(!
	`libnfs_ac˚±ed_ª∂y
(
zdrs
, &
rmb
->
ª∂y
.
¨ïly
)) {

572 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_reply_body failedÅo "

574  
FALSE
;

576  
TRUE
;

577 
MSG_DENIED
:

578 i‡(!
	`libnfs_ªje˘ed_ª∂y
(
zdrs
, &
rmb
->
ª∂y
.
ºïly
)) {

579 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_reply_body failedÅo "

581  
FALSE
;

583  
TRUE
;

586 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_reply_body failedÅo "

588  
FALSE
;

589 
	}
}

591 
boﬁ_t
 
	$libnfs_Ωc_msg
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
Ωc_msg
 *
msg
)

593 
ªt
;

595 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
msg
->
xid
)) {

596 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_msg failedÅo decode XID");

597  
FALSE
;

600 i‡(!
	`libnfs_zdr_u_öt
(
zdrs
, &
msg
->
dúe˘i⁄
)) {

601 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_msg failedÅo decode DIRECTION");

602  
FALSE
;

605 
msg
->
dúe˘i⁄
) {

606 
CALL
:

607 
ªt
 = 
	`libnfs_Ωc_ˇŒ_body
(
Ωc
, 
zdrs
, &
msg
->
body
.
cbody
);

608 i‡(!
ªt
) {

609 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_msg failedÅoÉncode "

610 "CALL,Ñë=%d: %s", 
ªt
, 
	`Ωc_gë_îr‹
(
Ωc
));

612  
ªt
;

613 
REPLY
:

614 
ªt
 = 
	`libnfs_Ωc_ª∂y_body
(
Ωc
, 
zdrs
, &
msg
->
body
.
rbody
);

615 i‡(!
ªt
) {

616 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_msg failedÅo decode "

617 "REPLY,Ñë=%d: %s", 
ªt
, 
	`Ωc_gë_îr‹
(
Ωc
));

619  
ªt
;

621 
	`Ωc_£t_îr‹
(
Ωc
, "libnfs_rpc_msg failedÅo decode. "

623  
FALSE
;

625 
	}
}

627 
boﬁ_t
 
	$libnfs_zdr_ˇŒmsg
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
Ωc_msg
 *
msg
)

629  
	`libnfs_Ωc_msg
(
Ωc
, 
zdrs
, 
msg
);

630 
	}
}

632 
boﬁ_t
 
	$libnfs_zdr_ª∂ymsg
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdrs
, 
Ωc_msg
 *
msg
)

634  
	`libnfs_Ωc_msg
(
Ωc
, 
zdrs
, 
msg
);

635 
	}
}

637 
AUTH
 *
	$authn⁄e_¸óã
()

639 
AUTH
 *
auth
;

641 
auth
 = 
	`mÆloc
((
AUTH
));

643 
auth
->
ah_¸ed
.
ﬂ_Êav‹
 = 
AUTH_NONE
;

644 
auth
->
ah_¸ed
.
ﬂ_Àngth
 = 0;

645 
auth
->
ah_¸ed
.
ﬂ_ba£
 = 
NULL
;

647 
auth
->
ah_vîf
.
ﬂ_Êav‹
 = 
AUTH_NONE
;

648 
auth
->
ah_vîf
.
ﬂ_Àngth
 = 0;

649 
auth
->
ah_vîf
.
ﬂ_ba£
 = 
NULL
;

651 
auth
->
ah_¥iv©e
 = 
NULL
;

653  
auth
;

654 
	}
}

656 
AUTH
 *
	$libnfs_authunix_¸óã
(c⁄° *
ho°
, 
uöt32_t
 
uid
, uöt32_à
gid
, uöt32_à
Àn
, uöt32_à*
groups
)

658 
AUTH
 *
auth
;

659 
size
;

660 
uöt32_t
 *
buf
;

661 
idx
;

663 
size
 = 4 + 4 + ((
	`°æí
(
ho°
Ë+ 3Ë& ~3Ë+ 4 + 4 + 4 + 
Àn
 * 4;

664 
auth
 = 
	`ˇŒoc
(1, (
AUTH
));

665 
auth
->
ah_¸ed
.
ﬂ_Êav‹
 = 
AUTH_UNIX
;

666 
auth
->
ah_¸ed
.
ﬂ_Àngth
 = 
size
;

667 
auth
->
ah_¸ed
.
ﬂ_ba£
 = 
	`ˇŒoc
(1, 
size
);

669 
buf
 = (
uöt32_t
 *)(*)
auth
->
ah_¸ed
.
ﬂ_ba£
;

670 
idx
 = 0;

671 
buf
[
idx
++] = 
	`ht⁄l
((
uöt32_t
)
	`Ωc_cuºít_time
());

672 
buf
[
idx
++] = 
	`ht⁄l
(
	`°æí
(
ho°
));

673 
	`mem˝y
(&
buf
[2], 
ho°
, 
	`°æí
(host));

675 
idx
 +(
	`°æí
(
ho°
) + 3) >> 2;

676 
buf
[
idx
++] = 
	`ht⁄l
(
uid
);

677 
buf
[
idx
++] = 
	`ht⁄l
(
gid
);

678 
buf
[
idx
++] = 
	`ht⁄l
(
Àn
);

679 
Àn
-- > 0) {

680 
buf
[
idx
++] = 
	`ht⁄l
(*
groups
++);

683 
auth
->
ah_vîf
.
ﬂ_Êav‹
 = 
AUTH_NONE
;

684 
auth
->
ah_vîf
.
ﬂ_Àngth
 = 0;

685 
auth
->
ah_vîf
.
ﬂ_ba£
 = 
NULL
;

687 
auth
->
ah_¥iv©e
 = 
NULL
;

689  
auth
;

690 
	}
}

692 #ifde‡
HAVE_LIBKRB5


693 
	$libnfs_authgss_öô
(
Ωc_c⁄ãxt
 *
Ωc
)

695 
Ωc
->
gss_£qno
 = 0;

696 
Ωc
->
c⁄ãxt_Àn
 = 0;

697 
	`‰ì
(
Ωc
->
c⁄ãxt
);

698 
Ωc
->
c⁄ãxt
 = 
NULL
;

700 
	`‰ì
(
Ωc
->
auth
->
ah_¸ed
.
ﬂ_ba£
);

701 
Ωc
->
auth
->
ah_¸ed
.
ﬂ_ba£
 = 
NULL
;

703 
Ωc
->
auth
->
ah_¸ed
.
ﬂ_Êav‹
 = 
AUTH_GSS
;

706 
	}
}

708 
	$libnfs_authgss_gí_¸eds
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdr
, 
Àvñ
)

710 
Ωc_gss_¸ed_t
 
gss
;

711 
Ωc_gss_¸ed_vîs_1_t
 *
gss_v1
;

713 
gss
.
vîs
 = 1;

714 
gss_v1
 = &
gss
.
Ωc_gss_¸ed_t_u
.
Ωc_gss_¸ed_vîs_1_t
;

715 i‡(
Ωc
->
gss_£qno
 == 0) {

716 
gss_v1
->
gss_¥oc
 = 
RPCSEC_GSS_INIT
;

718 
gss_v1
->
gss_¥oc
 = 
RPCSEC_GSS_DATA
;

720 
gss_v1
->
£q_num
 = 
Ωc
->
gss_£qno
;

721 
gss_v1
->
£rvi˚
 = 
Àvñ
;

722 
gss_v1
->
h™dÀ
.
h™dÀ_vÆ
 = 
Ωc
->
c⁄ãxt
;

723 
gss_v1
->
h™dÀ
.
h™dÀ_Àn
 = 
Ωc
->
c⁄ãxt_Àn
;

725 i‡(!
	`zdr_Ωc_gss_¸ed_t
(
zdr
, &
gss
)) {

730 
	}
}

733 
AUTH
 *
	$libnfs_authunix_¸óã_deÁu…
()

735 #i‡
	`deföed
(
WIN32
Ë|| deföed(
PS3_PPU
)

736  
	`libnfs_authunix_¸óã
("libnfs", 65534, 65534, 0, 
NULL
);

738  
	`libnfs_authunix_¸óã
("libnfs", 
	`gëuid
(), 
	`gëgid
(), 0, 
NULL
);

740 
	}
}

742 
	$libnfs_auth_de°roy
(
AUTH
 *
auth
)

744 i‡(
auth
->
ah_¸ed
.
ﬂ_ba£
) {

745 
	`‰ì
(
auth
->
ah_¸ed
.
ﬂ_ba£
);

747 i‡(
auth
->
ah_vîf
.
ﬂ_ba£
) {

748 
	`‰ì
(
auth
->
ah_vîf
.
ﬂ_ba£
);

750 
	`‰ì
(
auth
);

751 
	}
}

	@lib/libnfs.c

21 #i‚de‡
_GNU_SOURCE


22 
	#_GNU_SOURCE


	)

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

29 #ifde‡
HAVE_UTIME_H


30 
	~<utime.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 #ifde‡
HAVE_SYS_VFS_H


38 
	~<sys/vfs.h
>

41 #ifde‡
HAVE_SYS_STATVFS_H


42 
	~<sys/°©vfs.h
>

45 #i‡
deföed
(
__ANDROID__
Ë&& !deföed(
HAVE_SYS_STATVFS_H
)

46 
	#°©vfs
 
°©fs


	)

49 #ifde‡
HAVE_NETINET_IN_H


50 
	~<√töë/ö.h
>

53 #ifde‡
HAVE_STRINGS_H


54 
	~<°rögs.h
>

57 #ifde‡
HAVE_SYS_SYSMACROS_H


58 
	~<sys/sysma¸os.h
>

61 #ifde‡
HAVE_SYS_TIME_H


62 
	~<sys/time.h
>

65 #ifde‡
HAVE_SIGNAL_H


66 
	~<sig«l.h
>

69 
	~<î∫o.h
>

70 
	~<°d¨g.h
>

71 
	~<°dlib.h
>

72 
	~<°rög.h
>

73 
	~<time.h
>

75 
	~"¶i°.h
"

76 
	~"libnfs.h
"

77 
	~"libnfs-øw.h
"

78 
	~"libnfs-øw-mou¡.h
"

79 
	~"libnfs-øw-p‹tm≠.h
"

80 
	~"libnfs-¥iv©e.h
"

82 #ifde‡
HAVE_LIBKRB5


83 
	~"krb5-wøµî.h
"

86 #i‚de‡
disˇrd_c⁄°


87 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

90 c⁄° *
	goom
 = "out of memory";

93 
	$nfs_‰ì_nfsdú
(
nfsdú
 *nfsdir)

95 
nfsdú
->
íåõs
) {

96 
nfsdúít
 *
dúít
 = 
nfsdú
->
íåõs
->
√xt
;

97 i‡(
nfsdú
->
íåõs
->
«me
 !
NULL
) {

98 
	`‰ì
(
nfsdú
->
íåõs
->
«me
);

100 
	`‰ì
(
nfsdú
->
íåõs
);

101 
nfsdú
->
íåõs
 = 
dúít
;

103 
	`‰ì
(
nfsdú
->
fh
.
vÆ
);

104 
	`‰ì
(
nfsdú
);

105 
	}
}

108 
	$nfs_dúˇche_add
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir)

110 
i
 = 0;

111 #ifde‡
HAVE_MULTITHREADING


112 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

113 
	`nfs_mt_muãx_lock
(&
nfs
->
Ωc
->
Ωc_muãx
);

116 
	`LIBNFS_LIST_ADD
(&
nfs
->
nfsi
->
dúˇche
, 
nfsdú
);

118 
nfsdú
 = 
nfs
->
nfsi
->
dúˇche
;Çfsdú;Çfsdú =Çfsdú->
√xt
, 
i
++) {

119 i‡(
i
 > 
MAX_DIR_CACHE
) {

120 
	`LIBNFS_LIST_REMOVE
(&
nfs
->
nfsi
->
dúˇche
, 
nfsdú
);

121 
	`nfs_‰ì_nfsdú
(
nfsdú
);

125 #ifde‡
HAVE_MULTITHREADING


126 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

127 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
Ωc
->
Ωc_muãx
);

130 
	}
}

132 
nfsdú
 *

133 
	$nfs_dúˇche_föd
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_fh
 *
fh
)

135 
nfsdú
 *nfsdir;

137 #ifde‡
HAVE_MULTITHREADING


138 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

139 
	`nfs_mt_muãx_lock
(&
nfs
->
Ωc
->
Ωc_muãx
);

142 
nfsdú
 = 
nfs
->
nfsi
->
dúˇche
;Çfsdú;Çfsdú =Çfsdú->
√xt
) {

143 i‡(
nfsdú
->
fh
.
Àn
 == fh->len &&

144 !
	`memcmp
(
nfsdú
->
fh
.
vÆ
, fh->vÆ, fh->
Àn
)) {

145 
	`LIBNFS_LIST_REMOVE
(&
nfs
->
nfsi
->
dúˇche
, 
nfsdú
);

150 #ifde‡
HAVE_MULTITHREADING


151 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

152 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
Ωc
->
Ωc_muãx
);

155  
nfsdú
;

156 
	}
}

159 
	$nfs_dúˇche_dr›
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_fh
 *
fh
)

161 
nfsdú
 *
ˇched
;

163 
ˇched
 = 
	`nfs_dúˇche_föd
(
nfs
, 
fh
);

164 i‡(
ˇched
) {

165 
	`nfs_‰ì_nfsdú
(
ˇched
);

167 
	}
}

170 
	$nfs_£t_auth
(
nfs_c⁄ãxt
 *
nfs
, 
AUTH
 *
auth
)

172 
	`Ωc_£t_auth
(
nfs
->
Ωc
, 
auth
);

173 
	}
}

176 
	$nfs_£t_£curôy
(
nfs_c⁄ãxt
 *
nfs
, 
Ωc_£c
 
£c
)

178 #ifde‡
HAVE_LIBKRB5


179 
nfs
->
Ωc
->
w™ãd_£c
 = 
£c
;

181 
	}
}

183 #ifde‡
HAVE_TLS


185 
	$nfs_£t_x¥t£curôy
(
nfs_c⁄ãxt
 *
nfs
, 
Ωc_x¥t£c
 
x¥t£c
)

188 
	`as£π
(
x¥t£c
 =
RPC_XPRTSEC_NONE
 ||

189 
x¥t£c
 =
RPC_XPRTSEC_TLS
 ||

190 
x¥t£c
 =
RPC_XPRTSEC_MTLS
);

192 
nfs
->
Ωc
->
w™ãd_x¥t£c
 = 
x¥t£c
;

193 
	}
}

197 
	$nfs_gë_fd
(
nfs_c⁄ãxt
 *
nfs
)

199  
	`Ωc_gë_fd
(
nfs
->
Ωc
);

200 
	}
}

203 
	$nfs_queue_Àngth
(
nfs_c⁄ãxt
 *
nfs
)

205  
	`Ωc_queue_Àngth
(
nfs
->
Ωc
);

206 
	}
}

209 
	$nfs_which_evíts
(
nfs_c⁄ãxt
 *
nfs
)

211  
	`Ωc_which_evíts
(
nfs
->
Ωc
);

212 
	}
}

215 
	$nfs_£rvi˚
(
nfs_c⁄ãxt
 *
nfs
, 
ªvíts
)

217  
	`Ωc_£rvi˚
(
nfs
->
Ωc
, 
ªvíts
);

218 
	}
}

221 
	$nfs_gë_îr‹
(
nfs_c⁄ãxt
 *
nfs
)

223 #ifde‡
HAVE_MULTITHREADING


224 i‡(
nfs
 &&Çfs->
Ωc
->
mu…ôhªadög_íabÀd
) {

225 
nfs_thªad_c⁄ãxt
 *
¡c
;

227 
¡c
 = 
nfs
->
nfsi
->
thªad_˘x
;Çtc;Çt¯¡c->
√xt
) {

228 i‡(
	`nfs_mt_gë_tid
(Ë=
¡c
->
tid
) {

229 
nfs
 = &
¡c
->nfs;

235  
nfs
->
îr‹_°rög
 ?Çfs->error_string : "";

236 
	}
};

238 #ifde‡
HAVE_SO_BINDTODEVICE


240 
	$nfs_£t_öãrÁ˚
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
i‚ame
)

242 
	`Ωc_£t_öãrÁ˚
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
), 
i‚ame
);

243 
	}
}

247 
	$nfs_£t_c⁄ãxt_¨gs
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
¨g
, c⁄° *
vÆ
)

249 i‡(!
	`°rcmp
(
¨g
, "tcp-syncnt")) {

250 
	`Ωc_£t_t˝_syn˙t
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
), 
	`©oi
(
vÆ
));

251 } i‡(!
	`°rcmp
(
¨g
, "uid")) {

252 
	`Ωc_£t_uid
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
), 
	`©oi
(
vÆ
));

253 } i‡(!
	`°rcmp
(
¨g
, "gid")) {

254 
	`Ωc_£t_gid
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
), 
	`©oi
(
vÆ
));

255 } i‡(!
	`°rcmp
(
¨g
, "timeo")) {

257 c⁄° 
timeout_m£cs
 = 
	`©oi
(
vÆ
) * 100;

258 i‡(
timeout_m£cs
 < (10 * 1000)) {

259 
	`nfs_£t_îr‹
(
nfs
, "timeÿˇ¬Ÿ bêÀs†th™ 100: %s", 
vÆ
);

262 
	`nfs_£t_timeout
(
nfs
, 
timeout_m£cs
);

263 } i‡(!
	`°rcmp
(
¨g
, "retrans")) {

264 c⁄° 
ªå™s
 = 
	`©oi
(
vÆ
);

265 i‡(
ªå™s
 < 0) {

266 
	`nfs_£t_îr‹
(
nfs
, "ªå™†ˇ¬Ÿ bêÀs†th™ 0: %s", 
vÆ
);

269 
	`nfs_£t_ªå™s
(
nfs
, 
ªå™s
);

270 } i‡(!
	`°rcmp
(
¨g
, "debug")) {

271 
	`Ωc_£t_debug
(
	`nfs_gë_Ωc_c⁄ãxt
(
nfs
), 
	`©oi
(
vÆ
));

272 } i‡(!
	`°rcmp
(
¨g
, "auto-traverse-mounts")) {

273 
	`nfs_£t_auto_åavî£_mou¡s
(
nfs
, 
	`©oi
(
vÆ
));

274 } i‡(!
	`°rcmp
(
¨g
, "dircache")) {

275 
	`nfs_£t_dúˇche
(
nfs
, 
	`©oi
(
vÆ
));

276 } i‡(!
	`°rcmp
(
¨g
, "autoreconnect")) {

277 
	`nfs_£t_aut‹ec⁄√˘
(
nfs
, 
	`©oi
(
vÆ
));

278 #ifde‡
HAVE_SO_BINDTODEVICE


279 } i‡(!
	`°rcmp
(
¨g
, "if")) {

280 
	`nfs_£t_öãrÁ˚
(
nfs
, 
vÆ
);

282 } i‡(!
	`°rcmp
(
¨g
, "version")) {

283 i‡(
	`nfs_£t_vîsi⁄
(
nfs
, 
	`©oi
(
vÆ
)) < 0) {

284 
	`nfs_£t_îr‹
(
nfs
, "NFS version %d isÇot supported",

285 
	`©oi
(
vÆ
));

288 } i‡(!
	`°rcmp
(
¨g
, "nfsport")) {

289 
	`nfs_£t_nf•‹t
(
nfs
, 
	`©oi
(
vÆ
));

290 } i‡(!
	`°rcmp
(
¨g
, "mountport")) {

291 
	`nfs_£t_mou¡p‹t
(
nfs
, 
	`©oi
(
vÆ
));

292 } i‡(!
	`°rcmp
(
¨g
, "readdir-buffer")) {

293 *
°Ω
 = 
	`°rchr
(
vÆ
, ',');

294 i‡(
°Ω
) {

295 *
°Ω
 = 0;

296 
°Ω
++;

297 
	`nfs_£t_ªaddú_max_buf„r_size
(
nfs
, 
	`©oi
(
vÆ
),átoi(
°Ω
));

299 
	`nfs_£t_ªaddú_max_buf„r_size
(
nfs
, 
	`©oi
(
vÆ
),átoi(val));

301 #ifde‡
HAVE_TLS


302 } i‡(
nfs
->
Ωc
 && !
	`°rcmp
(
¨g
, "xprtsec")) {

303 i‡(!
	`°rcmp
(
vÆ
, "none")) {

304 
	`nfs_£t_x¥t£curôy
(
nfs
, 
RPC_XPRTSEC_NONE
);

305 } i‡(!
	`°rcmp
(
vÆ
, "tls")) {

306 
	`nfs_£t_x¥t£curôy
(
nfs
, 
RPC_XPRTSEC_TLS
);

307 } i‡(!
	`°rcmp
(
vÆ
, "mtls")) {

308 
	`nfs_£t_x¥t£curôy
(
nfs
, 
RPC_XPRTSEC_MTLS
);

310 
	`nfs_£t_îr‹
(
nfs
, "Unknown/unsuµ‹ãd x¥t£¯ty≥ : %s", 
vÆ
);

314 #ifde‡
HAVE_LIBKRB5


315 } i‡(
nfs
->
Ωc
 && !
	`°rcmp
(
¨g
, "sec")) {

319 i‡(!
	`°rcmp
(
vÆ
, "krb5p")) {

320 
	`nfs_£t_£curôy
(
nfs
, 
RPC_SEC_KRB5P
);

321 } i‡(!
	`°rcmp
(
vÆ
, "krb5i")) {

322 
	`nfs_£t_£curôy
(
nfs
, 
RPC_SEC_KRB5I
);

323 } i‡(!
	`°rcmp
(
vÆ
, "krb5")) {

324 
	`nfs_£t_£curôy
(
nfs
, 
RPC_SEC_KRB5
);

326 
	`nfs_£t_îr‹
(
nfs
, "Unknown/unsupported secÅype : %s",

327 
vÆ
);

332 
	`nfs_£t_îr‹
(
nfs
, "Unknown urlárgument : %s",

333 
¨g
);

337 
	}
}

340 
	$tohex
(
ch
)

342 i‡(
ch
 >= '0' && ch <= '9') {

343  
ch
 - '0';

345 
ch
 &= 0xDF;

346 i‡(
ch
 >= 'A' && ch <= 'F') {

347  
ch
 - 'A' + 10;

350 
	}
}

352 
nfs_uæ
 *

353 
	$nfs_∑r£_uæ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
uæ
, 
dú
, 
öcom∂ëe
)

355 
nfs_uæ
 *
uæs
;

356 *
°Ω
, *
Êag•
, *
°Ω2
, 
ch
;

357 
tmp
;

359 i‡(
	`°∫cmp
(
uæ
, "nfs://", 6)) {

360 
	`nfs_£t_îr‹
(
nfs
, "Invalid URL specified");

361  
NULL
;

364 
uæs
 = 
	`ˇŒoc
(1, (
nfs_uæ
));

365 i‡(
uæs
 =
NULL
) {

366 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

367  
NULL
;

370 
uæs
->
£rvî
 = 
	`°rdup
(
uæ
 + 6);

371 i‡(
uæs
->
£rvî
 =
NULL
) {

372 
	`nfs_de°roy_uæ
(
uæs
);

373 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

374  
NULL
;

378 
°Ω
 = 
uæs
->
£rvî
;

379 
°Ω
 && *strp) {

380 
°Ω
 = 
	`°rchr
(strp, '%');

381 i‡(
°Ω
 =
NULL
) {

384 
tmp
 = 
	`tohex
(
°Ω
[1]);

385 i‡(
tmp
 < 0) {

386 
°Ω
++;

389 
ch
 = (
tmp
 & 0x0f) << 4;

390 
tmp
 = 
	`tohex
(
°Ω
[2]);

391 i‡(
tmp
 < 0) {

392 
°Ω
++;

395 
ch
 |
tmp
 & 0x0f;

396 *
°Ω
 = 
ch
;

397 
	`°r˝y
(
°Ω
 + 1, strp + 3);

398 
°Ω
++;

401 i‡(
uæs
->
£rvî
[0] == '/' || urls->server[0] == '\0' ||

402 
uæs
->
£rvî
[0] == '?') {

403 i‡(
öcom∂ëe
) {

404 
Êag•
 = 
	`°rchr
(
uæs
->
£rvî
, '?');

405 
Êags
;

407 
	`nfs_de°roy_uæ
(
uæs
);

408 
	`nfs_£t_îr‹
(
nfs
, "Invalid server string");

409  
NULL
;

412 
°Ω
 = 
	`°rchr
(
uæs
->
£rvî
, '/');

413 i‡(
°Ω
 =
NULL
) {

414 i‡(
öcom∂ëe
) {

415 
Êag•
 = 
	`°rchr
(
uæs
->
£rvî
, '?');

416 
Êags
;

418 
	`nfs_de°roy_uæ
(
uæs
);

419 
	`nfs_£t_îr‹
(
nfs
, "Incomplete or invalid URL specified.");

420  
NULL
;

423 
uæs
->
∑th
 = 
	`°rdup
(
°Ω
);

424 i‡(
uæs
->
∑th
 =
NULL
) {

425 
	`nfs_de°roy_uæ
(
uæs
);

426 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

427  
NULL
;

429 *
°Ω
 = 0;

431 
°Ω
 = 
	`°rchr
(
uæs
->
£rvî
, ':');

432 i‡(
°Ω
) {

433 *
°Ω
++ = 0;

434 
nfs
->
nfsi
->
nf•‹t
 = 
	`©oi
(
°Ω
);

437 i‡(
dú
) {

438 
Êag•
 = 
	`°rchr
(
uæs
->
∑th
, '?');

439 
Êags
;

442 
°Ω
 = 
	`°ºchr
(
uæs
->
∑th
, '/');

443 i‡(
°Ω
 =
NULL
) {

444 i‡(
öcom∂ëe
) {

445 
Êag•
 = 
	`°rchr
(
uæs
->
∑th
, '?');

446 
Êags
;

448 
	`nfs_de°roy_uæ
(
uæs
);

449 
	`nfs_£t_îr‹
(
nfs
, "Incomplete or invalid URL specified.");

450  
NULL
;

452 
uæs
->
fûe
 = 
	`°rdup
(
°Ω
);

453 i‡(
uæs
->
∑th
 =
NULL
) {

454 
	`nfs_de°roy_uæ
(
uæs
);

455 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

456  
NULL
;

458 *
°Ω
 = 0;

459 
Êag•
 = 
	`°rchr
(
uæs
->
fûe
, '?');

461 
Êags
:

462 i‡(
Êag•
) {

463 *
Êag•
 = 0;

466 i‡(
uæs
->
fûe
 && !
	`°æí
(urls->file)) {

467 
	`‰ì
(
uæs
->
fûe
);

468 
uæs
->
fûe
 = 
NULL
;

469 i‡(!
öcom∂ëe
) {

470 
	`nfs_de°roy_uæ
(
uæs
);

471 
	`nfs_£t_îr‹
(
nfs
, "Incomplete or invalid URL "

473  
NULL
;

477 
Êag•
 !
NULL
 && *(flagsp+1) != 0) {

478 
°Ω
 = 
Êag•
 + 1;

479 
Êag•
 = 
	`°rchr
(
°Ω
, '&');

480 i‡(
Êag•
) {

481 *
Êag•
 = 0;

483 
°Ω2
 = 
	`°rchr
(
°Ω
, '=');

484 i‡(
°Ω2
) {

485 *
°Ω2
 = 0;

486 
°Ω2
++;

487 i‡(
	`nfs_£t_c⁄ãxt_¨gs
(
nfs
, 
°Ω
, 
°Ω2
) != 0) {

488 
	`nfs_de°roy_uæ
(
uæs
);

489  
NULL
;

494 
°Ω
 =
	`°rchr
(
uæs
->
£rvî
, '@');

495 i‡(
°Ω
 && 
nfs
->
Ωc
) {

496 *
°Ω
++ = '\0';

497 i‡(
	`Ωc_£t_u£∫ame
(
nfs
->
Ωc
, 
uæs
->
£rvî
) != 0) {

498 
	`nfs_de°roy_uæ
(
uæs
);

499  
NULL
;

501 
uæs
->
£rvî
 = 
	`°rdup
(
°Ω
);

502 i‡(
uæs
->
£rvî
 =
NULL
) {

503 
	`nfs_de°roy_uæ
(
uæs
);

504 
	`Ωc_£t_îr‹
(
nfs
->
Ωc
,

507  
NULL
;

510 i‡(
uæs
->
£rvî
 && 
	`°æí
(urls->server) <= 1) {

511 
	`‰ì
(
uæs
->
£rvî
);

512 
uæs
->
£rvî
 = 
NULL
;

515 #ifde‡
HAVE_TLS


520 i‡(
nfs
->
Ωc
->
w™ãd_x¥t£c
 !
RPC_XPRTSEC_NONE
) {

522 i‡(
	`és_globÆ_öô
(
nfs
->
Ωc
) != 0) {

523 
	`nfs_£t_îr‹
(
nfs
, "tls_global_init() failed!");

524 
	`nfs_de°roy_uæ
(
uæs
);

525  
NULL
;

530  
uæs
;

531 
	}
}

533 
nfs_uæ
 *

534 
	$nfs_∑r£_uæ_fuŒ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
uæ
)

536  
	`nfs_∑r£_uæ
(
nfs
, 
uæ
, 0, 0);

537 
	}
}

539 
nfs_uæ
 *

540 
	$nfs_∑r£_uæ_dú
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
uæ
)

542  
	`nfs_∑r£_uæ
(
nfs
, 
uæ
, 1, 0);

543 
	}
}

545 
nfs_uæ
 *

546 
	$nfs_∑r£_uæ_öcom∂ëe
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
uæ
)

548  
	`nfs_∑r£_uæ
(
nfs
, 
uæ
, 0, 1);

549 
	}
}

553 
	$nfs_de°roy_uæ
(
nfs_uæ
 *
uæ
)

555 i‡(
uæ
) {

556 
	`‰ì
(
uæ
->
£rvî
);

557 
	`‰ì
(
uæ
->
∑th
);

558 
	`‰ì
(
uæ
->
fûe
);

560 
	`‰ì
(
uæ
);

561 
	}
}

563 
	#MAX_CLIENT_NAME
 64

	)

565 
nfs_c⁄ãxt
 *

566 
	$nfs_öô_c⁄ãxt
()

568 
nfs_c⁄ãxt
 *
nfs
;

569 
nfs_c⁄ãxt_öã∫Æ
 *
nfsi
;

570 
i
;

571 
uöt64_t
 
v
;

572 
vîifõr4
 
vîifõr
;

573 
˛õ¡_«me
[
MAX_CLIENT_NAME
];

575 
nfsi
 = 
	`ˇŒoc
(1, (
nfs_c⁄ãxt_öã∫Æ
));

576 i‡(
nfsi
 =
NULL
) {

577  
NULL
;

580 
nfs
 = 
	`ˇŒoc
(1, (
nfs_c⁄ãxt
));

581 i‡(
nfs
 =
NULL
) {

582 
	`‰ì
(
nfsi
);

583  
NULL
;

586 
nfs
->
nfsi
 =Çfsi;

587 
nfs
->
Ωc
 = 
	`Ωc_öô_c⁄ãxt
();

588 i‡(
nfs
->
Ωc
 =
NULL
) {

589 
	`‰ì
(
nfs
->
nfsi
);

590 
	`‰ì
(
nfs
);

591  
NULL
;

593 #ifde‡
HAVE_LIBKRB5


594 
	`Ωc_£t_u£∫ame
(
nfs
->
Ωc
, 
	`cu£rid
(
NULL
));

596 
nfs
->
nfsi
->
cwd
 = 
	`°rdup
("/");

597 
nfs
->
nfsi
->
mask
 = 022;

598 
nfs
->
nfsi
->
auto_åavî£_mou¡s
 = 1;

599 
nfs
->
nfsi
->
dúˇche_íabÀd
 = 1;

612 
nfs
->
nfsi
->
auto_ªc⁄√˘
 = -1;

613 
nfs
->
nfsi
->
timeout
 = 60*1000;

614 
nfs
->
nfsi
->
ªå™s
 = 2;

616 
nfs
->
nfsi
->
deÁu…_vîsi⁄
 = 
NFS_V3
;

617 
nfs
->
nfsi
->
vîsi⁄
 = 
NFS_V3
;

618 
nfs
->
nfsi
->
ªaddú_dúcou¡
 = 8192;

619 
nfs
->
nfsi
->
ªaddú_maxcou¡
 = 8192;

623 
v
 = 
	`Ωc_cuºít_time
(Ë<< 32 | 
	`gëpid
();

624 
i
 = 0; i < 
NFS4_VERIFIER_SIZE
; i++) {

625 
vîifõr
[
i
] = 
v
 & 0xff;

626 
v
 >>= 8;

628 
	`nfs4_£t_vîifõr
(
nfs
, 
vîifõr
);

630 
	`¢¥ötf
(
˛õ¡_«me
, 
MAX_CLIENT_NAME
, "Libnf†pid:%d %d", 
	`gëpid
(),

631 ()
	`time
(
NULL
));

632 
	`nfs4_£t_˛õ¡_«me
(
nfs
, 
˛õ¡_«me
);

634 #ifde‡
HAVE_MULTITHREADING


635 
	`nfs_mt_muãx_öô
(&
nfs
->
nfsi
->
nfs_muãx
);

636 
	`nfs_mt_muãx_öô
(&
nfs
->
nfsi
->
nfs4_›í_cou¡î_muãx
);

637 
	`nfs_mt_muãx_öô
(&
nfs
->
nfsi
->
nfs4_›í_ˇŒ_muãx
);

640 #ifde‡
HAVE_SIGNAL_H


641 #i‡!
	`deföed
(
WIN32
)

647 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
) {

648 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

649  
NULL
;

653  
nfs
;

654 
	}
}

657 
	$nfs4_£t_˛õ¡_«me
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
˛õ¡_«me
)

659 
	`‰ì
(
nfs
->
nfsi
->
˛õ¡_«me
);

660 
nfs
->
nfsi
->
˛õ¡_«me
 = 
	`°rdup
(client_name);

661 
	}
}

664 
	$nfs4_£t_vîifõr
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
vîifõr
)

666 
	`mem˝y
(
nfs
->
nfsi
->
vîifõr
, vîifõr, 
NFS4_VERIFIER_SIZE
);

667 
	}
}

670 
	$nfs_de°roy_c⁄ãxt
(
nfs_c⁄ãxt
 *
nfs
)

672 
nfs
->
nfsi
->
√°ed_mou¡s
) {

673 
√°ed_mou¡s
 *
m¡
 = 
nfs
->
nfsi
->nested_mounts;

675 
	`LIBNFS_LIST_REMOVE
(&
nfs
->
nfsi
->
√°ed_mou¡s
, 
m¡
);

676 
	`‰ì
(
m¡
->
∑th
);

677 
	`‰ì
(
m¡
->
fh
.
vÆ
);

678 
	`‰ì
(
m¡
);

681 
	`Ωc_de°roy_c⁄ãxt
(
nfs
->
Ωc
);

682 
nfs
->
Ωc
 = 
NULL
;

684 i‡(
nfs
->
îr‹_°rög
 &&Çfs->îr‹_°rög !
oom
) {

685 
	`‰ì
(
nfs
->
îr‹_°rög
);

686 
nfs
->
îr‹_°rög
 = 
NULL
;

689 
	`‰ì
(
nfs
->
nfsi
->
£rvî
);

690 
	`‰ì
(
nfs
->
nfsi
->
exp‹t
);

691 
	`‰ì
(
nfs
->
nfsi
->
cwd
);

692 
	`‰ì
(
nfs
->
nfsi
->
roŸfh
.
vÆ
);

693 
	`‰ì
(
nfs
->
nfsi
->
˛õ¡_«me
);

694 
nfs
->
nfsi
->
dúˇche
) {

695 
nfsdú
 *nfsdú = 
nfs
->
nfsi
->
dúˇche
;

696 
	`LIBNFS_LIST_REMOVE
(&
nfs
->
nfsi
->
dúˇche
, 
nfsdú
);

697 
	`nfs_‰ì_nfsdú
(
nfsdú
);

700 #ifde‡
HAVE_MULTITHREADING


701 
	`nfs_mt_muãx_de°roy
(&
nfs
->
nfsi
->
nfs4_›í_ˇŒ_muãx
);

702 
	`nfs_mt_muãx_de°roy
(&
nfs
->
nfsi
->
nfs4_›í_cou¡î_muãx
);

703 
	`nfs_mt_muãx_de°roy
(&
nfs
->
nfsi
->
nfs_muãx
);

704 
nfs
->
nfsi
->
thªad_˘x
) {

705 
nfs_thªad_c⁄ãxt
 *
tmp
 = 
nfs
->
nfsi
->
thªad_˘x
->
√xt
;

706 
	`‰ì
(
nfs
->
nfsi
->
thªad_˘x
->nfs.
îr‹_°rög
);

707 
	`‰ì
(
nfs
->
nfsi
->
thªad_˘x
);

708 
nfs
->
nfsi
->
thªad_˘x
 = 
tmp
;

711 
	`‰ì
(
nfs
->
nfsi
);

712 
	`‰ì
(
nfs
);

713 
	}
}

715 
	sΩc_cb_d©a
 {

716 *
	m£rvî
;

717 
uöt32_t
 
	m¥ogøm
;

718 
uöt32_t
 
	mvîsi⁄
;

720 
Ωc_cb
 
	mcb
;

721 *
	m¥iv©e_d©a
;

724 
	$‰ì_Ωc_cb_d©a
(
Ωc_cb_d©a
 *
d©a
)

726 
	`‰ì
(
d©a
->
£rvî
);

727 
d©a
->
£rvî
 = 
NULL
;

728 
	`‰ì
(
d©a
);

729 
	}
}

732 
Ωc_c⁄√˘_p‹t_öã∫Æ
(
Ωc_c⁄ãxt
 *
Ωc
, 
p‹t
, 
Ωc_cb_d©a
 *
d©a
);

734 #ifde‡
HAVE_LIBKRB5


735 
Ωc_pdu
 *

736 
	$Ωc_nuŒ_èsk_gss
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
,

737 
Ωc_gss_öô_¨g
 *
¨g
,

738 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

740 
Ωc_pdu
 *
pdu
;

742 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
¥ogøm
, 
vîsi⁄
, 0, 
cb
, 
¥iv©e_d©a
,

743 (
zdΩroc_t
)
zdr_Ωc_gss_öô_ªs
, (
Ωc_gss_öô_ªs
));

744 i‡(
pdu
 =
NULL
) {

745 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu "

747  
NULL
;

751 i‡(
	`zdr_Ωc_gss_öô_¨g
(&
pdu
->
zdr
, 
¨g
) == 0) {

752 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode blob");

753 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

754  
NULL
;

757 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

758 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu "

760  
NULL
;

763  
pdu
;

764 
	}
}

767 
	$Ωc_c⁄√˘_¥ogøm_6_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

768 *
comm™d_d©a
, *
¥iv©e_d©a
)

770 
Ωc_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

772 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

774 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

775 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

776 
	`‰ì_Ωc_cb_d©a
(
d©a
);

780 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
NULL
, d©a->
¥iv©e_d©a
);

781 
	`‰ì_Ωc_cb_d©a
(
d©a
);

782 
	}
}

785 #ifde‡
HAVE_TLS


786 
	$‰ì_és_cb_d©a
(
és_cb_d©a
 *
d©a
)

788 
	`‰ì
(
d©a
);

789 
	}
}

798 
	$Ωc_c⁄√˘_¥ogøm_4_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

799 *
comm™d_d©a
, *
¥iv©e_d©a
)

801 
és_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

803 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

805 
	`RPC_LOG
(
Ωc
, 2, "GŸ AUTH_TLSÑe•⁄£, sètus=%d", 
°©us
);

807 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

808 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

809 
	`‰ì_és_cb_d©a
(
d©a
);

816 
Ωc
->
és_c⁄ãxt
.
d©a
 = *data;

817 
	`‰ì_és_cb_d©a
(
d©a
);

818 
d©a
 = &
Ωc
->
és_c⁄ãxt
.data;

820 
Ωc
->
és_c⁄ãxt
.
°©e
 = 
	`do_és_h™dshake
(rpc);

822 
Ωc
->
és_c⁄ãxt
.
°©e
) {

823 
TLS_HANDSHAKE_IN_PROGRESS
:

829 
TLS_HANDSHAKE_COMPLETED
:

830 
	`RPC_LOG
(
Ωc
, 2, "do_tls_handshake: TLS handshake completed "

831 "synchr⁄ou¶y o¿fd %d", 
Ωc
->
fd
);

832 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_SUCCESS
, 
NULL
, d©a->
¥iv©e_d©a
);

834 
TLS_HANDSHAKE_FAILED
:

835 
	`RPC_LOG
(
Ωc
, 2, "do_tls_handshake: FailedÅo start TLS handshake, or "

836 "TLS h™dshakêÁûed synchr⁄ou¶y o¿fd %d", 
Ωc
->
fd
);

837 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
	`Ωc_gë_îr‹
‘pc), d©a->
¥iv©e_d©a
);

841 
	`as£π
(0);

843 
	}
}

847 
	$Ωc_c⁄√˘_¥ogøm_5_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

848 *
comm™d_d©a
, *
¥iv©e_d©a
)

850 
Ωc_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

852 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

855 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

857 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

858 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

859 
	`‰ì_Ωc_cb_d©a
(
d©a
);

863 #ifde‡
HAVE_LIBKRB5


864 i‡(
d©a
->
¥ogøm
 =100003 && 
Ωc
->
w™ãd_£c
 !
RPC_SEC_UNDEFINED
) {

865 
Ωc_gss_öô_¨g
 
gü
;

867 
Ωc
->
£c
 =Ñpc->
w™ãd_£c
;

869 
	`libnfs_authgss_öô
(
Ωc
);

870 
Ωc
->
auth_d©a
 = 
	`krb5_auth_öô
(rpc,

871 
d©a
->
£rvî
,

872 
Ωc
->
u£∫ame
,

873 
Ωc
->
w™ãd_£c
);

874 i‡(
Ωc
->
auth_d©a
 =
NULL
) {

875 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
	`Ωc_gë_îr‹
(rpc),

876 
d©a
->
¥iv©e_d©a
);

877 
	`‰ì_Ωc_cb_d©a
(
d©a
);

881 i‡(
	`krb5_auth_ªque°
(
Ωc
,Ñpc->
auth_d©a
,

882 
NULL
, 0) < 0) {

883 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
	`Ωc_gë_îr‹
(rpc),

884 
d©a
->
¥iv©e_d©a
);

885 
	`‰ì_Ωc_cb_d©a
(
d©a
);

890 
gü
.
gss_tokí
.
gss_tokí_Àn
 = 
	`krb5_gë_ouçut_tokí_Àngth
(
Ωc
->
auth_d©a
);

891 
gü
.
gss_tokí
.
gss_tokí_vÆ
 = (*)
	`krb5_gë_ouçut_tokí_buf„r
(
Ωc
->
auth_d©a
);

892 i‡(
	`Ωc_nuŒ_èsk_gss
(
Ωc
, 
d©a
->
¥ogøm
, d©a->
vîsi⁄
,

893 &
gü
,

894 
Ωc_c⁄√˘_¥ogøm_6_cb
, 
d©a
Ë=
NULL
) {

895 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

896 
	`‰ì_Ωc_cb_d©a
(
d©a
);

902 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
NULL
, d©a->
¥iv©e_d©a
);

903 
	`‰ì_Ωc_cb_d©a
(
d©a
);

904 
	}
}

907 
	$Ωc_c⁄√˘_¥ogøm_4_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

908 *
comm™d_d©a
, *
¥iv©e_d©a
)

910 
Ωc_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

912 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

915 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

917 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

918 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

919 
	`‰ì_Ωc_cb_d©a
(
d©a
);

923 #ifde‡
HAVE_TLS


929 
Ωc
->
u£_és
 = (
d©a
->
¥ogøm
 =
NFS_PROGRAM
) &&

930 (
Ωc
->
w™ãd_x¥t£c
 =
RPC_XPRTSEC_TLS
 ||

931 
Ωc
->
w™ãd_x¥t£c
 =
RPC_XPRTSEC_MTLS
);

932 i‡(
Ωc
->
u£_és
) {

934 
	`as£π
(
d©a
->
¥ogøm
 =
NFS_PROGRAM
);

936 i‡(
	`Ωc_nuŒ_èsk_authés
(
Ωc
, 
d©a
->
vîsi⁄
,

937 
Ωc_c⁄√˘_¥ogøm_5_cb
, 
d©a
Ë=
NULL
) {

938 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

939 
	`‰ì_Ωc_cb_d©a
(
d©a
);

944 i‡(
	`Ωc_nuŒ_èsk
(
Ωc
, 
d©a
->
¥ogøm
, d©a->
vîsi⁄
,

945 
Ωc_c⁄√˘_¥ogøm_5_cb
, 
d©a
Ë=
NULL
) {

946 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

947 
	`‰ì_Ωc_cb_d©a
(
d©a
);

950 
	}
}

953 
	$Ωc_c⁄√˘_¥ogøm_3_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

954 *
comm™d_d©a
, *
¥iv©e_d©a
)

956 
Ωc_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

957 
pm≠3_°rög_ªsu…
 *
g¨
;

958 
uöt32_t
 
Ωc_p‹t
 = 0;

959 *
±r
;

961 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

963 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

964 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

965 
	`‰ì_Ωc_cb_d©a
(
d©a
);

969 
Ωc
->
s
.
ss_Ámûy
) {

970 
AF_INET
:

971 
Ωc_p‹t
 = *(
uöt32_t
 *)(*)
comm™d_d©a
;

973 
AF_INET6
:

975 
g¨
 = 
comm™d_d©a
;

976 i‡(
g¨
->
addr
 =
NULL
) {

979 
±r
 = 
	`°ºchr
(
g¨
->
addr
, '.');

980 i‡(
±r
 =
NULL
) {

983 
Ωc_p‹t
 = 
	`©oi
(
±r
 + 1);

984 *
±r
 = 0;

985 
±r
 = 
	`°ºchr
(
g¨
->
addr
, '.');

986 i‡(
±r
 =
NULL
) {

989 
Ωc_p‹t
 +256 * 
	`©oi
(
±r
 + 1);

992 i‡(
Ωc_p‹t
 == 0) {

993 
	`Ωc_£t_îr‹
(
Ωc
, "RPCÉrror. Program isÇotávailable on %s",

994 
d©a
->
£rvî
);

995 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
	`Ωc_gë_îr‹
(rpc),

996 
d©a
->
¥iv©e_d©a
);

997 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1001 
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect");

1002 i‡(
	`Ωc_c⁄√˘_p‹t_öã∫Æ
(
Ωc
, 
Ωc_p‹t
, 
d©a
)) {

1003 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
,

1004 
d©a
->
¥iv©e_d©a
);

1005 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1008 
	}
}

1011 
	$Ωc_c⁄√˘_¥ogøm_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

1012 *
comm™d_d©a
, *
¥iv©e_d©a
)

1014 
Ωc_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1015 
pm≠3_m≠pög
 
m≠
;

1017 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1019 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

1020 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

1021 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1025 
Ωc
->
s
.
ss_Ámûy
) {

1026 
AF_INET
:

1027 i‡(
	`Ωc_pm≠2_gëp‹t_èsk
(
Ωc
, 
d©a
->
¥ogøm
, d©a->
vîsi⁄
,

1028 
IPPROTO_TCP
,

1029 
Ωc_c⁄√˘_¥ogøm_3_cb
,

1030 
¥iv©e_d©a
Ë=
NULL
) {

1031 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

1032 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1036 
AF_INET6
:

1037 
m≠
.
¥og
=
d©a
->
¥ogøm
;

1038 
m≠
.
vîs
=
d©a
->
vîsi⁄
;

1039 
m≠
.
√tid
="";

1040 
m≠
.
addr
="";

1041 
m≠
.
ow√r
="";

1042 i‡(
	`Ωc_pm≠3_gëaddr_èsk
(
Ωc
, &
m≠
,

1043 
Ωc_c⁄√˘_¥ogøm_3_cb
,

1044 
¥iv©e_d©a
Ë=
NULL
) {

1045 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

1046 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1051 
	}
}

1054 
	$Ωc_c⁄√˘_¥ogøm_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

1055 *
comm™d_d©a
, *
¥iv©e_d©a
)

1057 
Ωc_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1059 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1062 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

1064 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

1065 
d©a
->
	`cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

1066 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1070 
Ωc
->
s
.
ss_Ámûy
) {

1071 
AF_INET
:

1072 i‡(
	`Ωc_pm≠2_nuŒ_èsk
(
Ωc
, 
Ωc_c⁄√˘_¥ogøm_2_cb
,

1073 
d©a
Ë=
NULL
) {

1074 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

1075 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1079 
AF_INET6
:

1080 i‡(
	`Ωc_pm≠3_nuŒ_èsk
(
Ωc
, 
Ωc_c⁄√˘_¥ogøm_2_cb
,

1081 
d©a
Ë=
NULL
) {

1082 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

1083 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1088 
	}
}

1091 
	$Ωc_c⁄√˘_p‹t_öã∫Æ
(
Ωc_c⁄ãxt
 *
Ωc
, 
p‹t
, 
Ωc_cb_d©a
 *
d©a
)

1093 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
d©a
->
£rvî
, 
p‹t
,

1094 
Ωc_c⁄√˘_¥ogøm_4_cb
, 
d©a
) != 0) {

1099 
	}
}

1102 
	$Ωc_c⁄√˘_p‹t_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
,

1103 
p‹t
,

1104 
¥ogøm
, 
vîsi⁄
,

1105 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

1107 
Ωc_cb_d©a
 *
d©a
;

1109 
d©a
 = 
	`ˇŒoc
(1, (
Ωc_cb_d©a
));

1110 i‡(
d©a
 =
NULL
) {

1113 
d©a
->
£rvî
 = 
	`°rdup
(server);

1114 
d©a
->
¥ogøm
 =Örogram;

1115 
d©a
->
vîsi⁄
 = version;

1117 
d©a
->
cb
 = cb;

1118 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1120 i‡(
	`Ωc_c⁄√˘_p‹t_öã∫Æ
(
Ωc
, 
p‹t
, 
d©a
)) {

1121 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo start connection. %s",

1122 
	`Ωc_gë_îr‹
(
Ωc
));

1123 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1127 
	}
}

1130 
	$Ωc_c⁄√˘_¥ogøm_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
,

1131 
¥ogøm
, 
vîsi⁄
,

1132 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

1134 
Ωc_cb_d©a
 *
d©a
;

1136 
d©a
 = 
	`ˇŒoc
(1, (
Ωc_cb_d©a
));

1137 i‡(
d©a
 =
NULL
) {

1140 
d©a
->
£rvî
 = 
	`°rdup
(server);

1141 
d©a
->
¥ogøm
 =Örogram;

1142 
d©a
->
vîsi⁄
 = version;

1144 
d©a
->
cb
 = cb;

1145 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1147 i‡(
	`Ωc_c⁄√˘_async
(
Ωc
, 
£rvî
, 111, 
Ωc_c⁄√˘_¥ogøm_1_cb
,

1148 
d©a
) != 0) {

1149 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo start connection. %s",

1150 
	`Ωc_gë_îr‹
(
Ωc
));

1151 
	`‰ì_Ωc_cb_d©a
(
d©a
);

1155 
	}
}

1158 
	$‰ì_nfs_cb_d©a
(
nfs_cb_d©a
 *
d©a
)

1160 i‡(
d©a
->
c⁄töue_d©a
 && d©a->
‰ì_c⁄töue_d©a
) {

1161 
d©a
->
	`‰ì_c⁄töue_d©a
(d©a->
c⁄töue_d©a
);

1164 
	`‰ì
(
d©a
->
ßved_∑th
);

1165 
	`‰ì
(
d©a
->
fh
.
vÆ
);

1166 i‡(!
d©a
->
nŸ_my_buf„r
) {

1167 
	`‰ì
(
d©a
->
buf„r
);

1170 
	`‰ì
(
d©a
);

1171 
	}
}

1174 
	$nfs_‰ì_nfsfh
(
nfsfh
 *nfsfh)

1176 i‡(
nfsfh
->
fh
.
vÆ
 !
NULL
) {

1177 
	`‰ì
(
nfsfh
->
fh
.
vÆ
);

1178 
nfsfh
->
fh
.
Àn
 = 0;

1179 
nfsfh
->
fh
.
vÆ
 = 
NULL
;

1181 
	`‰ì
(
nfsfh
);

1182 
	}
}

1188 
	$_nfs_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

1189 c⁄° *
exp‹t
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1191 
nfs
->
nfsi
->
vîsi⁄
) {

1192 
NFS_V3
:

1193  
	`nfs3_mou¡_async
(
nfs
, 
£rvî
, 
exp‹t
, 
cb
, 
¥iv©e_d©a
);

1194 
NFS_V4
:

1195  
	`nfs4_mou¡_async
(
nfs
, 
£rvî
, 
exp‹t
, 
cb
, 
¥iv©e_d©a
);

1197 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1198 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1201 
	}
}

1203 
	$nfs_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

1204 c⁄° *
exp‹t
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1206  
	`_nfs_mou¡_async
(
nfs
, 
£rvî
,

1207 
exp‹t
, 
cb
, 
¥iv©e_d©a
);

1208 
	}
}

1210 
	$nfs_avi_func
(){

1211 
	`¥ötf
("THIS IS A FUNCTION OF LIBNFS THAT ONLY PRINTS \n");

1212 
	}
}

1219 
	$nfs_umou¡_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1221 
nfs
->
nfsi
->
vîsi⁄
) {

1222 
NFS_V3
:

1223  
	`nfs3_umou¡_async
(
nfs
, 
cb
, 
¥iv©e_d©a
);

1224 
NFS_V4
:

1226 (*
cb
)(0, 
nfs
, 
NULL
, 
¥iv©e_d©a
);

1229 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1230 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1233 
	}
}

1236 
	$nfs_n‹mÆize_∑th
(
nfs_c⁄ãxt
 *
nfs
, *
∑th
)

1238 *
°r
;

1239 
size_t
 
Àn
;

1242 (
°r
 = 
	`°r°r
(
∑th
, "//"))) {

1243 *
°r
) {

1244 *
°r
 = *(str + 1);

1245 
°r
++;

1250 (
°r
 = 
	`°r°r
(
∑th
, "/./"))) {

1251 *(
°r
 + 1)) {

1252 *
°r
 = *(str + 2);

1253 
°r
++;

1258 i‡(!
	`°∫cmp
(
∑th
, "/../", 4)) {

1259 
	`nfs_£t_îr‹
(
nfs
,

1266 i‡(
∑th
[0] != '/') {

1267 
	`nfs_£t_îr‹
(
nfs
,

1273 (
°r
 = 
	`°r°r
(
∑th
, "/../"))) {

1274 *
tmp
;

1276 i‡(!
	`°∫cmp
(
∑th
, "/../", 4)) {

1277 
	`nfs_£t_îr‹
(
nfs
,

1283 
tmp
 = 
°r
 - 1;

1284 *
tmp
 != '/') {

1285 
tmp
--;

1287 
°r
 += 3;

1288 (*(
tmp
++Ë*(
°r
++)) != '\0')

1293 
Àn
 = 
	`°æí
(
∑th
);

1294 i‡(
Àn
 > 1) {

1295 i‡(
∑th
[
Àn
 - 1] == '/') {

1296 
∑th
[
Àn
 - 1] = '\0';

1297 
Àn
--;

1300 i‡(
∑th
[0] == '\0') {

1301 
	`nfs_£t_îr‹
(
nfs
,

1308 i‡(
Àn
 >= 2) {

1309 i‡(!
	`°rcmp
(&
∑th
[
Àn
 - 2], "/.")) {

1310 
∑th
[
Àn
 - 2] = '\0';

1311 
Àn
 -= 2;

1316 i‡(!
	`°rcmp
(
∑th
, "/..")) {

1317 
	`nfs_£t_îr‹
(
nfs
,

1324 i‡(
Àn
 >= 3) {

1325 i‡(!
	`°rcmp
(&
∑th
[
Àn
 - 3], "/..")) {

1326 *
tmp
 = &
∑th
[
Àn
 - 3];

1327 *--
tmp
 != '/')

1329 *
tmp
 = '\0';

1334 
	}
}

1337 
	$nfs_°©_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1338 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1340 
nfs
->
nfsi
->
vîsi⁄
) {

1341 
NFS_V3
:

1342  
	`nfs3_°©_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1344 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv4",

1345 
__FUNCTION__
);

1348 
	}
}

1351 
	$nfs_°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1352 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1354 
nfs
->
nfsi
->
vîsi⁄
) {

1355 
NFS_V3
:

1356  
	`nfs3_°©64_async
(
nfs
, 
∑th
, 0,

1357 
cb
, 
¥iv©e_d©a
);

1358 
NFS_V4
:

1359  
	`nfs4_°©64_async
(
nfs
, 
∑th
, 0,

1360 
cb
, 
¥iv©e_d©a
);

1362 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1363 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1366 
	}
}

1369 
	$nfs_l°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1370 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1372 
nfs
->
nfsi
->
vîsi⁄
) {

1373 
NFS_V3
:

1374  
	`nfs3_°©64_async
(
nfs
, 
∑th
, 1,

1375 
cb
, 
¥iv©e_d©a
);

1376 
NFS_V4
:

1377  
	`nfs4_°©64_async
(
nfs
, 
∑th
, 1,

1378 
cb
, 
¥iv©e_d©a
);

1380 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1381 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1384 
	}
}

1387 
	$nfs_›í2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

1388 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1390 
nfs
->
nfsi
->
vîsi⁄
) {

1391 
NFS_V3
:

1392  
	`nfs3_›í_async
(
nfs
, 
∑th
, 
Êags
, 
mode
,

1393 
cb
, 
¥iv©e_d©a
);

1394 
NFS_V4
:

1395  
	`nfs4_›í_async
(
nfs
, 
∑th
, 
Êags
, 
mode
,

1396 
cb
, 
¥iv©e_d©a
);

1398 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1399 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1402 
	}
}

1405 
	$nfs_›í_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

1406 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1408  
	`nfs_›í2_async
(
nfs
, 
∑th
, 
Êags
, 0666 & ~nfs->
nfsi
->
mask
,

1409 
cb
, 
¥iv©e_d©a
);

1410 
	}
}

1413 
	$nfs_chdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1414 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1416 
nfs
->
nfsi
->
vîsi⁄
) {

1417 
NFS_V3
:

1418  
	`nfs3_chdú_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1419 
NFS_V4
:

1420  
	`nfs4_chdú_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1422 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1423 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1426 
	}
}

1429 
	$nfs_¥ód_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1430 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

1431 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1433 
nfs
->
nfsi
->
vîsi⁄
) {

1434 
NFS_V3
:

1435  
	`nfs3_¥ód_async_öã∫Æ
(
nfs
, 
nfsfh
,

1436 
buf
, 
cou¡
, 
off£t
,

1437 
cb
, 
¥iv©e_d©a
, 0);

1438 
NFS_V4
:

1439  
	`nfs4_¥ód_async_öã∫Æ
(
nfs
, 
nfsfh
,

1440 
buf
, 
cou¡
, 
off£t
,

1441 
cb
, 
¥iv©e_d©a
, 0);

1443 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1444 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1447 
	}
}

1450 
	$nfs_ªad_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1451 *
buf
, 
size_t
 
cou¡
,

1452 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1454 
nfs
->
nfsi
->
vîsi⁄
) {

1455 
NFS_V3
:

1456  
	`nfs3_¥ód_async_öã∫Æ
(
nfs
, 
nfsfh
,

1457 
buf
, 
cou¡
, 
nfsfh
->
off£t
,

1458 
cb
, 
¥iv©e_d©a
, 1);

1459 
NFS_V4
:

1460  
	`nfs4_¥ód_async_öã∫Æ
(
nfs
, 
nfsfh
,

1461 
buf
, 
cou¡
, 
nfsfh
->
off£t
,

1462 
cb
, 
¥iv©e_d©a
, 1);

1464 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1465 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1468 
	}
}

1471 
	$nfs_pwrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1472 c⁄° *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

1473 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1475 
nfs
->
nfsi
->
vîsi⁄
) {

1476 
NFS_V3
:

1477  
	`nfs3_pwrôe_async_öã∫Æ
(
nfs
, 
nfsfh
,

1478 
buf
, 
cou¡
, 
off£t
,

1479 
cb
, 
¥iv©e_d©a
, 0);

1480 
NFS_V4
:

1482  
	`nfs4_pwrôe_async_öã∫Æ
(
nfs
, 
nfsfh
, 
off£t
,

1483 (
size_t
)
cou¡
, 
buf
,

1484 
cb
, 
¥iv©e_d©a
, 0);

1486 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d.",

1487 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1490 
	}
}

1493 
	$nfs_wrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1494 c⁄° *
buf
, 
size_t
 
cou¡
,

1495 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1497 
nfs
->
nfsi
->
vîsi⁄
) {

1498 
NFS_V3
:

1499  
	`nfs3_wrôe_async
(
nfs
, 
nfsfh
,

1500 
buf
, 
cou¡
,

1501 
cb
, 
¥iv©e_d©a
);

1502 
NFS_V4
:

1504  
	`nfs4_wrôe_async
(
nfs
, 
nfsfh
, 
cou¡
, 
buf
,

1505 
cb
, 
¥iv©e_d©a
);

1507 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1508 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1511 
	}
}

1514 
	$nfs_˛o£_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

1515 *
¥iv©e_d©a
)

1517 
nfs
->
nfsi
->
vîsi⁄
) {

1518 
NFS_V3
:

1519  
	`nfs3_˛o£_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1520 
NFS_V4
:

1521  
	`nfs4_˛o£_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1523 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1524 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1527 
	}
}

1530 
	$nfs_f°©_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

1531 *
¥iv©e_d©a
)

1533 
nfs
->
nfsi
->
vîsi⁄
) {

1534 
NFS_V3
:

1535  
	`nfs3_f°©_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1537 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv4",

1538 
__FUNCTION__
);

1541 
	}
}

1544 
	$nfs_f°©64_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

1545 *
¥iv©e_d©a
)

1547 
nfs
->
nfsi
->
vîsi⁄
) {

1548 
NFS_V3
:

1549  
	`nfs3_f°©64_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1550 
NFS_V4
:

1551  
	`nfs4_f°©64_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1553 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1554 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1557 
	}
}

1560 
	$nfs_fsync_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

1561 *
¥iv©e_d©a
)

1563 
nfs
->
nfsi
->
vîsi⁄
) {

1564 
NFS_V3
:

1565  
	`nfs3_fsync_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1566 
NFS_V4
:

1567  
	`nfs4_fsync_async
(
nfs
, 
nfsfh
, 
cb
, 
¥iv©e_d©a
);

1569 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1570 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1573 
	}
}

1576 
	$nfs_·runˇã_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1577 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1579 
nfs
->
nfsi
->
vîsi⁄
) {

1580 
NFS_V3
:

1581  
	`nfs3_·runˇã_async
(
nfs
, 
nfsfh
, 
Àngth
,

1582 
cb
, 
¥iv©e_d©a
);

1583 
NFS_V4
:

1584  
	`nfs4_·runˇã_async
(
nfs
, 
nfsfh
, 
Àngth
,

1585 
cb
, 
¥iv©e_d©a
);

1587 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1588 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1591 
	}
}

1594 
	$nfs_åunˇã_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uöt64_t
 
Àngth
,

1595 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1597 
nfs
->
nfsi
->
vîsi⁄
) {

1598 
NFS_V3
:

1599  
	`nfs3_åunˇã_async
(
nfs
, 
∑th
, 
Àngth
, 
cb
, 
¥iv©e_d©a
);

1600 
NFS_V4
:

1601  
	`nfs4_åunˇã_async
(
nfs
, 
∑th
, 
Àngth
, 
cb
, 
¥iv©e_d©a
);

1603 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1604 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1607 
	}
}

1610 
	$nfs_mkdú2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1611 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1613 
nfs
->
nfsi
->
vîsi⁄
) {

1614 
NFS_V3
:

1615  
	`nfs3_mkdú2_async
(
nfs
, 
∑th
, 
mode
, 
cb
, 
¥iv©e_d©a
);

1616 
NFS_V4
:

1617  
	`nfs4_mkdú2_async
(
nfs
, 
∑th
, 
mode
, 
cb
, 
¥iv©e_d©a
);

1619 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1620 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1623 
	}
}

1626 
	$nfs_mkdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1627 *
¥iv©e_d©a
)

1629  
	`nfs_mkdú2_async
(
nfs
, 
∑th
, 0755, 
cb
, 
¥iv©e_d©a
);

1630 
	}
}

1633 
	$nfs_rmdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1634 *
¥iv©e_d©a
)

1636 
nfs
->
nfsi
->
vîsi⁄
) {

1637 
NFS_V3
:

1638  
	`nfs3_rmdú_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1639 
NFS_V4
:

1640  
	`nfs4_rmdú_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1642 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1643 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1646 
	}
}

1649 
	$nfs_¸ót_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1650 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1652 
nfs
->
nfsi
->
vîsi⁄
) {

1653 
NFS_V3
:

1654  
	`nfs3_¸ót_async
(
nfs
, 
∑th
, 
mode
,

1655 
cb
, 
¥iv©e_d©a
);

1656 
NFS_V4
:

1657  
	`nfs4_¸ót_async
(
nfs
, 
∑th
, 
mode
,

1658 
cb
, 
¥iv©e_d©a
);

1660 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1661 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1664 
	}
}

1667 
	$nfs_u∆ök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1668 *
¥iv©e_d©a
)

1670 
nfs
->
nfsi
->
vîsi⁄
) {

1671 
NFS_V3
:

1672  
	`nfs3_u∆ök_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1673 
NFS_V4
:

1674  
	`nfs4_u∆ök_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1676 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1677 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1680 
	}
}

1683 
	$nfs_mknod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
, 
dev
,

1684 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1686 
nfs
->
nfsi
->
vîsi⁄
) {

1687 
NFS_V3
:

1688  
	`nfs3_mknod_async
(
nfs
, 
∑th
, 
mode
, 
dev
, 
cb
, 
¥iv©e_d©a
);

1689 
NFS_V4
:

1690  
	`nfs4_mknod_async
(
nfs
, 
∑th
, 
mode
, 
dev
, 
cb
, 
¥iv©e_d©a
);

1692 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1693 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1696 
	}
}

1699 
	$nfs_›ídú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1700 *
¥iv©e_d©a
)

1702 
nfs
->
nfsi
->
vîsi⁄
) {

1703 
NFS_V3
:

1704  
	`nfs3_›ídú_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1705 
NFS_V4
:

1706  
	`nfs4_›ídú_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1708 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv4",

1709 
__FUNCTION__
);

1712 
	}
}

1714 
nfsdúít
 *

1715 
	$nfs_ªaddú
(
nfs_c⁄ãxt
 *
nfs
 
_U_
, 
nfsdú
 *nfsdir)

1717 
nfsdúít
 *nfsdúíà
nfsdú
->
cuºít
;

1719 i‡(
nfsdú
->
cuºít
 !
NULL
) {

1720 
nfsdú
->
cuºít
 =Çfsdú->cuºít->
√xt
;

1722  
nfsdúít
;

1723 
	}
}

1726 
	$nfs_ãŒdú
(
nfs_c⁄ãxt
 *
nfs
 
_U_
, 
nfsdú
 *nfsdir)

1728 
i
;

1729 
nfsdúít
 *
tmp
;

1731 
i
 = 0, 
tmp
 = 
nfsdú
->
íåõs
;Åmp; i++,Åm∞tmp->
√xt
) {

1732 i‡(
tmp
 =
nfsdú
->
cuºít
) {

1733  
i
;

1737 
	}
}

1740 
	$nfs_£ekdú
(
nfs_c⁄ãxt
 *
nfs
 
_U_
, 
nfsdú
 *nfsdú, 
loc
)

1742 i‡(
loc
 < 0) {

1745 
nfsdú
->
cuºít
 =Çfsdú->
íåõs
;

1746 
nfsdú
->
cuºít
 && 
loc
--;

1747 
nfsdú
->
cuºít
 =Çfsdú->cuºít->
√xt
) {

1749 
	}
}

1752 
	$nfs_ªwöddú
(
nfs_c⁄ãxt
 *
nfs
 
_U_
, 
nfsdú
 *nfsdir)

1754 
nfsdú
->
cuºít
 =Çfsdú->
íåõs
;

1755 
	}
}

1758 
	$nfs_˛o£dú
(
nfs_c⁄ãxt
 *
nfs
, 
nfsdú
 *nfsdir)

1760 i‡(
nfs
 &&Çfs->
nfsi
->
dúˇche_íabÀd
) {

1761 
	`nfs_dúˇche_add
(
nfs
, 
nfsdú
);

1763 
	`nfs_‰ì_nfsdú
(
nfsdú
);

1765 
	}
}

1768 
	$nfs_gëcwd
(
nfs_c⁄ãxt
 *
nfs
, c⁄° **
cwd
)

1770 i‡(
cwd
) {

1771 *
cwd
 = 
nfs
->
nfsi
->cwd;

1773 
	}
}

1776 
	$nfs_l£ek_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
öt64_t
 
off£t
,

1777 
whí˚
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1779 
nfs
->
nfsi
->
vîsi⁄
) {

1780 
NFS_V3
:

1781  
	`nfs3_l£ek_async
(
nfs
, 
nfsfh
, 
off£t
, 
whí˚
,

1782 
cb
, 
¥iv©e_d©a
);

1783 
NFS_V4
:

1784  
	`nfs4_l£ek_async
(
nfs
, 
nfsfh
, 
off£t
, 
whí˚
,

1785 
cb
, 
¥iv©e_d©a
);

1787 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1788 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1791 
	}
}

1794 
	$nfs_lockf_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1795 
nfs4_lock_›
 
›
, 
uöt64_t
 
cou¡
,

1796 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1798 
nfs
->
nfsi
->
vîsi⁄
) {

1799 
NFS_V4
:

1800  
	`nfs4_lockf_async
(
nfs
, 
nfsfh
, 
›
, 
cou¡
,

1801 
cb
, 
¥iv©e_d©a
);

1803 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1804 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1807 
	}
}

1810 
	$nfs_f˙é_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

1811 
nfs4_f˙é_›
 
cmd
, *
¨g
,

1812 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1814 
nfs
->
nfsi
->
vîsi⁄
) {

1815 
NFS_V4
:

1816  
	`nfs4_f˙é_async
(
nfs
, 
nfsfh
, 
cmd
, 
¨g
,

1817 
cb
, 
¥iv©e_d©a
);

1819 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1820 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1823 
	}
}

1826 
	$nfs_°©vfs_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1827 *
¥iv©e_d©a
)

1829 
nfs
->
nfsi
->
vîsi⁄
) {

1830 
NFS_V3
:

1831  
	`nfs3_°©vfs_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1832 
NFS_V4
:

1833  
	`nfs4_°©vfs_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1835 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1836 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1839 
	}
}

1842 
	$nfs_°©vfs64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1843 *
¥iv©e_d©a
)

1845 
nfs
->
nfsi
->
vîsi⁄
) {

1846 
NFS_V3
:

1847  
	`nfs3_°©vfs64_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1848 
NFS_V4
:

1849  
	`nfs4_°©vfs64_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1851 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1852 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1855 
	}
}

1858 
	$nfs_ªadlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1859 *
¥iv©e_d©a
)

1861 
nfs
->
nfsi
->
vîsi⁄
) {

1862 
NFS_V3
:

1863  
	`nfs3_ªadlök_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1864 
NFS_V4
:

1865  
	`nfs4_ªadlök_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1867 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1868 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1871 
	}
}

1874 
	$nfs_chmod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1875 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1877 
nfs
->
nfsi
->
vîsi⁄
) {

1878 
NFS_V3
:

1879  
	`nfs3_chmod_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
mode
,

1880 
cb
, 
¥iv©e_d©a
);

1881 
NFS_V4
:

1882  
	`nfs4_chmod_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
mode
,

1883 
cb
, 
¥iv©e_d©a
);

1885 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1886 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1889 
	}
}

1892 
	$nfs_lchmod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1893 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1895 
nfs
->
nfsi
->
vîsi⁄
) {

1896 
NFS_V3
:

1897  
	`nfs3_chmod_async_öã∫Æ
(
nfs
, 
∑th
, 1, 
mode
,

1898 
cb
, 
¥iv©e_d©a
);

1899 
NFS_V4
:

1900  
	`nfs4_chmod_async_öã∫Æ
(
nfs
, 
∑th
, 1, 
mode
,

1901 
cb
, 
¥iv©e_d©a
);

1903 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1904 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1907 
	}
}

1910 
	$nfs_fchmod_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
mode
,

1911 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1913 
nfs
->
nfsi
->
vîsi⁄
) {

1914 
NFS_V3
:

1915  
	`nfs3_fchmod_async
(
nfs
, 
nfsfh
, 
mode
, 
cb
, 
¥iv©e_d©a
);

1916 
NFS_V4
:

1917  
	`nfs4_fchmod_async
(
nfs
, 
nfsfh
, 
mode
, 
cb
, 
¥iv©e_d©a
);

1919 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1920 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1923 
	}
}

1926 
	$nfs_chown_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
, 
gid
,

1927 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1929 
nfs
->
nfsi
->
vîsi⁄
) {

1930 
NFS_V3
:

1931  
	`nfs3_chown_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
uid
, 
gid
,

1932 
cb
, 
¥iv©e_d©a
);

1933 
NFS_V4
:

1934  
	`nfs4_chown_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
uid
, 
gid
,

1935 
cb
, 
¥iv©e_d©a
);

1937 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1938 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1941 
	}
}

1944 
	$nfs_lchown_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uid
, 
gid
,

1945 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1947 
nfs
->
nfsi
->
vîsi⁄
) {

1948 
NFS_V3
:

1949  
	`nfs3_chown_async_öã∫Æ
(
nfs
, 
∑th
, 1, 
uid
, 
gid
,

1950 
cb
, 
¥iv©e_d©a
);

1951 
NFS_V4
:

1952  
	`nfs4_chown_async_öã∫Æ
(
nfs
, 
∑th
, 1, 
uid
, 
gid
,

1953 
cb
, 
¥iv©e_d©a
);

1955 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1956 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1959 
	}
}

1962 
	$nfs_fchown_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uid
,

1963 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1965 
nfs
->
nfsi
->
vîsi⁄
) {

1966 
NFS_V3
:

1967  
	`nfs3_fchown_async
(
nfs
, 
nfsfh
, 
uid
, 
gid
,

1968 
cb
, 
¥iv©e_d©a
);

1969 
NFS_V4
:

1970  
	`nfs4_fchown_async
(
nfs
, 
nfsfh
, 
uid
, 
gid
,

1971 
cb
, 
¥iv©e_d©a
);

1973 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1974 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1977 
	}
}

1980 
	$nfs_utimes_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1981 
timevÆ
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1983 
nfs
->
nfsi
->
vîsi⁄
) {

1984 
NFS_V3
:

1985  
	`nfs3_utimes_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
times
,

1986 
cb
, 
¥iv©e_d©a
);

1987 
NFS_V4
:

1988  
	`nfs4_utimes_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
times
,

1989 
cb
, 
¥iv©e_d©a
);

1991 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

1992 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

1995 
	}
}

1998 
	$nfs_lutimes_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1999 
timevÆ
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2001 
nfs
->
nfsi
->
vîsi⁄
) {

2002 
NFS_V3
:

2003  
	`nfs3_utimes_async_öã∫Æ
(
nfs
, 
∑th
, 1, 
times
,

2004 
cb
, 
¥iv©e_d©a
);

2005 
NFS_V4
:

2006  
	`nfs4_utimes_async_öã∫Æ
(
nfs
, 
∑th
, 1, 
times
,

2007 
cb
, 
¥iv©e_d©a
);

2009 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

2010 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

2013 
	}
}

2016 
	$nfs_utime_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

2017 
utimbuf
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2019 
nfs
->
nfsi
->
vîsi⁄
) {

2020 
NFS_V3
:

2021  
	`nfs3_utime_async
(
nfs
, 
∑th
, 
times
, 
cb
, 
¥iv©e_d©a
);

2022 
NFS_V4
:

2023  
	`nfs4_utime_async
(
nfs
, 
∑th
, 
times
, 
cb
, 
¥iv©e_d©a
);

2025 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv4",

2026 
__FUNCTION__
);

2029 
	}
}

2032 
	$nfs_ac˚ss_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

2033 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2035 
nfs
->
nfsi
->
vîsi⁄
) {

2036 
NFS_V3
:

2037  
	`nfs3_ac˚ss_async
(
nfs
, 
∑th
, 
mode
, 
cb
, 
¥iv©e_d©a
);

2038 
NFS_V4
:

2039  
	`nfs4_ac˚ss_async
(
nfs
, 
∑th
, 
mode
, 
cb
, 
¥iv©e_d©a
);

2041 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

2042 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

2045 
	}
}

2048 
	$nfs_ac˚ss2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

2049 *
¥iv©e_d©a
)

2051 
nfs
->
nfsi
->
vîsi⁄
) {

2052 
NFS_V3
:

2053  
	`nfs3_ac˚ss2_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

2054 
NFS_V4
:

2055  
	`nfs4_ac˚ss2_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

2057 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv4",

2058 
__FUNCTION__
);

2061 
	}
}

2064 
	$nfs_symlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
èrgë
,

2065 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2067 
nfs
->
nfsi
->
vîsi⁄
) {

2068 
NFS_V3
:

2069  
	`nfs3_symlök_async
(
nfs
, 
èrgë
, 
√w∑th
,

2070 
cb
, 
¥iv©e_d©a
);

2071 
NFS_V4
:

2072  
	`nfs4_symlök_async
(
nfs
, 
èrgë
, 
√w∑th
,

2073 
cb
, 
¥iv©e_d©a
);

2075 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

2076 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

2079 
	}
}

2082 
	$nfs_ª«me_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

2083 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2085 
nfs
->
nfsi
->
vîsi⁄
) {

2086 
NFS_V3
:

2087  
	`nfs3_ª«me_async
(
nfs
, 
ﬁd∑th
, 
√w∑th
,

2088 
cb
, 
¥iv©e_d©a
);

2089 
NFS_V4
:

2090  
	`nfs4_ª«me_async
(
nfs
, 
ﬁd∑th
, 
√w∑th
,

2091 
cb
, 
¥iv©e_d©a
);

2093 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

2094 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

2097 
	}
}

2100 
	$nfs_lök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

2101 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2103 
nfs
->
nfsi
->
vîsi⁄
) {

2104 
NFS_V3
:

2105  
	`nfs3_lök_async
(
nfs
, 
ﬁd∑th
, 
√w∑th
,

2106 
cb
, 
¥iv©e_d©a
);

2107 
NFS_V4
:

2108  
	`nfs4_lök_async
(
nfs
, 
ﬁd∑th
, 
√w∑th
,

2109 
cb
, 
¥iv©e_d©a
);

2111 
	`nfs_£t_îr‹
(
nfs
, "%s doesÇot support NFSv%d",

2112 
__FUNCTION__
, 
nfs
->
nfsi
->
vîsi⁄
);

2115 
	}
}

2120 
size_t


2121 
	$nfs_gë_ªadmax
(
nfs_c⁄ãxt
 *
nfs
)

2123  
nfs
->
nfsi
->
ªadmax
;

2124 
	}
}

2126 
	$nfs_£t_ªadmax
(
nfs_c⁄ãxt
 *
nfs
, 
size_t
 
ªadmax
)

2128 
nfs
->
nfsi
->
ªadmax
 =Ñeadmax;

2129 
	}
}

2134 
size_t


2135 
	$nfs_gë_wrôemax
(
nfs_c⁄ãxt
 *
nfs
)

2137  
nfs
->
nfsi
->
wrôemax
;

2138 
	}
}

2140 
	$nfs_£t_wrôemax
(
nfs_c⁄ãxt
 *
nfs
, 
size_t
 
wrôemax
)

2142 
nfs
->
nfsi
->
wrôemax
 = writemax;

2143 
	}
}

2146 
	$nfs_£t_t˝_syn˙t
(
nfs_c⁄ãxt
 *
nfs
, 
v
) {

2147 
	`Ωc_£t_t˝_syn˙t
(
nfs
->
Ωc
, 
v
);

2148 
	}
}

2151 
	$nfs_£t_uid
(
nfs_c⁄ãxt
 *
nfs
, 
uid
) {

2152 
	`Ωc_£t_uid
(
nfs
->
Ωc
, 
uid
);

2153 
	}
}

2156 
	$nfs_£t_gid
(
nfs_c⁄ãxt
 *
nfs
, 
gid
) {

2157 
	`Ωc_£t_gid
(
nfs
->
Ωc
, 
gid
);

2158 
	}
}

2161 
	$nfs_£t_auxûüry_gids
(
nfs_c⁄ãxt
 *
nfs
, 
uöt32_t
 
Àn
, uöt32_t* 
gids
) {

2162 
	`Ωc_£t_auxûüry_gids
(
nfs
->
Ωc
, 
Àn
, 
gids
);

2163 
	}
}

2166 
	$nfs_£t_debug
(
nfs_c⁄ãxt
 *
nfs
, 
Àvñ
) {

2167 
	`Ωc_£t_debug
(
nfs
->
Ωc
, 
Àvñ
);

2168 
	}
}

2171 
	$nfs_£t_auto_åavî£_mou¡s
(
nfs_c⁄ãxt
 *
nfs
, 
íabÀd
) {

2172 
nfs
->
nfsi
->
auto_åavî£_mou¡s
 = 
íabÀd
;

2173 
	}
}

2176 
	$nfs_£t_dúˇche
(
nfs_c⁄ãxt
 *
nfs
, 
íabÀd
) {

2177 
nfs
->
nfsi
->
dúˇche_íabÀd
 = 
íabÀd
;

2178 
	}
}

2181 
	$nfs_£t_aut‹ec⁄√˘
(
nfs_c⁄ãxt
 *
nfs
, 
num_ªåõs
) {

2187 
nfs
->
nfsi
->
auto_ªc⁄√˘
 = 
num_ªåõs
;

2188 
	}
}

2191 
	$nfs_£t_ªå™s
(
nfs_c⁄ãxt
 *
nfs
, 
ªå™s
) {

2197 
	`as£π
(
ªå™s
 >= 0);

2198 
nfs
->
nfsi
->
ªå™s
 =Ñetrans;

2199 
	}
}

2202 
	$nfs_£t_vîsi⁄
(
nfs_c⁄ãxt
 *
nfs
, 
vîsi⁄
) {

2203 
vîsi⁄
) {

2204 
NFS_V3
:

2205 
NFS_V4
:

2206 #ifde‡
HAVE_TLS


2207 
nfs
->
Ωc
->
nfs_vîsi⁄
 = 
vîsi⁄
;

2209 
nfs
->
nfsi
->
vîsi⁄
 = version;

2210 
nfs
->
nfsi
->
deÁu…_vîsi⁄
 = 0;

2213 
	`nfs_£t_îr‹
(
nfs
, "NFS vîsi⁄ %d i†nŸ suµ‹ãd", 
vîsi⁄
);

2217 
	}
}

2220 
	$nfs_gë_vîsi⁄
(
nfs_c⁄ãxt
 *
nfs
) {

2221  
nfs
->
nfsi
->
vîsi⁄
;

2222 
	}
}

2225 
	$nfs_£t_nf•‹t
(
nfs_c⁄ãxt
 *
nfs
, 
p‹t
) {

2226 
nfs
->
nfsi
->
nf•‹t
 = 
p‹t
;

2227 
	}
}

2230 
	$nfs_£t_mou¡p‹t
(
nfs_c⁄ãxt
 *
nfs
, 
p‹t
) {

2231 
nfs
->
nfsi
->
mou¡p‹t
 = 
p‹t
;

2232 
	}
}

2235 
	$nfs_£t_ªaddú_max_buf„r_size
(
nfs_c⁄ãxt
 *
nfs
, 
uöt32_t
 
dúcou¡
, uöt32_à
maxcou¡
) {

2236 
nfs
->
nfsi
->
ªaddú_dúcou¡
 = 
dúcou¡
;

2237 
nfs
->
nfsi
->
ªaddú_maxcou¡
 = 
maxcou¡
;

2238 
	}
}

2241 
	$nfs_£t_îr‹
(
nfs_c⁄ãxt
 *
nfs
, *
îr‹_°rög
, ...)

2243 
va_li°
 
≠
;

2244 *
ﬁd_îr‹_°rög
;

2246 #ifde‡
HAVE_MULTITHREADING


2250 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2251 
	`nfs_mt_muãx_lock
(&
nfs
->
Ωc
->
Ωc_muãx
);

2254 
ﬁd_îr‹_°rög
 = 
nfs
->
îr‹_°rög
;

2255 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

2256 
nfs
->
îr‹_°rög
 = 
	`mÆloc
(1024);

2257 i‡(
nfs
->
îr‹_°rög
 =
NULL
) {

2258 
nfs
->
îr‹_°rög
 = 
	`disˇrd_c⁄°
(
oom
);

2259 
föished
;

2261 
	`v¢¥ötf
(
nfs
->
îr‹_°rög
, 1024,Éº‹_°rög, 
≠
);

2262 
	`va_íd
(
≠
);

2264 
föished
:

2269 i‡(
ﬁd_îr‹_°rög
 && old_îr‹_°rög !
oom
) {

2270 
	`‰ì
(
ﬁd_îr‹_°rög
);

2272 #ifde‡
HAVE_MULTITHREADING


2273 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2274 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
Ωc
->
Ωc_muãx
);

2277 
	}
}

2280 
	$nfs_£t_îr‹_locked
(
nfs_c⁄ãxt
 *
nfs
, *
îr‹_°rög
, ...)

2282 
va_li°
 
≠
;

2283 *
ﬁd_îr‹_°rög
 = 
nfs
->
îr‹_°rög
;

2285 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

2286 
nfs
->
îr‹_°rög
 = 
	`mÆloc
(1024);

2287 i‡(
nfs
->
îr‹_°rög
 =
NULL
) {

2288 
	`‰ì
(
ﬁd_îr‹_°rög
);

2289 
nfs
->
îr‹_°rög
 = 
	`disˇrd_c⁄°
(
oom
);

2292 
	`v¢¥ötf
(
nfs
->
îr‹_°rög
, 1024,Éº‹_°rög, 
≠
);

2293 
	`va_íd
(
≠
);

2295 i‡(
ﬁd_îr‹_°rög
 && old_îr‹_°rög !
oom
) {

2296 
	`‰ì
(
ﬁd_îr‹_°rög
);

2298 
	}
}

2300 
	smou¡_cb_d©a
 {

2301 
Ωc_cb
 
	mcb
;

2302 *
	m¥iv©e_d©a
;

2303 *
	m£rvî
;

2307 
	$‰ì_mou¡_cb_d©a
(
mou¡_cb_d©a
 *
d©a
)

2309 i‡(
d©a
->
£rvî
 !
NULL
) {

2310 
	`‰ì
(
d©a
->
£rvî
);

2311 
d©a
->
£rvî
 = 
NULL
;

2314 
	`‰ì
(
d©a
);

2315 
	}
}

2318 
	$mou¡_exp‹t_5_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2319 *
¥iv©e_d©a
)

2321 
mou¡_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2323 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2325 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

2326 
d©a
->
	`cb
(
Ωc
, -
EFAULT
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

2327 
	`‰ì_mou¡_cb_d©a
(
d©a
);

2331 
d©a
->
	`cb
(
Ωc
, 0, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

2332 i‡(
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect") != 0) {

2333 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo disconnect\n");

2335 
	`‰ì_mou¡_cb_d©a
(
d©a
);

2336 
	}
}

2339 
	$mou¡_exp‹t_4_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2340 *
¥iv©e_d©a
)

2342 
mou¡_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2344 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2347 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

2349 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

2350 
d©a
->
	`cb
(
Ωc
, -
EFAULT
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

2351 
	`‰ì_mou¡_cb_d©a
(
d©a
);

2355 i‡(
	`Ωc_mou¡3_exp‹t_èsk
(
Ωc
, 
mou¡_exp‹t_5_cb
, 
d©a
Ë=
NULL
) {

2356 
d©a
->
	`cb
(
Ωc
, -
ENOMEM
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

2357 
	`‰ì_mou¡_cb_d©a
(
d©a
);

2360 
	}
}

2363 
	$mou¡_gëexp‹ts_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
, 
Ωc_cb
 
cb
,

2364 *
¥iv©e_d©a
)

2366 
mou¡_cb_d©a
 *
d©a
;

2368 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2370 
d©a
 = 
	`ˇŒoc
(1, (
mou¡_cb_d©a
));

2371 i‡(
d©a
 =
NULL
) {

2374 
d©a
->
cb
 = cb;

2375 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2376 
d©a
->
£rvî
 = 
	`°rdup
(server);

2377 i‡(
d©a
->
£rvî
 =
NULL
) {

2378 
	`‰ì_mou¡_cb_d©a
(
d©a
);

2381 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
Ωc
, 
d©a
->
£rvî
, 
MOUNT_PROGRAM
,

2382 
MOUNT_V3
, 
mou¡_exp‹t_4_cb
, 
d©a
) != 0) {

2383 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo start connection. %s",

2384 
	`Ωc_gë_îr‹
(
Ωc
));

2385 
	`‰ì_mou¡_cb_d©a
(
d©a
);

2390 
	}
}

2392 
Ωc_c⁄ãxt
 *

2393 
	$nfs_gë_Ωc_c⁄ãxt
(
nfs_c⁄ãxt
 *
nfs
)

2395 
	`as£π
(
nfs
->
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2396  
nfs
->
Ωc
;

2397 
	}
}

2400 
	$nfs_gë_£rvî
(
nfs_c⁄ãxt
 *
nfs
) {

2401  
nfs
->
nfsi
->
£rvî
;

2402 
	}
}

2405 
	$nfs_gë_exp‹t
(
nfs_c⁄ãxt
 *
nfs
) {

2406  
nfs
->
nfsi
->
exp‹t
;

2407 
	}
}

2409 c⁄° 
nfs_fh
 *

2410 
	$nfs_gë_roŸfh
(
nfs_c⁄ãxt
 *
nfs
) {

2411  &
nfs
->
nfsi
->
roŸfh
;

2412 
	}
}

2414 
nfs_fh
 *

2415 
	$nfs_gë_fh
(
nfsfh
 *nfsfh) {

2416  &
nfsfh
->
fh
;

2417 
	}
}

2419 
uöt16_t


2420 
	$nfs_umask
(
nfs_c⁄ãxt
 *
nfs
, 
uöt16_t
 
mask
) {

2421 
uöt16_t
 
tmp
 = 
nfs
->
nfsi
->
mask
;

2422 
nfs
->
nfsi
->
mask
 = mask;

2423  
tmp
;

2424 
	}
}

2430 
	$nfs_£t_pﬁl_timeout
(
nfs_c⁄ãxt
 *
nfs
, 
pﬁl_timeout
)

2432 
	`Ωc_£t_timeout
(
nfs
->
Ωc
,
pﬁl_timeout
);

2433 
	}
}

2439 
	$nfs_gë_pﬁl_timeout
(
nfs_c⁄ãxt
 *
nfs
)

2441  
	`Ωc_gë_pﬁl_timeout
(
nfs
->
Ωc
);

2442 
	}
}

2448 
	$nfs_£t_timeout
(
nfs_c⁄ãxt
 *
nfs
, 
timeout_m£cs
)

2458 
nfs
->
nfsi
->
timeout
 = 
timeout_m£cs
;

2460 
	`Ωc_£t_timeout
(
nfs
->
Ωc
, 
timeout_m£cs
);

2461 
	}
}

2467 
	$nfs_gë_timeout
(
nfs_c⁄ãxt
 *
nfs
)

2469  
	`Ωc_gë_timeout
(
nfs
->
Ωc
);

2470 
	}
}

2472 
Ωc_pdu
 *

2473 
	$Ωc_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
Ωc_cb
 
cb
,

2474 *
¥iv©e_d©a
)

2476 
Ωc_pdu
 *
pdu
;

2478 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
¥ogøm
, 
vîsi⁄
, 0, 
cb
, 
¥iv©e_d©a
,

2479 (
zdΩroc_t
)
zdr_void
, 0);

2480 i‡(
pdu
 =
NULL
) {

2481 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu "

2483  
NULL
;

2486 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

2487 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu "

2489  
NULL
;

2492  
pdu
;

2493 
	}
}

2495 #ifde‡
HAVE_TLS


2503 
Ωc_pdu
 *

2504 
	$Ωc_nuŒ_èsk_authés
(
Ωc_c⁄ãxt
 *
Ωc
, 
nfs_vîsi⁄
, 
Ωc_cb
 
cb
,

2505 *
¥iv©e_d©a
)

2507 
Ωc_pdu
 *
pdu
;

2508 
és_cb_d©a
 *
d©a
;

2511 
	`as£π
(
Ωc
->
u£_és
);

2512 
	`as£π
(
nfs_vîsi⁄
 =
NFS_V3
 ||Çfs_vîsi⁄ =
NFS_V4
);

2514 
d©a
 = 
	`ˇŒoc
(1, (*data));

2515 i‡(
d©a
 =
NULL
) {

2516 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÅls_cb_data "

2518  
NULL
;

2520 
d©a
->
cb
 = cb;

2521 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2528 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
nfs_vîsi⁄
, (0 | 0x80000000U),

2529 
Ωc_c⁄√˘_¥ogøm_4_1_cb
, 
d©a
,

2530 (
zdΩroc_t
)
zdr_void
, 0);

2531 i‡(
pdu
 =
NULL
) {

2532 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu "

2534 
	`‰ì_és_cb_d©a
(
d©a
);

2535  
NULL
;

2538 
Ωc
->
és_c⁄ãxt
.
°©e
 = 
TLS_HANDSHAKE_WAITING_FOR_STARTTLS
;

2540 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

2541 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu "

2543 
	`‰ì_és_cb_d©a
(
d©a
);

2544  
NULL
;

2547  
pdu
;

2548 
	}
}

	@lib/multithreading.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
AROS


23 
	~"¨os_com∑t.h
"

26 #ifde‡
PS2_EE


27 
	~"ps2_com∑t.h
"

30 #ifde‡
PS3_PPU


31 
	~"ps3_com∑t.h
"

34 #ifde‡
WIN32


35 
	~<wö32/wö32_com∑t.h
>

38 #i‚de‡
_GNU_SOURCE


39 
	#_GNU_SOURCE


	)

42 #ifde‡
HAVE_POLL_H


43 
	~<pﬁl.h
>

46 #ifde‡
HAVE_SYS_TIME_H


47 
	~<sys/time.h
>

50 
	~<°rög.h
>

51 
	~"libnfs.h
"

52 
	~"libnfs-øw.h
"

53 
	~"libnfs-¥iv©e.h
"

55 #ifde‡
HAVE_MULTITHREADING


57 #ifde‡
HAVE_PTHREAD


58 
	~<uni°d.h
>

59 
	~<sys/sysˇŒ.h
>

61 
nfs_tid_t
 
	$nfs_mt_gë_tid
()

63 #ifde‡
HAVE_PTHREAD_THREADID_NP


64 
nfs_tid_t
 
tid
;

65 
	`±hªad_thªadid_≈
(
NULL
, &
tid
);

66  
tid
;

67 #ñi‡
	`deföed
(
SYS_gëtid
)

68 
pid_t
 
tid
 = 
	`sysˇŒ
(
SYS_gëtid
);

69  
tid
;

73 
	}
}

75 *
	$nfs_mt_£rvi˚_thªad
(*
¨g
)

77 
nfs_c⁄ãxt
 *
nfs
 = (nfs_c⁄ãxà*)
¨g
;

78 
pﬁlfd
 
pfd
;

79 
ªvíts
;

80 
ªt
;

82 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
 = 1;

84 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

85 
pfd
.
fd
 = 
	`nfs_gë_fd
(
nfs
);

86 
pfd
.
evíts
 = 
	`nfs_which_evíts
(
nfs
);

87 
pfd
.
ªvíts
 = 0;

89 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
nfs
->
Ωc
->
pﬁl_timeout
);

90 i‡(
ªt
 < 0) {

91 
	`nfs_£t_îr‹
(
nfs
, "Poll failed");

92 
ªvíts
 = -1;

94 
ªvíts
 = 
pfd
.revents;

96 i‡(
	`nfs_£rvi˚
(
nfs
, 
ªvíts
) < 0) {

97 i‡(
ªvíts
 != -1)

98 
	`nfs_£t_îr‹
(
nfs
, "nfs_service failed");

101  
NULL
;

102 
	}
}

104 
	$nfs_mt_£rvi˚_thªad_°¨t
(
nfs_c⁄ãxt
 *
nfs
)

106 i‡(
	`±hªad_¸óã
(&
nfs
->
nfsi
->
£rvi˚_thªad
, 
NULL
,

107 &
nfs_mt_£rvi˚_thªad
, 
nfs
)) {

108 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start serviceÅhread");

111 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
 == 0) {

112 
time•ec
 
ts
 = {0, 1000000};

113 
	`«no¶ìp
(&
ts
, 
NULL
);

116 
	}
}

118 
	$nfs_mt_£rvi˚_thªad_°›
(
nfs_c⁄ãxt
 *
nfs
)

120 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
 = 0;

121 
	`±hªad_joö
(
nfs
->
nfsi
->
£rvi˚_thªad
, 
NULL
);

122 
	}
}

135 
	#DEBUG_PTHREAD_LOCKING_VIOLATIONS


	)

137 
	$nfs_mt_muãx_öô
(
libnfs_muãx_t
 *
muãx
)

139 
ªt
;

140 #ifde‡
DEBUG_PTHREAD_LOCKING_VIOLATIONS


141 
±hªad_muãx©å_t
 
©å
;

143 
ªt
 = 
	`±hªad_muãx©å_öô
(&
©å
);

144 i‡(
ªt
 != 0) {

145 
	`LOG
("±hªad_muãx©å_öô(ËÁûed: %d (%s)", 
ªt
, 
	`°ªº‹
(ret));

146 
	`as£π
(0);

147  
ªt
;

150 
ªt
 = 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_ERRORCHECK
);

151 i‡(
ªt
 != 0) {

152 
	`LOG
("±hªad_muãx©å_£ây≥(ËÁûed: %d (%s)", 
ªt
, 
	`°ªº‹
(ret));

153 
	`as£π
(0);

154  
ªt
;

157 
ªt
 = 
	`±hªad_muãx_öô
(
muãx
, &
©å
);

158 i‡(
ªt
 != 0) {

159 
	`LOG
("±hªad_muãx_öô(ËÁûed: %d (%s)", 
ªt
, 
	`°ªº‹
(ret));

160 
	`as£π
(0);

161  
ªt
;

164 
ªt
 = 
	`±hªad_muãx_öô
(
muãx
, 
NULL
);

165 
	`as£π
(
ªt
 == 0);

167  
ªt
;

168 
	}
}

170 
	$nfs_mt_muãx_de°roy
(
libnfs_muãx_t
 *
muãx
)

172  
	`±hªad_muãx_de°roy
(
muãx
);

173 
	}
}

175 
	$nfs_mt_muãx_lock
(
libnfs_muãx_t
 *
muãx
)

177 c⁄° 
ªt
 = 
	`±hªad_muãx_lock
(
muãx
);

179 i‡(
ªt
 != 0) {

180 
	`LOG
("±hªad_muãx_lock(ËÁûed: %d (%s)", 
ªt
, 
	`°ªº‹
(ret));

181 
	`as£π
(0);

184  
ªt
;

185 
	}
}

187 
	$nfs_mt_muãx_u∆ock
(
libnfs_muãx_t
 *
muãx
)

189 c⁄° 
ªt
 = 
	`±hªad_muãx_u∆ock
(
muãx
);

191 i‡(
ªt
 != 0) {

192 
	`LOG
("±hªad_muãx_u∆ock(ËÁûed: %d (%s)", 
ªt
, 
	`°ªº‹
(ret));

193 
	`as£π
(0);

196  
ªt
;

197 
	}
}

199 #i‡
deföed
(
__APPLE__
Ë&& deföed(
HAVE_DISPATCH_DISPATCH_H
)

200 
	$nfs_mt_£m_öô
(
libnfs_£m_t
 *
£m
, 
vÆue
)

202 i‡((*
£m
 = 
	`di•©ch_£m≠h‹e_¸óã
(
vÆue
)Ë!
NULL
)

205 
	}
}

207 
	$nfs_mt_£m_de°roy
(
libnfs_£m_t
 *
£m
)

209 
	`di•©ch_ªÀa£
(*
£m
);

211 
	}
}

213 
	$nfs_mt_£m_po°
(
libnfs_£m_t
 *
£m
)

215 
	`di•©ch_£m≠h‹e_sig«l
(*
£m
);

217 
	}
}

219 
	$nfs_mt_£m_waô
(
libnfs_£m_t
 *
£m
)

221 
	`di•©ch_£m≠h‹e_waô
(*
£m
, 
DISPATCH_TIME_FOREVER
);

223 
	}
}

226 
	$nfs_mt_£m_öô
(
libnfs_£m_t
 *
£m
, 
vÆue
)

228  
	`£m_öô
(
£m
, 0, 
vÆue
);

229 
	}
}

231 
	$nfs_mt_£m_de°roy
(
libnfs_£m_t
 *
£m
)

233  
	`£m_de°roy
(
£m
);

234 
	}
}

236 
	$nfs_mt_£m_po°
(
libnfs_£m_t
 *
£m
)

238  
	`£m_po°
(
£m
);

239 
	}
}

241 
	$nfs_mt_£m_waô
(
libnfs_£m_t
 *
£m
)

243  
	`£m_waô
(
£m
);

244 
	}
}

247 #ñi‡
WIN32


248 
nfs_tid_t
 
	$nfs_mt_gë_tid
()

250  
	`GëCuºítThªadId
();

251 
	}
}

252 * 
	$nfs_mt_£rvi˚_thªad
(* 
¨g
)

254 
nfs_c⁄ãxt
* 
nfs
 = (nfs_c⁄ãxt*)
¨g
;

255 
pﬁlfd
 
pfd
;

256 
ªvíts
;

257 
ªt
;

259 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
 = 1;

261 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

262 
pfd
.
fd
 = 
	`nfs_gë_fd
(
nfs
);

263 
pfd
.
evíts
 = 
	`nfs_which_evíts
(
nfs
);

264 
pfd
.
ªvíts
 = 0;

266 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 0);

267 i‡(
ªt
 < 0) {

268 
	`nfs_£t_îr‹
(
nfs
, "Poll failed");

269 
ªvíts
 = -1;

272 
ªvíts
 = 
pfd
.revents;

274 i‡(
	`nfs_£rvi˚
(
nfs
, 
ªvíts
) < 0) {

275 i‡(
ªvíts
 != -1)

276 
	`nfs_£t_îr‹
(
nfs
, "nfs_service failed");

279  
NULL
;

280 
	}
}

282 
DWORD
 
WINAPI
 
	$£rvi˚_thªad_öô
(
LPVOID
 
ÕP¨am
)

284 
HANDLE
 
hStdout
;

285 
nfs_c⁄ãxt
* 
nfs
;

287 
hStdout
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

288 i‡(
hStdout
 =
INVALID_HANDLE_VALUE
) {

291 
nfs
 = (
nfs_c⁄ãxt
 *)
ÕP¨am
;

292 
	`nfs_mt_£rvi˚_thªad
(
nfs
);

294 
	}
}

296 
	$nfs_mt_£rvi˚_thªad_°¨t
(
nfs_c⁄ãxt
* 
nfs
)

298 
nfs
->
nfsi
->
£rvi˚_thªad
 = 
	`Cª©eThªad
(
NULL
, 1024*1024, 
£rvi˚_thªad_öô
,Çfs, 0, NULL);

299 i‡(
nfs
->
nfsi
->
£rvi˚_thªad
 =
NULL
) {

300 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start serviceÅhread");

303 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
 == 0) {

304 
	`SÀï
(100);

307 
	}
}

309 
	$nfs_mt_£rvi˚_thªad_°›
(
nfs_c⁄ãxt
* 
nfs
)

311 
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
 = 0;

312 
	`WaôF‹SögÀObje˘
(
nfs
->
nfsi
->
£rvi˚_thªad
, 
INFINITE
Ë!
WAIT_OBJECT_0
);

313 
	}
}

315 
	$nfs_mt_muãx_öô
(
libnfs_muãx_t
* 
muãx
)

317 *
muãx
 = 
	`Cª©eSem≠h‹eA
(
NULL
, 1, 1, NULL);

319 
	}
}

321 
	$nfs_mt_muãx_de°roy
(
libnfs_muãx_t
* 
muãx
)

323 
	`Clo£H™dÀ
(*
muãx
);

325 
	}
}

327 
	$nfs_mt_muãx_lock
(
libnfs_muãx_t
* 
muãx
)

329 
	`WaôF‹SögÀObje˘
(*
muãx
, 
INFINITE
Ë!
WAIT_OBJECT_0
);

331 
	}
}

333 
	$nfs_mt_muãx_u∆ock
(
libnfs_muãx_t
* 
muãx
)

335 
	`Rñó£Sem≠h‹e
(*
muãx
, 1, 
NULL
);

337 
	}
}

339 
	$nfs_mt_£m_öô
(
libnfs_£m_t
* 
£m
, 
vÆue
)

341 *
£m
 = 
	`Cª©eSem≠h‹eA
(
NULL
, 0, 16, NULL);

343 
	}
}

345 
	$nfs_mt_£m_de°roy
(
libnfs_£m_t
* 
£m
)

347 
	`Clo£H™dÀ
(*
£m
);

349 
	}
}

351 
	$nfs_mt_£m_po°
(
libnfs_£m_t
* 
£m
)

353 
	`Rñó£Sem≠h‹e
(*
£m
, 1, 
NULL
);

355 
	}
}

357 
	$nfs_mt_£m_waô
(
libnfs_£m_t
* 
£m
)

359 
	`WaôF‹SögÀObje˘
(*
£m
, 
INFINITE
Ë!
WAIT_OBJECT_0
);

361 
	}
}

	@lib/nfs_v3.c

21 #i‚de‡
_GNU_SOURCE


22 
	#_GNU_SOURCE


	)

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

29 #ifde‡
AROS


30 
	~"¨os_com∑t.h
"

33 #ifde‡
PS2_EE


34 
	~"ps2_com∑t.h
"

37 #ifde‡
PS3_PPU


38 
	~"ps3_com∑t.h
"

41 #ifde‡
WIN32


42 
	~<wö32/wö32_com∑t.h
>

45 #ifde‡
HAVE_INTTYPES_H


46 
	~<öây≥s.h
>

48 
	#PRIu64
 "Œu"

	)

51 #ifde‡
HAVE_UTIME_H


52 
	~<utime.h
>

55 #ifde‡
HAVE_UNISTD_H


56 
	~<uni°d.h
>

59 #ifde‡
HAVE_SYS_VFS_H


60 
	~<sys/vfs.h
>

63 #ifde‡
HAVE_SYS_STATVFS_H


64 
	~<sys/°©vfs.h
>

67 #i‡
deföed
(
__ANDROID__
Ë&& !deföed(
HAVE_SYS_STATVFS_H
)

68 
	#°©vfs
 
°©fs


	)

71 #ifde‡
HAVE_NETINET_IN_H


72 
	~<√töë/ö.h
>

75 #ifde‡
HAVE_STRINGS_H


76 
	~<°rögs.h
>

79 #ifde‡
MAJOR_IN_MKDEV


80 
	~<sys/mkdev.h
>

83 #ifde‡
HAVE_SYS_SYSMACROS_H


84 
	~<sys/sysma¸os.h
>

87 
	~<°dio.h
>

88 
	~<°d¨g.h
>

89 
	~<°dlib.h
>

90 
	~<°rög.h
>

91 
	~<as£π.h
>

92 
	~<î∫o.h
>

93 
	~<time.h
>

94 
	~<sys/ty≥s.h
>

95 
	~<sys/°©.h
>

96 
	~<f˙é.h
>

97 
	~"libnfs-zdr.h
"

98 
	~"¶i°.h
"

99 
	~"libnfs.h
"

100 
	~"libnfs-øw.h
"

101 
	~"libnfs-øw-mou¡.h
"

102 
	~"libnfs-¥iv©e.h
"

104 
dev_t


105 
	$•ecd©a3_to_rdev
(
•ecd©a3
 *
rdev
)

107 #ifde‡
makedev


108  
	`makedev
(
rdev
->
•ecd©a1
,Ñdev->
•ecd©a2
);

112 
	}
}

114 
	smou¡_©å_cb
 {

115 
	mwaô_cou¡
;

116 
nfs_cb_d©a
 *
	md©a
;

119 
	smou¡_©å_ôem_cb
 {

120 
mou¡_©å_cb
 *
	mma
;

121 
√°ed_mou¡s
 *
	mm¡
;

124 
	snfs_mcb_d©a
 {

125 
nfs_cb_d©a
 *
	md©a
;

126 
uöt64_t
 
	moff£t
;

127 
size_t
 
	mcou¡
;

131 
	$check_nfs3_îr‹
(
nfs_c⁄ãxt
 *
nfs
, 
°©us
,

132 
nfs_cb_d©a
 *
d©a
, *
comm™d_d©a
)

134 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

135 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

138 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

139 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "Command was cancelled",

140 
d©a
->
¥iv©e_d©a
);

143 i‡(
°©us
 =
RPC_STATUS_TIMEOUT
) {

144 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "CommandÅimed out",

145 
d©a
->
¥iv©e_d©a
);

150 
	}
}

152 
nfs3_lookup_∑th_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

153 
nfs_©å
 *
©å
,

154 
nfs_cb_d©a
 *
d©a
,

155 
nfs_fh
 *
fh
);

163 
	$nfs3_lookup_∑th_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

164 *
¥iv©e_d©a
)

166 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

167 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

168 
READLINK3ªs
 *
ªs
;

169 *
∑th
, *
√w∑th
;

171 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

173 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

174 
	`‰ì_nfs_cb_d©a
(
d©a
);

178 
ªs
 = 
comm™d_d©a
;

179 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

180 
	`nfs_£t_îr‹
(
nfs
, "NFS: READLINK of %s failed with "

181 "%s(%d)", 
d©a
->
ßved_∑th
,

182 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

183 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

184 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

185 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

186 
	`‰ì_nfs_cb_d©a
(
d©a
);

190 
∑th
 = 
ªs
->
READLINK3ªs_u
.
ªsok
.
d©a
;

194 i‡(
∑th
[0] == '/') {

195 i‡(
	`°r°r
(
∑th
, 
	`nfs_gë_exp‹t
(
nfs
)) ==Öath) {

196 *
±r
 = 
∑th
 + 
	`°æí
(
	`nfs_gë_exp‹t
(
nfs
));

197 i‡(*
±r
 == '/') {

198 
√w∑th
 = 
	`°rdup
(
±r
);

199 } i‡(*
±r
 == '\0') {

200 
√w∑th
 = 
	`°rdup
("/");

202 
d©a
->
	`cb
(-
ENOENT
, 
nfs
, "SymbolicÜinkÖoints "

203 "outsidêexp‹t", 
d©a
->
¥iv©e_d©a
);

204 
	`‰ì_nfs_cb_d©a
(
d©a
);

208 
d©a
->
	`cb
(-
ENOENT
, 
nfs
, "SymbolicÜinkÖoints outside "

209 "exp‹t", 
d©a
->
¥iv©e_d©a
);

210 
	`‰ì_nfs_cb_d©a
(
d©a
);

214 i‡(!
√w∑th
)

215 
nomem
;

220 i‡(
d©a
->
∑th
[0]) {

223 
d©a
->
∑th
[-1] = '\0';

224 
√w∑th
 = 
	`mÆloc
(
	`°æí
(
d©a
->
ßved_∑th
) +

225 
	`°æí
(
∑th
Ë+ såÀn(
d©a
->path) + 6);

226 i‡(!
√w∑th
)

227 
nomem
;

229 
	`•rötf
(
√w∑th
, "%s/../%s/%s", 
d©a
->
ßved_∑th
, 
∑th
,

230 
d©a
->
∑th
);

232 
√w∑th
 = 
	`mÆloc
(
	`°æí
(
d©a
->
ßved_∑th
) +

233 
	`°æí
(
∑th
) + 5);

234 i‡(!
√w∑th
)

235 
nomem
;

237 
	`•rötf
(
√w∑th
, "%s/../%s", 
d©a
->
ßved_∑th
, 
∑th
);

240 
	`‰ì
(
d©a
->
ßved_∑th
);

241 
d©a
->
ßved_∑th
 = 
√w∑th
;

243 i‡(
	`nfs_n‹mÆize_∑th
(
nfs
, 
d©a
->
ßved_∑th
) != 0) {

244 
d©a
->
	`cb
(-
ENOENT
, 
nfs
, "SymbolicÜinkÑesolvesÅo invalid "

245 "∑th", 
d©a
->
¥iv©e_d©a
);

246 
	`‰ì_nfs_cb_d©a
(
d©a
);

250 
d©a
->
∑th
 = d©a->
ßved_∑th
;

251 
	`nfs3_lookup_∑th_async_öã∫Æ
(
nfs
, 
NULL
, 
d©a
, &nfs->
nfsi
->
roŸfh
);

254 
nomem
:

255 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, "FailedÅoállocate memory forÖath",

256 
d©a
->
¥iv©e_d©a
);

257 
	`‰ì_nfs_cb_d©a
(
d©a
);

258 
	}
}

261 
	$Áâr3_to_nfs_©å
(
nfs_©å
 *
©å
, 
Áâr3
 *
Á3
)

263 
©å
->
ty≥
 = 
Á3
->type;

264 
©å
->
mode
 = 
Á3
->mode;

265 
©å
->
uid
 = 
Á3
->uid;

266 
©å
->
gid
 = 
Á3
->gid;

267 
©å
->
∆ök
 = 
Á3
->nlink;

268 
©å
->
size
 = 
Á3
->size;

269 
©å
->
u£d
 = 
Á3
->used;

270 
©å
->
fsid
 = 
Á3
->fsid;

271 
©å
->
rdev
.
•ecd©a1
 = 
Á3
->rdev.specdata1;

272 
©å
->
rdev
.
•ecd©a2
 = 
Á3
->rdev.specdata2;

273 
©å
->
©ime
.
£c⁄ds
 = 
Á3
->atime.seconds;

274 
©å
->
©ime
.
n£c⁄ds
 = 
Á3
->atime.nseconds;

275 
©å
->
mtime
.
£c⁄ds
 = 
Á3
->mtime.seconds;

276 
©å
->
mtime
.
n£c⁄ds
 = 
Á3
->mtime.nseconds;

277 
©å
->
˘ime
.
£c⁄ds
 = 
Á3
->ctime.seconds;

278 
©å
->
˘ime
.
n£c⁄ds
 = 
Á3
->ctime.nseconds;

279 
	}
}

282 
	$nfs3_lookup_∑th_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

283 *
¥iv©e_d©a
)

285 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

286 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

287 
LOOKUP3ªs
 *
ªs
;

288 
nfs_©å
 
©å
;

289 
nfs_fh
 
fh
;

291 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

293 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

294 
	`‰ì_nfs_cb_d©a
(
d©a
);

298 
ªs
 = 
comm™d_d©a
;

299 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

300 
	`nfs_£t_îr‹
(
nfs
, "NFS: Lookup of %s failed with "

301 "%s(%d)", 
d©a
->
ßved_∑th
,

302 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

303 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

304 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

305 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

306 
	`‰ì_nfs_cb_d©a
(
d©a
);

310 
	`mem£t
(&
©å
, 0, (attr));

311 i‡(
ªs
->
LOOKUP3ªs_u
.
ªsok
.
obj_©åibuãs
.
©åibuãs_fﬁlow
) {

312 
	`Áâr3_to_nfs_©å
(&
©å
, &
ªs
->
LOOKUP3ªs_u
.
ªsok
.
obj_©åibuãs
.
po°_›_©å_u
.
©åibuãs
);

318 
fh
.
vÆ
 = 
ªs
->
LOOKUP3ªs_u
.
ªsok
.
obje˘
.
d©a
.
d©a_vÆ
;

319 
fh
.
Àn
 = 
ªs
->
LOOKUP3ªs_u
.
ªsok
.
obje˘
.
d©a
.
d©a_Àn
;

320 
	`nfs3_lookup_∑th_async_öã∫Æ
(
nfs
, &
©å
, 
d©a
, &
fh
);

321 
	}
}

324 
	$nfs3_lookup_∑th_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_©å
 *
©å
,

325 
nfs_cb_d©a
 *
d©a
, 
nfs_fh
 *
fh
)

327 *
∑th
, *
¶ash
;

328 
LOOKUP3¨gs
 
¨gs
;

330 *
d©a
->
∑th
 == '/') {

331 
d©a
->
∑th
++;

334 
∑th
 = 
d©a
->path;

335 
¶ash
 = 
	`°rchr
(
∑th
, '/');

337 i‡(
©å
 &&áâr->
ty≥
 =
NF3LNK
) {

338 i‡(
d©a
->
c⁄töue_öt
 & 
O_NOFOLLOW
) {

339 
d©a
->
	`cb
(-
ELOOP
, 
nfs
, "SymbolicÜinkÉncountered",

340 
d©a
->
¥iv©e_d©a
);

341 
	`‰ì_nfs_cb_d©a
(
d©a
);

344 i‡(!
d©a
->
no_fﬁlow
 || *
∑th
 != '\0') {

345 
READLINK3¨gs
 
æ_¨gs
;

347 i‡(
d©a
->
lök_cou¡
++ >
MAX_LINK_COUNT
) {

348 
d©a
->
	`cb
(-
ELOOP
, 
nfs
, "Too manyÜevels of "

349 "symbﬁi¯löks", 
d©a
->
¥iv©e_d©a
);

350 
	`‰ì_nfs_cb_d©a
(
d©a
);

354 
æ_¨gs
.
symlök
.
d©a
.
d©a_Àn
 = 
fh
->
Àn
;

355 
æ_¨gs
.
symlök
.
d©a
.
d©a_vÆ
 = 
fh
->
vÆ
;

357 i‡(
	`Ωc_nfs3_ªadlök_èsk
(
nfs
->
Ωc
,

358 
nfs3_lookup_∑th_2_cb
,

359 &
æ_¨gs
, 
d©a
Ë=
NULL
) {

360 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo "

362 
d©a
->
∑th
);

363 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

364 
d©a
->
¥iv©e_d©a
);

365 
	`‰ì_nfs_cb_d©a
(
d©a
);

369 i‡(
¶ash
 !
NULL
) {

370 *
¶ash
 = '/';

376 i‡(
¶ash
 !
NULL
) {

383 *
¶ash
 = 0;

384 
d©a
->
∑th
 = 
¶ash
+1;

386 *
d©a
->
∑th
 != 0) {

387 
d©a
->
∑th
++;

390 i‡(*
∑th
 == 0) {

391 
d©a
->
fh
.
Àn
 = fh->len;

392 
d©a
->
fh
.
vÆ
 = 
	`mÆloc
(d©a->fh.
Àn
);

393 i‡(
d©a
->
fh
.
vÆ
 =
NULL
) {

394 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: FailedÅo "

395 "Æloˇã fh f‹ %s", 
d©a
->
∑th
);

396 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

397 
d©a
->
¥iv©e_d©a
);

398 
	`‰ì_nfs_cb_d©a
(
d©a
);

401 
	`mem˝y
(
d©a
->
fh
.
vÆ
, fh->vÆ, d©a->fh.
Àn
);

402 i‡(
¶ash
 !
NULL
) {

403 *
¶ash
 = '/';

405 
d©a
->
	`c⁄töue_cb
(
nfs
, 
©å
, data);

409 
	`mem£t
(&
¨gs
, 0, (
LOOKUP3¨gs
));

410 
¨gs
.
wh©
.
dú
.
d©a
.
d©a_Àn
 = 
fh
->
Àn
;

411 
¨gs
.
wh©
.
dú
.
d©a
.
d©a_vÆ
 = 
fh
->
vÆ
;

412 
¨gs
.
wh©
.
«me
 = 
∑th
;

414 i‡(
	`Ωc_nfs3_lookup_èsk
(
nfs
->
Ωc
, 
nfs3_lookup_∑th_1_cb
,

415 &
¨gs
, 
d©a
Ë=
NULL
) {

416 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo sendÜookup "

417 "ˇŒ f‹ %s", 
d©a
->
∑th
);

418 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

419 
d©a
->
¥iv©e_d©a
);

420 
	`‰ì_nfs_cb_d©a
(
d©a
);

423 i‡(
¶ash
 !
NULL
) {

424 *
¶ash
 = '/';

427 
	}
}

430 
	$nfs3_lookup_∑th_gë©å_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

431 *
comm™d_d©a
, *
¥iv©e_d©a
)

433 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

434 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

435 
GETATTR3ªs
 *
ªs
;

436 
nfs_©å
 
©å
;

438 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

440 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

441 
	`‰ì_nfs_cb_d©a
(
d©a
);

445 
ªs
 = 
comm™d_d©a
;

446 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

447 
	`nfs_£t_îr‹
(
nfs
, "NFS: GETATTR of %s failed with "

448 "%s(%d)", 
d©a
->
ßved_∑th
,

449 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

450 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

451 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

452 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

453 
	`‰ì_nfs_cb_d©a
(
d©a
);

457 
	`Áâr3_to_nfs_©å
(&
©å
, &
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
);

461 
	`nfs3_lookup_∑th_async_öã∫Æ
(
nfs
, &
©å
, 
d©a
, &nfs->
nfsi
->
roŸfh
);

462 
	}
}

466 
	$nfs3_lookuµ©h_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
no_fﬁlow
,

467 
nfs_cb
 
cb
, *
¥iv©e_d©a
,

468 
c⁄töue_func
 
c⁄töue_cb
, *
c⁄töue_d©a
,

469 (*
‰ì_c⁄töue_d©a
)(*),

470 
uöt64_t
 
c⁄töue_öt
)

472 
nfs_cb_d©a
 *
d©a
;

473 
GETATTR3¨gs
 
¨gs
;

474 
nfs_fh
 *
fh
;

476 i‡(
∑th
 =
NULL
 ||Öath[0] == '\0') {

477 
∑th
 = ".";

480 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

481 i‡(
d©a
 =
NULL
) {

482 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: failedÅoállocate "

484 i‡(
c⁄töue_d©a
) {

485 
	`‰ì_c⁄töue_d©a
(
c⁄töue_d©a
);

489 
d©a
->
nfs
 =Çfs;

490 
d©a
->
cb
 = cb;

491 
d©a
->
c⁄töue_cb
 = continue_cb;

492 
d©a
->
c⁄töue_d©a
 = continue_data;

493 
d©a
->
‰ì_c⁄töue_d©a
 = free_continue_data;

494 
d©a
->
c⁄töue_öt
 = continue_int;

495 
d©a
->
¥iv©e_d©a
 =Örivate_data;

496 
d©a
->
no_fﬁlow
 =Ço_follow;

497 i‡(
∑th
[0] == '/') {

498 
d©a
->
ßved_∑th
 = 
	`°rdup
(
∑th
);

500 
d©a
->
ßved_∑th
 = 
	`mÆloc
(
	`°æí
(
∑th
Ë+ såÀn(
nfs
->
nfsi
->
cwd
) + 2);

501 i‡(
d©a
->
ßved_∑th
 =
NULL
) {

502 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: failedÅo "

504 
	`‰ì_nfs_cb_d©a
(
d©a
);

507 
	`•rötf
(
d©a
->
ßved_∑th
, "%s/%s", 
nfs
->
nfsi
->
cwd
, 
∑th
);

510 i‡(
d©a
->
ßved_∑th
 =
NULL
) {

511 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: failedÅo copyÖath "

513 
	`‰ì_nfs_cb_d©a
(
d©a
);

516 i‡(
	`nfs_n‹mÆize_∑th
(
nfs
, 
d©a
->
ßved_∑th
) != 0) {

517 
	`‰ì_nfs_cb_d©a
(
d©a
);

521 
d©a
->
∑th
 = d©a->
ßved_∑th
;

522 
fh
 = &
nfs
->
nfsi
->
roŸfh
;

524 i‡(
d©a
->
∑th
[0]) {

525 
√°ed_mou¡s
 *
m¡
;

530 
size_t
 
max_m©ch_Àn
 = 0;

533 
m¡
 = 
nfs
->
nfsi
->
√°ed_mou¡s
; m¡; m¡ = m¡->
√xt
) {

534 i‡(
	`°æí
(
m¡
->
∑th
Ë< 
max_m©ch_Àn
)

536 i‡(
	`°∫cmp
(
m¡
->
∑th
, 
d©a
->
ßved_∑th
,

537 
	`°æí
(
m¡
->
∑th
)))

539 i‡(
d©a
->
ßved_∑th
[
	`°æí
(
m¡
->
∑th
)] != '\0'

540 && 
d©a
->
ßved_∑th
[
	`°æí
(
m¡
->
∑th
)] != '/')

543 
d©a
->
ßved_∑th
 = 
	`°rdup
(d©a->
∑th


544 + 
	`°æí
(
m¡
->
∑th
));

545 
	`‰ì
(
d©a
->
∑th
);

546 
d©a
->
∑th
 = d©a->
ßved_∑th
;

547 
fh
 = &
m¡
->fh;

548 
max_m©ch_Àn
 = 
	`°æí
(
m¡
->
∑th
);

554 
	`nfs3_lookup_∑th_async_öã∫Æ
(
nfs
, 
NULL
, 
d©a
, 
fh
);

561 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

562 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
fh
->
Àn
;

563 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
fh
->
vÆ
;

564 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_lookup_∑th_gë©å_cb
,

565 &
¨gs
, 
d©a
Ë=
NULL
) {

566 
	`‰ì_nfs_cb_d©a
(
d©a
);

570 
	}
}

573 
	$nfs3_mou¡_8_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

574 *
¥iv©e_d©a
)

576 
mou¡_©å_ôem_cb
 *
ma_ôem
 = 
¥iv©e_d©a
;

577 
mou¡_©å_cb
 *
ma
 = 
ma_ôem
->ma;

578 
nfs_cb_d©a
 *
d©a
 = 
ma
->data;

579 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

580 
GETATTR3ªs
 *
ªs
;

582 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

584 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

585 
föished
;

588 
ªs
 = 
comm™d_d©a
;

589 i‡(
ªs
->
°©us
 !
NFS3_OK
)

590 
föished
;

592 
	`Áâr3_to_nfs_©å
(&
ma_ôem
->
m¡
->
©å
,

593 &
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
);

595 
föished
:

596 
	`‰ì
(
ma_ôem
);

597 
ma
->
waô_cou¡
--;

598 i‡(
ma
->
waô_cou¡
 > 0)

601 
	`‰ì
(
ma
);

602 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

603 
	`‰ì_nfs_cb_d©a
(
d©a
);

604 
	}
}

607 
	$nfs3_mou¡_7_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

608 *
¥iv©e_d©a
)

610 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

611 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

612 
mou¡_©å_cb
 *
ma
 = 
NULL
;

613 
√°ed_mou¡s
 *
m¡
;

615 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

617 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

618 
	`‰ì_nfs_cb_d©a
(
d©a
);

635 
	`Ωc_£t_ªsûõncy
(
Ωc
,

636 
nfs
->
nfsi
->
auto_ªc⁄√˘
,

637 
nfs
->
nfsi
->
timeout
,

638 
nfs
->
nfsi
->
ªå™s
);

640 i‡(!
nfs
->
nfsi
->
√°ed_mou¡s
)

641 
föished
;

647 
ma
 = 
	`mÆloc
((
mou¡_©å_cb
));

648 i‡(
ma
 =
NULL
)

649 
föished
;

650 
	`mem£t
(
ma
, 0, (
mou¡_©å_cb
));

651 
ma
->
d©a
 = data;

653 
m¡
 = 
nfs
->
nfsi
->
√°ed_mou¡s
; m¡; m¡ = m¡->
√xt
) {

654 
mou¡_©å_ôem_cb
 *
ma_ôem
;

655 
GETATTR3¨gs
 
¨gs
;

657 
ma_ôem
 = 
	`mÆloc
((
mou¡_©å_ôem_cb
));

658 i‡(
ma_ôem
 =
NULL
)

659 
föished
;

660 
ma_ôem
->
m¡
 = mnt;

661 
ma_ôem
->
ma
 = ma;

663 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

664 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
m¡
->
fh
.
Àn
;

665 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
m¡
->
fh
.
vÆ
;

667 i‡(
	`Ωc_nfs3_gë©å_èsk
(
Ωc
, 
nfs3_mou¡_8_cb
, &
¨gs
,

668 
ma_ôem
Ë=
NULL
) {

669 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
,

670 
	`nfs_gë_îr‹
(
nfs
));

671 
	`‰ì
(
ma_ôem
);

675 
ma
->
waô_cou¡
++;

678 
föished
:

679 i‡(
ma
 && ma->
waô_cou¡
)

682 
	`‰ì
(
ma
);

683 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

684 
	`‰ì_nfs_cb_d©a
(
d©a
);

685 
	}
}

688 
	$nfs3_mou¡_6_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

689 *
¥iv©e_d©a
)

691 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

692 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

693 
FSINFO3ªs
 *
ªs
 = 
comm™d_d©a
;

694 
GETATTR3¨gs
 
¨gs
;

696 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

698 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

699 
	`‰ì_nfs_cb_d©a
(
d©a
);

703 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

704 
	`nfs_£t_îr‹
(
nfs
, "NFS: FSINFO of %s failed with %s(%d)",

705 
	`nfs_gë_exp‹t
(
nfs
), 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

706 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

707 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

708 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

709 
	`‰ì_nfs_cb_d©a
(
d©a
);

713 
nfs
->
nfsi
->
ªadmax
 = 
ªs
->
FSINFO3ªs_u
.
ªsok
.
πmax
;

714 
nfs
->
nfsi
->
wrôemax
 = 
ªs
->
FSINFO3ªs_u
.
ªsok
.
wtmax
;

719 i‡(
nfs
->
nfsi
->
ªadmax
 > 
NFS_MAX_XFER_SIZE
)

720 
nfs
->
nfsi
->
ªadmax
 = 
NFS_MAX_XFER_SIZE
;

721 i‡(
nfs
->
nfsi
->
ªadmax
 < 
NFSMAXDATA2
) {

722 
	`nfs_£t_îr‹
(
nfs
, "server maxÑsize of %d",

723 ()
nfs
->
nfsi
->
ªadmax
);

724 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

725 
	`‰ì_nfs_cb_d©a
(
d©a
);

729 i‡(
nfs
->
nfsi
->
wrôemax
 > 
NFS_MAX_XFER_SIZE
)

730 
nfs
->
nfsi
->
wrôemax
 = 
NFS_MAX_XFER_SIZE
;

731 i‡(
nfs
->
nfsi
->
wrôemax
 < 
NFSMAXDATA2
) {

732 
	`nfs_£t_îr‹
(
nfs
, "server max wsize of %d",

733 ()
nfs
->
nfsi
->
wrôemax
);

734 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

735 
	`‰ì_nfs_cb_d©a
(
d©a
);

739 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

740 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
nfs
->
nfsi
->
roŸfh
.
Àn
;

741 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
nfs
->
nfsi
->
roŸfh
.
vÆ
;

743 i‡(
	`Ωc_nfs3_gë©å_èsk
(
Ωc
, 
nfs3_mou¡_7_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

744 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

745 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

746 
	`‰ì_nfs_cb_d©a
(
d©a
);

749 
	}
}

752 
	$nfs3_mou¡_5_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

753 *
¥iv©e_d©a
)

755 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

756 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

757 
FSINFO3¨gs
 
¨gs
;

759 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

761 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

762 
	`‰ì_nfs_cb_d©a
(
d©a
);

766 
¨gs
.
f§oŸ
.
d©a
.
d©a_Àn
 = 
nfs
->
nfsi
->
roŸfh
.
Àn
;

767 
¨gs
.
f§oŸ
.
d©a
.
d©a_vÆ
 = 
nfs
->
nfsi
->
roŸfh
.
vÆ
;

768 i‡(
	`Ωc_nfs3_fsöfo_èsk
(
Ωc
, 
nfs3_mou¡_6_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

769 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

770 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

771 
	`‰ì_nfs_cb_d©a
(
d©a
);

774 
	}
}

776 
	smou¡_discovîy_cb
 {

777 
	mwaô_cou¡
;

778 
	mîr‹
;

779 
	m°©us
;

780 
nfs_cb_d©a
 *
	md©a
;

783 
	smou¡_discovîy_ôem_cb
 {

784 
mou¡_discovîy_cb
 *
	mmd_cb
;

785 *
	m∑th
;

789 
	$nfs3_mou¡_4_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

790 *
¥iv©e_d©a
)

792 
mou¡_discovîy_ôem_cb
 *
md_ôem_cb
 = 
¥iv©e_d©a
;

793 
mou¡_discovîy_cb
 *
md_cb
 = 
md_ôem_cb
->md_cb;

794 
nfs_cb_d©a
 *
d©a
 = 
md_cb
->data;

795 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

796 
mou¡ªs3
 *
ªs
;

797 
√°ed_mou¡s
 *
m¡
;

799 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

801 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

802 
	`nfs_£t_îr‹
(
nfs
, "MOUNT failed with RPC_STATUS_ERROR");

803 
md_cb
->
îr‹
 = -
EFAULT
;

804 
föished
;

806 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

807 
	`nfs_£t_îr‹
(
nfs
, "MOUNT failed with RPC_STATUS_CANCEL");

808 
md_cb
->
°©us
 = 
RPC_STATUS_CANCEL
;

809 
föished
;

811 i‡(
°©us
 =
RPC_STATUS_TIMEOUT
) {

812 
	`nfs_£t_îr‹
(
nfs
, "MOUNTÅimed out");

813 
md_cb
->
°©us
 = 
RPC_STATUS_TIMEOUT
;

814 
föished
;

817 
ªs
 = 
comm™d_d©a
;

818 i‡(
ªs
->
fhs_°©us
 !
MNT3_OK
) {

819 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: Mount failed withÉrror "

821 
	`mou¡°©3_to_°r
(
ªs
->
fhs_°©us
),

822 
ªs
->
fhs_°©us
,

823 
	`°ªº‹
(-
	`mou¡°©3_to_î∫o
(
ªs
->
fhs_°©us
)),

824 -
	`mou¡°©3_to_î∫o
(
ªs
->
fhs_°©us
));

825 
md_cb
->
îr‹
 = 
	`mou¡°©3_to_î∫o
(
ªs
->
fhs_°©us
);

826 
föished
;

829 
m¡
 = 
	`mÆloc
((*mnt));

830 i‡(
m¡
 =
NULL
) {

831 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. CouldÇotállocate memory "

833 
md_cb
->
îr‹
 = -
ENOMEM
;

834 
föished
;

836 
	`mem£t
(
m¡
, 0, (*mnt));

838 
m¡
->
fh
.
Àn
 = 
ªs
->
mou¡ªs3_u
.
mou¡öfo
.
fh™dÀ
.
fh™dÀ3_Àn
;

839 
m¡
->
fh
.
vÆ
 = 
	`mÆloc
(m¡->fh.
Àn
);

840 i‡(
m¡
->
fh
.
vÆ
 =
NULL
) {

841 
	`‰ì
(
m¡
);

842 
föished
;

844 
	`mem˝y
(
m¡
->
fh
.
vÆ
,

845 
ªs
->
mou¡ªs3_u
.
mou¡öfo
.
fh™dÀ
.
fh™dÀ3_vÆ
,

846 
m¡
->
fh
.
Àn
);

848 
m¡
->
∑th
 = 
md_ôem_cb
->path;

849 
md_ôem_cb
->
∑th
 = 
NULL
;

851 
	`LIBNFS_LIST_ADD
(&
nfs
->
nfsi
->
√°ed_mou¡s
, 
m¡
);

853 
föished
:

854 
	`‰ì
(
md_ôem_cb
->
∑th
);

855 
	`‰ì
(
md_ôem_cb
);

856 
md_cb
->
waô_cou¡
--;

857 i‡(
md_cb
->
waô_cou¡
 > 0)

860 
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect");

862 i‡(
md_cb
->
°©us
 =
RPC_STATUS_CANCEL
) {

863 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "Command was cancelled",

864 
d©a
->
¥iv©e_d©a
);

865 
	`‰ì
(
md_cb
);

866 
	`‰ì_nfs_cb_d©a
(
d©a
);

869 i‡(
md_cb
->
îr‹
) {

870 
d©a
->
	`cb
(
md_cb
->
îr‹
, 
nfs
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

871 
	`‰ì
(
md_cb
);

872 
	`‰ì_nfs_cb_d©a
(
d©a
);

876 i‡(
nfs
->
nfsi
->
nf•‹t
) {

877 i‡(
	`Ωc_c⁄√˘_p‹t_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

878 
nfs
->
nfsi
->
nf•‹t
,

879 
NFS_PROGRAM
, 
NFS_V3
,

880 
nfs3_mou¡_5_cb
, 
d©a
) != 0) {

881 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
,

882 
	`nfs_gë_îr‹
(
nfs
));

883 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

884 
d©a
->
¥iv©e_d©a
);

885 
	`‰ì
(
md_cb
);

886 
	`‰ì_nfs_cb_d©a
(
d©a
);

892 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

893 
NFS_PROGRAM
,

894 
NFS_V3
, 
nfs3_mou¡_5_cb
, 
d©a
) != 0) {

895 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

896 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

897 
	`‰ì
(
md_cb
);

898 
	`‰ì_nfs_cb_d©a
(
d©a
);

901 
	`‰ì
(
md_cb
);

902 
	}
}

905 
	$nfs3_mou¡_3_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

906 *
¥iv©e_d©a
)

908 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

909 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

910 
exp‹ts
 
ªs
;

911 
Àn
;

912 
mou¡_discovîy_cb
 *
md_cb
 = 
NULL
;

914 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

916 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

917 
	`‰ì_nfs_cb_d©a
(
d©a
);

924 
Àn
 = 
	`°æí
(
	`nfs_gë_exp‹t
(
nfs
));

925 i‡(!
Àn
) {

926 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, "Exp‹ài†em±y", d©a->
¥iv©e_d©a
);

927 
	`‰ì_nfs_cb_d©a
(
d©a
);

930 
ªs
 = *(
exp‹ts
 *)
comm™d_d©a
;

931 
ªs
) {

932 
mou¡_discovîy_ôem_cb
 *
md_ôem_cb
;

934 i‡(
	`°∫cmp
(
	`nfs_gë_exp‹t
(
nfs
), 
ªs
->
ex_dú
, 
Àn
)) {

935 
ªs
 =Ñes->
ex_√xt
;

938 i‡(
ªs
->
ex_dú
[
Àn
 - 1] != '/' &&Ñes->ex_dir[len] != '/') {

939 
ªs
 =Ñes->
ex_√xt
;

948 
md_ôem_cb
 = 
	`mÆloc
((*md_item_cb));

949 i‡(
md_ôem_cb
 =
NULL
)

952 
	`mem£t
(
md_ôem_cb
, 0, (*md_item_cb));

954 
md_ôem_cb
->
∑th
 = 
	`°rdup
(
ªs
->
ex_dú
 + 
Àn


955 - (
	`nfs_gë_exp‹t
(
nfs
)[
Àn
 -1] == '/'));

956 i‡(
md_ôem_cb
->
∑th
 =
NULL
) {

957 
	`‰ì
(
md_ôem_cb
);

961 i‡(
md_cb
 =
NULL
) {

962 
md_cb
 = 
	`mÆloc
((*md_cb));

963 i‡(
md_cb
 =
NULL
) {

964 
	`‰ì
(
md_ôem_cb
->
∑th
);

965 
	`‰ì
(
md_ôem_cb
);

968 
	`mem£t
(
md_cb
, 0, (*md_cb));

969 
md_cb
->
d©a
 = data;

970 
md_cb
->
°©us
 = 
RPC_STATUS_SUCCESS
;

971 
md_cb
->
îr‹
 = 0;

973 
md_ôem_cb
->
md_cb
 = md_cb;

975 i‡(
	`Ωc_mou¡3_m¡_èsk
(
Ωc
, 
nfs3_mou¡_4_cb
,

976 
ªs
->
ex_dú
, 
md_ôem_cb
Ë=
NULL
) {

977 
	`nfs_£t_îr‹
(
nfs
, "%s: %s",

978 
__FUNCTION__
, 
	`nfs_gë_îr‹
(
nfs
));

979 i‡(
md_cb
->
waô_cou¡
 == 0) {

980 
	`‰ì
(
md_cb
);

981 
md_cb
 = 
NULL
;

983 
	`‰ì
(
md_ôem_cb
->
∑th
);

984 
	`‰ì
(
md_ôem_cb
);

987 
md_cb
->
waô_cou¡
++;

989 
ªs
 =Ñes->
ex_√xt
;

992 i‡(
md_cb
)

998 
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect");

1000 i‡(
nfs
->
nfsi
->
nf•‹t
) {

1001 i‡(
	`Ωc_c⁄√˘_p‹t_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

1002 
nfs
->
nfsi
->
nf•‹t
,

1003 
NFS_PROGRAM
, 
NFS_V3
,

1004 
nfs3_mou¡_5_cb
, 
d©a
) != 0) {

1005 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
,

1006 
	`nfs_gë_îr‹
(
nfs
));

1007 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1008 
d©a
->
¥iv©e_d©a
);

1009 
	`‰ì_nfs_cb_d©a
(
d©a
);

1015 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

1016 
NFS_PROGRAM
,

1017 
NFS_V3
, 
nfs3_mou¡_5_cb
, 
d©a
) != 0) {

1018 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

1019 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1020 
	`‰ì_nfs_cb_d©a
(
d©a
);

1023 
	}
}

1026 
	$nfs3_mou¡_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1027 *
¥iv©e_d©a
)

1029 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1030 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1031 
mou¡ªs3
 *
ªs
;

1033 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1035 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1036 
	`‰ì_nfs_cb_d©a
(
d©a
);

1040 
ªs
 = 
comm™d_d©a
;

1041 i‡(
ªs
->
fhs_°©us
 !
MNT3_OK
) {

1042 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: Mount failed withÉrror "

1044 
	`mou¡°©3_to_°r
(
ªs
->
fhs_°©us
),

1045 
ªs
->
fhs_°©us
,

1046 
	`°ªº‹
(-
	`mou¡°©3_to_î∫o
(
ªs
->
fhs_°©us
)),

1047 -
	`mou¡°©3_to_î∫o
(
ªs
->
fhs_°©us
));

1048 
d©a
->
	`cb
(
	`mou¡°©3_to_î∫o
(
ªs
->
fhs_°©us
), 
nfs
,

1049 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1050 
	`‰ì_nfs_cb_d©a
(
d©a
);

1054 
nfs
->
nfsi
->
roŸfh
.
Àn
 = 
ªs
->
mou¡ªs3_u
.
mou¡öfo
.
fh™dÀ
.
fh™dÀ3_Àn
;

1055 
nfs
->
nfsi
->
roŸfh
.
vÆ
 = 
	`mÆloc
“fs->nfsi->roŸfh.
Àn
);

1056 i‡(
nfs
->
nfsi
->
roŸfh
.
vÆ
 =
NULL
) {

1057 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

1058 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1059 
	`‰ì_nfs_cb_d©a
(
d©a
);

1062 
	`mem˝y
(
nfs
->
nfsi
->
roŸfh
.
vÆ
,

1063 
ªs
->
mou¡ªs3_u
.
mou¡öfo
.
fh™dÀ
.
fh™dÀ3_vÆ
,

1064 
nfs
->
nfsi
->
roŸfh
.
Àn
);

1066 i‡(
nfs
->
nfsi
->
auto_åavî£_mou¡s
) {

1067 i‡(
	`Ωc_mou¡3_exp‹t_èsk
(
Ωc
, 
nfs3_mou¡_3_cb
, 
d©a
Ë=
NULL
) {

1068 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
,

1069 
	`nfs_gë_îr‹
(
nfs
));

1070 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1071 
d©a
->
¥iv©e_d©a
);

1072 
	`‰ì_nfs_cb_d©a
(
d©a
);

1078 
	`Ωc_disc⁄√˘
(
Ωc
, "normal disconnect");

1080 i‡(
nfs
->
nfsi
->
nf•‹t
) {

1081 i‡(
	`Ωc_c⁄√˘_p‹t_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

1082 
nfs
->
nfsi
->
nf•‹t
,

1083 
NFS_PROGRAM
, 
NFS_V3
,

1084 
nfs3_mou¡_5_cb
, 
d©a
) != 0) {

1085 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
,

1086 
	`nfs_gë_îr‹
(
nfs
));

1087 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1088 
d©a
->
¥iv©e_d©a
);

1089 
	`‰ì_nfs_cb_d©a
(
d©a
);

1095 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

1096 
NFS_PROGRAM
,

1097 
NFS_V3
, 
nfs3_mou¡_5_cb
, 
d©a
) != 0) {

1098 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

1099 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1100 
	`‰ì_nfs_cb_d©a
(
d©a
);

1103 
	}
}

1107 
	$nfs3_mou¡_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1108 *
¥iv©e_d©a
)

1110 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1111 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1113 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1115 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1116 
	`‰ì_nfs_cb_d©a
(
d©a
);

1120 i‡(
	`Ωc_mou¡3_m¡_èsk
(
Ωc
, 
nfs3_mou¡_2_cb
, 
nfs
->
nfsi
->
exp‹t
,

1121 
d©a
Ë=
NULL
) {

1122 
	`nfs_£t_îr‹
(
nfs
, "%s: %s.", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

1123 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1124 
	`‰ì_nfs_cb_d©a
(
d©a
);

1127 
	}
}

1130 
	$nfs3_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

1131 c⁄° *
exp‹t
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1133 
nfs_cb_d©a
 *
d©a
;

1134 *
√w_£rvî
, *
√w_exp‹t
;

1136 
√w_£rvî
 = 
	`°rdup
(
£rvî
);

1137 i‡(
√w_£rvî
 =
NULL
) {

1138 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

1142 
	`‰ì
(
nfs
->
nfsi
->
£rvî
);

1143 
nfs
->
nfsi
->
£rvî
 = 
√w_£rvî
;

1145 
	`‰ì
(
nfs
->
Ωc
->
£rvî
);

1146 
nfs
->
Ωc
->
£rvî
 = 
	`°rdup
“fs->
nfsi
->server);

1148 
√w_exp‹t
 = 
	`°rdup
(
exp‹t
);

1149 i‡(
√w_exp‹t
 =
NULL
) {

1150 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

1154 
	`‰ì
(
nfs
->
nfsi
->
exp‹t
);

1155 
nfs
->
nfsi
->
exp‹t
 = 
√w_exp‹t
;

1157 
d©a
 = 
	`ˇŒoc
(1, (*data));

1158 i‡(
d©a
 =
NULL
) {

1159 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

1164 
d©a
->
nfs
 =Çfs;

1165 
d©a
->
cb
 = cb;

1166 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1168 i‡(
nfs
->
nfsi
->
mou¡p‹t
) {

1169 i‡(
	`Ωc_c⁄√˘_p‹t_async
(
nfs
->
Ωc
, 
£rvî
,Çfs->
nfsi
->
mou¡p‹t
,

1170 
MOUNT_PROGRAM
, 
MOUNT_V3
,

1171 
nfs3_mou¡_1_cb
, 
d©a
) != 0) {

1172 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start connection. %s",

1173 
	`nfs_gë_îr‹
(
nfs
));

1174 
	`‰ì_nfs_cb_d©a
(
d©a
);

1180 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
nfs
->
Ωc
, 
£rvî
,

1181 
MOUNT_PROGRAM
, 
MOUNT_V3
,

1182 
nfs3_mou¡_1_cb
, 
d©a
) != 0) {

1183 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start connection. %s",

1184 
	`nfs_gë_îr‹
(
nfs
));

1185 
	`‰ì_nfs_cb_d©a
(
d©a
);

1190 
	}
}

1193 
	$nfs3_umou¡_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1194 *
¥iv©e_d©a
)

1196 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1197 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1199 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1201 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1202 
	`‰ì_nfs_cb_d©a
(
d©a
);

1206 
	`Ωc_disc⁄√˘
(
Ωc
, "umount");

1207 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1208 
	`‰ì_nfs_cb_d©a
(
d©a
);

1209 
	}
}

1212 
	$nfs3_umou¡_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1213 *
¥iv©e_d©a
)

1215 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1216 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1218 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1220 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1221 
	`‰ì_nfs_cb_d©a
(
d©a
);

1225 i‡(
	`Ωc_mou¡3_um¡_èsk
(
Ωc
, 
nfs3_umou¡_2_cb
, 
nfs
->
nfsi
->
exp‹t
,

1226 
d©a
Ë=
NULL
) {

1227 
	`nfs_£t_îr‹
(
nfs
, "%s: %s.", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

1228 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1229 
	`‰ì_nfs_cb_d©a
(
d©a
);

1232 
	}
}

1235 
	$nfs3_umou¡_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1237 
nfs_cb_d©a
 *
d©a
;

1239 
d©a
 = 
	`mÆloc
((
nfs_cb_d©a
));

1240 i‡(
d©a
 =
NULL
) {

1241 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

1245 
	`mem£t
(
d©a
, 0, (
nfs_cb_d©a
));

1247 
d©a
->
nfs
 =Çfs;

1248 
d©a
->
cb
 = cb;

1249 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1251 
	`Ωc_disc⁄√˘
(
nfs
->
Ωc
, "umount");

1253 i‡(
nfs
->
nfsi
->
mou¡p‹t
) {

1254 i‡(
	`Ωc_c⁄√˘_p‹t_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

1255 
nfs
->
nfsi
->
mou¡p‹t
,

1256 
MOUNT_PROGRAM
, 
MOUNT_V3
,

1257 
nfs3_umou¡_1_cb
, 
d©a
) != 0) {

1258 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start connection. %s",

1259 
	`nfs_gë_îr‹
(
nfs
));

1260 
	`‰ì_nfs_cb_d©a
(
d©a
);

1266 i‡(
	`Ωc_c⁄√˘_¥ogøm_async
(
nfs
->
Ωc
, 
	`nfs_gë_£rvî
(nfs),

1267 
MOUNT_PROGRAM
, 
MOUNT_V3
,

1268 
nfs3_umou¡_1_cb
, 
d©a
) != 0) {

1269 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start connection. %s",

1270 
	`nfs_gë_îr‹
(
nfs
));

1271 
	`‰ì_nfs_cb_d©a
(
d©a
);

1276 
	}
}

1279 
	snfs_lök_d©a
 {

1280 *
	mﬁd∑th
;

1281 
nfs_fh
 
	mﬁdfh
;

1282 *
	m√w∑ª¡
;

1283 *
	m√wobje˘
;

1284 
nfs_fh
 
	m√wdú
;

1288 
	$‰ì_nfs_lök_d©a
(*
mem
)

1290 
nfs_lök_d©a
 *
d©a
 = 
mem
;

1292 
	`‰ì
(
d©a
->
ﬁd∑th
);

1293 
	`‰ì
(
d©a
->
ﬁdfh
.
vÆ
);

1294 
	`‰ì
(
d©a
->
√w∑ª¡
);

1295 
	`‰ì
(
d©a
->
√wobje˘
);

1296 
	`‰ì
(
d©a
->
√wdú
.
vÆ
);

1297 
	`‰ì
(
d©a
);

1298 
	}
}

1301 
	$nfs3_lök_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1302 *
¥iv©e_d©a
)

1304 
LINK3ªs
 *
ªs
;

1305 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1306 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1307 
nfs_lök_d©a
 *
lök_d©a
 = 
d©a
->
c⁄töue_d©a
;

1309 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1311 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1312 
	`‰ì_nfs_cb_d©a
(
d©a
);

1316 
ªs
 = 
comm™d_d©a
;

1317 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

1318 
	`nfs_£t_îr‹
(
nfs
, "NFS: LINK %s -> %s/%s failed with "

1319 "%s(%d)", 
lök_d©a
->
ﬁd∑th
,

1320 
lök_d©a
->
√w∑ª¡
,

1321 
lök_d©a
->
√wobje˘
,

1322 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

1323 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

1324 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1325 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1326 
	`‰ì_nfs_cb_d©a
(
d©a
);

1330 
	`nfs_dúˇche_dr›
(
nfs
, &
lök_d©a
->
√wdú
);

1331 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1332 
	`‰ì_nfs_cb_d©a
(
d©a
);

1333 
	}
}

1336 
	$nfs3_lök_c⁄töue_2_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1337 
nfs_©å
 *
©å
 
_U_
,

1338 
nfs_cb_d©a
 *
d©a
)

1340 
nfs_lök_d©a
 *
lök_d©a
 = 
d©a
->
c⁄töue_d©a
;

1341 
LINK3¨gs
 
¨gs
;

1344 
lök_d©a
->
√wdú
 = 
d©a
->
fh
;

1345 
d©a
->
fh
.
vÆ
 = 
NULL
;

1347 
	`mem£t
(&
¨gs
, 0, (
LINK3¨gs
));

1348 
¨gs
.
fûe
.
d©a
.
d©a_Àn
 = 
lök_d©a
->
ﬁdfh
.
Àn
;

1349 
¨gs
.
fûe
.
d©a
.
d©a_vÆ
 = 
lök_d©a
->
ﬁdfh
.
vÆ
;

1350 
¨gs
.
lök
.
dú
.
d©a
.
d©a_Àn
 = 
lök_d©a
->
√wdú
.
Àn
;

1351 
¨gs
.
lök
.
dú
.
d©a
.
d©a_vÆ
 = 
lök_d©a
->
√wdú
.
vÆ
;

1352 
¨gs
.
lök
.
«me
 = 
lök_d©a
->
√wobje˘
;

1353 i‡(
	`Ωc_nfs3_lök_èsk
(
nfs
->
Ωc
, 
nfs3_lök_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

1354 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send LINK "

1355 "ˇŒ f‹ %s", 
d©a
->
∑th
);

1356 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1357 
	`‰ì_nfs_cb_d©a
(
d©a
);

1361 
	}
}

1364 
	$nfs3_lök_c⁄töue_1_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1365 
nfs_©å
 *
©å
 
_U_
,

1366 
nfs_cb_d©a
 *
d©a
)

1368 
nfs_lök_d©a
 *
lök_d©a
 = 
d©a
->
c⁄töue_d©a
;

1371 
lök_d©a
->
ﬁdfh
 = 
d©a
->
fh
;

1372 
d©a
->
fh
.
vÆ
 = 
NULL
;

1374 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
lök_d©a
->
√w∑ª¡
, 0,

1375 
d©a
->
cb
, d©a->
¥iv©e_d©a
,

1376 
nfs3_lök_c⁄töue_2_öã∫Æ
,

1377 
lök_d©a
, 
‰ì_nfs_lök_d©a
, 0) != 0) {

1378 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1379 
d©a
->
¥iv©e_d©a
);

1380 
d©a
->
c⁄töue_d©a
 = 
NULL
;

1381 
	`‰ì_nfs_cb_d©a
(
d©a
);

1384 
d©a
->
c⁄töue_d©a
 = 
NULL
;

1385 
	`‰ì_nfs_cb_d©a
(
d©a
);

1388 
	}
}

1391 
	$nfs3_lök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

1392 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1394 *
±r
;

1395 
nfs_lök_d©a
 *
lök_d©a
;

1397 
lök_d©a
 = 
	`ˇŒoc
(1, (
nfs_lök_d©a
));

1398 i‡(
lök_d©a
 =
NULL
) {

1399 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1404 
lök_d©a
->
ﬁd∑th
 = 
	`°rdup
(oldpath);

1405 i‡(
lök_d©a
->
ﬁd∑th
 =
NULL
) {

1406 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1408 
	`‰ì_nfs_lök_d©a
(
lök_d©a
);

1412 
lök_d©a
->
√wobje˘
 = 
	`°rdup
(
√w∑th
);

1413 i‡(
lök_d©a
->
√wobje˘
 =
NULL
) {

1414 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅo strdup "

1416 
	`‰ì_nfs_lök_d©a
(
lök_d©a
);

1419 
±r
 = 
	`°ºchr
(
lök_d©a
->
√wobje˘
, '/');

1420 i‡(
±r
 =
NULL
) {

1421 
lök_d©a
->
√w∑ª¡
 = 
NULL
;

1423 *
±r
 = 0;

1424 
lök_d©a
->
√w∑ª¡
 =Üök_d©a->
√wobje˘
;

1426 
±r
++;

1427 
lök_d©a
->
√wobje˘
 = 
	`°rdup
(
±r
);

1429 i‡(
lök_d©a
->
√wobje˘
 =
NULL
) {

1430 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1432 
	`‰ì_nfs_lök_d©a
(
lök_d©a
);

1436 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
lök_d©a
->
ﬁd∑th
, 0,

1437 
cb
, 
¥iv©e_d©a
,

1438 
nfs3_lök_c⁄töue_1_öã∫Æ
,

1439 
lök_d©a
, 
‰ì_nfs_lök_d©a
, 0) != 0) {

1444 
	}
}

1446 
	snfs_ª«me_d©a
 {

1447 *
	mﬁd∑ª¡
;

1448 *
	mﬁdobje˘
;

1449 
nfs_fh
 
	mﬁddú
;

1450 *
	m√w∑ª¡
;

1451 *
	m√wobje˘
;

1452 
nfs_fh
 
	m√wdú
;

1456 
	$‰ì_nfs_ª«me_d©a
(*
mem
)

1458 
nfs_ª«me_d©a
 *
d©a
 = 
mem
;

1460 
	`‰ì
(
d©a
->
ﬁd∑ª¡
);

1461 
	`‰ì
(
d©a
->
ﬁdobje˘
);

1462 
	`‰ì
(
d©a
->
ﬁddú
.
vÆ
);

1463 
	`‰ì
(
d©a
->
√w∑ª¡
);

1464 
	`‰ì
(
d©a
->
√wobje˘
);

1465 
	`‰ì
(
d©a
->
√wdú
.
vÆ
);

1466 
	`‰ì
(
d©a
);

1467 
	}
}

1470 
	$nfs3_ª«me_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1471 *
¥iv©e_d©a
)

1473 
RENAME3ªs
 *
ªs
;

1474 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1475 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1476 
nfs_ª«me_d©a
 *
ª«me_d©a
 = 
d©a
->
c⁄töue_d©a
;

1478 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1480 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1481 
	`‰ì_nfs_cb_d©a
(
d©a
);

1485 
ªs
 = 
comm™d_d©a
;

1486 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

1487 
	`nfs_£t_îr‹
(
nfs
, "NFS: RENAME %s/%s -> %s/%s failed "

1488 "wôh %s(%d)", 
ª«me_d©a
->
ﬁd∑ª¡
,

1489 
ª«me_d©a
->
ﬁdobje˘
,Ñíame_d©a->
√w∑ª¡
,

1490 
ª«me_d©a
->
√wobje˘
,

1491 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

1492 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

1493 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1494 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1495 
	`‰ì_nfs_cb_d©a
(
d©a
);

1499 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1500 
	`‰ì_nfs_cb_d©a
(
d©a
);

1501 
	}
}

1504 
	$nfs3_ª«me_c⁄töue_2_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1505 
nfs_©å
 *
©å
 
_U_
,

1506 
nfs_cb_d©a
 *
d©a
)

1508 
nfs_ª«me_d©a
 *
ª«me_d©a
 = 
d©a
->
c⁄töue_d©a
;

1509 
RENAME3¨gs
 
¨gs
;

1512 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

1515 
ª«me_d©a
->
√wdú
 = 
d©a
->
fh
;

1516 
d©a
->
fh
.
vÆ
 = 
NULL
;

1518 
¨gs
.
‰om
.
dú
.
d©a
.
d©a_Àn
 = 
ª«me_d©a
->
ﬁddú
.
Àn
;

1519 
¨gs
.
‰om
.
dú
.
d©a
.
d©a_vÆ
 = 
ª«me_d©a
->
ﬁddú
.
vÆ
;

1520 
¨gs
.
‰om
.
«me
 = 
ª«me_d©a
->
ﬁdobje˘
;

1521 
¨gs
.
to
.
dú
.
d©a
.
d©a_Àn
 = 
ª«me_d©a
->
√wdú
.
Àn
;

1522 
¨gs
.
to
.
dú
.
d©a
.
d©a_vÆ
 = 
ª«me_d©a
->
√wdú
.
vÆ
;

1523 
¨gs
.
to
.
«me
 = 
ª«me_d©a
->
√wobje˘
;

1524 i‡(
	`Ωc_nfs3_ª«me_èsk
(
nfs
->
Ωc
, 
nfs3_ª«me_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

1525 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send RENAME "

1526 "ˇŒ f‹ %s", 
d©a
->
∑th
);

1527 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1528 
d©a
->
¥iv©e_d©a
);

1529 
	`‰ì_nfs_cb_d©a
(
d©a
);

1533 
	}
}

1536 
	$nfs3_ª«me_c⁄töue_1_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1537 
nfs_©å
 *
©å
 
_U_
,

1538 
nfs_cb_d©a
 *
d©a
)

1540 
nfs_ª«me_d©a
 *
ª«me_d©a
 = 
d©a
->
c⁄töue_d©a
;

1543 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

1546 
ª«me_d©a
->
ﬁddú
 = 
d©a
->
fh
;

1547 
d©a
->
fh
.
vÆ
 = 
NULL
;

1549 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
ª«me_d©a
->
√w∑ª¡
, 0,

1550 
d©a
->
cb
, d©a->
¥iv©e_d©a
,

1551 
nfs3_ª«me_c⁄töue_2_öã∫Æ
,

1552 
ª«me_d©a
, 
‰ì_nfs_ª«me_d©a
, 0) != 0) {

1553 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1554 
d©a
->
¥iv©e_d©a
);

1555 
d©a
->
c⁄töue_d©a
 = 
NULL
;

1556 
	`‰ì_nfs_cb_d©a
(
d©a
);

1559 
d©a
->
c⁄töue_d©a
 = 
NULL
;

1560 
	`‰ì_nfs_cb_d©a
(
d©a
);

1563 
	}
}

1566 
	$nfs3_ª«me_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

1567 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1569 *
±r
;

1570 
nfs_ª«me_d©a
 *
ª«me_d©a
;

1572 
ª«me_d©a
 = 
	`ˇŒoc
(1, (
nfs_ª«me_d©a
));

1573 i‡(
ª«me_d©a
 =
NULL
) {

1574 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1579 
ª«me_d©a
->
ﬁdobje˘
 = 
	`°rdup
(
ﬁd∑th
);

1580 i‡(
ª«me_d©a
->
ﬁdobje˘
 =
NULL
) {

1581 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅo strdup "

1583 
	`‰ì_nfs_ª«me_d©a
(
ª«me_d©a
);

1586 
±r
 = 
	`°ºchr
(
ª«me_d©a
->
ﬁdobje˘
, '/');

1587 i‡(
±r
 =
NULL
) {

1588 
ª«me_d©a
->
ﬁd∑ª¡
 = 
NULL
;

1590 *
±r
 = 0;

1591 
ª«me_d©a
->
ﬁd∑ª¡
 =Ñíame_d©a->
ﬁdobje˘
;

1593 
±r
++;

1594 
ª«me_d©a
->
ﬁdobje˘
 = 
	`°rdup
(
±r
);

1596 i‡(
ª«me_d©a
->
ﬁdobje˘
 =
NULL
) {

1597 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1599 
	`‰ì_nfs_ª«me_d©a
(
ª«me_d©a
);

1603 
ª«me_d©a
->
√wobje˘
 = 
	`°rdup
(
√w∑th
);

1604 i‡(
ª«me_d©a
->
√wobje˘
 =
NULL
) {

1605 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅo strdup "

1607 
	`‰ì_nfs_ª«me_d©a
(
ª«me_d©a
);

1610 
±r
 = 
	`°ºchr
(
ª«me_d©a
->
√wobje˘
, '/');

1611 i‡(
±r
 =
NULL
) {

1612 
ª«me_d©a
->
√w∑ª¡
 = 
NULL
;

1614 *
±r
 = 0;

1615 
ª«me_d©a
->
√w∑ª¡
 =Ñíame_d©a->
√wobje˘
;

1617 
±r
++;

1618 
ª«me_d©a
->
√wobje˘
 = 
	`°rdup
(
±r
);

1620 i‡(
ª«me_d©a
->
√wobje˘
 =
NULL
) {

1621 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1623 
	`‰ì_nfs_ª«me_d©a
(
ª«me_d©a
);

1627 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
ª«me_d©a
->
ﬁd∑ª¡
, 0,

1628 
cb
, 
¥iv©e_d©a
,

1629 
nfs3_ª«me_c⁄töue_1_öã∫Æ
,

1630 
ª«me_d©a
, 
‰ì_nfs_ª«me_d©a
, 0) != 0) {

1635 
	}
}

1638 
	snfs_symlök_d©a
 {

1639 *
	mèrgë
;

1640 *
	mlök∑ª¡
;

1641 *
	mlökobje˘
;

1645 
	$‰ì_nfs_symlök_d©a
(*
mem
)

1647 
nfs_symlök_d©a
 *
d©a
 = 
mem
;

1649 
	`‰ì
(
d©a
->
èrgë
);

1650 
	`‰ì
(
d©a
->
lök∑ª¡
);

1651 
	`‰ì
(
d©a
->
lökobje˘
);

1652 
	`‰ì
(
d©a
);

1653 
	}
}

1656 
	$nfs3_symlök_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1657 *
¥iv©e_d©a
)

1659 
SYMLINK3ªs
 *
ªs
;

1660 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1661 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1662 
nfs_symlök_d©a
 *
symlök_d©a
 = 
d©a
->
c⁄töue_d©a
;

1664 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1666 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1667 
	`‰ì_nfs_cb_d©a
(
d©a
);

1671 
ªs
 = 
comm™d_d©a
;

1672 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

1673 
	`nfs_£t_îr‹
(
nfs
, "NFS: SYMLINK %s/%s -> %s failed with "

1674 "%s(%d)", 
symlök_d©a
->
lök∑ª¡
,

1675 
symlök_d©a
->
lökobje˘
,

1676 
symlök_d©a
->
èrgë
,

1677 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

1678 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

1679 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1680 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1681 
	`‰ì_nfs_cb_d©a
(
d©a
);

1685 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

1686 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1687 
	`‰ì_nfs_cb_d©a
(
d©a
);

1688 
	}
}

1691 
	$nfs3_symlök_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1692 
nfs_©å
 *
©å
 
_U_
,

1693 
nfs_cb_d©a
 *
d©a
)

1695 
nfs_symlök_d©a
 *
symlök_d©a
 = 
d©a
->
c⁄töue_d©a
;

1696 
SYMLINK3¨gs
 
¨gs
;

1698 
	`mem£t
(&
¨gs
, 0, (
SYMLINK3¨gs
));

1699 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

1700 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

1701 
¨gs
.
whîe
.
«me
 = 
symlök_d©a
->
lökobje˘
;

1702 
¨gs
.
symlök
.
symlök_©åibuãs
.
mode
.
£t_ô
 = 1;

1703 
¨gs
.
symlök
.
symlök_©åibuãs
.
mode
.
£t_mode3_u
.modê
S_IRUSR
|
S_IWUSR
|
S_IXUSR
|
S_IRGRP
|
S_IWGRP
|
S_IXGRP
|
S_IROTH
|
S_IWOTH
|
S_IXOTH
;

1704 
¨gs
.
symlök
.
symlök_d©a
 = symlök_d©a->
èrgë
;

1706 i‡(
	`Ωc_nfs3_symlök_èsk
(
nfs
->
Ωc
, 
nfs3_symlök_cb
,

1707 &
¨gs
, 
d©a
Ë=
NULL
) {

1708 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send SYMLINK "

1709 "ˇŒ f‹ %s", 
d©a
->
∑th
);

1710 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1711 
	`‰ì_nfs_cb_d©a
(
d©a
);

1715 
	}
}

1718 
	$nfs3_symlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
èrgë
,

1719 c⁄° *
lök«me
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1721 *
±r
;

1722 
nfs_symlök_d©a
 *
symlök_d©a
;

1724 
symlök_d©a
 = 
	`ˇŒoc
(1, (
nfs_symlök_d©a
));

1725 i‡(
symlök_d©a
 =
NULL
) {

1726 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1731 
symlök_d©a
->
èrgë
 = 
	`°rdup
(target);

1732 i‡(
symlök_d©a
->
èrgë
 =
NULL
) {

1733 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1735 
	`‰ì_nfs_symlök_d©a
(
symlök_d©a
);

1739 
symlök_d©a
->
lökobje˘
 = 
	`°rdup
(
lök«me
);

1740 i‡(
symlök_d©a
->
lökobje˘
 =
NULL
) {

1741 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅo strdup "

1743 
	`‰ì_nfs_symlök_d©a
(
symlök_d©a
);

1746 
±r
 = 
	`°ºchr
(
symlök_d©a
->
lökobje˘
, '/');

1747 i‡(
±r
 =
NULL
) {

1748 
symlök_d©a
->
lök∑ª¡
 = 
NULL
;

1750 *
±r
 = 0;

1751 
symlök_d©a
->
lök∑ª¡
 = symlök_d©a->
lökobje˘
;

1753 
±r
++;

1754 
symlök_d©a
->
lökobje˘
 = 
	`°rdup
(
±r
);

1757 i‡(
symlök_d©a
->
lökobje˘
 =
NULL
) {

1758 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

1760 
	`‰ì_nfs_symlök_d©a
(
symlök_d©a
);

1764 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
symlök_d©a
->
lök∑ª¡
, 0,

1765 
cb
, 
¥iv©e_d©a
,

1766 
nfs3_symlök_c⁄töue_öã∫Æ
,

1767 
symlök_d©a
, 
‰ì_nfs_symlök_d©a
, 0)

1773 
	}
}

1777 
	$nfs3_ac˚ss2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1778 *
¥iv©e_d©a
)

1780 
ACCESS3ªs
 *
ªs
;

1781 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1782 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1783 
ªsu…
 = 0;

1785 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1787 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1788 
	`‰ì_nfs_cb_d©a
(
d©a
);

1792 
ªs
 = 
comm™d_d©a
;

1793 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

1794 
	`nfs_£t_îr‹
(
nfs
, "NFS: ACCESS of %s failed with %s(%d)",

1795 
d©a
->
ßved_∑th
,

1796 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

1797 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

1798 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1799 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1800 
	`‰ì_nfs_cb_d©a
(
d©a
);

1804 i‡(
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 & 
ACCESS3_READ
) {

1805 
ªsu…
 |
R_OK
;

1807 i‡(
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 & (
ACCESS3_MODIFY
 | 
ACCESS3_EXTEND
 | 
ACCESS3_DELETE
)) {

1808 
ªsu…
 |
W_OK
;

1810 i‡(
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 & (
ACCESS3_LOOKUP
 | 
ACCESS3_EXECUTE
)) {

1811 
ªsu…
 |
X_OK
;

1814 
d©a
->
	`cb
(
ªsu…
, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1815 
	`‰ì_nfs_cb_d©a
(
d©a
);

1816 
	}
}

1819 
	$nfs3_ac˚ss2_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1820 
nfs_©å
 *
©å
 
_U_
,

1821 
nfs_cb_d©a
 *
d©a
)

1823 
ACCESS3¨gs
 
¨gs
;

1825 
	`mem£t
(&
¨gs
, 0, (
ACCESS3¨gs
));

1826 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

1827 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

1828 
¨gs
.
ac˚ss
 = 
ACCESS3_READ
 | 
ACCESS3_LOOKUP
 | 
ACCESS3_MODIFY
 | 
ACCESS3_EXTEND
 | 
ACCESS3_DELETE
 | 
ACCESS3_EXECUTE
;

1830 i‡(
	`Ωc_nfs3_ac˚ss_èsk
(
nfs
->
Ωc
, 
nfs3_ac˚ss2_cb
,

1831 &
¨gs
, 
d©a
Ë=
NULL
) {

1832 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1833 
d©a
->
¥iv©e_d©a
);

1834 
	`‰ì_nfs_cb_d©a
(
d©a
);

1838 
	}
}

1841 
	$nfs3_ac˚ss2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

1842 *
¥iv©e_d©a
)

1844 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

1845 
nfs3_ac˚ss2_c⁄töue_öã∫Æ
,

1846 
NULL
, NULL, 0) != 0) {

1851 
	}
}

1855 
	$nfs3_ac˚ss_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1856 *
¥iv©e_d©a
)

1858 
ACCESS3ªs
 *
ªs
;

1859 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1860 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1861 
mode
 = 0;

1863 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1865 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1866 
	`‰ì_nfs_cb_d©a
(
d©a
);

1870 
ªs
 = 
comm™d_d©a
;

1871 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

1872 
	`nfs_£t_îr‹
(
nfs
, "NFS: ACCESS of %s failed with "

1873 "%s(%d)", 
d©a
->
ßved_∑th
,

1874 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

1875 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

1876 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1877 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1878 
	`‰ì_nfs_cb_d©a
(
d©a
);

1882 i‡((
d©a
->
c⁄töue_öt
 & 
R_OK
Ë&& (
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 & 
ACCESS3_READ
)) {

1883 
mode
 |
R_OK
;

1885 i‡((
d©a
->
c⁄töue_öt
 & 
W_OK
Ë&& (
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 & (
ACCESS3_MODIFY
 | 
ACCESS3_EXTEND
 | 
ACCESS3_DELETE
))) {

1886 
mode
 |
W_OK
;

1888 i‡((
d©a
->
c⁄töue_öt
 & 
X_OK
Ë&& (
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 & (
ACCESS3_LOOKUP
 | 
ACCESS3_EXECUTE
))) {

1889 
mode
 |
X_OK
;

1892 i‡(
d©a
->
c⁄töue_öt
 !
mode
) {

1893 
	`nfs_£t_îr‹
(
nfs
, "NFS: ACCESS denied. Requiredáccess "

1895 
d©a
->
c⁄töue_öt
&
R_OK
?'r':'-',

1896 
d©a
->
c⁄töue_öt
&
W_OK
?'w':'-',

1897 
d©a
->
c⁄töue_öt
&
X_OK
?'x':'-',

1898 
mode
&
R_OK
?'r':'-',

1899 
mode
&
W_OK
?'w':'-',

1900 
mode
&
X_OK
?'x':'-');

1901 
d©a
->
	`cb
(-
EACCES
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1902 
d©a
->
¥iv©e_d©a
);

1903 
	`‰ì_nfs_cb_d©a
(
d©a
);

1907 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1908 
	`‰ì_nfs_cb_d©a
(
d©a
);

1909 
	}
}

1912 
	$nfs3_ac˚ss_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1913 
nfs_©å
 *
©å
 
_U_
,

1914 
nfs_cb_d©a
 *
d©a
)

1916 
nfsmode
 = 0;

1917 
ACCESS3¨gs
 
¨gs
;

1919 i‡(
d©a
->
c⁄töue_öt
 & 
R_OK
) {

1920 
nfsmode
 |
ACCESS3_READ
;

1922 i‡(
d©a
->
c⁄töue_öt
 & 
W_OK
) {

1923 
nfsmode
 |
ACCESS3_MODIFY
 | 
ACCESS3_EXTEND
 | 
ACCESS3_DELETE
;

1925 i‡(
d©a
->
c⁄töue_öt
 & 
X_OK
) {

1926 
nfsmode
 |
ACCESS3_LOOKUP
 | 
ACCESS3_EXECUTE
;

1929 
	`mem£t
(&
¨gs
, 0, (
ACCESS3¨gs
));

1930 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

1931 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

1932 
¨gs
.
ac˚ss
 = 
nfsmode
;

1934 i‡(
	`Ωc_nfs3_ac˚ss_èsk
(
nfs
->
Ωc
, 
nfs3_ac˚ss_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

1935 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1936 
d©a
->
¥iv©e_d©a
);

1937 
	`‰ì_nfs_cb_d©a
(
d©a
);

1941 
	}
}

1944 
	$nfs3_ac˚ss_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1945 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1947 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

1948 
nfs3_ac˚ss_c⁄töue_öã∫Æ
,

1949 
NULL
, NULL,

1950 
mode
 & (
R_OK
 | 
W_OK
 | 
X_OK
)) != 0) {

1955 
	}
}

1958 
	$nfs3_utimes_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1959 *
¥iv©e_d©a
)

1961 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1962 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1963 
SETATTR3ªs
 *
ªs
;

1965 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1967 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

1968 
	`‰ì_nfs_cb_d©a
(
d©a
);

1972 
ªs
 = 
comm™d_d©a
;

1973 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

1974 
	`nfs_£t_îr‹
(
nfs
, "NFS: SETATTR failed with %s(%d)",

1975 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

1976 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

1977 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1978 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1979 
	`‰ì_nfs_cb_d©a
(
d©a
);

1983 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

1984 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1985 
	`‰ì_nfs_cb_d©a
(
d©a
);

1986 
	}
}

1989 
	$nfs3_utimes_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

1990 
nfs_©å
 *
©å
 
_U_
,

1991 
nfs_cb_d©a
 *
d©a
)

1993 
SETATTR3¨gs
 
¨gs
;

1994 
timevÆ
 *
utimes_d©a
 = 
d©a
->
c⁄töue_d©a
;

1996 
	`mem£t
(&
¨gs
, 0, (
SETATTR3¨gs
));

1997 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

1998 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

1999 i‡(
utimes_d©a
 !
NULL
) {

2000 
¨gs
.
√w_©åibuãs
.
©ime
.
£t_ô
 = 
SET_TO_CLIENT_TIME
;

2001 
¨gs
.
√w_©åibuãs
.
©ime
.
£t_©ime_u
.©ime.
£c⁄ds
 = 
utimes_d©a
[0].
tv_£c
;

2002 
¨gs
.
√w_©åibuãs
.
©ime
.
£t_©ime_u
.©ime.
n£c⁄ds
 = 
utimes_d©a
[0].
tv_u£c
 * 1000;

2003 
¨gs
.
√w_©åibuãs
.
mtime
.
£t_ô
 = 
SET_TO_CLIENT_TIME
;

2004 
¨gs
.
√w_©åibuãs
.
mtime
.
£t_mtime_u
.mtime.
£c⁄ds
 = 
utimes_d©a
[1].
tv_£c
;

2005 
¨gs
.
√w_©åibuãs
.
mtime
.
£t_mtime_u
.mtime.
n£c⁄ds
 = 
utimes_d©a
[1].
tv_u£c
 * 1000;

2007 
¨gs
.
√w_©åibuãs
.
©ime
.
£t_ô
 = 
SET_TO_SERVER_TIME
;

2008 
¨gs
.
√w_©åibuãs
.
mtime
.
£t_ô
 = 
SET_TO_SERVER_TIME
;

2011 i‡(
	`Ωc_nfs3_£èâr_èsk
(
nfs
->
Ωc
, 
nfs3_utimes_cb
,

2012 &
¨gs
, 
d©a
Ë=
NULL
) {

2013 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send SETATTR "

2014 "ˇŒ f‹ %s", 
d©a
->
∑th
);

2015 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2016 
d©a
->
¥iv©e_d©a
);

2017 
	`‰ì_nfs_cb_d©a
(
d©a
);

2021 
	}
}

2024 
	$nfs3_utimes_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

2025 
no_fﬁlow
, 
timevÆ
 *
times
,

2026 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2028 
timevÆ
 *
√w_times
 = 
NULL
;

2030 i‡(
times
 !
NULL
) {

2031 
√w_times
 = 
	`mÆloc
((
timevÆ
)*2);

2032 i‡(
√w_times
 =
NULL
) {

2033 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocate memory "

2038 
	`mem˝y
(
√w_times
, 
times
, (
timevÆ
)*2);

2041 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 
no_fﬁlow
, 
cb
, 
¥iv©e_d©a
,

2042 
nfs3_utimes_c⁄töue_öã∫Æ
,

2043 
√w_times
, 
‰ì
, 0) != 0) {

2048 
	}
}

2051 
	$nfs3_utime_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

2052 
utimbuf
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2054 
timevÆ
 *
√w_times
 = 
NULL
;

2056 i‡(
times
 !
NULL
) {

2057 
√w_times
 = 
	`mÆloc
((
timevÆ
)*2);

2058 i‡(
√w_times
 =
NULL
) {

2059 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocate memory "

2064 
√w_times
[0].
tv_£c
 = 
times
->
a˘ime
;

2065 
√w_times
[0].
tv_u£c
 = 0;

2066 
√w_times
[1].
tv_£c
 = 
times
->
modtime
;

2067 
√w_times
[1].
tv_u£c
 = 0;

2070 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

2071 
nfs3_utimes_c⁄töue_öã∫Æ
,

2072 
√w_times
, 
‰ì
, 0) != 0) {

2077 
	}
}

2081 
	$nfs3_chown_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2082 *
¥iv©e_d©a
)

2084 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2085 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2086 
SETATTR3ªs
 *
ªs
;

2088 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2090 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2091 
	`‰ì_nfs_cb_d©a
(
d©a
);

2095 
ªs
 = 
comm™d_d©a
;

2096 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2097 
	`nfs_£t_îr‹
(
nfs
, "NFS: SETATTR failed with %s(%d)",

2098 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2099 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2100 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2101 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2102 
	`‰ì_nfs_cb_d©a
(
d©a
);

2106 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

2107 
	`‰ì_nfs_cb_d©a
(
d©a
);

2108 
	}
}

2110 
	snfs_chown_d©a
 {

2111 
uid_t
 
	muid
;

2112 
gid_t
 
	mgid
;

2116 
	$nfs3_chown_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

2117 
nfs_©å
 *
©å
 
_U_
,

2118 
nfs_cb_d©a
 *
d©a
)

2120 
SETATTR3¨gs
 
¨gs
;

2121 
nfs_chown_d©a
 *
chown_d©a
 = 
d©a
->
c⁄töue_d©a
;

2123 
	`mem£t
(&
¨gs
, 0, (
SETATTR3¨gs
));

2124 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2125 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2126 i‡(
chown_d©a
->
uid
 !(
uid_t
)-1) {

2127 
¨gs
.
√w_©åibuãs
.
uid
.
£t_ô
 = 1;

2128 
¨gs
.
√w_©åibuãs
.
uid
.
£t_uid3_u
.uid = 
chown_d©a
->uid;

2130 i‡(
chown_d©a
->
gid
 !(
gid_t
)-1) {

2131 
¨gs
.
√w_©åibuãs
.
gid
.
£t_ô
 = 1;

2132 
¨gs
.
√w_©åibuãs
.
gid
.
£t_gid3_u
.gid = 
chown_d©a
->gid;

2135 i‡(
	`Ωc_nfs3_£èâr_èsk
(
nfs
->
Ωc
, 
nfs3_chown_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

2136 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send SETATTR "

2137 "ˇŒ f‹ %s", 
d©a
->
∑th
);

2138 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2139 
d©a
->
¥iv©e_d©a
);

2140 
	`‰ì_nfs_cb_d©a
(
d©a
);

2144 
	}
}

2147 
	$nfs3_chown_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

2148 
no_fﬁlow
, 
uid
, 
gid
,

2149 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2151 
nfs_chown_d©a
 *
chown_d©a
;

2153 
chown_d©a
 = 
	`mÆloc
((
nfs_chown_d©a
));

2154 i‡(
chown_d©a
 =
NULL
) {

2155 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocate memory for "

2160 
chown_d©a
->
uid
 = uid;

2161 
chown_d©a
->
gid
 = gid;

2163 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 
no_fﬁlow
, 
cb
, 
¥iv©e_d©a
,

2164 
nfs3_chown_c⁄töue_öã∫Æ
,

2165 
chown_d©a
, 
‰ì
, 0) != 0) {

2170 
	}
}

2173 
	$nfs3_fchown_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uid
,

2174 
gid
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2176 
nfs_cb_d©a
 *
d©a
;

2177 
nfs_chown_d©a
 *
chown_d©a
;

2179 
chown_d©a
 = 
	`mÆloc
((
nfs_chown_d©a
));

2180 i‡(
chown_d©a
 =
NULL
) {

2181 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocate memory for "

2186 
chown_d©a
->
uid
 = uid;

2187 
chown_d©a
->
gid
 = gid;

2189 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

2190 i‡(
d©a
 =
NULL
) {

2191 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

2193 
	`‰ì
(
chown_d©a
);

2196 
d©a
->
nfs
 =Çfs;

2197 
d©a
->
cb
 = cb;

2198 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2199 
d©a
->
c⁄töue_d©a
 = 
chown_d©a
;

2200 
d©a
->
‰ì_c⁄töue_d©a
 = 
‰ì
;

2201 
d©a
->
fh
.
Àn
 = 
nfsfh
->fh.len;

2202 
d©a
->
fh
.
vÆ
 = 
	`mÆloc
(d©a->fh.
Àn
);

2203 i‡(
d©a
->
fh
.
vÆ
 =
NULL
) {

2204 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: FailedÅoállocate fh");

2205 
	`‰ì_nfs_cb_d©a
(
d©a
);

2208 
	`mem˝y
(
d©a
->
fh
.
vÆ
, 
nfsfh
->fh.vÆ, d©a->fh.
Àn
);

2210 i‡(
	`nfs3_chown_c⁄töue_öã∫Æ
(
nfs
, 
NULL
, 
d©a
) != 0) {

2215 
	}
}

2218 
	$nfs3_chmod_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2219 *
¥iv©e_d©a
)

2221 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2222 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2223 
SETATTR3ªs
 *
ªs
;

2225 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2227 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2228 
	`‰ì_nfs_cb_d©a
(
d©a
);

2232 
ªs
 = 
comm™d_d©a
;

2233 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2234 
	`nfs_£t_îr‹
(
nfs
, "NFS: SETATTR failed with %s(%d)",

2235 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2236 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2237 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2238 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2239 
	`‰ì_nfs_cb_d©a
(
d©a
);

2243 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

2244 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

2245 
	`‰ì_nfs_cb_d©a
(
d©a
);

2246 
	}
}

2249 
	$nfs3_chmod_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

2250 
nfs_©å
 *
©å
 
_U_
,

2251 
nfs_cb_d©a
 *
d©a
)

2253 
SETATTR3¨gs
 
¨gs
;

2255 
	`mem£t
(&
¨gs
, 0, (
SETATTR3¨gs
));

2256 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2257 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2258 
¨gs
.
√w_©åibuãs
.
mode
.
£t_ô
 = 1;

2259 
¨gs
.
√w_©åibuãs
.
mode
.
£t_mode3_u
.modê(
mode3
)
d©a
->
c⁄töue_öt
;

2261 i‡(
	`Ωc_nfs3_£èâr_èsk
(
nfs
->
Ωc
, 
nfs3_chmod_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

2262 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send SETATTR "

2263 "ˇŒ f‹ %s", 
d©a
->
∑th
);

2264 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2265 
d©a
->
¥iv©e_d©a
);

2266 
	`‰ì_nfs_cb_d©a
(
d©a
);

2270 
	}
}

2273 
	$nfs3_chmod_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

2274 
no_fﬁlow
, 
mode
, 
nfs_cb
 
cb
,

2275 *
¥iv©e_d©a
)

2277 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 
no_fﬁlow
, 
cb
, 
¥iv©e_d©a
,

2278 
nfs3_chmod_c⁄töue_öã∫Æ
,

2279 
NULL
, NULL, 
mode
) != 0) {

2284 
	}
}

2287 
	$nfs3_fchmod_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
mode
,

2288 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2290 
nfs_cb_d©a
 *
d©a
;

2292 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

2293 i‡(
d©a
 =
NULL
) {

2294 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

2298 
d©a
->
nfs
 =Çfs;

2299 
d©a
->
cb
 = cb;

2300 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2301 
d©a
->
c⁄töue_öt
 = 
mode
;

2302 
d©a
->
fh
.
Àn
 = 
nfsfh
->fh.len;

2303 
d©a
->
fh
.
vÆ
 = 
	`mÆloc
(d©a->fh.
Àn
);

2304 i‡(
d©a
->
fh
.
vÆ
 =
NULL
) {

2305 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: FailedÅoállocate fh");

2306 
	`‰ì_nfs_cb_d©a
(
d©a
);

2309 
	`mem˝y
(
d©a
->
fh
.
vÆ
, 
nfsfh
->fh.vÆ, d©a->fh.
Àn
);

2311 i‡(
	`nfs3_chmod_c⁄töue_öã∫Æ
(
nfs
, 
NULL
, 
d©a
) != 0) {

2316 
	}
}

2320 
	$nfs3_ªadlök_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2321 *
¥iv©e_d©a
)

2323 
READLINK3ªs
 *
ªs
;

2324 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2325 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2327 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2329 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2330 
	`‰ì_nfs_cb_d©a
(
d©a
);

2334 
ªs
 = 
comm™d_d©a
;

2335 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2336 
	`nfs_£t_îr‹
(
nfs
, "NFS: READLINK of %s failed with "

2337 "%s(%d)", 
d©a
->
ßved_∑th
,

2338 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2339 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2340 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2341 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2342 
	`‰ì_nfs_cb_d©a
(
d©a
);

2346 
d©a
->
	`cb
(0, 
nfs
, 
ªs
->
READLINK3ªs_u
.
ªsok
.d©a, d©a->
¥iv©e_d©a
);

2347 
	`‰ì_nfs_cb_d©a
(
d©a
);

2348 
	}
}

2351 
	$nfs3_ªadlök_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

2352 
nfs_©å
 *
©å
 
_U_
,

2353 
nfs_cb_d©a
 *
d©a
)

2355 
READLINK3¨gs
 
¨gs
;

2357 
¨gs
.
symlök
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2358 
¨gs
.
symlök
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2360 i‡(
	`Ωc_nfs3_ªadlök_èsk
(
nfs
->
Ωc
, 
nfs3_ªadlök_1_cb
,

2361 &
¨gs
, 
d©a
Ë=
NULL
) {

2362 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send READLINK "

2363 "ˇŒ f‹ %s", 
d©a
->
∑th
);

2364 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2365 
d©a
->
¥iv©e_d©a
);

2366 
	`‰ì_nfs_cb_d©a
(
d©a
);

2370 
	}
}

2373 
	$nfs3_ªadlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

2374 *
¥iv©e_d©a
)

2376 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 1, 
cb
, 
¥iv©e_d©a
,

2377 
nfs3_ªadlök_c⁄töue_öã∫Æ
,

2378 
NULL
, NULL, 0) != 0) {

2383 
	}
}

2386 
	$nfs3_°©vfs_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2387 *
¥iv©e_d©a
)

2389 
FSSTAT3ªs
 *
ªs
;

2390 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2391 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2392 
°©vfs
 
svfs
;

2393 
nfs_°©vfs_64
 
svfs64
;

2395 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2397 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2398 
	`‰ì_nfs_cb_d©a
(
d©a
);

2402 
ªs
 = 
comm™d_d©a
;

2403 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2404 
	`nfs_£t_îr‹
(
nfs
, "NFS: FSSTAT of %s failed with "

2405 "%s(%d)", 
d©a
->
ßved_∑th
,

2406 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2407 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2408 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2409 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2410 
	`‰ì_nfs_cb_d©a
(
d©a
);

2414 i‡(
d©a
->
c⁄töue_öt
 == 0) {

2416 
svfs
.
f_bsize
 = 
NFS_BLKSIZE
;

2417 
svfs
.
f_‰size
 = 
NFS_BLKSIZE
;

2418 
svfs
.
f_blocks
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
tbyãs
/
NFS_BLKSIZE
;

2419 
svfs
.
f_b‰ì
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
fbyãs
/
NFS_BLKSIZE
;

2420 
svfs
.
f_bavaû
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
abyãs
/
NFS_BLKSIZE
;

2421 
svfs
.
f_fûes
 = (
uöt32_t
)
ªs
->
FSSTAT3ªs_u
.
ªsok
.
tfûes
;

2422 
svfs
.
f_f‰ì
 = (
uöt32_t
)
ªs
->
FSSTAT3ªs_u
.
ªsok
.
ffûes
;

2423 #i‡!
	`deföed
(
__ANDROID__
)

2424 
svfs
.
f_Ávaû
 = (
uöt32_t
)
ªs
->
FSSTAT3ªs_u
.
ªsok
.
afûes
;

2425 
svfs
.
f_fsid
 = 0;

2426 
svfs
.
f_Êag
 = 0;

2427 
svfs
.
f_«memax
 = 256;

2429 
d©a
->
	`cb
(0, 
nfs
, &
svfs
, d©a->
¥iv©e_d©a
);

2432 
svfs64
.
f_bsize
 = 
NFS_BLKSIZE
;

2433 
svfs64
.
f_‰size
 = 
NFS_BLKSIZE
;

2434 
svfs64
.
f_blocks
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
tbyãs
/
NFS_BLKSIZE
;

2435 
svfs64
.
f_b‰ì
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
fbyãs
/
NFS_BLKSIZE
;

2436 
svfs64
.
f_bavaû
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
abyãs
/
NFS_BLKSIZE
;

2437 
svfs64
.
f_fûes
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
tfûes
;

2438 
svfs64
.
f_f‰ì
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
ffûes
;

2439 
svfs64
.
f_Ávaû
 = 
ªs
->
FSSTAT3ªs_u
.
ªsok
.
afûes
;

2440 
svfs64
.
f_fsid
 = 0;

2441 
svfs64
.
f_Êag
 = 0;

2442 
svfs64
.
f_«memax
 = 256;

2444 
d©a
->
	`cb
(0, 
nfs
, &
svfs64
, d©a->
¥iv©e_d©a
);

2447 
	`‰ì_nfs_cb_d©a
(
d©a
);

2448 
	}
}

2451 
	$nfs3_°©vfs_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

2452 
nfs_©å
 *
©å
 
_U_
,

2453 
nfs_cb_d©a
 *
d©a
)

2455 
FSSTAT3¨gs
 
¨gs
;

2457 
¨gs
.
f§oŸ
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2458 
¨gs
.
f§oŸ
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2459 i‡(
	`Ωc_nfs3_fs°©_èsk
(
nfs
->
Ωc
, 
nfs3_°©vfs_1_cb
,

2460 &
¨gs
, 
d©a
Ë=
NULL
) {

2461 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send FSSTAT "

2462 "ˇŒ f‹ %s", 
d©a
->
∑th
);

2463 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2464 
d©a
->
¥iv©e_d©a
);

2465 
	`‰ì_nfs_cb_d©a
(
d©a
);

2469 
	}
}

2472 
	$nfs3_°©vfs_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

2473 *
¥iv©e_d©a
)

2475 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

2476 
nfs3_°©vfs_c⁄töue_öã∫Æ
,

2477 
NULL
, NULL, 0) != 0) {

2482 
	}
}

2485 
	$nfs3_°©vfs64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

2486 *
¥iv©e_d©a
)

2488 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

2489 
nfs3_°©vfs_c⁄töue_öã∫Æ
,

2490 
NULL
, NULL, 1) != 0) {

2495 
	}
}

2498 
	$nfs3_l£ek_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2499 *
¥iv©e_d©a
)

2501 
GETATTR3ªs
 *
ªs
;

2502 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2503 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2504 
öt64_t
 
size
 = 0;

2505 
öt64_t
 
off£t
 = (öt64_tË
d©a
->offset;

2507 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2509 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2510 
	`‰ì_nfs_cb_d©a
(
d©a
);

2514 
ªs
 = 
comm™d_d©a
;

2515 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2516 
	`nfs_£t_îr‹
(
nfs
, "NFS: GETATTR failed with "

2517 "%s(%d)", 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2518 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2519 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2520 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2521 
	`‰ì
(
d©a
);

2525 
size
 = (
öt64_t
)
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.size;

2527 i‡(
off£t
 < 0 &&

2528 -
off£t
 > (
öt64_t
)
size
) {

2529 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, &d©a->
nfsfh
->
off£t
,

2530 
d©a
->
¥iv©e_d©a
);

2532 
d©a
->
nfsfh
->
off£t
 = d©a->off£à+ 
size
;

2533 
d©a
->
	`cb
(0, 
nfs
, &d©a->
nfsfh
->
off£t
, d©a->
¥iv©e_d©a
);

2536 
	`‰ì
(
d©a
);

2537 
	}
}

2540 
	$nfs3_l£ek_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
öt64_t
 
off£t
,

2541 
whí˚
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2543 
nfs_cb_d©a
 *
d©a
;

2544 
GETATTR3¨gs
 
¨gs
;

2546 i‡(
whí˚
 =
SEEK_SET
) {

2547 i‡(
off£t
 < 0) {

2548 
	`cb
(-
EINVAL
, 
nfs
, &
nfsfh
->
off£t
, 
¥iv©e_d©a
);

2550 
nfsfh
->
off£t
 = offset;

2551 
	`cb
(0, 
nfs
, &
nfsfh
->
off£t
, 
¥iv©e_d©a
);

2555 i‡(
whí˚
 =
SEEK_CUR
) {

2556 i‡(
off£t
 < 0 &&

2557 
nfsfh
->
off£t
 < (
uöt64_t
)(-offset)) {

2558 
	`cb
(-
EINVAL
, 
nfs
, &
nfsfh
->
off£t
, 
¥iv©e_d©a
);

2560 
nfsfh
->
off£t
 += offset;

2561 
	`cb
(0, 
nfs
, &
nfsfh
->
off£t
, 
¥iv©e_d©a
);

2566 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

2567 i‡(
d©a
 =
NULL
) {

2568 
	`nfs_£t_îr‹
(
nfs
, "Out Of Memory: FailedÅo mallocÇfs "

2573 
d©a
->
nfs
 =Çfs;

2574 
d©a
->
nfsfh
 =Çfsfh;

2575 
d©a
->
off£t
 = offset;

2576 
d©a
->
cb
 = cb;

2577 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2579 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

2580 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

2581 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

2583 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_l£ek_1_cb
,

2584 &
¨gs
, 
d©a
Ë=
NULL
) {

2585 
	`‰ì
(
d©a
);

2589 
	}
}

2593 
	srd≥_cb_d©a
 {

2594 
	mgë©åcou¡
;

2595 
	m°©us
;

2596 
nfs_cb_d©a
 *
	md©a
;

2600 
	srd≥_lookup_cb_d©a
 {

2601 
rd≥_cb_d©a
 *
	mrd≥_cb_d©a
;

2602 
nfsdúít
 *
	mnfsdúít
;

2608 
	$nfs3_›ídú_3_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2609 *
¥iv©e_d©a
)

2611 
LOOKUP3ªs
 *
ªs
 = 
comm™d_d©a
;

2612 
rd≥_lookup_cb_d©a
 *rd≥_lookup_cb_d©®
¥iv©e_d©a
;

2613 
rd≥_cb_d©a
 *rd≥_cb_d©®
rd≥_lookup_cb_d©a
->rdpe_cb_data;

2614 
nfs_cb_d©a
 *
d©a
 = 
rd≥_cb_d©a
->data;

2615 
nfsdú
 *nfsdú = 
d©a
->
c⁄töue_d©a
;

2616 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2617 
nfsdúít
 *nfsdúíà
rd≥_lookup_cb_d©a
->nfsdirent;

2619 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2621 
	`‰ì
(
rd≥_lookup_cb_d©a
);

2623 
rd≥_cb_d©a
->
gë©åcou¡
--;

2625 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

2627 
	`nfs_£t_îr‹
(
nfs
, "LOOKUP during READDIRPLUSÉmulation "

2629 
rd≥_cb_d©a
->
°©us
 = 
RPC_STATUS_ERROR
;

2631 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

2632 
	`nfs_£t_îr‹
(
nfs
, "LOOKUP during READDIRPLUSÉmulation "

2634 
rd≥_cb_d©a
->
°©us
 = 
RPC_STATUS_CANCEL
;

2636 i‡(
°©us
 =
RPC_STATUS_TIMEOUT
) {

2637 
	`nfs_£t_îr‹
(
nfs
, "LOOKUP during READDIRPLUSÉmulation "

2639 
rd≥_cb_d©a
->
°©us
 = 
RPC_STATUS_CANCEL
;

2641 i‡(
°©us
 =
RPC_STATUS_SUCCESS
 && 
ªs
->°©u†=
NFS3_OK
) {

2642 i‡(
ªs
->
LOOKUP3ªs_u
.
ªsok
.
obj_©åibuãs
.
©åibuãs_fﬁlow
) {

2643 
Áâr3
 *
©åibuãs
 = &
ªs
->
LOOKUP3ªs_u
.
ªsok
.
obj_©åibuãs
.
po°_›_©å_u
.attributes;

2645 
nfsdúít
->
ty≥
 = 
©åibuãs
->type;

2646 
nfsdúít
->
mode
 = 
©åibuãs
->mode;

2647 
nfsdúít
->
ty≥
) {

2648 
NF3REG
: 
nfsdúít
->
mode
 |
S_IFREG
; ;

2649 
NF3DIR
: 
nfsdúít
->
mode
 |
S_IFDIR
; ;

2650 
NF3BLK
: 
nfsdúít
->
mode
 |
S_IFBLK
; ;

2651 
NF3CHR
: 
nfsdúít
->
mode
 |
S_IFCHR
; ;

2652 
NF3LNK
: 
nfsdúít
->
mode
 |
S_IFLNK
; ;

2653 
NF3SOCK
: 
nfsdúít
->
mode
 |
S_IFSOCK
; ;

2654 
NF3FIFO
: 
nfsdúít
->
mode
 |
S_IFIFO
; ;

2656 
nfsdúít
->
size
 = 
©åibuãs
->size;

2658 
nfsdúít
->
©ime
.
tv_£c
 = 
©åibuãs
->©ime.
£c⁄ds
;

2659 
nfsdúít
->
©ime
.
tv_u£c
 = 
©åibuãs
->©ime.
n£c⁄ds
/1000;

2660 
nfsdúít
->
©ime_n£c
 = 
©åibuãs
->
©ime
.
n£c⁄ds
;

2661 
nfsdúít
->
mtime
.
tv_£c
 = 
©åibuãs
->mtime.
£c⁄ds
;

2662 
nfsdúít
->
mtime
.
tv_u£c
 = 
©åibuãs
->mtime.
n£c⁄ds
/1000;

2663 
nfsdúít
->
mtime_n£c
 = 
©åibuãs
->
mtime
.
n£c⁄ds
;

2664 
nfsdúít
->
˘ime
.
tv_£c
 = 
©åibuãs
->˘ime.
£c⁄ds
;

2665 
nfsdúít
->
˘ime
.
tv_u£c
 = 
©åibuãs
->˘ime.
n£c⁄ds
/1000;

2666 
nfsdúít
->
˘ime_n£c
 = 
©åibuãs
->
˘ime
.
n£c⁄ds
;

2667 
nfsdúít
->
uid
 = 
©åibuãs
->uid;

2668 
nfsdúít
->
gid
 = 
©åibuãs
->gid;

2669 
nfsdúít
->
∆ök
 = 
©åibuãs
->nlink;

2670 
nfsdúít
->
dev
 = 
©åibuãs
->
fsid
;

2671 
nfsdúít
->
rdev
 = 
	`•ecd©a3_to_rdev
(&
©åibuãs
->rdev);

2672 
nfsdúít
->
blksize
 = 
NFS_BLKSIZE
;

2673 
nfsdúít
->
blocks
 = (
©åibuãs
->
u£d
 + 512 - 1) / 512;

2674 
nfsdúít
->
u£d
 = 
©åibuãs
->used;

2678 i‡(
rd≥_cb_d©a
->
gë©åcou¡
 == 0) {

2679 i‡(
rd≥_cb_d©a
->
°©us
 !
RPC_STATUS_SUCCESS
) {

2680 
	`nfs_£t_îr‹
(
nfs
, "READDIRPLUSÉmulation "

2681 "Áûed: %s", 
	`Ωc_gë_îr‹
(
Ωc
));

2682 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2683 
d©a
->
¥iv©e_d©a
);

2684 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2686 
d©a
->
	`cb
(0, 
nfs
, 
nfsdú
, d©a->
¥iv©e_d©a
);

2688 
	`‰ì
(
rd≥_cb_d©a
);

2689 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2690 
	`‰ì_nfs_cb_d©a
(
d©a
);

2692 
	}
}

2695 
	$lookup_missög_©åibuãs
(
nfs_c⁄ãxt
 *
nfs
,

2696 
nfsdú
 *nfsdir,

2697 
nfs_cb_d©a
 *
d©a
)

2699 
rd≥_cb_d©a
 *rd≥_cb_d©®
NULL
;

2700 
nfsdúít
 *nfsdirent;

2702 
nfsdúít
 = 
nfsdú
->
íåõs
;

2703 
nfsdúít
;

2704 
nfsdúít
 =Çfsdúít->
√xt
) {

2705 
rd≥_lookup_cb_d©a
 *rdpe_lookup_cb_data;

2706 
LOOKUP3¨gs
 
¨gs
;

2712 i‡(
nfsdúít
->
ty≥
 != 0) {

2716 i‡(
rd≥_cb_d©a
 =
NULL
) {

2717 
rd≥_cb_d©a
 = 
	`mÆloc
((rdpe_cb_data));

2718 
rd≥_cb_d©a
->
gë©åcou¡
 = 0;

2719 
rd≥_cb_d©a
->
°©us
 = 
RPC_STATUS_SUCCESS
;

2720 
rd≥_cb_d©a
->
d©a
 = data;

2722 
rd≥_lookup_cb_d©a
 = 
	`mÆloc
((rdpe_lookup_cb_data));

2723 
rd≥_lookup_cb_d©a
->
rd≥_cb_d©a
 =Ñdpe_cb_data;

2724 
rd≥_lookup_cb_d©a
->
nfsdúít
 =Çfsdirent;

2726 
	`mem£t
(&
¨gs
, 0, (
LOOKUP3¨gs
));

2727 
¨gs
.
wh©
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2728 
¨gs
.
wh©
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2729 
¨gs
.
wh©
.
«me
 = 
nfsdúít
->name;

2731 i‡(
	`Ωc_nfs3_lookup_èsk
(
nfs
->
Ωc
, 
nfs3_›ídú_3_cb
, &
¨gs
,

2732 
rd≥_lookup_cb_d©a
Ë=
NULL
) {

2733 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send "

2742 
rd≥_cb_d©a
->
gë©åcou¡
++;

2744 i‡(
rd≥_cb_d©a
 !
NULL
) {

2745  
rd≥_cb_d©a
->
gë©åcou¡
;

2748 
	}
}

2751 
	$nfs3_›ídú_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2752 *
¥iv©e_d©a
)

2754 
READDIR3ªs
 *
ªs
 = 
comm™d_d©a
;

2755 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2756 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2757 
nfsdú
 *nfsdú = 
d©a
->
c⁄töue_d©a
;

2758 
nfsdúít
 *nfsdirent;

2759 
íåy3
 *
íåy
;

2760 
uöt64_t
 
cookõ
 = 0;

2762 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2764 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2765 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2766 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2767 
	`‰ì_nfs_cb_d©a
(
d©a
);

2771 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2772 
	`nfs_£t_îr‹
(
nfs
, "NFS: READDIR of %s failed with "

2773 "%s(%d)", 
d©a
->
ßved_∑th
,

2774 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2775 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2776 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2777 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2778 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2779 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2780 
	`‰ì_nfs_cb_d©a
(
d©a
);

2784 
íåy
 =
ªs
->
READDIR3ªs_u
.
ªsok
.
ª∂y
.
íåõs
;

2785 
íåy
 !
NULL
) {

2786 
nfsdúít
 = 
	`ˇŒoc
(1, (nfsdirent));

2787 i‡(
nfsdúít
 =
NULL
) {

2788 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, "FailedÅoállocate dirent",

2789 
d©a
->
¥iv©e_d©a
);

2790 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2791 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2792 
	`‰ì_nfs_cb_d©a
(
d©a
);

2795 
nfsdúít
->
«me
 = 
	`°rdup
(
íåy
->name);

2796 i‡(
nfsdúít
->
«me
 =
NULL
) {

2797 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, "FailedÅoállocate "

2798 "dúít->«me", 
d©a
->
¥iv©e_d©a
);

2799 
	`‰ì
(
nfsdúít
);

2800 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2801 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2802 
	`‰ì_nfs_cb_d©a
(
d©a
);

2805 
nfsdúít
->
öode
 = 
íåy
->
fûeid
;

2807 
nfsdúít
->
√xt
 = 
nfsdú
->
íåõs
;

2808 
nfsdú
->
íåõs
 = 
nfsdúít
;

2810 
cookõ
 = 
íåy
->cookie;

2811 
íåy
 =É¡ry->
√xã¡ry
;

2814 i‡(
ªs
->
READDIR3ªs_u
.
ªsok
.
ª∂y
.
eof
 == 0) {

2815 
READDIR3¨gs
 
¨gs
;

2817 
¨gs
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2818 
¨gs
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2819 
¨gs
.
cookõ
 = cookie;

2820 
	`mem˝y
(&
¨gs
.
cookõvîf
, 
ªs
->
READDIR3ªs_u
.
ªsok
.cookieverf,

2821 (
cookõvîf3
));

2822 
¨gs
.
cou¡
 = 
nfs
->
nfsi
->
ªaddú_dúcou¡
;

2824 i‡(
	`Ωc_nfs3_ªaddú_èsk
(
nfs
->
Ωc
, 
nfs3_›ídú_2_cb
,

2825 &
¨gs
, 
d©a
Ë=
NULL
) {

2826 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send "

2827 "READDIR cÆ»f‹ %s", 
d©a
->
∑th
);

2828 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2829 
d©a
->
¥iv©e_d©a
);

2830 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2831 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2832 
	`‰ì_nfs_cb_d©a
(
d©a
);

2838 i‡(
ªs
->
READDIR3ªs_u
.
ªsok
.
dú_©åibuãs
.
©åibuãs_fﬁlow
)

2839 
	`Áâr3_to_nfs_©å
(&
nfsdú
->
©å
, &
ªs
->
READDIR3ªs_u
.
ªsok
.
dú_©åibuãs
.
po°_›_©å_u
.
©åibuãs
);

2842 
nfsdú
->
cuºít
 =Çfsdú->
íåõs
;

2844 i‡(
	`lookup_missög_©åibuãs
(
nfs
, 
nfsdú
, 
d©a
) == 0) {

2845 
d©a
->
	`cb
(0, 
nfs
, 
nfsdú
, d©a->
¥iv©e_d©a
);

2846 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2847 
	`‰ì_nfs_cb_d©a
(
d©a
);

2850 
	}
}

2853 
	$nfs3_›ídú_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2854 *
¥iv©e_d©a
)

2856 
READDIRPLUS3ªs
 *
ªs
 = 
comm™d_d©a
;

2857 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2858 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2859 
nfsdú
 *nfsdú = 
d©a
->
c⁄töue_d©a
;

2860 
íåy∂us3
 *
íåy
;

2861 
uöt64_t
 
cookõ
 = 0;

2863 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2865 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

2866 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2867 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2868 
	`‰ì_nfs_cb_d©a
(
d©a
);

2872 i‡(
°©us
 =
RPC_STATUS_SUCCESS
 && 
ªs
->°©u†=
NFS3ERR_NOTSUPP
) {

2873 
READDIR3¨gs
 
¨gs
;

2875 
¨gs
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

2876 
¨gs
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

2877 
¨gs
.
cookõ
 = cookie;

2878 
	`mem£t
(&
¨gs
.
cookõvîf
, 0, (
cookõvîf3
));

2879 
¨gs
.
cou¡
 = 
nfs
->
nfsi
->
ªaddú_dúcou¡
;

2881 i‡(
	`Ωc_nfs3_ªaddú_èsk
(
nfs
->
Ωc
, 
nfs3_›ídú_2_cb
,

2882 &
¨gs
, 
d©a
Ë=
NULL
) {

2883 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send "

2884 "READDIR cÆ»f‹ %s", 
d©a
->
∑th
);

2885 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2886 
d©a
->
¥iv©e_d©a
);

2887 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2888 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2889 
	`‰ì_nfs_cb_d©a
(
d©a
);

2895 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

2896 
	`nfs_£t_îr‹
(
nfs
, "NFS: READDIRPLUS of %s failed with "

2897 "%s(%d)", 
d©a
->
ßved_∑th
,

2898 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

2899 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

2900 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

2901 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

2902 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2903 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2904 
	`‰ì_nfs_cb_d©a
(
d©a
);

2908 
íåy
 =
ªs
->
READDIRPLUS3ªs_u
.
ªsok
.
ª∂y
.
íåõs
;

2909 
íåy
 !
NULL
) {

2910 
nfsdúít
 *nfsdirent;

2911 
nfs_©å
 
©å
;

2912 
has_©å
 = 0;

2914 
	`mem£t
(&
©å
, 0, (attr));

2916 
nfsdúít
 = 
	`ˇŒoc
(1, (nfsdirent));

2917 i‡(
nfsdúít
 =
NULL
) {

2918 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, "FailedÅoállocate dirent",

2919 
d©a
->
¥iv©e_d©a
);

2920 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2921 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2922 
	`‰ì_nfs_cb_d©a
(
d©a
);

2925 
nfsdúít
->
«me
 = 
	`°rdup
(
íåy
->name);

2926 i‡(
nfsdúít
->
«me
 =
NULL
) {

2927 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, "FailedÅoállocate "

2928 "dúít->«me", 
d©a
->
¥iv©e_d©a
);

2929 
	`‰ì
(
nfsdúít
);

2930 
	`nfs_‰ì_nfsdú
(
nfsdú
);

2931 
d©a
->
c⁄töue_d©a
 = 
NULL
;

2932 
	`‰ì_nfs_cb_d©a
(
d©a
);

2935 
nfsdúít
->
öode
 = 
íåy
->
fûeid
;

2937 i‡(
íåy
->
«me_©åibuãs
.
©åibuãs_fﬁlow
) {

2938 
	`Áâr3_to_nfs_©å
(&
©å
, &
íåy
->
«me_©åibuãs
.
po°_›_©å_u
.
©åibuãs
);

2939 
has_©å
 = 1;

2942 i‡(!
has_©å
) {

2943 
√°ed_mou¡s
 *
m¡
;

2944 
•Àn
 = 
	`°æí
(
d©a
->
ßved_∑th
);

2948 i‡(
•Àn
 == 1)

2949 
•Àn
 = 0;

2952 
m¡
 = 
nfs
->
nfsi
->
√°ed_mou¡s
; m¡; m¡ = m¡->
√xt
) {

2953 i‡(
	`°∫cmp
(
d©a
->
ßved_∑th
, 
m¡
->
∑th
, 
•Àn
))

2955 i‡(
m¡
->
∑th
[
•Àn
] != '/')

2957 i‡(
	`°rcmp
(
m¡
->
∑th
 + 
•Àn
 + 1, 
íåy
->
«me
))

2959 
©å
 = 
m¡
->attr;

2960 
has_©å
 = 1;

2964 i‡(
has_©å
) {

2965 
•ecd©a3
 
sd3
 = { 
©å
.
rdev
.
•ecd©a1
,

2966 
©å
.
rdev
.
•ecd©a2
 };

2968 
nfsdúít
->
ty≥
 = 
©å
.type;

2969 
nfsdúít
->
mode
 = 
©å
.mode;

2970 
nfsdúít
->
ty≥
) {

2971 
NF3REG
: 
nfsdúít
->
mode
 |
S_IFREG
; ;

2972 
NF3DIR
: 
nfsdúít
->
mode
 |
S_IFDIR
; ;

2973 
NF3BLK
: 
nfsdúít
->
mode
 |
S_IFBLK
; ;

2974 
NF3CHR
: 
nfsdúít
->
mode
 |
S_IFCHR
; ;

2975 
NF3LNK
: 
nfsdúít
->
mode
 |
S_IFLNK
; ;

2976 
NF3SOCK
: 
nfsdúít
->
mode
 |
S_IFSOCK
; ;

2977 
NF3FIFO
: 
nfsdúít
->
mode
 |
S_IFIFO
; ;

2979 
nfsdúít
->
size
 = 
©å
.size;

2981 
nfsdúít
->
©ime
.
tv_£c
 = 
©å
.©ime.
£c⁄ds
;

2982 
nfsdúít
->
©ime
.
tv_u£c
 = 
©å
.©ime.
n£c⁄ds
/1000;

2983 
nfsdúít
->
©ime_n£c
 = 
©å
.
©ime
.
n£c⁄ds
;

2984 
nfsdúít
->
mtime
.
tv_£c
 = 
©å
.mtime.
£c⁄ds
;

2985 
nfsdúít
->
mtime
.
tv_u£c
 = 
©å
.mtime.
n£c⁄ds
/1000;

2986 
nfsdúít
->
mtime_n£c
 = 
©å
.
mtime
.
n£c⁄ds
;

2987 
nfsdúít
->
˘ime
.
tv_£c
 = 
©å
.˘ime.
£c⁄ds
;

2988 
nfsdúít
->
˘ime
.
tv_u£c
 = 
©å
.˘ime.
n£c⁄ds
/1000;

2989 
nfsdúít
->
˘ime_n£c
 = 
©å
.
˘ime
.
n£c⁄ds
;

2990 
nfsdúít
->
uid
 = 
©å
.uid;

2991 
nfsdúít
->
gid
 = 
©å
.gid;

2992 
nfsdúít
->
∆ök
 = 
©å
.nlink;

2993 
nfsdúít
->
dev
 = 
©å
.
fsid
;

2994 
nfsdúít
->
rdev
 = 
	`•ecd©a3_to_rdev
(&
sd3
);

2995 
nfsdúít
->
blksize
 = 
NFS_BLKSIZE
;

2996 
nfsdúít
->
blocks
 = (
©å
.
u£d
 + 512 - 1) / 512;

2997 
nfsdúít
->
u£d
 = 
©å
.used;

3000 
nfsdúít
->
√xt
 = 
nfsdú
->
íåõs
;

3001 
nfsdú
->
íåõs
 = 
nfsdúít
;

3003 
cookõ
 = 
íåy
->cookie;

3004 
íåy
 =É¡ry->
√xã¡ry
;

3007 i‡(
ªs
->
READDIRPLUS3ªs_u
.
ªsok
.
ª∂y
.
eof
 == 0) {

3008 
READDIRPLUS3¨gs
 
¨gs
;

3010 
¨gs
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

3011 
¨gs
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

3012 
¨gs
.
cookõ
 = cookie;

3013 
	`mem˝y
(&
¨gs
.
cookõvîf
,

3014 
ªs
->
READDIRPLUS3ªs_u
.
ªsok
.
cookõvîf
,

3015 (
cookõvîf3
));

3016 
¨gs
.
dúcou¡
 = 
nfs
->
nfsi
->
ªaddú_dúcou¡
;

3017 
¨gs
.
maxcou¡
 = 
nfs
->
nfsi
->
ªaddú_maxcou¡
;

3019 i‡(
	`Ωc_nfs3_ªaddú∂us_èsk
(
nfs
->
Ωc
, 
nfs3_›ídú_cb
,

3020 &
¨gs
, 
d©a
Ë=
NULL
) {

3021 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send "

3022 "READDIRPLUS cÆ»f‹ %s", 
d©a
->
∑th
);

3023 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3024 
d©a
->
¥iv©e_d©a
);

3025 
	`nfs_‰ì_nfsdú
(
nfsdú
);

3026 
d©a
->
c⁄töue_d©a
 = 
NULL
;

3027 
	`‰ì_nfs_cb_d©a
(
d©a
);

3033 i‡(
ªs
->
READDIRPLUS3ªs_u
.
ªsok
.
dú_©åibuãs
.
©åibuãs_fﬁlow
) {

3034 
	`Áâr3_to_nfs_©å
(&
nfsdú
->
©å
, &
ªs
->
READDIRPLUS3ªs_u
.
ªsok
.
dú_©åibuãs
.
po°_›_©å_u
.
©åibuãs
);

3038 
nfsdú
->
cuºít
 =Çfsdú->
íåõs
;

3040 i‡(
	`lookup_missög_©åibuãs
(
nfs
, 
nfsdú
, 
d©a
) == 0) {

3041 
d©a
->
	`cb
(0, 
nfs
, 
nfsdú
, d©a->
¥iv©e_d©a
);

3043 
d©a
->
c⁄töue_d©a
 = 
NULL
;

3044 
	`‰ì_nfs_cb_d©a
(
d©a
);

3047 
	}
}

3050 
	$nfs3_›ídú_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

3051 
nfs_©å
 *
©å
,

3052 
nfs_cb_d©a
 *
d©a
)

3054 
READDIRPLUS3¨gs
 
¨gs
;

3055 
nfsdú
 *nfsdú = 
d©a
->
c⁄töue_d©a
;

3056 
nfsdú
 *
ˇched
;

3058 
ˇched
 = 
	`nfs_dúˇche_föd
(
nfs
, &
d©a
->
fh
);

3059 i‡(
ˇched
) {

3060 i‡(
©å
 &&áâr->
mtime
.
£c⁄ds
 =
ˇched
->attr.mtime.seconds

3061 && 
©å
->
mtime
.
n£c⁄ds
 =
ˇched
->attr.mtime.nseconds) {

3062 
ˇched
->
cuºít
 = cached->
íåõs
;

3063 
d©a
->
	`cb
(0, 
nfs
, 
ˇched
, d©a->
¥iv©e_d©a
);

3064 
	`‰ì_nfs_cb_d©a
(
d©a
);

3068 
	`nfs_‰ì_nfsdú
(
ˇched
);

3072 
nfsdú
->
fh
.
Àn
 = 
d©a
->fh.len;

3073 
nfsdú
->
fh
.
vÆ
 = 
	`mÆloc
“fsdú->fh.
Àn
);

3074 i‡(
nfsdú
->
fh
.
vÆ
 =
NULL
) {

3075 
	`nfs_£t_îr‹
(
nfs
, "OOM whenállocating fh forÇfsdir");

3076 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3077 
d©a
->
¥iv©e_d©a
);

3078 
	`‰ì_nfs_cb_d©a
(
d©a
);

3081 
	`mem˝y
(
nfsdú
->
fh
.
vÆ
, 
d©a
->fh.vÆ, d©a->fh.
Àn
);

3083 
¨gs
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

3084 
¨gs
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

3085 
¨gs
.
cookõ
 = 0;

3086 
	`mem£t
(&
¨gs
.
cookõvîf
, 0, (
cookõvîf3
));

3087 
¨gs
.
dúcou¡
 = 
nfs
->
nfsi
->
ªaddú_dúcou¡
;

3088 
¨gs
.
maxcou¡
 = 
nfs
->
nfsi
->
ªaddú_maxcou¡
;

3089 i‡(
	`Ωc_nfs3_ªaddú∂us_èsk
(
nfs
->
Ωc
, 
nfs3_›ídú_cb
,

3090 &
¨gs
, 
d©a
Ë=
NULL
) {

3091 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send "

3092 "READDIRPLUS cÆ»f‹ %s", 
d©a
->
∑th
);

3093 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3094 
d©a
->
¥iv©e_d©a
);

3095 
	`‰ì_nfs_cb_d©a
(
d©a
);

3099 
	}
}

3102 
	$nfs3_›ídú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

3103 *
¥iv©e_d©a
)

3105 
nfsdú
 *nfsdir;

3107 
nfsdú
 = 
	`ˇŒoc
(1, (nfsdir));

3108 i‡(
nfsdú
 =
NULL
) {

3109 
	`nfs_£t_îr‹
(
nfs
, "failedÅoállocate buffer forÇfsdir");

3113 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

3114 
nfs3_›ídú_c⁄töue_öã∫Æ
,

3115 
nfsdú
, 
‰ì
, 0) != 0) {

3120 
	}
}

3122 
	smknod_cb_d©a
 {

3123 *
	m∑th
;

3124 
	mmode
;

3125 
	mmaj‹
;

3126 
	mmö‹
;

3130 
	$‰ì_mknod_cb_d©a
(*
±r
)

3132 
mknod_cb_d©a
 *
d©a
 = 
±r
;

3134 
	`‰ì
(
d©a
->
∑th
);

3135 
	`‰ì
(
d©a
);

3136 
	}
}

3139 
	$nfs3_mknod_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3140 *
¥iv©e_d©a
)

3142 
MKNOD3ªs
 *
ªs
;

3143 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3144 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3145 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3147 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3149 
°r
 = &°r[
	`°æí
(str) + 1];

3151 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3152 
	`‰ì_nfs_cb_d©a
(
d©a
);

3156 
ªs
 = 
comm™d_d©a
;

3157 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3158 
	`nfs_£t_îr‹
(
nfs
, "NFS: MKNOD of %s/%s failed with "

3159 "%s(%d)", 
d©a
->
ßved_∑th
, 
°r
,

3160 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3161 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3162 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3163 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3164 
	`‰ì_nfs_cb_d©a
(
d©a
);

3168 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

3169 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3170 
	`‰ì_nfs_cb_d©a
(
d©a
);

3171 
	}
}

3174 
	$nfs3_mknod_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

3175 
nfs_©å
 *
©å
 
_U_
,

3176 
nfs_cb_d©a
 *
d©a
)

3178 
mknod_cb_d©a
 *
cb_d©a
 = 
d©a
->
c⁄töue_d©a
;

3179 *
°r
 = 
cb_d©a
->
∑th
;

3180 
MKNOD3¨gs
 
¨gs
;

3182 
	`mem£t
(&
¨gs
, 0, (args));

3184 
°r
 = &°r[
	`°æí
(str) + 1];

3186 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

3187 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

3188 
¨gs
.
whîe
.
«me
 = 
°r
;

3189 
cb_d©a
->
mode
 & 
S_IFMT
) {

3190 
S_IFCHR
:

3191 
¨gs
.
wh©
.
ty≥
 = 
NF3CHR
;

3192 
¨gs
.
wh©
.
mknodd©a3_u
.
chr_devi˚
.
dev_©åibuãs
.
mode
.
£t_ô
 = 1;

3193 
¨gs
.
wh©
.
mknodd©a3_u
.
chr_devi˚
.
dev_©åibuãs
.
mode
.
£t_mode3_u
.modê
cb_d©a
->modê& (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
|
S_IRGRP
|
S_IWGRP
|
S_IXGRP
|
S_IROTH
|
S_IWOTH
|
S_IXOTH
);

3194 
¨gs
.
wh©
.
mknodd©a3_u
.
chr_devi˚
.
•ec
.
•ecd©a1
 = 
cb_d©a
->
maj‹
;

3195 
¨gs
.
wh©
.
mknodd©a3_u
.
chr_devi˚
.
•ec
.
•ecd©a2
 = 
cb_d©a
->
mö‹
;

3197 
S_IFBLK
:

3198 
¨gs
.
wh©
.
ty≥
 = 
NF3BLK
;

3199 
¨gs
.
wh©
.
mknodd©a3_u
.
blk_devi˚
.
dev_©åibuãs
.
mode
.
£t_ô
 = 1;

3200 
¨gs
.
wh©
.
mknodd©a3_u
.
blk_devi˚
.
dev_©åibuãs
.
mode
.
£t_mode3_u
.modê
cb_d©a
->modê& (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
|
S_IRGRP
|
S_IWGRP
|
S_IXGRP
|
S_IROTH
|
S_IWOTH
|
S_IXOTH
);

3201 
¨gs
.
wh©
.
mknodd©a3_u
.
blk_devi˚
.
•ec
.
•ecd©a1
 = 
cb_d©a
->
maj‹
;

3202 
¨gs
.
wh©
.
mknodd©a3_u
.
blk_devi˚
.
•ec
.
•ecd©a2
 = 
cb_d©a
->
mö‹
;

3204 
S_IFSOCK
:

3205 
¨gs
.
wh©
.
ty≥
 = 
NF3SOCK
;

3206 
¨gs
.
wh©
.
mknodd©a3_u
.
sock_©åibuãs
.
mode
.
£t_ô
 = 1;

3207 
¨gs
.
wh©
.
mknodd©a3_u
.
sock_©åibuãs
.
mode
.
£t_mode3_u
.modê
cb_d©a
->modê& (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
|
S_IRGRP
|
S_IWGRP
|
S_IXGRP
|
S_IROTH
|
S_IWOTH
|
S_IXOTH
);

3209 
S_IFIFO
:

3210 
¨gs
.
wh©
.
ty≥
 = 
NF3FIFO
;

3211 
¨gs
.
wh©
.
mknodd©a3_u
.
pùe_©åibuãs
.
mode
.
£t_ô
 = 1;

3212 
¨gs
.
wh©
.
mknodd©a3_u
.
pùe_©åibuãs
.
mode
.
£t_mode3_u
.modê
cb_d©a
->modê& (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
|
S_IRGRP
|
S_IWGRP
|
S_IXGRP
|
S_IROTH
|
S_IWOTH
|
S_IXOTH
);

3215 
	`nfs_£t_îr‹
(
nfs
, "Invalid fileÅype for "

3217 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3218 
d©a
->
¥iv©e_d©a
);

3219 
	`‰ì_nfs_cb_d©a
(
d©a
);

3223 i‡(
	`Ωc_nfs3_mknod_èsk
(
nfs
->
Ωc
, 
nfs3_mknod_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

3224 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3225 
d©a
->
¥iv©e_d©a
);

3226 
	`‰ì_nfs_cb_d©a
(
d©a
);

3230 
	}
}

3233 
	$nfs3_mknod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
, 
dev
,

3234 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3236 *
±r
;

3237 
mknod_cb_d©a
 *
cb_d©a
;

3239 
cb_d©a
 = 
	`mÆloc
((
mknod_cb_d©a
));

3240 i‡(
cb_d©a
 =
NULL
) {

3241 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3246 
±r
 = 
	`°ºchr
(
∑th
, '/');

3247 i‡(
±r
) {

3248 
cb_d©a
->
∑th
 = 
	`°rdup
(path);

3249 i‡(
cb_d©a
->
∑th
 =
NULL
) {

3250 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3254 
±r
 = 
	`°ºchr
(
cb_d©a
->
∑th
, '/');

3255 *
±r
 = 0;

3257 
cb_d©a
->
∑th
 = 
	`mÆloc
(
	`°æí
(path) + 2);

3258 i‡(
cb_d©a
->
∑th
 =
NULL
) {

3259 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3263 
	`•rötf
(
cb_d©a
->
∑th
, "%c%s", '\0',Öath);

3266 
cb_d©a
->
mode
 = mode;

3267 
cb_d©a
->
maj‹
 = 
	`maj‹
(
dev
);

3268 
cb_d©a
->
mö‹
 = 
	`mö‹
(
dev
);

3272 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
cb_d©a
->
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

3273 
nfs3_mknod_c⁄töue_öã∫Æ
,

3274 
cb_d©a
, 
‰ì_mknod_cb_d©a
, 0) != 0) {

3279 
	}
}

3282 
	$nfs3_u∆ök_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3283 *
¥iv©e_d©a
)

3285 
REMOVE3ªs
 *
ªs
;

3286 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3287 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3288 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3290 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3292 
°r
 = &°r[
	`°æí
(str) + 1];

3294 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3295 
	`‰ì_nfs_cb_d©a
(
d©a
);

3299 
ªs
 = 
comm™d_d©a
;

3300 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3301 
	`nfs_£t_îr‹
(
nfs
, "NFS: REMOVE of %s/%s failed with "

3302 "%s(%d)", 
d©a
->
ßved_∑th
, 
°r
,

3303 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3304 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3305 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3306 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3307 
	`‰ì_nfs_cb_d©a
(
d©a
);

3311 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

3312 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3313 
	`‰ì_nfs_cb_d©a
(
d©a
);

3314 
	}
}

3317 
	$nfs3_u∆ök_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

3318 
nfs_©å
 *
©å
 
_U_
,

3319 
nfs_cb_d©a
 *
d©a
)

3321 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3322 
REMOVE3¨gs
 
¨gs
;

3324 
°r
 = &°r[
	`°æí
(str) + 1];

3326 
¨gs
.
obje˘
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

3327 
¨gs
.
obje˘
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

3328 
¨gs
.
obje˘
.
«me
 = 
°r
;

3329 i‡(
	`Ωc_nfs3_ªmove_èsk
(
nfs
->
Ωc
, 
nfs3_u∆ök_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

3330 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send REMOVE "

3331 "ˇŒ f‹ %s", 
d©a
->
∑th
);

3332 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3333 
d©a
->
¥iv©e_d©a
);

3334 
	`‰ì_nfs_cb_d©a
(
d©a
);

3338 
	}
}

3341 
	$nfs3_u∆ök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

3342 *
¥iv©e_d©a
)

3344 *
√w_∑th
;

3345 *
±r
;

3347 
±r
 = 
	`°ºchr
(
∑th
, '/');

3348 i‡(
±r
) {

3349 
√w_∑th
 = 
	`°rdup
(
∑th
);

3350 i‡(
√w_∑th
 =
NULL
) {

3351 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3355 
±r
 = 
	`°ºchr
(
√w_∑th
, '/');

3356 *
±r
 = 0;

3358 
√w_∑th
 = 
	`mÆloc
(
	`°æí
(
∑th
) + 2);

3359 i‡(
√w_∑th
 =
NULL
) {

3360 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3364 
	`•rötf
(
√w_∑th
, "%c%s", '\0', 
∑th
);

3369 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
√w_∑th
, 0, 
cb
, 
¥iv©e_d©a
,

3370 
nfs3_u∆ök_c⁄töue_öã∫Æ
,

3371 
√w_∑th
, 
‰ì
, 0) != 0) {

3376 
	}
}

3378 
	s¸óã_cb_d©a
 {

3379 *
	m∑th
;

3380 
	mÊags
;

3381 
	mmode
;

3385 
	$nfs3_¸ót_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

3386 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3388  
	`nfs3_›í_async
(
nfs
, 
∑th
, 
O_CREAT
|
O_WRONLY
|
O_TRUNC
,

3389 
mode
, 
cb
, 
¥iv©e_d©a
);

3390 
	}
}

3393 
	$nfs3_rmdú_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3394 *
¥iv©e_d©a
)

3396 
RMDIR3ªs
 *
ªs
;

3397 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3398 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3399 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3401 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3403 
°r
 = &°r[
	`°æí
(str) + 1];

3405 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3406 
	`‰ì_nfs_cb_d©a
(
d©a
);

3410 
ªs
 = 
comm™d_d©a
;

3411 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3412 
	`nfs_£t_îr‹
(
nfs
, "NFS: RMDIR of %s/%s failed with "

3413 "%s(%d)", 
d©a
->
ßved_∑th
, 
°r
,

3414 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3415 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3416 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3417 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3418 
	`‰ì_nfs_cb_d©a
(
d©a
);

3422 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

3423 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3424 
	`‰ì_nfs_cb_d©a
(
d©a
);

3425 
	}
}

3428 
	$nfs3_rmdú_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

3429 
nfs_©å
 *
©å
 
_U_
,

3430 
nfs_cb_d©a
 *
d©a
)

3432 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3433 
RMDIR3¨gs
 
¨gs
;

3435 
°r
 = &°r[
	`°æí
(str) + 1];

3437 
¨gs
.
obje˘
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

3438 
¨gs
.
obje˘
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

3439 
¨gs
.
obje˘
.
«me
 = 
°r
;

3440 i‡(
	`Ωc_nfs3_rmdú_èsk
(
nfs
->
Ωc
, 
nfs3_rmdú_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

3441 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send RMDIR "

3442 "ˇŒ f‹ %s", 
d©a
->
∑th
);

3443 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3444 
d©a
->
¥iv©e_d©a
);

3445 
	`‰ì_nfs_cb_d©a
(
d©a
);

3449 
	}
}

3452 
	$nfs3_rmdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

3453 *
¥iv©e_d©a
)

3455 *
√w_∑th
;

3456 *
±r
;

3458 
±r
 = 
	`°ºchr
(
∑th
, '/');

3459 i‡(
±r
) {

3460 
√w_∑th
 = 
	`°rdup
(
∑th
);

3461 i‡(
√w_∑th
 =
NULL
) {

3462 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3466 
±r
 = 
	`°ºchr
(
√w_∑th
, '/');

3467 *
±r
 = 0;

3469 
√w_∑th
 = 
	`mÆloc
(
	`°æí
(
∑th
) + 2);

3470 i‡(
√w_∑th
 =
NULL
) {

3471 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3475 
	`•rötf
(
√w_∑th
, "%c%s", '\0', 
∑th
);

3480 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
√w_∑th
, 0, 
cb
, 
¥iv©e_d©a
,

3481 
nfs3_rmdú_c⁄töue_öã∫Æ
,

3482 
√w_∑th
, 
‰ì
, 0) != 0) {

3487 
	}
}

3490 
	$nfs3_mkdú_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3491 *
¥iv©e_d©a
)

3493 
MKDIR3ªs
 *
ªs
;

3494 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3495 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3496 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3498 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3500 
°r
 = &°r[
	`°æí
(str) + 1];

3502 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3503 
	`‰ì_nfs_cb_d©a
(
d©a
);

3507 
ªs
 = 
comm™d_d©a
;

3508 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3509 
	`nfs_£t_îr‹
(
nfs
, "NFS: MKDIR of %s/%s failed "

3510 "wôh %s(%d)", 
d©a
->
ßved_∑th
, 
°r
,

3511 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3512 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3513 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3514 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3515 
	`‰ì_nfs_cb_d©a
(
d©a
);

3519 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

3520 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3521 
	`‰ì_nfs_cb_d©a
(
d©a
);

3522 
	}
}

3525 
	$nfs3_mkdú_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

3526 
nfs_©å
 *
©å
 
_U_
,

3527 
nfs_cb_d©a
 *
d©a
)

3529 *
°r
 = 
d©a
->
c⁄töue_d©a
;

3530 
mode
 = ()
d©a
->
c⁄töue_öt
;

3531 
MKDIR3¨gs
 
¨gs
;

3533 
°r
 = &°r[
	`°æí
(str) + 1];

3535 
	`mem£t
(&
¨gs
, 0, (
MKDIR3¨gs
));

3536 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

3537 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

3538 
¨gs
.
whîe
.
«me
 = 
°r
;

3539 
¨gs
.
©åibuãs
.
mode
.
£t_ô
 = 1;

3540 
¨gs
.
©åibuãs
.
mode
.
£t_mode3_u
.mode = mode;

3542 i‡(
	`Ωc_nfs3_mkdú_èsk
(
nfs
->
Ωc
, 
nfs3_mkdú_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

3543 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send MKDIR "

3544 "ˇŒ f‹ %s", 
d©a
->
∑th
);

3545 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3546 
d©a
->
¥iv©e_d©a
);

3547 
	`‰ì_nfs_cb_d©a
(
d©a
);

3551 
	}
}

3554 
	$nfs3_mkdú2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

3555 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3557 *
√w_∑th
;

3558 *
±r
;

3560 
±r
 = 
	`°ºchr
(
∑th
, '/');

3561 i‡(
±r
) {

3562 
√w_∑th
 = 
	`°rdup
(
∑th
);

3563 i‡(
√w_∑th
 =
NULL
) {

3564 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3568 
±r
 = 
	`°ºchr
(
√w_∑th
, '/');

3569 *
±r
 = 0;

3571 
√w_∑th
 = 
	`mÆloc
(
	`°æí
(
∑th
) + 2);

3572 i‡(
√w_∑th
 =
NULL
) {

3573 
	`nfs_£t_îr‹
(
nfs
, "Out of memory, failedÅoállocate "

3577 
	`•rötf
(
√w_∑th
, "%c%s", '\0', 
∑th
);

3582 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
√w_∑th
, 0, 
cb
, 
¥iv©e_d©a
,

3583 
nfs3_mkdú_c⁄töue_öã∫Æ
,

3584 
√w_∑th
, 
‰ì
, 
mode
) != 0) {

3589 
	}
}

3592 
	$nfs3_åunˇã_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

3593 
nfs_©å
 *
©å
 
_U_
,

3594 
nfs_cb_d©a
 *
d©a
)

3596 
uöt64_t
 
off£t
 = 
d©a
->
c⁄töue_öt
;

3597 
nfsfh
Çfsfh;

3599 
	`mem£t
(&
nfsfh
, 0, (nfsfh));

3600 
nfsfh
.
fh
 = 
d©a
->fh;

3602 i‡(
	`nfs_·runˇã_async
(
nfs
, &
nfsfh
, 
off£t
, 
d©a
->
cb
,

3603 
d©a
->
¥iv©e_d©a
) != 0) {

3604 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send SETATTR "

3605 "ˇŒ f‹ %s", 
d©a
->
∑th
);

3606 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3607 
d©a
->
¥iv©e_d©a
);

3608 
	`‰ì_nfs_cb_d©a
(
d©a
);

3611 
	`‰ì_nfs_cb_d©a
(
d©a
);

3613 
	}
}

3616 
	$nfs3_åunˇã_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uöt64_t
 
Àngth
,

3617 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3619 
uöt64_t
 
off£t
;

3621 
off£t
 = 
Àngth
;

3623 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

3624 
nfs3_åunˇã_c⁄töue_öã∫Æ
,

3625 
NULL
, NULL, 
off£t
) != 0) {

3630 
	}
}

3633 
	$nfs3_·runˇã_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3634 *
¥iv©e_d©a
)

3636 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3637 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3638 
SETATTR3ªs
 *
ªs
;

3640 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3642 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3643 
	`‰ì_nfs_cb_d©a
(
d©a
);

3647 
ªs
 = 
comm™d_d©a
;

3648 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3649 
	`nfs_£t_îr‹
(
nfs
, "NFS: Setattr failed with %s(%d)",

3650 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3651 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3652 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3653 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3654 
	`‰ì_nfs_cb_d©a
(
d©a
);

3658 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

3659 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3660 
	`‰ì_nfs_cb_d©a
(
d©a
);

3661 
	}
}

3664 
	$nfs3_·runˇã_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

3665 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3667 
nfs_cb_d©a
 *
d©a
;

3668 
SETATTR3¨gs
 
¨gs
;

3670 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

3671 i‡(
d©a
 =
NULL
) {

3672 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

3676 
d©a
->
nfs
 =Çfs;

3677 
d©a
->
cb
 = cb;

3678 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3680 
	`mem£t
(&
¨gs
, 0, (
SETATTR3¨gs
));

3681 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

3682 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

3683 
¨gs
.
√w_©åibuãs
.
size
.
£t_ô
 = 1;

3684 
¨gs
.
√w_©åibuãs
.
size
.
£t_size3_u
.sizê
Àngth
;

3686 i‡(
	`Ωc_nfs3_£èâr_èsk
(
nfs
->
Ωc
, 
nfs3_·runˇã_cb
,

3687 &
¨gs
, 
d©a
Ë=
NULL
) {

3688 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send SETATTR "

3689 "ˇŒ f‹ %s", 
d©a
->
∑th
);

3690 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3691 
d©a
->
¥iv©e_d©a
);

3692 
	`‰ì_nfs_cb_d©a
(
d©a
);

3696 
	}
}

3699 
	$nfs3_fsync_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3700 *
¥iv©e_d©a
)

3702 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3703 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3704 
COMMIT3ªs
 *
ªs
;

3706 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3708 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3709 
	`‰ì_nfs_cb_d©a
(
d©a
);

3713 
ªs
 = 
comm™d_d©a
;

3714 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3715 
	`nfs_£t_îr‹
(
nfs
, "NFS: Commit failed with %s(%d)",

3716 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3717 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3718 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3719 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3720 
	`‰ì_nfs_cb_d©a
(
d©a
);

3724 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3725 
	`‰ì_nfs_cb_d©a
(
d©a
);

3726 
	}
}

3729 
	$nfs3_fsync_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

3730 *
¥iv©e_d©a
)

3732 
nfs_cb_d©a
 *
d©a
;

3733 
COMMIT3¨gs
 
¨gs
;

3735 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

3736 i‡(
d©a
 =
NULL
) {

3737 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

3741 
d©a
->
nfs
 =Çfs;

3742 
d©a
->
cb
 = cb;

3743 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3745 
¨gs
.
fûe
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

3746 
¨gs
.
fûe
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

3747 
¨gs
.
off£t
 = 0;

3748 
¨gs
.
cou¡
 = 0;

3749 i‡(
	`Ωc_nfs3_commô_èsk
(
nfs
->
Ωc
, 
nfs3_fsync_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

3750 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send COMMIT "

3751 "ˇŒ f‹ %s", 
d©a
->
∑th
);

3752 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3753 
d©a
->
¥iv©e_d©a
);

3754 
	`‰ì_nfs_cb_d©a
(
d©a
);

3758 
	}
}

3761 
	$nfs3_gëa˛_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3762 *
¥iv©e_d©a
)

3764 
GETACL3ªs
 *
ªs
;

3765 
GETACL3ªsok
 *
ªsok
;

3766 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3767 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3768 
Áâr3_a˛
 
a˛
;

3769 
i
;

3771 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3773 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3774 
	`‰ì_nfs_cb_d©a
(
d©a
);

3778 
ªs
 = 
comm™d_d©a
;

3779 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3780 
	`nfs_£t_îr‹
(
nfs
, "NFS: GETACL of %s failed with "

3781 "%s(%d)", 
d©a
->
ßved_∑th
,

3782 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3783 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3784 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3785 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3786 
	`‰ì_nfs_cb_d©a
(
d©a
);

3789 
	`mem£t
(&
a˛
, 0, (acl));

3790 
ªsok
 = &
ªs
->
GETACL3ªs_u
.resok;

3791 
a˛
.
a˚_cou¡
 = 
ªsok
->ace_count;

3792 i‡(
a˛
.
a˚_cou¡
) {

3793 
a˛
.
a˚
 = 
	`ˇŒoc
◊˛.
a˚_cou¡
, (
nfß˛_a˚
));

3794 i‡(
a˛
.
a˚
 =
NULL
) {

3795 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3796 
	`‰ì_nfs_cb_d©a
(
d©a
);

3799 
i
 = 0; i < 
a˛
.
a˚_cou¡
; i++) {

3800 
a˛
.
a˚
[
i
] = 
ªsok
->a˚.
a˚_vÆ
[i];

3803 
a˛
.
deÁu…_a˚_cou¡
 = 
ªsok
->default_ace_count;

3804 i‡(
a˛
.
deÁu…_a˚_cou¡
) {

3805 
a˛
.
deÁu…_a˚
 = 
	`ˇŒoc
◊˛.
deÁu…_a˚_cou¡
, (
nfß˛_a˚
));

3806 i‡(
a˛
.
deÁu…_a˚
 =
NULL
) {

3807 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3808 
	`‰ì_nfs_cb_d©a
(
d©a
);

3811 
i
 = 0; i < 
a˛
.
deÁu…_a˚_cou¡
; i++) {

3812 
a˛
.
deÁu…_a˚
[
i
] = 
ªsok
->deÁu…_a˚.
deÁu…_a˚_vÆ
[i];

3815 
d©a
->
	`cb
(0, 
nfs
, &
a˛
, d©a->
¥iv©e_d©a
);

3816 
	`‰ì_nfs_cb_d©a
(
d©a
);

3817 
	}
}

3821 
	$nfs3_gëa˛_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

3822 *
¥iv©e_d©a
)

3824 
nfs_cb_d©a
 *
d©a
;

3825 
GETACL3¨gs
 
¨gs
;

3827 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

3828 i‡(
d©a
 =
NULL
) {

3829 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

3833 
d©a
->
nfs
 =Çfs;

3834 
d©a
->
cb
 = cb;

3835 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3837 
	`mem£t
(&
¨gs
, 0, (
GETACL3¨gs
));

3838 
¨gs
.
dú
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

3839 
¨gs
.
dú
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

3840 
¨gs
.
mask
 = 
NFSACL_MASK_ACL_ENTRY
|
NFSACL_MASK_ACL_COUNT
|
NFSACL_MASK_ACL_DEFAULT_ENTRY
|
NFSACL_MASK_ACL_DEFAULT_COUNT
;

3841 i‡(
	`Ωc_nfß˛3_gëa˛_èsk
(
nfs
->
Ωc
, 
nfs3_gëa˛_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

3842 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3843 
d©a
->
¥iv©e_d©a
);

3844 
	`‰ì_nfs_cb_d©a
(
d©a
);

3848 
	}
}

3851 
	$nfs3_°©_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3852 *
¥iv©e_d©a
)

3854 
GETATTR3ªs
 *
ªs
;

3855 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3856 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3857 #ifde‡
WIN32


3858 
__°©64
 
°
;

3860 
°©
 
°
;

3863 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3865 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3866 
	`‰ì_nfs_cb_d©a
(
d©a
);

3870 
ªs
 = 
comm™d_d©a
;

3871 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3872 
	`nfs_£t_îr‹
(
nfs
, "NFS: GETATTR of %s failed with "

3873 "%s(%d)", 
d©a
->
ßved_∑th
,

3874 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3875 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3876 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3877 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3878 
	`‰ì_nfs_cb_d©a
(
d©a
);

3882 
°
.
°_dev
 = (
dev_t
)
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
fsid
;

3883 
°
.
°_öo
 = (
öo_t
)
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
fûeid
;

3884 
°
.
°_mode
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
mode
;

3885 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
ty≥
) {

3886 
NF3REG
:

3887 
°
.
°_mode
 |
S_IFREG
;

3889 
NF3DIR
:

3890 
°
.
°_mode
 |
S_IFDIR
;

3892 
NF3BLK
:

3893 
°
.
°_mode
 |
S_IFBLK
;

3895 
NF3CHR
:

3896 
°
.
°_mode
 |
S_IFCHR
;

3898 
NF3LNK
:

3899 
°
.
°_mode
 |
S_IFLNK
;

3901 
NF3SOCK
:

3902 
°
.
°_mode
 |
S_IFSOCK
;

3904 
NF3FIFO
:

3905 
°
.
°_mode
 |
S_IFIFO
;

3908 
°
.
°_∆ök
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
∆ök
;

3909 
°
.
°_uid
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
uid
;

3910 
°
.
°_gid
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
gid
;

3911 
°
.
°_rdev
 = 
	`•ecd©a3_to_rdev
(&
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
rdev
);

3912 
°
.
°_size
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
size
;

3913 #i‚de‡
WIN32


3914 
°
.
°_blksize
 = 
NFS_BLKSIZE
;

3915 
°
.
°_blocks
 = (
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
u£d
 + 512 - 1) / 512;

3917 
°
.
°_©ime
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
©ime
.
£c⁄ds
;

3918 
°
.
°_mtime
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
mtime
.
£c⁄ds
;

3919 
°
.
°_˘ime
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
˘ime
.
£c⁄ds
;

3920 #ifde‡
HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC


3921 
°
.
°_©im
.
tv_n£c
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
©ime
.
n£c⁄ds
;

3922 
°
.
°_mtim
.
tv_n£c
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
mtime
.
n£c⁄ds
;

3923 
°
.
°_˘im
.
tv_n£c
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
˘ime
.
n£c⁄ds
;

3926 
d©a
->
	`cb
(0, 
nfs
, &
°
, d©a->
¥iv©e_d©a
);

3927 
	`‰ì_nfs_cb_d©a
(
d©a
);

3928 
	}
}

3931 
	$nfs3_f°©_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

3932 *
¥iv©e_d©a
)

3934 
nfs_cb_d©a
 *
d©a
;

3935 
GETATTR3¨gs
 
¨gs
;

3937 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

3938 i‡(
d©a
 =
NULL
) {

3939 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

3943 
d©a
->
nfs
 =Çfs;

3944 
d©a
->
cb
 = cb;

3945 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3947 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

3948 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

3949 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

3951 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_°©_1_cb
, &
¨gs
,

3952 
d©a
Ë=
NULL
) {

3953 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3954 
d©a
->
¥iv©e_d©a
);

3955 
	`‰ì_nfs_cb_d©a
(
d©a
);

3959 
	}
}

3962 
	$nfs3_°©64_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3963 *
¥iv©e_d©a
)

3965 
GETATTR3ªs
 *
ªs
;

3966 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3967 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3968 
nfs_°©_64
 
°
;

3970 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3972 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

3973 
	`‰ì_nfs_cb_d©a
(
d©a
);

3977 
ªs
 = 
comm™d_d©a
;

3978 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

3979 
	`nfs_£t_îr‹
(
nfs
, "NFS: GETATTR of %s failed with "

3980 "%s(%d)", 
d©a
->
ßved_∑th
,

3981 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

3982 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

3983 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

3984 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

3985 
	`‰ì_nfs_cb_d©a
(
d©a
);

3989 
°
.
nfs_dev
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
fsid
;

3990 
°
.
nfs_öo
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
fûeid
;

3991 
°
.
nfs_mode
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
mode
;

3992 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
ty≥
) {

3993 
NF3REG
:

3994 
°
.
nfs_mode
 |
S_IFREG
;

3996 
NF3DIR
:

3997 
°
.
nfs_mode
 |
S_IFDIR
;

3999 
NF3BLK
:

4000 
°
.
nfs_mode
 |
S_IFBLK
;

4002 
NF3CHR
:

4003 
°
.
nfs_mode
 |
S_IFCHR
;

4005 
NF3LNK
:

4006 
°
.
nfs_mode
 |
S_IFLNK
;

4008 
NF3SOCK
:

4009 
°
.
nfs_mode
 |
S_IFSOCK
;

4011 
NF3FIFO
:

4012 
°
.
nfs_mode
 |
S_IFIFO
;

4015 
°
.
nfs_∆ök
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
∆ök
;

4016 
°
.
nfs_uid
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
uid
;

4017 
°
.
nfs_gid
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
gid
;

4018 
°
.
nfs_rdev
 = 
	`•ecd©a3_to_rdev
(&
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
rdev
);

4019 
°
.
nfs_size
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
size
;

4020 
°
.
nfs_blksize
 = 
NFS_BLKSIZE
;

4021 
°
.
nfs_blocks
 = (
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
u£d
 + 512 - 1) / 512;

4022 
°
.
nfs_©ime
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
©ime
.
£c⁄ds
;

4023 
°
.
nfs_mtime
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
mtime
.
£c⁄ds
;

4024 
°
.
nfs_˘ime
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
˘ime
.
£c⁄ds
;

4025 
°
.
nfs_©ime_n£c
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
©ime
.
n£c⁄ds
;

4026 
°
.
nfs_mtime_n£c
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
mtime
.
n£c⁄ds
;

4027 
°
.
nfs_˘ime_n£c
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
˘ime
.
n£c⁄ds
;

4028 
°
.
nfs_u£d
 = 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
u£d
;

4030 
d©a
->
	`cb
(0, 
nfs
, &
°
, d©a->
¥iv©e_d©a
);

4031 
	`‰ì_nfs_cb_d©a
(
d©a
);

4032 
	}
}

4035 
	$nfs3_°©64_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

4036 
nfs_©å
 *
©å
 
_U_
,

4037 
nfs_cb_d©a
 *
d©a
)

4039 
GETATTR3¨gs
 
¨gs
;

4041 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

4042 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

4043 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

4045 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_°©64_1_cb
,

4046 &
¨gs
, 
d©a
Ë=
NULL
) {

4047 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4048 
d©a
->
¥iv©e_d©a
);

4049 
	`‰ì_nfs_cb_d©a
(
d©a
);

4053 
	}
}

4056 
	$nfs3_°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

4057 
no_fﬁlow
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4059 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 
no_fﬁlow
, 
cb
, 
¥iv©e_d©a
,

4060 
nfs3_°©64_c⁄töue_öã∫Æ
,

4061 
NULL
, NULL, 0) != 0) {

4066 
	}
}

4069 
	$nfs3_f°©64_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

4070 *
¥iv©e_d©a
)

4072 
nfs_cb_d©a
 *
d©a
;

4073 
GETATTR3¨gs
 
¨gs
;

4075 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

4076 i‡(
d©a
 =
NULL
) {

4077 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

4081 
d©a
->
nfs
 =Çfs;

4082 
d©a
->
cb
 = cb;

4083 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4085 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

4086 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

4087 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

4089 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_°©64_1_cb
, &
¨gs
,

4090 
d©a
Ë=
NULL
) {

4091 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4092 
d©a
->
¥iv©e_d©a
);

4093 
	`‰ì_nfs_cb_d©a
(
d©a
);

4097 
	}
}

4100 
	$nfs3_°©_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

4101 
nfs_©å
 *
©å
 
_U_
,

4102 
nfs_cb_d©a
 *
d©a
)

4104 
GETATTR3¨gs
 
¨gs
;

4106 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

4107 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

4108 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

4110 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_°©_1_cb
, &
¨gs
,

4111 
d©a
Ë=
NULL
) {

4112 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4113 
d©a
->
¥iv©e_d©a
);

4114 
	`‰ì_nfs_cb_d©a
(
d©a
);

4118 
	}
}

4121 
	$nfs3_°©_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

4122 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4124 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

4125 
nfs3_°©_c⁄töue_öã∫Æ
,

4126 
NULL
, NULL, 0) != 0) {

4131 
	}
}

4134 
	$nfs3_˛o£_cb
(
îr
, 
nfs_c⁄ãxt
 *
nfs
, *
ªt_d©a
,

4135 *
¥iv©e_d©a
) {

4136 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4137 
	`nfs_‰ì_nfsfh
(
d©a
->
nfsfh
);

4138 
d©a
->
	`cb
(
îr
, 
nfs
, 
ªt_d©a
, d©a->
¥iv©e_d©a
);

4139 
	`‰ì_nfs_cb_d©a
(
d©a
);

4140 
	}
}

4143 
	$nfs3_˛o£_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

4144 *
¥iv©e_d©a
)

4146 
nfs_cb_d©a
 *
d©a
;

4148 i‡(!
nfsfh
->
is_dúty
) {

4149 
	`nfs_‰ì_nfsfh
(
nfsfh
);

4150 
	`cb
(0, 
nfs
, 
NULL
, 
¥iv©e_d©a
);

4154 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

4155 i‡(
d©a
 =
NULL
) {

4156 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

4161 
d©a
->
nfsfh
 =Çfsfh;

4162 
d©a
->
cb
 = cb;

4163 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4165  
	`nfs_fsync_async
(
nfs
, 
nfsfh
, 
nfs3_˛o£_cb
, 
d©a
);

4166 
	}
}

4169 
	$nfs3_wrôe_≠≥nd_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4170 *
¥iv©e_d©a
)

4172 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4173 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4174 
GETATTR3ªs
 *
ªs
;

4176 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4178 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

4179 
	`‰ì_nfs_cb_d©a
(
d©a
);

4183 
ªs
 = 
comm™d_d©a
;

4184 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

4185 
	`nfs_£t_îr‹
(
nfs
, "NFS: GETATTR failed with %s(%d)",

4186 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

4187 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

4188 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

4189 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

4190 
	`‰ì_nfs_cb_d©a
(
d©a
);

4194 i‡(
	`nfs3_pwrôe_async_öã∫Æ
(
nfs
, 
d©a
->
nfsfh
,

4195 
d©a
->
u§buf
, d©a->
cou¡
, 
ªs
->
GETATTR3ªs_u
.
ªsok
.
obj_©åibuãs
.
size
,

4196 
d©a
->
cb
, d©a->
¥iv©e_d©a
, 1) != 0) {

4197 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4198 
d©a
->
¥iv©e_d©a
);

4199 
	`‰ì_nfs_cb_d©a
(
d©a
);

4202 
	`‰ì_nfs_cb_d©a
(
d©a
);

4203 
	}
}

4206 
	$nfs3_fûl_WRITE3¨gs
 (
WRITE3¨gs
 *
¨gs
, 
nfsfh
 *
fh
, 
uöt64_t
 
off£t
,

4207 
uöt64_t
 
cou¡
, c⁄° *
buf
)

4209 
	`mem£t
(
¨gs
, 0, (
WRITE3¨gs
));

4210 
¨gs
->
fûe
.
d©a
.
d©a_Àn
 = 
fh
->fh.
Àn
;

4211 
¨gs
->
fûe
.
d©a
.
d©a_vÆ
 = 
fh
->fh.
vÆ
;

4212 
¨gs
->
off£t
 = offset;

4213 
¨gs
->
cou¡
 = (
cou¡3
)count;

4214 
¨gs
->
°abÀ
 = 
fh
->
is_sync
 ? 
FILE_SYNC
 : 
UNSTABLE
;

4215 
¨gs
->
d©a
.
d©a_Àn
 = (
cou¡3
)
cou¡
;

4216 
¨gs
->
d©a
.
d©a_vÆ
 = (*)
buf
;

4217 
	}
}

4220 
	$nfs3_pwrôe_mcb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4221 *
¥iv©e_d©a
)

4223 
nfs_mcb_d©a
 *
md©a
 = 
¥iv©e_d©a
;

4224 
nfs_cb_d©a
 *
d©a
 = 
md©a
->data;

4225 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4226 
WRITE3ªs
 *
ªs
;

4228 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4230 
	`ATOMIC_DEC
(
nfs
->
Ωc
, 
d©a
->
num_ˇŒs
);

4235 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

4236 
d©a
->
îr‹
 = 1;

4238 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

4239 
d©a
->
ˇn˚l
 = 1;

4241 i‡(
°©us
 =
RPC_STATUS_TIMEOUT
) {

4242 
d©a
->
ˇn˚l
 = 1;

4245 i‡(
°©us
 =
RPC_STATUS_SUCCESS
) {

4246 
ªs
 = 
comm™d_d©a
;

4247 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

4248 
	`nfs_£t_îr‹
(
nfs
, "NFS: WrôêÁûed wôh %s(%d)", 
	`nfs°©3_to_°r
(
ªs
->
°©us
), 
	`nfs°©3_to_î∫o
(res->status));

4249 
d©a
->
îr‹
 = 1;

4251 
size_t
 
cou¡
 = 
ªs
->
WRITE3ªs_u
.
ªsok
.count;

4253 i‡(
cou¡
 < 
md©a
->count) {

4254 i‡(
cou¡
 == 0) {

4255 
	`nfs_£t_îr‹
(
nfs
, "NFS: Write failed. No bytes written!");

4256 
d©a
->
îr‹
 = 1;

4259 
WRITE3¨gs
 
¨gs
;

4260 
md©a
->
off£t
 +
cou¡
;

4261 
md©a
->
cou¡
 -= count;

4263 
	`nfs3_fûl_WRITE3¨gs
(&
¨gs
,

4264 
d©a
->
nfsfh
,

4265 
md©a
->
off£t
,

4266 
md©a
->
cou¡
,

4267 &
d©a
->
u§buf
[
md©a
->
off£t
 - data->offset]);

4268 
	`ATOMIC_INC
(
nfs
->
Ωc
, 
d©a
->
num_ˇŒs
);

4269 i‡(
	`Ωc_nfs3_wrôe_èsk
(
nfs
->
Ωc
,

4270 
nfs3_pwrôe_mcb
,

4271 &
¨gs
, 
md©a
)) {

4274 
	`ATOMIC_DEC
(
nfs
->
Ωc
, 
d©a
->
num_ˇŒs
);

4275 
	`nfs_£t_îr‹
(
nfs
, "RPCÉº‹: FaûedÅÿ£nd WRITE cÆ»f‹ %s", 
d©a
->
∑th
);

4276 
d©a
->
oom
 = 1;

4280 i‡(
cou¡
 > 0) {

4281 i‡(
d©a
->
max_off£t
 < 
md©a
->
off£t
 + 
cou¡
) {

4282 
d©a
->
max_off£t
 = 
md©a
->
off£t
 + 
cou¡
;

4288 
	`‰ì
(
md©a
);

4290 i‡(
d©a
->
num_ˇŒs
 > 0) {

4294 i‡(
d©a
->
oom
 != 0) {

4295 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

4296 
	`‰ì_nfs_cb_d©a
(
d©a
);

4299 i‡(
d©a
->
îr‹
 != 0) {

4300 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

4301 
	`‰ì_nfs_cb_d©a
(
d©a
);

4304 i‡(
d©a
->
ˇn˚l
 != 0) {

4305 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "Comm™d wa†ˇn˚Œed", d©a->
¥iv©e_d©a
);

4306 
	`‰ì_nfs_cb_d©a
(
d©a
);

4311 i‡(
d©a
->
upd©e_pos
) {

4312 
d©a
->
nfsfh
->
off£t
 = d©a->
max_off£t
;

4315 
d©a
->
	`cb
(()(d©a->
max_off£t
 - d©a->
off£t
), 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4317 
	`‰ì_nfs_cb_d©a
(
d©a
);

4318 
	}
}

4321 
	$nfs3_pwrôe_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

4322 c⁄° *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

4323 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
)

4325 
nfs_cb_d©a
 *
d©a
;

4327 i‡(
cou¡
 > 
	`nfs_gë_wrôemax
(
nfs
)) {

4328 
cou¡
 = 
	`nfs_gë_wrôemax
(
nfs
);

4331 
nfsfh
->
is_dúty
 = 1;

4332 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

4333 i‡(
d©a
 =
NULL
) {

4334 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

4338 
d©a
->
nfs
 =Çfs;

4339 
d©a
->
cb
 = cb;

4340 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4341 
d©a
->
nfsfh
 =Çfsfh;

4342 
d©a
->
u§buf
 = 
buf
;

4343 
d©a
->
upd©e_pos
 = update_pos;

4346 
	`as£π
(
d©a
->
num_ˇŒs
 == 0);

4351 
d©a
->
max_off£t
 = 
off£t
;

4352 
d©a
->
off£t
 = offset;

4353 
d©a
->
cou¡
 = count;

4356 
size_t
 
wrôecou¡
 = 
cou¡
;

4357 
nfs_mcb_d©a
 *
md©a
;

4358 
WRITE3¨gs
 
¨gs
;

4360 i‡(
wrôecou¡
 > 
	`nfs_gë_wrôemax
(
nfs
)) {

4361 
wrôecou¡
 = 
	`nfs_gë_wrôemax
(
nfs
);

4364 
md©a
 = 
	`ˇŒoc
(1, (
nfs_mcb_d©a
));

4365 i‡(
md©a
 =
NULL
) {

4366 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

4368 i‡(
d©a
->
num_ˇŒs
 == 0) {

4369 
	`‰ì_nfs_cb_d©a
(
d©a
);

4372 
d©a
->
oom
 = 1;

4375 
md©a
->
d©a
 = data;

4376 
md©a
->
off£t
 = offset;

4377 
md©a
->
cou¡
 = 
wrôecou¡
;

4379 
	`nfs3_fûl_WRITE3¨gs
(&
¨gs
, 
nfsfh
, 
off£t
, 
wrôecou¡
,

4380 &
buf
[
off£t
 - 
d©a
->offset]);

4381 
	`ATOMIC_INC
(
nfs
->
Ωc
, 
d©a
->
num_ˇŒs
);

4382 i‡(
	`Ωc_nfs3_wrôe_èsk
(
nfs
->
Ωc
, 
nfs3_pwrôe_mcb
,

4383 &
¨gs
, 
md©a
Ë=
NULL
) {

4384 
	`ATOMIC_DEC
(
nfs
->
Ωc
, 
d©a
->
num_ˇŒs
);

4385 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send WRITE "

4386 "ˇŒ f‹ %s", 
d©a
->
∑th
);

4387 
	`‰ì
(
md©a
);

4388 i‡(
d©a
->
num_ˇŒs
 == 0) {

4389 
	`‰ì_nfs_cb_d©a
(
d©a
);

4392 
d©a
->
oom
 = 1;

4396 
cou¡
 -
wrôecou¡
;

4397 
off£t
 +
wrôecou¡
;

4398 } 
cou¡
 > 0);

4401 
	}
}

4404 
	$nfs3_wrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

4405 c⁄° *
buf
, 
size_t
 
cou¡
,

4406 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4408 i‡(
nfsfh
->
is_≠≥nd
) {

4409 
GETATTR3¨gs
 
¨gs
;

4410 
nfs_cb_d©a
 *
d©a
;

4412 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

4413 i‡(
d©a
 =
NULL
) {

4414 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4417 
d©a
->
nfs
 =Çfs;

4418 
d©a
->
cb
 = cb;

4419 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4420 
d©a
->
nfsfh
 =Çfsfh;

4421 
d©a
->
u§buf
 = 
buf
;

4422 
d©a
->
cou¡
 = (
size_t
)count;

4424 
	`mem£t
(&
¨gs
, 0, (
GETATTR3¨gs
));

4425 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = 
nfsfh
->
fh
.
Àn
;

4426 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

4428 i‡(
	`Ωc_nfs3_gë©å_èsk
(
nfs
->
Ωc
, 
nfs3_wrôe_≠≥nd_cb
,

4429 &
¨gs
, 
d©a
Ë=
NULL
) {

4430 
	`‰ì_nfs_cb_d©a
(
d©a
);

4435  
	`nfs3_pwrôe_async_öã∫Æ
(
nfs
, 
nfsfh
,

4436 
buf
, 
cou¡
, 
nfsfh
->
off£t
,

4437 
cb
, 
¥iv©e_d©a
, 1);

4438 
	}
}

4441 
	$nfs3_fûl_READ3¨gs
(
READ3¨gs
 *
¨gs
, 
nfsfh
 *
fh
, 
uöt64_t
 
off£t
,

4442 
uöt64_t
 
cou¡
)

4444 
	`mem£t
(
¨gs
, 0, (
READ3¨gs
));

4445 
¨gs
->
fûe
.
d©a
.
d©a_Àn
 = 
fh
->fh.
Àn
;

4446 
¨gs
->
fûe
.
d©a
.
d©a_vÆ
 = 
fh
->fh.
vÆ
;

4447 
¨gs
->
off£t
 = offset;

4448 
¨gs
->
cou¡
 = (
cou¡3
)count;

4449 
	}
}

4452 
	$nfs3_¥ód_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4453 *
¥iv©e_d©a
)

4455 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4456 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4457 
READ3ªs
 *
ªs
;

4458 
cou¡
;

4460 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4462 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

4463 
	`‰ì_nfs_cb_d©a
(
d©a
);

4467 
ªs
 = 
comm™d_d©a
;

4468 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

4469 
	`nfs_£t_îr‹
(
nfs
, "NFS: Read failed with %s(%d)",

4470 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

4471 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

4472 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
, 
comm™d_d©a
, d©a->
¥iv©e_d©a
);

4473 
	`‰ì_nfs_cb_d©a
(
d©a
);

4477 
cou¡
 = ()
ªs
->
READ3ªs_u
.
ªsok
.count;

4478 i‡(
d©a
->
upd©e_pos
) {

4479 
d©a
->
nfsfh
->
off£t
 = d©a->off£à+ 
cou¡
;

4481 i‡(
cou¡
 > 
Ωc
->
pdu
->
ªque°ed_ªad_cou¡
) {

4482 
cou¡
 = 
Ωc
->
pdu
->
ªque°ed_ªad_cou¡
;

4484 
d©a
->
	`cb
(
cou¡
, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4485 
	`‰ì_nfs_cb_d©a
(
d©a
);

4487 
	}
}

4490 
	$nfs3_¥ód_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

4491 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

4492 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
)

4494 
nfs_cb_d©a
 *
d©a
;

4495 
READ3¨gs
 
¨gs
;

4496 
Ωc_pdu
 *
pdu
;

4498 i‡(
cou¡
 > 
	`nfs_gë_ªadmax
(
nfs
)) {

4499 
cou¡
 = 
	`nfs_gë_ªadmax
(
nfs
);

4502 
d©a
 = 
	`ˇŒoc
(1, (
nfs_cb_d©a
));

4503 i‡(
d©a
 =
NULL
) {

4504 
	`nfs_£t_îr‹
(
nfs
, "out of memory: failedÅoállocate "

4508 
d©a
->
nfs
 =Çfs;

4509 
d©a
->
cb
 = cb;

4510 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4511 
d©a
->
nfsfh
 =Çfsfh;

4512 
d©a
->
‹g_off£t
 = 
off£t
;

4513 
d©a
->
‹g_cou¡
 = 
cou¡
;

4514 
d©a
->
upd©e_pos
 = update_pos;

4516 
	`as£π
(
d©a
->
num_ˇŒs
 == 0);

4518 
d©a
->
off£t
 = offset;

4519 
d©a
->
cou¡
 = (
cou¡3
)count;

4520 
d©a
->
max_off£t
 = d©a->
off£t
;

4522 
	`nfs3_fûl_READ3¨gs
(&
¨gs
, 
nfsfh
, 
off£t
, 
cou¡
);

4523 
pdu
 = 
	`Ωc_nfs3_ªad_èsk
(
nfs
->
Ωc
, 
nfs3_¥ód_cb
, 
buf
, 
cou¡
, &
¨gs
, 
d©a
);

4524 i‡(
pdu
 =
NULL
) {

4525 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send READ "

4526 "ˇŒ f‹ %s", 
d©a
->
∑th
);

4527 
	`‰ì_nfs_cb_d©a
(
d©a
);

4531 
pdu
->
ªque°ed_ªad_cou¡
 = 
cou¡
;

4533 
	}
}

4536 
	$nfs3_chdú_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

4537 
nfs_©å
 *
©å
 
_U_
,

4538 
nfs_cb_d©a
 *
d©a
)

4541 #ifde‡
HAVE_MULTITHREADING


4542 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

4543 
	`nfs_mt_muãx_lock
(&
nfs
->
Ωc
->
Ωc_muãx
);

4546 
	`‰ì
(
nfs
->
nfsi
->
cwd
);

4547 
nfs
->
nfsi
->
cwd
 = 
d©a
->
ßved_∑th
;

4548 #ifde‡
HAVE_MULTITHREADING


4549 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

4550 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
Ωc
->
Ωc_muãx
);

4554 
d©a
->
ßved_∑th
 = 
NULL
;

4556 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4557 
	`‰ì_nfs_cb_d©a
(
d©a
);

4560 
	}
}

4563 
	$nfs3_chdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

4564 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4566 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
cb
, 
¥iv©e_d©a
,

4567 
nfs3_chdú_c⁄töue_öã∫Æ
,

4568 
NULL
, NULL, 0) != 0) {

4573 
	}
}

4576 
	$nfs3_›í_åunc_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4577 *
¥iv©e_d©a
)

4579 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4580 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4581 
nfsfh
 *nfsfh;

4582 
SETATTR3ªs
 *
ªs
;

4584 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4586 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

4587 
	`‰ì_nfs_cb_d©a
(
d©a
);

4591 
ªs
 = 
comm™d_d©a
;

4592 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

4593 
	`nfs_£t_îr‹
(
nfs
, "NFS: Setattr failed with %s(%d)",

4594 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

4595 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

4596 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

4597 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

4598 
	`‰ì_nfs_cb_d©a
(
d©a
);

4602 
nfsfh
 = 
	`ˇŒoc
(1, (nfsfh));

4603 i‡(
nfsfh
 =
NULL
) {

4604 
	`nfs_£t_îr‹
(
nfs
, "NFS: FailedÅoállocateÇfsfh "

4606 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4607 
d©a
->
¥iv©e_d©a
);

4608 
	`‰ì_nfs_cb_d©a
(
d©a
);

4612 i‡(
d©a
->
c⁄töue_öt
 & 
O_SYNC
) {

4613 
nfsfh
->
is_sync
 = 1;

4615 i‡(
d©a
->
c⁄töue_öt
 & 
O_APPEND
) {

4616 
nfsfh
->
is_≠≥nd
 = 1;

4620 
nfsfh
->
fh
 = 
d©a
->fh;

4621 
d©a
->
fh
.
vÆ
 = 
NULL
;

4623 
d©a
->
	`cb
(0, 
nfs
, 
nfsfh
, d©a->
¥iv©e_d©a
);

4624 
	`‰ì_nfs_cb_d©a
(
d©a
);

4625 
	}
}

4628 
	$nfs3_›í_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4629 *
¥iv©e_d©a
)

4631 
ACCESS3ªs
 *
ªs
;

4632 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4633 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4634 
nfsfh
 *nfsfh;

4635 
nfsmode
 = 0;

4637 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4639 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

4640 
	`‰ì_nfs_cb_d©a
(
d©a
);

4644 
ªs
 = 
comm™d_d©a
;

4645 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

4646 
	`nfs_£t_îr‹
(
nfs
, "NFS: ACCESS of %s failed with %s(%d)",

4647 
d©a
->
ßved_∑th
, 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

4648 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

4649 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

4650 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

4651 
	`‰ì_nfs_cb_d©a
(
d©a
);

4655 i‡(
d©a
->
c⁄töue_öt
 & 
O_WRONLY
) {

4656 
nfsmode
 |
ACCESS3_MODIFY
;

4658 i‡(
d©a
->
c⁄töue_öt
 & 
O_RDWR
) {

4659 
nfsmode
 |
ACCESS3_READ
|
ACCESS3_MODIFY
;

4661 i‡(!(
d©a
->
c⁄töue_öt
 & (
O_WRONLY
|
O_RDWR
))) {

4662 
nfsmode
 |
ACCESS3_READ
;

4666 i‡(
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
 !
nfsmode
) {

4667 
	`nfs_£t_îr‹
(
nfs
, "NFS: ACCESS denied. Required "

4669 
nfsmode
&
ACCESS3_READ
?'r':'-',

4670 
nfsmode
&
ACCESS3_MODIFY
?'w':'-',

4671 
nfsmode
&
ACCESS3_EXECUTE
?'x':'-',

4672 
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
&
ACCESS3_READ
 ? 'r':'-',

4673 
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
&
ACCESS3_MODIFY
 ?'w':'-',

4674 
ªs
->
ACCESS3ªs_u
.
ªsok
.
ac˚ss
&
ACCESS3_EXECUTE
 ?'x':'-');

4675 
d©a
->
	`cb
(-
EACCES
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4676 
	`‰ì_nfs_cb_d©a
(
d©a
);

4681 i‡((
d©a
->
c⁄töue_öt
 & 
O_TRUNC
) &&

4682 (
d©a
->
c⁄töue_öt
 & (
O_RDWR
|
O_WRONLY
))) {

4683 
SETATTR3¨gs
 
¨gs
;

4685 
	`mem£t
(&
¨gs
, 0, (
SETATTR3¨gs
));

4686 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

4687 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

4688 
¨gs
.
√w_©åibuãs
.
size
.
£t_ô
 = 1;

4689 
¨gs
.
√w_©åibuãs
.
size
.
£t_size3_u
.size = 0;

4691 i‡(
	`Ωc_nfs3_£èâr_èsk
(
nfs
->
Ωc
, 
nfs3_›í_åunc_cb
, &
¨gs
,

4692 
d©a
Ë=
NULL
) {

4693 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send "

4694 "SETATTR cÆ»f‹ %s", 
d©a
->
∑th
);

4695 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4696 
d©a
->
¥iv©e_d©a
);

4697 
	`‰ì_nfs_cb_d©a
(
d©a
);

4703 
nfsfh
 = 
	`ˇŒoc
(1, (nfsfh));

4704 i‡(
nfsfh
 =
NULL
) {

4705 
	`nfs_£t_îr‹
(
nfs
, "NFS: FailedÅoállocateÇfsfh structure");

4706 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4707 
	`‰ì_nfs_cb_d©a
(
d©a
);

4711 i‡(
d©a
->
c⁄töue_öt
 & 
O_SYNC
) {

4712 
nfsfh
->
is_sync
 = 1;

4714 i‡(
d©a
->
c⁄töue_öt
 & 
O_APPEND
) {

4715 
nfsfh
->
is_≠≥nd
 = 1;

4719 
nfsfh
->
fh
 = 
d©a
->fh;

4720 
d©a
->
fh
.
vÆ
 = 
NULL
;

4722 
d©a
->
	`cb
(0, 
nfs
, 
nfsfh
, d©a->
¥iv©e_d©a
);

4723 
	`‰ì_nfs_cb_d©a
(
d©a
);

4724 
	}
}

4727 
	$nfs3_›í_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

4728 
nfs_©å
 *
©å
 
_U_
,

4729 
nfs_cb_d©a
 *
d©a
)

4731 
nfsmode
 = 0;

4732 
ACCESS3¨gs
 
¨gs
;

4734 i‡((
d©a
->
c⁄töue_öt
 & (
O_CREAT
|
O_EXCL
)) == (O_CREAT|O_EXCL)) {

4735 
	`nfs_£t_îr‹
(
nfs
, "FileállreadyÉxist when opening with O_CREAT|O_EXCL");

4736 
d©a
->
	`cb
(-
EEXIST
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4737 
	`‰ì_nfs_cb_d©a
(
d©a
);

4740 i‡(
d©a
->
c⁄töue_öt
 & 
O_WRONLY
) {

4741 
nfsmode
 |
ACCESS3_MODIFY
;

4743 i‡(
d©a
->
c⁄töue_öt
 & 
O_RDWR
) {

4744 
nfsmode
 |
ACCESS3_READ
|
ACCESS3_MODIFY
;

4746 i‡(!(
d©a
->
c⁄töue_öt
 & (
O_WRONLY
|
O_RDWR
))) {

4747 
nfsmode
 |
ACCESS3_READ
;

4750 
	`mem£t
(&
¨gs
, 0, (
ACCESS3¨gs
));

4751 
¨gs
.
obje˘
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

4752 
¨gs
.
obje˘
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

4753 
¨gs
.
ac˚ss
 = 
nfsmode
;

4755 i‡(
	`Ωc_nfs3_ac˚ss_èsk
(
nfs
->
Ωc
, 
nfs3_›í_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

4756 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4757 
d©a
->
¥iv©e_d©a
);

4758 
	`‰ì_nfs_cb_d©a
(
d©a
);

4762 
	}
}

4764 
	s›í_cb_d©a
 {

4765 
nfs_cb
 
	mcb
;

4766 *
	m¥iv©e_d©a
;

4767 *
	m∑th
;

4768 
	mÊags
;

4769 
	mmode
;

4773 
	$‰ì_›í_cb_d©a
(*
±r
)

4775 
›í_cb_d©a
 *
d©a
 = 
±r
;

4777 
	`‰ì
(
d©a
->
∑th
);

4778 
	`‰ì
(
d©a
);

4779 
	}
}

4783 
	$nfs3_›í_¸óã_cb
(
îr
, 
nfs_c⁄ãxt
 *
nfs
, *
ªt_d©a
,

4784 *
¥iv©e_d©a
)

4786 
›í_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

4788 i‡(
îr
) {

4789 
cb_d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
îr
), 
nfs
,

4790 
	`nfs_gë_îr‹
(
nfs
), 
cb_d©a
->
¥iv©e_d©a
);

4791 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4795 
cb_d©a
->
	`cb
(0, 
nfs
, 
ªt_d©a
, cb_d©a->
¥iv©e_d©a
);

4796 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4797 
	}
}

4800 
	$nfs3_¸óã_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4801 *
¥iv©e_d©a
)

4803 
CREATE3ªs
 *
ªs
;

4804 
nfs_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4805 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4806 
›í_cb_d©a
 *
cb_d©a
 = 
d©a
->
c⁄töue_d©a
;

4807 
nfsfh
 *nfsfh;

4809 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4811 
ªs
 = 
comm™d_d©a
;

4812 i‡(
	`check_nfs3_îr‹
(
nfs
, 
°©us
, 
d©a
, 
comm™d_d©a
)) {

4813 
	`‰ì_nfs_cb_d©a
(
d©a
);

4817 i‡(
ªs
->
°©us
 !
NFS3_OK
) {

4818 
	`nfs_£t_îr‹
(
nfs
, "NFS: CREATE3 of %s failed with "

4819 "%s(%d)", 
d©a
->
ßved_∑th
,

4820 
	`nfs°©3_to_°r
(
ªs
->
°©us
),

4821 
	`nfs°©3_to_î∫o
(
ªs
->
°©us
));

4822 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

4823 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

4824 
	`‰ì_nfs_cb_d©a
(
d©a
);

4828 
nfsfh
 = 
	`ˇŒoc
(1, (nfsfh));

4829 i‡(
nfsfh
 =
NULL
) {

4830 
	`nfs_£t_îr‹
(
nfs
, "NFS: FailedÅoállocateÇfsfh structure");

4831 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4832 
d©a
->
¥iv©e_d©a
);

4833 
	`‰ì_nfs_cb_d©a
(
d©a
);

4837 i‡(
cb_d©a
->
Êags
 & 
O_SYNC
) {

4838 
nfsfh
->
is_sync
 = 1;

4840 i‡(
cb_d©a
->
Êags
 & 
O_APPEND
) {

4841 
nfsfh
->
is_≠≥nd
 = 1;

4845 
nfsfh
->
fh
.
Àn
 = 
ªs
->
CREATE3ªs_u
.
ªsok
.
obj
.
po°_›_fh3_u
.
h™dÀ
.
d©a
.
d©a_Àn
;

4846 
nfsfh
->
fh
.
vÆ
 = 
	`mÆloc
“fsfh->fh.
Àn
);

4847 i‡(
nfsfh
->
fh
.
vÆ
 =
NULL
) {

4848 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: FailedÅoállocate "

4850 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4851 
	`‰ì_nfs_cb_d©a
(
d©a
);

4852 
	`‰ì
(
nfsfh
);

4855 
	`mem˝y
(
nfsfh
->
fh
.
vÆ
,

4856 
ªs
->
CREATE3ªs_u
.
ªsok
.
obj
.
po°_›_fh3_u
.
h™dÀ
.
d©a
.
d©a_vÆ
,

4857 
nfsfh
->
fh
.
Àn
);

4860 
	`nfs_dúˇche_dr›
(
nfs
, &
d©a
->
fh
);

4861 
d©a
->
	`cb
(0, 
nfs
, 
nfsfh
, d©a->
¥iv©e_d©a
);

4862 
	`‰ì_nfs_cb_d©a
(
d©a
);

4864 
	}
}

4867 
	$nfs3_¸óã_c⁄töue_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
,

4868 
nfs_©å
 *
©å
 
_U_
,

4869 
nfs_cb_d©a
 *
d©a
)

4871 
›í_cb_d©a
 *
cb_d©a
 = 
d©a
->
c⁄töue_d©a
;

4872 *
°r
 = 
cb_d©a
->
∑th
;

4873 
CREATE3¨gs
 
¨gs
;

4875 
°r
 = &°r[
	`°æí
(str) + 1];

4877 
	`mem£t
(&
¨gs
, 0, (
CREATE3¨gs
));

4878 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_Àn
 = d©a->
fh
.
Àn
;

4879 
¨gs
.
whîe
.
dú
.
d©a
.
d©a_vÆ
 = d©a->
fh
.
vÆ
;

4880 
¨gs
.
whîe
.
«me
 = 
°r
;

4881 
¨gs
.
how
.
mode
 = (
cb_d©a
->
Êags
 & 
O_EXCL
Ë? 
GUARDED
 : 
UNCHECKED
;

4882 
¨gs
.
how
.
¸óãhow3_u
.
obj_©åibuãs
.
mode
.
£t_ô
 = 1;

4883 
¨gs
.
how
.
¸óãhow3_u
.
obj_©åibuãs
.
mode
.
£t_mode3_u
.modê
cb_d©a
->mode;

4885 i‡(
	`Ωc_nfs3_¸óã_èsk
(
nfs
->
Ωc
, 
nfs3_¸óã_1_cb
,

4886 &
¨gs
, 
d©a
Ë=
NULL
) {

4887 
	`nfs_£t_îr‹
(
nfs
, "RPCÉrror: FailedÅo send CREATE "

4888 "ˇŒ f‹ %s/%s", 
d©a
->
∑th
, 
°r
);

4889 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4890 
d©a
->
¥iv©e_d©a
);

4891 
	`‰ì_›í_cb_d©a
(
d©a
);

4895 
	}
}

4897 
	$nfs3_öôül_›í_cb
(
îr
, 
nfs_c⁄ãxt
 *
nfs
, *
ªt_d©a
,

4898 *
¥iv©e_d©a
)

4900 
›í_cb_d©a
 *
cb_d©a
 = 
¥iv©e_d©a
;

4901 *
±r
;

4903 i‡(
îr
 =-
EEXIST
 && (
cb_d©a
->
Êags
 & (
O_CREAT
|
O_EXCL
)) == (O_CREAT|O_EXCL)) {

4904 
cb_d©a
->
	`cb
(-
EEXIST
, 
nfs
,

4905 
	`nfs_gë_îr‹
(
nfs
), 
cb_d©a
->
¥iv©e_d©a
);

4906 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4909 i‡(
îr
 =-
NFS3ERR_NOENT
 && (
cb_d©a
->
Êags
 & 
O_CREAT
)) {

4910 
±r
 = 
	`°ºchr
(
cb_d©a
->
∑th
, '/');

4911 i‡(
±r
) {

4912 *
±r
++ = 0;

4920 
±r
 = 
	`ˇŒoc
(1, 
	`°æí
(
cb_d©a
->
∑th
) + 2);

4921 i‡(
±r
 =
NULL
) {

4922 
cb_d©a
->
	`cb
(-
ENOMEM
, 
nfs
,

4923 
	`nfs_gë_îr‹
(
nfs
),

4924 
cb_d©a
->
¥iv©e_d©a
);

4925 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4928 
±r
[0] = 0;

4929 
	`mem˝y
(&
±r
[1], 
cb_d©a
->
∑th
, 
	`°æí
(cb_data->path));

4930 
	`‰ì
(
cb_d©a
->
∑th
);

4931 
cb_d©a
->
∑th
 = 
±r
;

4937 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
cb_d©a
->
∑th
, 0,

4938 
nfs3_›í_¸óã_cb
, 
cb_d©a
,

4939 
nfs3_¸óã_c⁄töue_öã∫Æ
, 
cb_d©a
,

4940 
NULL
, 0) != 0) {

4941 
cb_d©a
->
	`cb
(-
ENOMEM
, 
nfs
,

4942 
	`nfs_gë_îr‹
(
nfs
), 
cb_d©a
->
¥iv©e_d©a
);

4943 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4948 i‡(
îr
) {

4949 
cb_d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
îr
), 
nfs
,

4950 
	`nfs_gë_îr‹
(
nfs
), 
cb_d©a
->
¥iv©e_d©a
);

4951 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4954 
cb_d©a
->
	`cb
(0, 
nfs
, 
ªt_d©a
, cb_d©a->
¥iv©e_d©a
);

4955 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4956 
	}
}

4960 
	$nfs3_›í_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

4961 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4963 
›í_cb_d©a
 *
cb_d©a
;

4965 
cb_d©a
 = 
	`ˇŒoc
(1, (
›í_cb_d©a
));

4966 i‡(
cb_d©a
 =
NULL
) {

4967 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: failedÅoállocate "

4969  -
ENOMEM
;

4971 
cb_d©a
->
∑th
 = 
	`°rdup
(path);

4972 i‡(
cb_d©a
->
∑th
 =
NULL
) {

4973 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: failedÅo strupÖath");

4974 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4975  -
ENOMEM
;

4977 
cb_d©a
->
cb
 = cb;

4978 
cb_d©a
->
¥iv©e_d©a
 =Örivate_data;

4979 
cb_d©a
->
Êags
 = flags;

4980 
cb_d©a
->
mode
 = mode;

4982 i‡(
	`nfs3_lookuµ©h_async
(
nfs
, 
∑th
, 0, 
nfs3_öôül_›í_cb
, 
cb_d©a
,

4983 
nfs3_›í_c⁄töue_öã∫Æ
, 
NULL
,

4984 
NULL
, 
Êags
) != 0) {

4985 
	`‰ì_›í_cb_d©a
(
cb_d©a
);

4989 
	}
}

	@lib/nfs_v4.c

21 #i‚de‡
_GNU_SOURCE


22 
	#_GNU_SOURCE


	)

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

29 #ifde‡
AROS


30 
	~"¨os_com∑t.h
"

33 #ifde‡
PS2_EE


34 
	~"ps2_com∑t.h
"

37 #ifde‡
PS3_PPU


38 
	~"ps3_com∑t.h
"

41 #ifde‡
WIN32


42 
	~<wö32/wö32_com∑t.h
>

45 #ifde‡
HAVE_INTTYPES_H


46 
	~<öây≥s.h
>

48 
	#PRIu64
 "Œu"

	)

51 #ifde‡
HAVE_UTIME_H


52 
	~<utime.h
>

55 #ifde‡
HAVE_UNISTD_H


56 
	~<uni°d.h
>

59 #ifde‡
HAVE_SYS_VFS_H


60 
	~<sys/vfs.h
>

63 #ifde‡
HAVE_SYS_STATVFS_H


64 
	~<sys/°©vfs.h
>

67 #i‡
deföed
(
__ANDROID__
Ë&& !deföed(
HAVE_SYS_STATVFS_H
)

68 
	#°©vfs
 
°©fs


	)

71 #ifde‡
HAVE_NETINET_IN_H


72 
	~<√töë/ö.h
>

75 #ifde‡
HAVE_STRINGS_H


76 
	~<°rögs.h
>

79 #ifde‡
MAJOR_IN_MKDEV


80 
	~<sys/mkdev.h
>

83 #ifde‡
HAVE_SYS_SYSMACROS_H


84 
	~<sys/sysma¸os.h
>

87 #ifde‡
HAVE_GETPWNAM


88 
	~<pwd.h
>

91 
	~<˘y≥.h
>

92 
	~<°dio.h
>

93 
	~<°d¨g.h
>

94 
	~<°dlib.h
>

95 
	~<°rög.h
>

96 
	~<as£π.h
>

97 
	~<î∫o.h
>

98 
	~<time.h
>

99 
	~<sys/ty≥s.h
>

100 
	~<sys/°©.h
>

101 
	~<f˙é.h
>

102 
	~"libnfs-zdr.h
"

103 
	~"¶i°.h
"

104 
	~"libnfs.h
"

105 
	~"libnfs-øw.h
"

106 
	~"libnfs-øw-nfs4.h
"

107 
	~"libnfs-¥iv©e.h
"

109 #i‚de‡
disˇrd_c⁄°


110 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

113 
	gnfs4_cb_d©a
;

114 (*
	t›_fûÀr
)(
	tnfs4_cb_d©a
 *
	td©a
, 
	tnfs_¨g›4
 *
	t›
);

116 
	slookup_lök_d©a
 {

117 
idx
;

120 (*
	tblob_‰ì
)(*);

122 
	snfs4_blob
 {

123 
Àn
;

124 *
vÆ
;

125 
blob_‰ì
 
‰ì
;

131 
	slookup_fûÀr
 {

132 
›_fûÀr
 
func
;

133 
max_›
;

134 
Êags
;

135 *
d©a
;

137 
nfs4_blob
 
blob0
;

138 
nfs4_blob
 
blob1
;

139 
nfs4_blob
 
blob2
;

140 
nfs4_blob
 
blob3
;

143 
	srw_d©a
 {

144 
uöt64_t
 
off£t
;

145 
upd©e_pos
;

148 
	snfs4_cb_d©a
 {

149 
nfs_c⁄ãxt
 *
nfs
;

153 
	#LOOKUP_FLAG_NO_FOLLOW
 0x0001

	)

154 
	#LOOKUP_FLAG_IS_STATVFS64
 0x0002

	)

155 
	#MUTEX_HELD
 0x0004

	)

156 
Êags
;

159 
Ωc_cb
 
›í_cb
;

162 
nfs_cb
 
cb
;

163 *
¥iv©e_d©a
;

166 
uöt32_t
 
›í_ow√r
;

169 
Ωc_cb
 
c⁄töue_cb
;

171 *
∑th
;

172 
lookup_fûÀr
 
fûÀr
;

175 
lookup_lök_d©a
 
lök
;

178 
rw_d©a
Ñw_data;

181 
uöt32_t
 
°™d¨d_©åibuãs
[2] = {

182 (1 << 
FATTR4_TYPE
 |

183 1 << 
FATTR4_SIZE
 |

184 1 << 
FATTR4_FILEID
),

185 (1 << (
FATTR4_MODE
 - 32) |

186 1 << (
FATTR4_NUMLINKS
 - 32) |

187 1 << (
FATTR4_OWNER
 - 32) |

188 1 << (
FATTR4_OWNER_GROUP
 - 32) |

189 1 << (
FATTR4_SPACE_USED
 - 32) |

190 1 << (
FATTR4_TIME_ACCESS
 - 32) |

191 1 << (
FATTR4_TIME_METADATA
 - 32) |

192 1 << (
FATTR4_TIME_MODIFY
 - 32))

193 
	}
};

194 
uöt32_t
 
	g°©vfs_©åibuãs
[2] = {

195 (1 << 
FATTR4_FSID
 |

196 1 << 
FATTR4_FILES_AVAIL
 |

197 1 << 
FATTR4_FILES_FREE
 |

198 1 << 
FATTR4_FILES_TOTAL
 |

199 1 << 
FATTR4_MAXNAME
),

200 (1 << (
FATTR4_SPACE_AVAIL
 - 32) |

201 1 << (
FATTR4_SPACE_FREE
 - 32) |

202 1 << (
FATTR4_SPACE_TOTAL
 - 32))

205 
uöt32_t
 
	ggëa˛_©åibuãs
[1] = {

206 (1 << 
FATTR4_ACL
 )

210 
nfs4_›í_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

211 
Êags
, 
mode
);

215 
	$nfs4_ªsﬁve_∑th
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

217 *
√w_∑th
 = 
NULL
;

223 i‡(
∑th
[0] == '/') {

224 
√w_∑th
 = 
	`°rdup
(
∑th
);

226 
√w_∑th
 = 
	`mÆloc
(
	`°æí
(
∑th
Ë+ såÀn(
nfs
->
nfsi
->
cwd
) + 2);

227 i‡(
√w_∑th
 !
NULL
) {

228 
	`•rötf
(
√w_∑th
, "%s/%s", 
nfs
->
nfsi
->
cwd
, 
∑th
);

231 i‡(
√w_∑th
 =
NULL
) {

232 
	`nfs_£t_îr‹
(
nfs
, "Out of memory: failedÅo "

234  
NULL
;

237 i‡(
	`nfs_n‹mÆize_∑th
(
nfs
, 
√w_∑th
)) {

238 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoÇormalizeÑealÖath. %s",

239 
	`nfs_gë_îr‹
(
nfs
));

240 
	`‰ì
(
√w_∑th
);

241  
NULL
;

244  
√w_∑th
;

245 
	}
}

248 
	$‰ì_nfs4_cb_d©a
(
nfs4_cb_d©a
 *
d©a
)

250 #ifde‡
HAVE_MULTITHREADING


251 i‡(
d©a
->
Êags
 & 
MUTEX_HELD
) {

252 
	`nfs_mt_muãx_u∆ock
(&
d©a
->
nfs
->
nfsi
->
nfs4_›í_ˇŒ_muãx
);

255 
	`‰ì
(
d©a
->
∑th
);

256 
	`‰ì
(
d©a
->
fûÀr
.data);

257 i‡(
d©a
->
fûÀr
.
blob0
.
vÆ
 && d©a->fûÀr.blob0.
‰ì
) {

258 
d©a
->
fûÀr
.
blob0
.
	`‰ì
(d©a->fûÀr.blob0.
vÆ
);

260 i‡(
d©a
->
fûÀr
.
blob1
.
vÆ
 && d©a->fûÀr.blob1.
‰ì
) {

261 
d©a
->
fûÀr
.
blob1
.
	`‰ì
(d©a->fûÀr.blob1.
vÆ
);

263 i‡(
d©a
->
fûÀr
.
blob2
.
vÆ
 && d©a->fûÀr.blob2.
‰ì
) {

264 
d©a
->
fûÀr
.
blob2
.
	`‰ì
(d©a->fûÀr.blob2.
vÆ
);

266 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 && d©a->fûÀr.blob3.
‰ì
) {

267 
d©a
->
fûÀr
.
blob3
.
	`‰ì
(d©a->fûÀr.blob3.
vÆ
);

269 
	`‰ì
(
d©a
);

270 
	}
}

272 
nfs4_cb_d©a
 *

273 
	$öô_cb_d©a_fuŒ_∑th
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

275 
nfs4_cb_d©a
 *
d©a
;

277 
d©a
 = 
	`ˇŒoc
(1, (*data));

278 i‡(
d©a
 =
NULL
) {

279 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

281  
NULL
;

284 
d©a
->
nfs
 =Çfs;

285 
d©a
->
∑th
 = 
	`nfs4_ªsﬁve_∑th
(
nfs
,Öath);

286 i‡(
d©a
->
∑th
 =
NULL
) {

287 
	`‰ì_nfs4_cb_d©a
(
d©a
);

288  
NULL
;

291  
d©a
;

292 
	}
}

295 
	$d©a_•lô_∑th
(
nfs4_cb_d©a
 *
d©a
)

297 *
∑th
;

298 
∑th
 = 
	`°ºchr
(
d©a
->path, '/');

299 i‡(
∑th
 =
d©a
->path) {

300 *
±r
;

302 
±r
 = 
d©a
->
∑th
; *ptr;Ötr++) {

303 *
±r
 = *(ptr + 1);

306 
d©a
->
fûÀr
.d©®d©a->
∑th
;

307 
d©a
->
∑th
 = 
	`°rdup
("/");

309 *
∑th
++ = 0;

310 
d©a
->
fûÀr
.d©®
	`°rdup
(
∑th
);

312 
	}
}

314 
nfs4_cb_d©a
 *

315 
	$öô_cb_d©a_•lô_∑th
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
‹ig_∑th
)

317 
nfs4_cb_d©a
 *
d©a
;

319 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
‹ig_∑th
);

320 i‡(
d©a
 =
NULL
) {

321  
NULL
;

324 
	`d©a_•lô_∑th
(
d©a
);

325  
d©a
;

326 
	}
}

329 
	$check_nfs4_îr‹
(
nfs_c⁄ãxt
 *
nfs
, 
°©us
,

330 
nfs4_cb_d©a
 *
d©a
, *
comm™d_d©a
,

331 *
›_«me
)

333 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

335 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

336 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, 
ªs
, d©a->
¥iv©e_d©a
);

337 
	`‰ì_nfs4_cb_d©a
(
d©a
);

340 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

341 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "Command was cancelled",

342 
d©a
->
¥iv©e_d©a
);

343 
	`‰ì_nfs4_cb_d©a
(
d©a
);

346 i‡(
°©us
 =
RPC_STATUS_TIMEOUT
) {

347 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "CommandÅimed out",

348 
d©a
->
¥iv©e_d©a
);

349 
	`‰ì_nfs4_cb_d©a
(
d©a
);

352 i‡(
ªs
 &&Ñes->
°©us
 !
NFS4_OK
) {

353 
	`nfs_£t_îr‹
(
nfs
, "NFS4: %s (path %s) failed with "

354 "%s(%d)", 
›_«me
,

355 
d©a
->
∑th
,

356 
	`nfs°©4_to_°r
(
ªs
->
°©us
),

357 
	`nfs°©4_to_î∫o
(
ªs
->
°©us
));

358 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

359 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

360 
	`‰ì_nfs4_cb_d©a
(
d©a
);

365 
	}
}

368 
	$nfs4_föd_›
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

369 
COMPOUND4ªs
 *
ªs
, 
›
, c⁄° *
›_«me
)

371 
i
;

373 
i
 = 0; i < ()
ªs
->
ªßºay
.
ªßºay_Àn
; i++) {

374 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
ªs›
 =
›
) {

378 i‡(
i
 =
ªs
->
ªßºay
.
ªßºay_Àn
) {

379 
	`nfs_£t_îr‹
(
nfs
, "Nÿ%†ªsu….", 
›_«me
);

380 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

381 
	`‰ì_nfs4_cb_d©a
(
d©a
);

385  
i
;

386 
	}
}

388 
uöt64_t


389 
	$nfs_ht⁄64
(
uöt64_t
 
vÆ
)

391 
i
;

392 
uöt64_t
 
ªs
;

393 *
±r
 = (*)&
ªs
;

395 
i
 = 0; i < 8; i++) {

396 
±r
[7 - 
i
] = 
vÆ
 & 0xff;

397 
vÆ
 >>= 8;

399  
ªs
;

400 
	}
}

402 
uöt64_t


403 
	$nfs_¡oh64
(
uöt64_t
 
vÆ
)

405 
i
;

406 
uöt64_t
 
ªs
;

407 *
±r
 = (*)&
ªs
;

409 
i
 = 0; i < 8; i++) {

410 
±r
[7 - 
i
] = 
vÆ
 & 0xff;

411 
vÆ
 >>= 8;

413  
ªs
;

414 
	}
}

416 
uöt64_t


417 
	$nfs_≤toh64
(c⁄° 
uöt32_t
 *
buf
)

419 
uöt64_t
 
vÆ
;

421 
vÆ
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

422 
buf
++;

423 
vÆ
 <<= 32;

424 
vÆ
 |
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

426  
vÆ
;

427 
	}
}

430 
	$nfs_gë_ugid
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
buf
, 
¶í
, 
is_u£r
)

432 
ugid
 = 0;

433 c⁄° *
«me
 = 
buf
;

435 
¶í
) {

436 i‡(
	`isdigô
(*
buf
)) {

437 
ugid
 *= 10;

438 
ugid
 +*
buf
 - '0';

440 #ifde‡
HAVE_GETPWNAM


441 
∑sswd
 *
pwd
 = 
	`gëpw«m
(
«me
);

442 i‡(
pwd
) {

443 i‡(
is_u£r
) {

444  
pwd
->
pw_uid
;

446  
pwd
->
pw_gid
;

450 (Ë
«me
;

454 
buf
++;

455 
¶í
--;

457  
ugid
;

458 
	}
}

460 
	#CHECK_GETATTR_BUF_SPACE
(
Àn
, 
size
) \

461 i‡(
Àn
 < 
size
) { \

462 
	`nfs_£t_îr‹
(
nfs
, "NotÉnough data in fattr4"); \

464 }

	)

467 
	$nfs_∑r£_©åibuãs
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

468 
nfs_°©_64
 *
°
, c⁄° *
buf
, 
Àn
)

470 
ty≥
, 
¶í
, 
∑d
;

473 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

474 
ty≥
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

475 
buf
 += 4;

476 
Àn
 -= 4;

478 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

479 
°
->
nfs_size
 = 
	`nfs_≤toh64
((
uöt32_t
 *)(*)
buf
);

480 
buf
 += 8;

481 
Àn
 -= 8;

483 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

484 
°
->
nfs_öo
 = 
	`nfs_≤toh64
((
uöt32_t
 *)(*)
buf
);

485 
buf
 += 8;

486 
Àn
 -= 8;

488 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

489 
°
->
nfs_mode
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

490 
buf
 += 4;

491 
Àn
 -= 4;

492 
ty≥
) {

493 
NF4REG
:

494 
°
->
nfs_mode
 |
S_IFREG
;

496 
NF4DIR
:

497 
°
->
nfs_mode
 |
S_IFDIR
;

499 
NF4BLK
:

500 
°
->
nfs_mode
 |
S_IFBLK
;

502 
NF4CHR
:

503 
°
->
nfs_mode
 |
S_IFCHR
;

505 
NF4LNK
:

506 
°
->
nfs_mode
 |
S_IFLNK
;

508 
NF4SOCK
:

509 
°
->
nfs_mode
 |
S_IFSOCK
;

511 
NF4FIFO
:

512 
°
->
nfs_mode
 |
S_IFIFO
;

518 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

519 
°
->
nfs_∆ök
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

520 
buf
 += 4;

521 
Àn
 -= 4;

523 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

524 
¶í
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

525 
buf
 += 4;

526 
Àn
 -= 4;

527 
∑d
 = (4 - (
¶í
 & 0x03)) & 0x03;

528 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 
¶í
);

529 
°
->
nfs_uid
 = 
	`nfs_gë_ugid
(
nfs
, 
buf
, 
¶í
, 1);

530 
buf
 +
¶í
;

531 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 
∑d
);

532 
buf
 +
∑d
;

533 
Àn
 -
∑d
;

535 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

536 
¶í
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

537 
buf
 += 4;

538 
Àn
 -= 4;

539 
∑d
 = (4 - (
¶í
 & 0x03)) & 0x03;

540 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 
¶í
);

541 
°
->
nfs_gid
 = 
	`nfs_gë_ugid
(
nfs
, 
buf
, 
¶í
, 0);

542 
buf
 +
¶í
;

543 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 
∑d
);

544 
buf
 +
∑d
;

545 
Àn
 -
∑d
;

547 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

548 
°
->
nfs_u£d
 = 
	`nfs_≤toh64
((
uöt32_t
 *)(*)
buf
);

549 
buf
 += 8;

550 
Àn
 -= 8;

552 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 12);

553 
°
->
nfs_©ime
 = 
	`nfs_≤toh64
((
uöt32_t
 *)(*)
buf
);

554 
buf
 += 8;

555 
Àn
 -= 8;

556 
°
->
nfs_©ime_n£c
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

557 
buf
 += 4;

558 
Àn
 -= 4;

560 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 12);

561 
°
->
nfs_˘ime
 = 
	`nfs_≤toh64
((
uöt32_t
 *)(*)
buf
);

562 
buf
 += 8;

563 
Àn
 -= 8;

564 
°
->
nfs_˘ime_n£c
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

565 
buf
 += 4;

566 
Àn
 -= 4;

568 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 12);

569 
°
->
nfs_mtime
 = 
	`nfs_≤toh64
((
uöt32_t
 *)(*)
buf
);

570 
buf
 += 8;

571 
Àn
 -= 8;

572 
°
->
nfs_mtime_n£c
 = 
	`¡ohl
(*(
uöt32_t
 *)(*)
buf
);

573 
buf
 += 4;

574 
Àn
 -= 4;

576 
°
->
nfs_blksize
 = 
NFS_BLKSIZE
;

577 
°
->
nfs_blocks
 = (°->
nfs_u£d
 + 
NFS_BLKSIZE
 -1) / NFS_BLKSIZE;

580 
	}
}

583 
	$nfs4_num_∑th_comp⁄íts
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
)

585 
i
;

587 
i
 = 0; (
∑th
 = 
	`°rchr
(path, '/'));Öath++, i++)

590  
i
;

591 
	}
}

594 
	$nfs4_›_¸óã
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, c⁄° *
«me
,

595 
nfs_·y≥4
 
ty≥
, 
nfs4_blob
 *
©åmask
,

596 
nfs4_blob
 *
©å_vÆs
, c⁄° *
lökd©a
, 
dev
)

598 
CREATE4¨gs
 *
ˇrgs
;

600 
›
[0].
¨g›
 = 
OP_CREATE
;

601 
ˇrgs
 = &
›
[0].
nfs_¨g›4_u
.
›¸óã
;

602 
	`mem£t
(
ˇrgs
, 0, (*cargs));

603 
ˇrgs
->
objty≥
.
ty≥
 =Åype;

604 
ˇrgs
->
obj«me
.
utf8°rög_Àn
 = 
	`°æí
(
«me
);

605 
ˇrgs
->
obj«me
.
utf8°rög_vÆ
 = 
	`disˇrd_c⁄°
(
«me
);

606 i‡(
©åmask
) {

607 
ˇrgs
->
¸óã©ås
.
©åmask
.
bôm≠4_Àn
 =áârmask->
Àn
;

608 
ˇrgs
->
¸óã©ås
.
©åmask
.
bôm≠4_vÆ
 =áârmask->
vÆ
;

610 i‡(
©å_vÆs
) {

611 
ˇrgs
->
¸óã©ås
.
©å_vÆs
.
©åli°4_Àn
 =áâr_vÆs->
Àn
;

612 
ˇrgs
->
¸óã©ås
.
©å_vÆs
.
©åli°4_vÆ
 =áâr_vÆs->
vÆ
;

614 i‡(
lökd©a
) {

615 
ˇrgs
->
objty≥
.
¸óãty≥4_u
.
lökd©a
.
utf8°rög_Àn
 =

616 
	`°æí
(
lökd©a
);

617 
ˇrgs
->
objty≥
.
¸óãty≥4_u
.
lökd©a
.
utf8°rög_vÆ
 =

618 
	`disˇrd_c⁄°
(
lökd©a
);

620 
ty≥
) {

621 
NF4CHR
:

622 
ˇrgs
->
objty≥
.
ty≥
 = 
NF4CHR
;

623 
ˇrgs
->
objty≥
.
¸óãty≥4_u
.
devd©a
.
•ecd©a1
 = 
	`maj‹
(
dev
);

624 
ˇrgs
->
objty≥
.
¸óãty≥4_u
.
devd©a
.
•ecd©a2
 = 
	`mö‹
(
dev
);

626 
NF4BLK
:

627 
ˇrgs
->
objty≥
.
ty≥
 = 
NF4BLK
;

628 
ˇrgs
->
objty≥
.
¸óãty≥4_u
.
devd©a
.
•ecd©a1
 = 
	`maj‹
(
dev
);

629 
ˇrgs
->
objty≥
.
¸óãty≥4_u
.
devd©a
.
•ecd©a2
 = 
	`mö‹
(
dev
);

635 
	}
}

638 
	$nfs4_›_commô
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
)

640 
COMMIT4¨gs
 *
cﬂrgs
;

642 
›
[0].
¨g›
 = 
OP_COMMIT
;

643 
cﬂrgs
 = &
›
[0].
nfs_¨g›4_u
.
›commô
;

644 
cﬂrgs
->
off£t
 = 0;

645 
cﬂrgs
->
cou¡
 = 0;

648 
	}
}

651 
	$nfs4_›_˛o£
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
)

653 
CLOSE4¨gs
 *
˛¨gs
;

654 
i
 = 0;

656 i‡(
fh
->
is_dúty
) {

657 
i
 +
	`nfs4_›_commô
(
nfs
, &
›
[i]);

660 
›
[
i
].
¨g›
 = 
OP_CLOSE
;

661 
˛¨gs
 = &
›
[
i
++].
nfs_¨g›4_u
.
›˛o£
;

662 
˛¨gs
->
£qid
 = 
fh
->
›í_£qid
;

663 
˛¨gs
->
›í_°©eid
.
£qid
 = 
fh
->
°©eid
.seqid;

664 
	`mem˝y
(
˛¨gs
->
›í_°©eid
.
Ÿhî
, 
fh
->
°©eid
.other, 12);

666  
i
;

667 
	}
}

670 
	$nfs4_›_ac˚ss
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
uöt32_t
 
ac˚ss_mask
)

672 
ACCESS4¨gs
 *
Ørgs
;

674 
›
[0].
¨g›
 = 
OP_ACCESS
;

675 
Ørgs
 = &
›
[0].
nfs_¨g›4_u
.
›ac˚ss
;

676 
	`mem£t
(
Ørgs
, 0, (*aargs));

677 
Ørgs
->
ac˚ss
 = 
ac˚ss_mask
;

680 
	}
}

683 
	$nfs4_›_£t˛õ¡id
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
vîifõr4
 
vîifõr
,

684 c⁄° *
˛õ¡_«me
)

686 
SETCLIENTID4¨gs
 *
scid¨gs
;

688 
›
[0].
¨g›
 = 
OP_SETCLIENTID
;

689 
scid¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id
;

690 
	`mem˝y
(
scid¨gs
->
˛õ¡
.
vîifõr
, vîifõr, (
vîifõr4
));

691 
scid¨gs
->
˛õ¡
.
id
.
id_Àn
 = 
	`°æí
(
˛õ¡_«me
);

692 
scid¨gs
->
˛õ¡
.
id
.
id_vÆ
 = 
	`disˇrd_c⁄°
(
˛õ¡_«me
);

702 
scid¨gs
->
ˇŒback
.
cb_¥ogøm
 = 0;

703 
scid¨gs
->
ˇŒback
.
cb_loˇti⁄
.
r_√tid
 = "tcp";

704 
scid¨gs
->
ˇŒback
.
cb_loˇti⁄
.
r_addr
 = "0.0.0.0.0.0";

705 
scid¨gs
->
ˇŒback_idít
 = 0x00000001;

708 
	}
}

711 
	$nfs4_›_›í_c⁄fúm
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
)

713 
OPEN_CONFIRM4¨gs
 *
oˇrgs
;

715 
›
[0].
¨g›
 = 
OP_OPEN_CONFIRM
;

716 
oˇrgs
 = &
›
[0].
nfs_¨g›4_u
.
››í_c⁄fúm
;

717 
oˇrgs
->
›í_°©eid
.
£qid
 = 
fh
->
°©eid
.seqid;

718 
	`mem˝y
(&
oˇrgs
->
›í_°©eid
.
Ÿhî
, 
fh
->
°©eid
.other, 12);

719 
oˇrgs
->
£qid
 = 
fh
->
›í_£qid
;

722 
	}
}

725 
	$nfs4_›_åunˇã
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

726 *
ßbuf
)

728 
SETATTR4¨gs
 *
ß¨gs
;

729 
uöt32_t
 
mask
[2] = {1 << (
FATTR4_SIZE
),

730 1 << (
FATTR4_TIME_MODIFY_SET
 - 32)};

732 
›
[0].
¨g›
 = 
OP_SETATTR
;

733 
ß¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£èâr
;

734 
ß¨gs
->
°©eid
.
£qid
 = 
fh
->stateid.seqid;

735 
	`mem˝y
(
ß¨gs
->
°©eid
.
Ÿhî
, 
fh
->stateid.other, 12);

737 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_Àn
 = 2;

738 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_vÆ
 = 
mask
;

740 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
 = 12;

741 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
 = 
ßbuf
;

744 
	}
}

747 
	$nfs4_›_chmod
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

748 *
ßbuf
)

750 
SETATTR4¨gs
 *
ß¨gs
;

751 
uöt32_t
 
mask
[2] = {0,

752 1 << (
FATTR4_MODE
 - 32)};

754 
›
[0].
¨g›
 = 
OP_SETATTR
;

755 
ß¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£èâr
;

756 i‡(
fh
) {

757 
ß¨gs
->
°©eid
.
£qid
 = 
fh
->stateid.seqid;

758 
	`mem˝y
(
ß¨gs
->
°©eid
.
Ÿhî
, 
fh
->stateid.other, 12);

761 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_Àn
 = 2;

762 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_vÆ
 = 
mask
;

764 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
 = 4;

765 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
 = 
ßbuf
;

768 
	}
}

771 
	$nfs4_›_chown
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

772 *
ßbuf
, 
Àn
)

774 
SETATTR4¨gs
 *
ß¨gs
;

775 
uöt32_t
 
mask
[2] = {0,

776 1 << (
FATTR4_OWNER
 - 32) |

777 1 << (
FATTR4_OWNER_GROUP
 - 32)};

779 
›
[0].
¨g›
 = 
OP_SETATTR
;

780 
ß¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£èâr
;

781 i‡(
fh
) {

782 
ß¨gs
->
°©eid
.
£qid
 = 
fh
->stateid.seqid;

783 
	`mem˝y
(
ß¨gs
->
°©eid
.
Ÿhî
, 
fh
->stateid.other, 12);

786 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_Àn
 = 2;

787 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_vÆ
 = 
mask
;

789 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
 = 
Àn
;

790 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
 = 
ßbuf
;

793 
	}
}

796 
	$nfs4_›_utimes
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

797 *
ßbuf
, 
Àn
)

799 
SETATTR4¨gs
 *
ß¨gs
;

800 
uöt32_t
 
mask
[2] = {0,

801 1 << (
FATTR4_TIME_ACCESS_SET
 - 32) |

802 1 << (
FATTR4_TIME_MODIFY_SET
 - 32)};

804 
›
[0].
¨g›
 = 
OP_SETATTR
;

805 
ß¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›£èâr
;

806 i‡(
fh
) {

807 
ß¨gs
->
°©eid
.
£qid
 = 
fh
->stateid.seqid;

808 
	`mem˝y
(
ß¨gs
->
°©eid
.
Ÿhî
, 
fh
->stateid.other, 12);

811 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_Àn
 = 2;

812 
ß¨gs
->
obj_©åibuãs
.
©åmask
.
bôm≠4_vÆ
 = 
mask
;

814 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
 = 
Àn
;

815 
ß¨gs
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
 = 
ßbuf
;

818 
	}
}

821 
	$nfs4_›_ªaddú
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
uöt64_t
 
cookõ
)

823 
READDIR4¨gs
 *
rd¨gs
;

825 
›
[0].
¨g›
 = 
OP_READDIR
;

826 
rd¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›ªaddú
;

827 
	`mem£t
(
rd¨gs
, 0, (*rdargs));

829 
rd¨gs
->
cookõ
 = cookie;

830 
rd¨gs
->
dúcou¡
 = 
nfs
->
nfsi
->
ªaddú_dúcou¡
;

831 
rd¨gs
->
maxcou¡
 = 
nfs
->
nfsi
->
ªaddú_maxcou¡
;

832 
rd¨gs
->
©å_ªque°
.
bôm≠4_Àn
 = 2;

833 
rd¨gs
->
©å_ªque°
.
bôm≠4_vÆ
 = 
°™d¨d_©åibuãs
;

836 
	}
}

839 
	$nfs4_›_ª«me
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, c⁄° *
ﬁd«me
,

840 c⁄° *
√w«me
)

842 
RENAME4¨gs
 *
ørgs
;

844 
›
[0].
¨g›
 = 
OP_RENAME
;

845 
ørgs
 = &
›
[0].
nfs_¨g›4_u
.
›ª«me
;

846 
	`mem£t
(
ørgs
, 0, (*rargs));

847 
ørgs
->
ﬁd«me
.
utf8°rög_Àn
 = 
	`°æí
(oldname);

848 
ørgs
->
ﬁd«me
.
utf8°rög_vÆ
 = 
	`disˇrd_c⁄°
(oldname);

849 
ørgs
->
√w«me
.
utf8°rög_Àn
 = 
	`°æí
(newname);

850 
ørgs
->
√w«me
.
utf8°rög_vÆ
 = 
	`disˇrd_c⁄°
(newname);

853 
	}
}

856 
	$nfs4_›_ªad
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

857 
uöt64_t
 
off£t
, 
size_t
 
cou¡
)

859 
READ4¨gs
 *
ørgs
;

861 
›
[0].
¨g›
 = 
OP_READ
;

862 
ørgs
 = &
›
[0].
nfs_¨g›4_u
.
›ªad
;

863 
ørgs
->
°©eid
.
£qid
 = 
fh
->stateid.seqid;

864 
	`mem˝y
(
ørgs
->
°©eid
.
Ÿhî
, 
fh
->stateid.other, 12);

865 
ørgs
->
off£t
 = offset;

866 
ørgs
->
cou¡
 = count;

869 
	}
}

872 
	$nfs4_›_wrôe
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

873 
uöt64_t
 
off£t
, 
size_t
 
cou¡
, c⁄° *
buf
)

875 
WRITE4¨gs
 *
w¨gs
;

877 
›
[0].
¨g›
 = 
OP_WRITE
;

878 
w¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›wrôe
;

879 
w¨gs
->
°©eid
.
£qid
 = 
fh
->stateid.seqid;

880 
	`mem˝y
(
w¨gs
->
°©eid
.
Ÿhî
, 
fh
->stateid.other, 12);

881 
w¨gs
->
off£t
 = offset;

882 i‡(
fh
->
is_sync
) {

883 
w¨gs
->
°abÀ
 = 
DATA_SYNC4
;

885 
w¨gs
->
°abÀ
 = 
UNSTABLE4
;

886 
fh
->
is_dúty
 = 1;

888 
w¨gs
->
d©a
.
d©a_Àn
 = 
cou¡
;

889 
w¨gs
->
d©a
.
d©a_vÆ
 = 
	`disˇrd_c⁄°
(
buf
);

892 
	}
}

895 
	$nfs4_›_gëfh
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
)

897 
›
[0].
¨g›
 = 
OP_GETFH
;

900 
	}
}

903 
	$nfs4_›_ßvefh
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
)

905 
›
[0].
¨g›
 = 
OP_SAVEFH
;

908 
	}
}

911 
	$nfs4_›_lök
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, c⁄° *
√w«me
)

913 
LINK4¨gs
 *
œrgs
;

915 
›
[0].
¨g›
 = 
OP_LINK
;

916 
œrgs
 = &
›
[0].
nfs_¨g›4_u
.
›lök
;

917 
	`mem£t
(
œrgs
, 0, (*largs));

918 
œrgs
->
√w«me
.
utf8°rög_Àn
 = 
	`°æí
(newname);

919 
œrgs
->
√w«me
.
utf8°rög_vÆ
 = 
	`disˇrd_c⁄°
(newname);

922 
	}
}

925 
	$nfs4_›_putfh
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *nfsfh)

927 
PUTFH4¨gs
 *
pÁrgs
;

928 
›
[0].
¨g›
 = 
OP_PUTFH
;

930 
pÁrgs
 = &
›
[0].
nfs_¨g›4_u
.
›putfh
;

931 
pÁrgs
->
obje˘
.
nfs_fh4_Àn
 = 
nfsfh
->
fh
.
Àn
;

932 
pÁrgs
->
obje˘
.
nfs_fh4_vÆ
 = 
nfsfh
->
fh
.
vÆ
;

935 
	}
}

938 
	$nfs4_›_lock
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

939 
nfs_›num4
 
cmd
, 
nfs_lock_ty≥4
 
lockty≥
,

940 
ª˛aim
, 
uöt64_t
 
off£t
, 
Àngth4
 
Àngth
)

942 
LOCK4¨gs
 *
œrgs
;

943 
›
[0].
¨g›
 = 
cmd
;

945 
œrgs
 = &
›
[0].
nfs_¨g›4_u
.
›lock
;

946 
œrgs
->
lockty≥
 =Üocktype;

947 
œrgs
->
ª˛aim
 =Ñeclaim;

948 
œrgs
->
off£t
 = offset;

949 
œrgs
->
Àngth
 =Üength;

951 i‡(
nfs
->
nfsi
->
has_lock_ow√r
) {

952 
œrgs
->
lockî
.
√w_lock_ow√r
 = 0;

953 
œrgs
->
lockî
.
lockî4_u
.
lock_ow√r
.
lock_°©eid
.
£qid
 =

954 
fh
->
lock_°©eid
.
£qid
;

955 
	`mem˝y
(
œrgs
->
lockî
.
lockî4_u
.
lock_ow√r
.
lock_°©eid
.
Ÿhî
,

956 
fh
->
lock_°©eid
.
Ÿhî
, 12);

957 
œrgs
->
lockî
.
lockî4_u
.
lock_ow√r
.
lock_£qid
 =

958 
fh
->
lock_£qid
;

960 
œrgs
->
lockî
.
√w_lock_ow√r
 = 1;

961 
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
›í_£qid
 =

962 
fh
->
›í_£qid
;

963 
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
›í_°©eid
.
£qid
 =

964 
fh
->
°©eid
.
£qid
;

965 
	`mem˝y
(
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
›í_°©eid
.
Ÿhî
,

966 
fh
->
°©eid
.
Ÿhî
, 12);

967 
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
lock_ow√r
.
˛õ¡id
 =

968 
nfs
->
nfsi
->
˛õ¡id
;

969 
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
lock_ow√r
.
ow√r
.
ow√r_Àn
 =

970 
	`°æí
(
nfs
->
nfsi
->
˛õ¡_«me
);

971 
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
lock_ow√r
.
ow√r
.
ow√r_vÆ
 =

972 
nfs
->
nfsi
->
˛õ¡_«me
;

973 
œrgs
->
lockî
.
lockî4_u
.
›í_ow√r
.
lock_£qid
 =

974 
fh
->
lock_£qid
;

976 
fh
->
lock_£qid
++;

979 
	}
}

982 
	$nfs4_›_locku
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

983 
nfs_lock_ty≥4
 
lockty≥
, 
uöt64_t
 
off£t
, 
Àngth4
 
Àngth
)

985 
LOCKU4¨gs
 *
lu¨gs
;

986 
›
[0].
¨g›
 = 
OP_LOCKU
;

988 
lu¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›locku
;

989 
lu¨gs
->
lockty≥
 =Üocktype;

990 
lu¨gs
->
off£t
 = offset;

991 
lu¨gs
->
Àngth
 =Üength;

993 
lu¨gs
->
£qid
 = 
fh
->
lock_£qid
;

994 
lu¨gs
->
lock_°©eid
.
£qid
 = 
fh
->lock_stateid.seqid;

995 
	`mem˝y
(
lu¨gs
->
lock_°©eid
.
Ÿhî
, 
fh
->lock_stateid.other, 12);

997 
fh
->
lock_£qid
++;

1000 
	}
}

1003 
	$nfs4_›_lockt
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, 
nfsfh
 *
fh
,

1004 
nfs_lock_ty≥4
 
lockty≥
, 
uöt64_t
 
off£t
, 
Àngth4
 
Àngth
)

1006 
LOCKT4¨gs
 *
…¨gs
;

1007 
›
[0].
¨g›
 = 
OP_LOCKT
;

1009 
…¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›lockt
;

1010 
…¨gs
->
lockty≥
 =Üocktype;

1011 
…¨gs
->
off£t
 = offset;

1012 
…¨gs
->
Àngth
 =Üength;

1014 
…¨gs
->
ow√r
.
˛õ¡id
 = 
nfs
->
nfsi
->clientid;

1015 
…¨gs
->
ow√r
.ow√r.
ow√r_Àn
 = 
	`°æí
(
nfs
->
nfsi
->
˛õ¡_«me
);

1016 
…¨gs
->
ow√r
.ow√r.
ow√r_vÆ
 = 
nfs
->
nfsi
->
˛õ¡_«me
;

1019 
	}
}

1022 
	$nfs4_›_lookup
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, c⁄° *
∑th
)

1024 
LOOKUP4¨gs
 *
œrgs
;

1026 
›
[0].
¨g›
 = 
OP_LOOKUP
;

1027 
œrgs
 = &
›
[0].
nfs_¨g›4_u
.
›lookup
;

1028 
œrgs
->
obj«me
.
utf8°rög_Àn
 = 
	`°æí
(
∑th
);

1029 
œrgs
->
obj«me
.
utf8°rög_vÆ
 = 
	`disˇrd_c⁄°
(
∑th
);

1032 
	}
}

1035 
	$nfs4_›_£t˛õ¡id_c⁄fúm
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
,

1036 
uöt64_t
 
˛õ¡id
, 
vîifõr4
 
vîifõr
)

1038 
SETCLIENTID_CONFIRM4¨gs
 *
scidˇrgs
;

1040 
›
[0].
¨g›
 = 
OP_SETCLIENTID_CONFIRM
;

1041 
scidˇrgs
 = &
›
[0].
nfs_¨g›4_u
.
›£t˛õ¡id_c⁄fúm
;

1042 
scidˇrgs
->
˛õ¡id
 = clientid;

1043 
	`mem˝y
(
scidˇrgs
->
£t˛õ¡id_c⁄fúm
, 
vîifõr
, 
NFS4_VERIFIER_SIZE
);

1046 
	}
}

1049 
	$nfs4_›_puåoŸfh
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
)

1051 
›
[0].
¨g›
 = 
OP_PUTROOTFH
;

1054 
	}
}

1057 
	$nfs4_›_ªadlök
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
)

1059 
›
[0].
¨g›
 = 
OP_READLINK
;

1062 
	}
}

1065 
	$nfs4_›_ªmove
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
, c⁄° *
«me
)

1067 
REMOVE4¨gs
 *
rm¨gs
;

1069 
›
[0].
¨g›
 = 
OP_REMOVE
;

1070 
rm¨gs
 = &
›
[0].
nfs_¨g›4_u
.
›ªmove
;

1071 
	`mem£t
(
rm¨gs
, 0, (*rmargs));

1072 
rm¨gs
->
èrgë
.
utf8°rög_Àn
 = 
	`°æí
(
«me
);

1073 
rm¨gs
->
èrgë
.
utf8°rög_vÆ
 = 
	`disˇrd_c⁄°
(
«me
);

1076 
	}
}

1079 
	$nfs4_›_gë©å
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 *
›
,

1080 
uöt32_t
 *
©åibuãs
, 
cou¡
)

1082 
GETATTR4¨gs
 *
gØrgs
;

1084 
›
[0].
¨g›
 = 
OP_GETATTR
;

1085 
gØrgs
 = &
›
[0].
nfs_¨g›4_u
.
›gë©å
;

1086 
	`mem£t
(
gØrgs
, 0, (*gaargs));

1088 
gØrgs
->
©å_ªque°
.
bôm≠4_vÆ
 = 
©åibuãs
;

1089 
gØrgs
->
©å_ªque°
.
bôm≠4_Àn
 = 
cou¡
;

1092 
	}
}

1104 
	$nfs4_Æloˇã_›
(
nfs_c⁄ãxt
 *
nfs
, 
nfs_¨g›4
 **
›
,

1105 *
∑th
, 
num_exåa
)

1107 *
±r
;

1108 
i
, 
cou¡
;

1110 *
›
 = 
NULL
;

1112 
cou¡
 = 
	`nfs4_num_∑th_comp⁄íts
(
nfs
, 
∑th
);

1114 *
›
 = 
	`mÆloc
((**›Ë* (2 + 2 * 
cou¡
 + 
num_exåa
));

1115 i‡(*
›
 =
NULL
) {

1116 
	`nfs_£t_îr‹
(
nfs
, "FailedÅoállocate opárray");

1120 
i
 = 0;

1121 i‡(
nfs
->
nfsi
->
roŸfh
.
Àn
) {

1122 
nfsfh
 
fh
;

1124 
fh
.fh.
Àn
 = 
nfs
->
nfsi
->
roŸfh
.len;

1125 
fh
.fh.
vÆ
 = 
nfs
->
nfsi
->
roŸfh
.val;

1126 
i
 +
	`nfs4_›_putfh
(
nfs
, &(*
›
)[i], &
fh
);

1128 
i
 +
	`nfs4_›_puåoŸfh
(
nfs
, &(*
›
)[i]);

1131 
±r
 = &
∑th
[1];

1132 
±r
 && *ptr != 0) {

1133 *
tmp
;

1135 
tmp
 = 
	`°rchr
(
±r
, '/');

1136 i‡(
tmp
) {

1137 *
tmp
 = 0;

1138 
tmp
 =Åmp + 1;

1140 
i
 +
	`nfs4_›_lookup
(
nfs
, &(*
›
)[i], 
±r
);

1142 
±r
 = 
tmp
;

1145 
i
 +
	`nfs4_›_gë©å
(
nfs
, &(*
›
)[i], 
°™d¨d_©åibuãs
, 2);

1147  
i
;

1148 
	}
}

1151 
nfs4_lookup_∑th_async
(
nfs_c⁄ãxt
 *
nfs
,

1152 
nfs4_cb_d©a
 *
d©a
,

1153 
Ωc_cb
 
cb
);

1156 
	$nfs4_lookup_∑th_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1157 *
¥iv©e_d©a
)

1159 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1160 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1161 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1162 
READLINK4ªs
 *
æªs
 = 
NULL
;

1163 *
∑th
, *
tmp
, *
íd
;

1164 
i
;

1166 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1168 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "READLINK")) {

1172 
∑th
 = 
	`°rdup
(
d©a
->path);

1173 i‡(
∑th
 =
NULL
) {

1174 
	`nfs_£t_îr‹
(
nfs
, "Out of memory duplicatingÖath.");

1175 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1176 
d©a
->
¥iv©e_d©a
);

1177 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1181 
tmp
 = &
∑th
[0];

1182 
d©a
->
lök
.
idx
-- > 1) {

1183 
tmp
 = 
	`°rchr
(tmp + 1, '/');

1185 *
tmp
++ = 0;

1186 
íd
 = 
	`°rchr
(
tmp
, '/');

1187 i‡(
íd
 =
NULL
) {

1189 
íd
 = "";

1191 *
íd
++ = 0;

1194 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_READLINK
, "READLINK")) < 0) {

1195 
	`‰ì
(
∑th
);

1198 
æªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ªadlök
;

1200 
tmp
 = 
	`mÆloc
(
	`°æí
(
d©a
->
∑th
Ë+ 3 + 
æªs
->
READLINK4ªs_u
.
ªsok4
.
lök
.
utf8°rög_Àn
);

1201 i‡(
tmp
 =
NULL
) {

1202 
	`nfs_£t_îr‹
(
nfs
, "Out of memory duplicatingÖath.");

1203 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1204 
d©a
->
¥iv©e_d©a
);

1205 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1206 
	`‰ì
(
∑th
);

1210 
	`•rötf
(
tmp
, "%s/%.*s/%s",

1211 
∑th
, 
æªs
->
READLINK4ªs_u
.
ªsok4
.
lök
.
utf8°rög_Àn
,

1212 
æªs
->
READLINK4ªs_u
.
ªsok4
.
lök
.
utf8°rög_vÆ
, 
íd
);

1213 
	`‰ì
(
∑th
);

1214 
	`‰ì
(
d©a
->
∑th
);

1215 
d©a
->
∑th
 = 
tmp
;

1217 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, d©a->
c⁄töue_cb
) < 0) {

1218 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
ªs
, d©a->
¥iv©e_d©a
);

1219 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1222 
	}
}

1225 
nfs4_›í_ªadlök
(
Ωc_c⁄ãxt
 *
Ωc
, 
COMPOUND4ªs
 *
ªs
,

1226 
nfs4_cb_d©a
 *
d©a
);

1229 
	$nfs4_lookup_∑th_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1230 *
¥iv©e_d©a
)

1232 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1233 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1234 
COMPOUND4¨gs
 
¨gs
;

1235 
nfs_¨g›4
 *
›
;

1236 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1237 
i
;

1238 
ªsﬁve_lök
 = 0;

1239 *
∑th
, *
tmp
;

1241 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1243 i‡(
°©us
 =
RPC_STATUS_ERROR
) {

1244 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, 
ªs
, d©a->
¥iv©e_d©a
);

1245 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1248 i‡(
°©us
 =
RPC_STATUS_CANCEL
) {

1249 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "Command was cancelled",

1250 
d©a
->
¥iv©e_d©a
);

1251 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1254 i‡(
°©us
 =
RPC_STATUS_TIMEOUT
) {

1255 
d©a
->
	`cb
(-
EINTR
, 
nfs
, "CommandÅimed out",

1256 
d©a
->
¥iv©e_d©a
);

1257 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1260 i‡(
ªs
->
°©us
 !
NFS4_OK
 &&

1261 
ªs
->
°©us
 !
NFS4ERR_SYMLINK
) {

1262 
	`nfs_£t_îr‹
(
nfs
, "NFS4: (path %s) failed with "

1264 
d©a
->
∑th
,

1265 
	`nfs°©4_to_°r
(
ªs
->
°©us
),

1266 
	`nfs°©4_to_î∫o
(
ªs
->
°©us
));

1267 
d©a
->
	`cb
(
	`nfs°©3_to_î∫o
(
ªs
->
°©us
), 
nfs
,

1268 
	`nfs_gë_îr‹
(
nfs
), 
d©a
->
¥iv©e_d©a
);

1269 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1273 
i
 = 0; i < ()
ªs
->
ªßºay
.
ªßºay_Àn
; i++) {

1274 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
ªs›
 =
OP_GETATTR
) {

1275 
GETATTR4ªsok
 *
g¨esok
;

1276 
nfs_°©_64
 
°
;

1278 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

1280 
	`mem£t
(&
°
, 0, (st));

1281 i‡(
	`nfs_∑r£_©åibuãs
(
nfs
, 
d©a
, &
°
,

1282 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

1283 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
) < 0) {

1284 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1285 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1288 i‡((
°
.
nfs_mode
 & 
S_IFMT
Ë=
S_IFLNK
) {

1292 
ªsﬁve_lök
 = 1;

1303 i‡(!
ªsﬁve_lök
) {

1304 i‡(
	`nfs4_›í_ªadlök
(
Ωc
, 
ªs
, 
d©a
) < 0) {

1312 i‡(
d©a
->
Êags
 & 
LOOKUP_FLAG_NO_FOLLOW
) {

1316 
ªsﬁve_lök
 = 0;

1322 i‡(
ªs
->
°©us
 =
NFS4_OK
 && !
ªsﬁve_lök
) {

1323 
d©a
->
	`c⁄töue_cb
(
Ωc
, 
NFS4_OK
, 
ªs
, data);

1328 
d©a
->
lök
.
idx
 = 0;

1329 
i
 = 0; i < ()
ªs
->
ªßºay
.
ªßºay_Àn
; i++) {

1330 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
ªs›
 =
OP_LOOKUP
) {

1331 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›lookup
.
°©us
 =
NFS4ERR_SYMLINK
) {

1334 
d©a
->
lök
.
idx
++;

1338 i‡(!
ªsﬁve_lök
 && 
i
 =
ªs
->
ªßºay
.
ªßºay_Àn
) {

1339 
	`nfs_£t_îr‹
(
nfs
, "SymlinkÇot found duringÜookup.");

1340 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1341 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1346 
∑th
 = 
	`°rdup
(
d©a
->path);

1347 i‡(
∑th
 =
NULL
) {

1348 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅo duplicate "

1350 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

1351 
d©a
->
¥iv©e_d©a
);

1352 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1359 i‡(!
ªsﬁve_lök
) {

1360 
tmp
 = 
∑th
;

1361 
i
 = 0; i < ()
d©a
->
lök
.
idx
; i++) {

1362 
tmp
 = 
	`°rchr
(tmp + 1, '/');

1364 *
tmp
 = 0;

1368 i‡((
i
 = 
	`nfs4_Æloˇã_›
(
nfs
, &
›
, 
∑th
, 1)) < 0) {

1369 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1370 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1371 
	`‰ì
(
∑th
);

1376 
i
 +
	`nfs4_›_ªadlök
(
nfs
, &
›
[i]);

1378 
	`mem£t
(&
¨gs
, 0, (args));

1379 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

1380 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

1382 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_lookup_∑th_2_cb
, &
¨gs
,

1383 
d©a
Ë=
NULL
) {

1384 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo queue READLINK command. %s",

1385 
	`nfs_gë_îr‹
(
nfs
));

1386 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1387 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1388 
	`‰ì
(
∑th
);

1391 
	`‰ì
(
∑th
);

1392 
	}
}

1395 
	$nfs4_lookup_∑th_async
(
nfs_c⁄ãxt
 *
nfs
,

1396 
nfs4_cb_d©a
 *
d©a
,

1397 
Ωc_cb
 
cb
)

1399 
COMPOUND4¨gs
 
¨gs
;

1400 
nfs_¨g›4
 *
›
;

1401 *
∑th
;

1402 
i
, 
num_›
;

1404 
∑th
 = 
	`nfs4_ªsﬁve_∑th
(
nfs
, 
d©a
->path);

1405 i‡(
∑th
 =
NULL
) {

1408 
	`‰ì
(
d©a
->
∑th
);

1409 
d©a
->
∑th
 =Öath;

1411 
∑th
 = 
	`°rdup
(path);

1412 i‡(
∑th
 =
NULL
) {

1416 i‡((
i
 = 
	`nfs4_Æloˇã_›
(
nfs
, &
›
, 
∑th
, 
d©a
->
fûÀr
.
max_›
)) < 0) {

1417 
	`‰ì
(
∑th
);

1421 
num_›
 = 
d©a
->
fûÀr
.
	`func
(d©a, &
›
[
i
]);

1422 
d©a
->
c⁄töue_cb
 = 
cb
;

1424 
	`mem£t
(&
¨gs
, 0, (args));

1425 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
 + 
num_›
;

1426 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

1428 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_lookup_∑th_1_cb
, &
¨gs
,

1429 
d©a
Ë=
NULL
) {

1430 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo queue LOOKUP command. %s",

1431 
	`nfs_gë_îr‹
(
nfs
));

1432 
	`‰ì
(
∑th
);

1433 
	`‰ì
(
›
);

1437 
	`‰ì
(
∑th
);

1438 
	`‰ì
(
›
);

1440 
	}
}

1443 
	$nfs4_p›uœã_gëfh
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

1445  
	`nfs4_›_gëfh
(
d©a
->
nfs
, 
›
);

1446 
	}
}

1449 
	$nfs4_p›uœã_gë©å
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

1451  
	`nfs4_›_gëfh
(
d©a
->
nfs
, 
›
);

1452 
	}
}

1455 
	$nfs4_p›uœã_ac˚ss
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

1457 
uöt32_t
 
mode
;

1459 
	`mem˝y
(&
mode
, 
d©a
->
fûÀr
.
blob3
.
vÆ
, (
uöt32_t
));

1461  
	`nfs4_›_ac˚ss
(
d©a
->
nfs
, 
›
, 
mode
);

1462 
	}
}

1465 
	$nfs4_mou¡_4_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1466 *
¥iv©e_d©a
)

1468 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1469 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1470 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1471 
GETFH4ªsok
 *
gfhªsok
;

1472 
i
;

1474 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1476 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "GETFH")) {

1480 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETFH
, "GETFH")) < 0) {

1483 
gfhªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
;

1485 
nfs
->
nfsi
->
roŸfh
.
Àn
 = 
gfhªsok
->
obje˘
.
nfs_fh4_Àn
;

1486 
nfs
->
nfsi
->
roŸfh
.
vÆ
 = 
	`mÆloc
“fs->nfsi->roŸfh.
Àn
);

1487 i‡(
nfs
->
nfsi
->
roŸfh
.
vÆ
 =
NULL
) {

1488 
	`nfs_£t_îr‹
(
nfs
, "%s: %s", 
__FUNCTION__
, 
	`nfs_gë_îr‹
(nfs));

1489 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1490 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1493 
	`mem˝y
(
nfs
->
nfsi
->
roŸfh
.
vÆ
,

1494 
gfhªsok
->
obje˘
.
nfs_fh4_vÆ
,

1495 
nfs
->
nfsi
->
roŸfh
.
Àn
);

1510 
	`Ωc_£t_ªsûõncy
(
Ωc
,

1511 
nfs
->
nfsi
->
auto_ªc⁄√˘
,

1512 
nfs
->
nfsi
->
timeout
,

1513 
nfs
->
nfsi
->
ªå™s
);

1515 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1516 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1517 
	}
}

1520 
	$nfs4_mou¡_3_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1521 *
¥iv©e_d©a
)

1523 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1524 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1525 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1527 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1529 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "SETCLIENTID_CONFIRM")) {

1533 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_gëfh
;

1534 
d©a
->
fûÀr
.
max_›
 = 1;

1535 
d©a
->
fûÀr
.d©®
	`ˇŒoc
(2, (
uöt32_t
));

1536 i‡(
d©a
->
fûÀr
.d©®=
NULL
) {

1537 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

1539 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
ªs
, d©a->
¥iv©e_d©a
);

1540 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1545 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_mou¡_4_cb
) < 0) {

1546 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
ªs
, d©a->
¥iv©e_d©a
);

1547 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1550 
	}
}

1553 
	$nfs4_mou¡_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1554 *
¥iv©e_d©a
)

1556 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1557 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1558 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1559 
COMPOUND4¨gs
 
¨gs
;

1560 
nfs_¨g›4
 
›
[1];

1561 
SETCLIENTID4ªsok
 *
scidªsok
;

1562 
i
;

1564 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1566 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "SETCLIENTID")) {

1570 
scidªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[0].
nfs_ªs›4_u
.
›£t˛õ¡id
.
SETCLIENTID4ªs_u
.
ªsok4
;

1571 
nfs
->
nfsi
->
˛õ¡id
 = 
scidªsok
->clientid;

1572 
	`mem˝y
(
nfs
->
nfsi
->
£t˛õ¡id_c⁄fúm
,

1573 
scidªsok
->
£t˛õ¡id_c⁄fúm
,

1574 
NFS4_VERIFIER_SIZE
);

1576 
	`mem£t
(
›
, 0, (op));

1578 
i
 = 
	`nfs4_›_£t˛õ¡id_c⁄fúm
(
nfs
, &
›
[0],Çfs->
nfsi
->
˛õ¡id
,

1579 
nfs
->
nfsi
->
£t˛õ¡id_c⁄fúm
);

1581 
	`mem£t
(&
¨gs
, 0, (args));

1582 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

1583 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

1585 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
nfs4_mou¡_3_cb
, &
¨gs
,

1586 
¥iv©e_d©a
Ë=
NULL
) {

1587 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo queue SETCLIENTID_CONFIRM. %s",

1588 
	`nfs_gë_îr‹
(
nfs
));

1589 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1590 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1593 
	}
}

1596 
	$nfs4_mou¡_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1597 *
¥iv©e_d©a
)

1599 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1600 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1601 
COMPOUND4¨gs
 
¨gs
;

1602 
nfs_¨g›4
 
›
[1];

1603 
i
;

1605 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1607 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
NULL
, "CONNECT")) {

1611 
	`mem£t
(
›
, 0, (op));

1613 
i
 = 
	`nfs4_›_£t˛õ¡id
(
nfs
, &
›
[0],Çfs->
nfsi
->
vîifõr
,Çfs->nfsi->
˛õ¡_«me
);

1615 
	`mem£t
(&
¨gs
, 0, (args));

1616 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

1617 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

1619 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
nfs4_mou¡_2_cb
, &
¨gs
, 
d©a
Ë=
NULL
) {

1620 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo queue SETCLIENTID. %s",

1621 
	`nfs_gë_îr‹
(
nfs
));

1622 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1623 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1626 
	}
}

1629 
	$nfs4_mou¡_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
£rvî
,

1630 c⁄° *
exp‹t
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1632 
nfs4_cb_d©a
 *
d©a
;

1633 *
√w_£rvî
, *
√w_exp‹t
;

1634 
p‹t
;

1636 
√w_£rvî
 = 
	`°rdup
(
£rvî
);

1637 i‡(
√w_£rvî
 =
NULL
) {

1638 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

1642 
	`‰ì
(
nfs
->
nfsi
->
£rvî
);

1643 
nfs
->
nfsi
->
£rvî
 = 
√w_£rvî
;

1645 
	`‰ì
(
nfs
->
Ωc
->
£rvî
);

1646 
nfs
->
Ωc
->
£rvî
 = 
	`°rdup
“fs->
nfsi
->server);

1648 
√w_exp‹t
 = 
	`°rdup
(
exp‹t
);

1649 i‡(
√w_exp‹t
 =
NULL
) {

1650 
	`nfs_£t_îr‹
(
nfs
, "out of memory. failedÅoállocate "

1654 i‡(
	`nfs_n‹mÆize_∑th
(
nfs
, 
√w_exp‹t
)) {

1655 
	`nfs_£t_îr‹
(
nfs
, "BadÉxportÖath. %s",

1656 
	`nfs_gë_îr‹
(
nfs
));

1657 
	`‰ì
(
√w_exp‹t
);

1660 
	`‰ì
(
nfs
->
nfsi
->
exp‹t
);

1661 
nfs
->
nfsi
->
exp‹t
 = 
√w_exp‹t
;

1664 
d©a
 = 
	`ˇŒoc
(1, (*data));

1665 i‡(
d©a
 =
NULL
) {

1666 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

1671 
d©a
->
nfs
 =Çfs;

1672 
d©a
->
cb
 = cb;

1673 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1674 
d©a
->
∑th
 = 
	`°rdup
(
√w_exp‹t
);

1676 
p‹t
 = 
nfs
->
nfsi
->
nf•‹t
 ?Çfs->nfsi->nfsport : 2049;

1677 i‡(
	`Ωc_c⁄√˘_p‹t_async
(
nfs
->
Ωc
, 
£rvî
, 
p‹t
,

1678 
NFS4_PROGRAM
, 
NFS_V4
,

1679 
nfs4_mou¡_1_cb
, 
d©a
) != 0) {

1680 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo start connection. %s",

1681 
	`nfs_gë_îr‹
(
nfs
));

1682 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1686 
	}
}

1689 
	$nfs4_chdú_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1690 *
¥iv©e_d©a
)

1692 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1693 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1694 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1696 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1698 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "CHDIR")) {

1703 #ifde‡
HAVE_MULTITHREADING


1704 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

1705 
	`nfs_mt_muãx_lock
(&
nfs
->
Ωc
->
Ωc_muãx
);

1708 
	`‰ì
(
nfs
->
nfsi
->
cwd
);

1709 
nfs
->
nfsi
->
cwd
 = 
d©a
->
∑th
;

1710 #ifde‡
HAVE_MULTITHREADING


1711 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

1712 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
Ωc
->
Ωc_muãx
);

1716 
d©a
->
∑th
 = 
NULL
;

1718 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1719 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1720 
	}
}

1722 
	$nfs4_chdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1723 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1725 
nfs4_cb_d©a
 *
d©a
;

1727 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

1728 i‡(
d©a
 =
NULL
) {

1732 
d©a
->
cb
 = cb;

1733 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1734 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_gë©å
;

1735 
d©a
->
fûÀr
.
max_›
 = 1;

1736 
d©a
->
fûÀr
.d©®
	`ˇŒoc
(2, (
uöt32_t
));

1737 i‡(
d©a
->
fûÀr
.d©®=
NULL
) {

1738 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

1740 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1741 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1745 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_chdú_1_cb
) < 0) {

1746 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1751 
	}
}

1754 
	$nfs4_x°©64_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1755 *
¥iv©e_d©a
)

1757 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1758 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1759 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1760 
GETATTR4ªsok
 *
g¨esok
;

1761 
nfs_°©_64
 
°
;

1762 
i
;

1764 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1766 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "STAT64")) {

1770 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETATTR
, "GETATTR")) < 0) {

1773 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

1775 
	`mem£t
(&
°
, 0, (st));

1776 i‡(
	`nfs_∑r£_©åibuãs
(
nfs
, 
d©a
, &
°
,

1777 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

1778 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
) < 0) {

1779 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1780 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1783 
d©a
->
	`cb
(0, 
nfs
, &
°
, d©a->
¥iv©e_d©a
);

1784 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1785 
	}
}

1788 
	$nfs4_°©64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1789 
no_fﬁlow
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1791 
nfs4_cb_d©a
 *
d©a
;

1793 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

1794 i‡(
d©a
 =
NULL
) {

1798 i‡(
no_fﬁlow
) {

1799 
d©a
->
Êags
 |
LOOKUP_FLAG_NO_FOLLOW
;

1801 
d©a
->
cb
 = cb;

1802 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1803 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_gë©å
;

1804 
d©a
->
fûÀr
.
max_›
 = 1;

1805 
d©a
->
fûÀr
.d©®
	`ˇŒoc
(2, (
uöt32_t
));

1806 i‡(
d©a
->
fûÀr
.d©®=
NULL
) {

1807 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

1809 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

1810 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1814 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_x°©64_cb
) < 0) {

1815 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1820 
	}
}

1827 
	$nfs4_p›uœã_mkdú
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

1829 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1831  
	`nfs4_›_¸óã
(
nfs
, 
›
, 
d©a
->
fûÀr
.d©a, 
NF4DIR
,

1832 &
d©a
->
fûÀr
.
blob0
, &d©a->fûÀr.
blob1
,

1833 
NULL
, 0);

1834 
	}
}

1837 
	$nfs4_mkdú_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1838 *
¥iv©e_d©a
)

1840 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1841 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1842 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1844 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1846 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "MKDIR")) {

1850 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1851 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1852 
	}
}

1855 
	$nfs4_mkdú2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

1856 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1858 
nfs4_cb_d©a
 *
d©a
;

1859 
uöt32_t
 *
u32±r
;

1861 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
∑th
);

1862 i‡(
d©a
 =
NULL
) {

1866 
d©a
->
cb
 = cb;

1867 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1868 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_mkdú
;

1869 
d©a
->
fûÀr
.
max_›
 = 1;

1872 
u32±r
 = 
	`mÆloc
(2 * (
uöt32_t
));

1873 i‡(
u32±r
 =
NULL
) {

1874 
	`nfs_£t_îr‹
(
nfs
, "Out of memoryállocating bitmap");

1875 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1878 
u32±r
[0] = 0;

1879 
u32±r
[1] = 1 << (
FATTR4_MODE
 - 32);

1880 
d©a
->
fûÀr
.
blob0
.
Àn
 = 2;

1881 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
u32±r
;

1882 
d©a
->
fûÀr
.
blob0
.
‰ì
 = free;

1885 
u32±r
 = 
	`mÆloc
(1 * (
uöt32_t
));

1886 i‡(
u32±r
 =
NULL
) {

1887 
	`nfs_£t_îr‹
(
nfs
, "Out of memoryállocatingáttributes");

1888 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1891 
u32±r
[0] = 
	`ht⁄l
(
mode
);

1892 
d©a
->
fûÀr
.
blob1
.
Àn
 = 4;

1893 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
u32±r
;

1894 
d©a
->
fûÀr
.
blob1
.
‰ì
 = free;

1896 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_mkdú_cb
) < 0) {

1897 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1902 
	}
}

1907 
	$nfs4_p›uœã_ªmove
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

1909 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1911  
	`nfs4_›_ªmove
(
nfs
, 
›
, 
d©a
->
fûÀr
.data);

1912 
	}
}

1915 
	$nfs4_ªmove_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1916 *
¥iv©e_d©a
)

1918 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1919 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1920 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1922 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1924 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "REMOVE")) {

1928 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

1929 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1930 
	}
}

1933 
	$nfs4_ªmove_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1934 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1936 
nfs4_cb_d©a
 *
d©a
;

1938 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
∑th
);

1939 i‡(
d©a
 =
NULL
) {

1943 
d©a
->
cb
 = cb;

1944 
d©a
->
¥iv©e_d©a
 =Örivate_data;

1945 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_ªmove
;

1946 
d©a
->
fûÀr
.
max_›
 = 1;

1948 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_ªmove_cb
) < 0) {

1949 
	`‰ì_nfs4_cb_d©a
(
d©a
);

1954 
	}
}

1957 
	$nfs4_rmdú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

1958 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

1960  
	`nfs4_ªmove_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

1961 
	}
}

1964 
	$nfs_ö¸emít_£qid
(
nfsfh
 *nfsfh, 
uöt32_t
 
°©us
)

1967 
°©us
) {

1968 
NFS4ERR_STALE_CLIENTID
:

1969 
NFS4ERR_STALE_STATEID
:

1970 
NFS4ERR_BAD_STATEID
:

1971 
NFS4ERR_BAD_SEQID
:

1972 
NFS4ERR_BADZDR
:

1973 
NFS4ERR_RESOURCE
:

1974 
NFS4ERR_NOFILEHANDLE
:

1977 
nfsfh
->
›í_£qid
++;

1979 
	}
}

1982 
	$nfs4_›í_£èâr_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

1983 *
¥iv©e_d©a
)

1985 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

1986 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

1987 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

1988 
nfsfh
 *
fh
;

1990 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1992 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "SETATTR")) {

1996 
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

1997 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

1998 
d©a
->
	`cb
(0, 
nfs
, 
fh
, d©a->
¥iv©e_d©a
);

1999 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2000 
	}
}

2003 
	$nfs4_›í_åunˇã_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2004 *
¥iv©e_d©a
)

2006 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2007 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2008 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2009 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2010 
COMPOUND4¨gs
 
¨gs
;

2011 
nfs_¨g›4
 
›
[2];

2012 
i
;

2014 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "OPEN")) {

2018 
i
 = 
	`nfs4_›_putfh
(
nfs
, 
›
, 
fh
);

2019 
i
 +
	`nfs4_›_åunˇã
(
nfs
, &
›
[i], 
fh
, 
d©a
->
fûÀr
.
blob3
.
vÆ
);

2021 
	`mem£t
(&
¨gs
, 0, (args));

2022 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2023 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2025 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_›í_£èâr_cb
, &
¨gs
,

2026 
d©a
Ë=
NULL
) {

2027 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

2028 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2031 
	}
}

2034 
	$nfs4_›í_chmod_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2035 *
¥iv©e_d©a
)

2037 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2038 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2039 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2040 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2041 
COMPOUND4¨gs
 
¨gs
;

2042 
nfs_¨g›4
 
›
[2];

2043 
i
;

2045 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "OPEN")) {

2049 
i
 = 
	`nfs4_›_putfh
(
nfs
, 
›
, 
fh
);

2050 
i
 +
	`nfs4_›_chmod
(
nfs
, &
›
[i], 
fh
, 
d©a
->
fûÀr
.
blob3
.
vÆ
);

2052 
	`mem£t
(&
¨gs
, 0, (args));

2053 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2054 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2056 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_›í_£èâr_cb
, &
¨gs
,

2057 
d©a
Ë=
NULL
) {

2058 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

2059 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2062 
	}
}

2065 
	$nfs4_›í_c⁄fúm_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2066 *
¥iv©e_d©a
)

2068 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2069 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2070 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2071 
OPEN_CONFIRM4ªsok
 *
o¸esok
;

2072 
i
;

2073 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2075 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2077 i‡(
ªs
) {

2078 
	`nfs_ö¸emít_£qid
(
fh
, 
ªs
->
°©us
);

2081 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "OPEN_CONFIRM")) {

2085 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_OPEN_CONFIRM
,

2089 
o¸esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
››í_c⁄fúm
.
OPEN_CONFIRM4ªs_u
.
ªsok4
;

2091 
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2093 
fh
->
°©eid
.
£qid
 = 
o¸esok
->
›í_°©eid
.seqid;

2094 
	`mem˝y
(
fh
->
°©eid
.
Ÿhî
, 
o¸esok
->
›í_°©eid
.other, 12);

2096 i‡(
d©a
->
›í_cb
) {

2097 
d©a
->
	`›í_cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, 
¥iv©e_d©a
);

2100 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

2101 
d©a
->
	`cb
(0, 
nfs
, 
fh
, d©a->
¥iv©e_d©a
);

2102 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2103 
	}
}

2106 
	$nfs4_›í_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2107 *
¥iv©e_d©a
)

2109 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2110 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2111 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2112 
ACCESS4ªsok
 *
¨esok
;

2113 
OPEN4ªsok
 *
‹esok
;

2114 
GETFH4ªsok
 *
gªsok
;

2115 
i
;

2116 
nfsfh
 *
fh
;

2118 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2120 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "OPEN")) {

2125 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_ACCESS
, "ACCESS")) < 0) {

2128 
¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ac˚ss
.
ACCESS4ªs_u
.
ªsok4
;

2129 i‡(
¨esok
->
suµ‹ãd
 !¨esok->
ac˚ss
) {

2130 
	`nfs_£t_îr‹
(
nfs
, "Insufficient ACCESS. Wanted %08x but "

2131 "gŸ %08x.", 
¨esok
->
ac˚ss
,áªsok->
suµ‹ãd
);

2132 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

2133 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2138 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETFH
, "GETFH")) < 0) {

2141 
gªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
;

2143 
fh
 = 
	`ˇŒoc
(1, (*fh));

2144 i‡(
fh
 =
NULL
) {

2145 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2147 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

2148 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2152 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

2153 
d©a
->
fûÀr
.
blob0
.
‰ì
 = (
blob_‰ì
)
nfs_‰ì_nfsfh
;

2155 
fh
->fh.
Àn
 = 
gªsok
->
obje˘
.
nfs_fh4_Àn
;

2156 
fh
->fh.
vÆ
 = 
	`mÆloc
(fh->fh.
Àn
);

2157 i‡(
fh
->fh.
vÆ
 =
NULL
) {

2158 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2160 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

2161 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2164 
	`mem˝y
(
fh
->fh.
vÆ
, 
gªsok
->
obje˘
.
nfs_fh4_vÆ
, fh->fh.
Àn
);

2165 
fh
->
›í_£qid
 = 1;

2166 
fh
->
›í_ow√r
 = 
d©a
->open_owner;

2168 i‡(
d©a
->
fûÀr
.
Êags
 & 
O_SYNC
) {

2169 
fh
->
is_sync
 = 1;

2172 i‡(
d©a
->
fûÀr
.
Êags
 & 
O_APPEND
) {

2173 
fh
->
is_≠≥nd
 = 1;

2177 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_OPEN
, "OPEN")) < 0) {

2180 
‹esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
››í
.
OPEN4ªs_u
.
ªsok4
;

2181 
fh
->
°©eid
.
£qid
 = 
‹esok
->stateid.seqid;

2182 
	`mem˝y
(
fh
->
°©eid
.
Ÿhî
, 
‹esok
->stateid.other, 12);

2185 i‡(
‹esok
->
rÊags
 & 
OPEN4_RESULT_CONFIRM
) {

2186 
COMPOUND4¨gs
 
¨gs
;

2187 
nfs_¨g›4
 
›
[2];

2189 
	`mem£t
(
›
, 0, (op));

2190 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

2191 
i
 +
	`nfs4_›_›í_c⁄fúm
(
nfs
, &
›
[i], 
fh
);

2193 
	`mem£t
(&
¨gs
, 0, (args));

2194 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2195 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2197 i‡(
	`Ωc_nfs4_compound_èsk
(
Ωc
, 
nfs4_›í_c⁄fúm_cb
, &
¨gs
,

2198 
¥iv©e_d©a
Ë=
NULL
) {

2199 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2200 
d©a
->
¥iv©e_d©a
);

2201 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2207 i‡(
d©a
->
›í_cb
) {

2208 
d©a
->
	`›í_cb
(
Ωc
, 
°©us
, 
comm™d_d©a
, 
¥iv©e_d©a
);

2211 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

2212 
d©a
->
	`cb
(0, 
nfs
, 
fh
, d©a->
¥iv©e_d©a
);

2213 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2214 
	}
}

2217 
	$nfs4_öô_øndom_vîifõr
(*
vîifõr
)

2219 
uöt64_t
 
£ed
 = 0, 
v
;

2220 
i
;

2222 i‡(
£ed
 == 0) {

2223 
£ed
 = ~
	`Ωc_cuºít_time
(Ë<< 32 | 
	`gëpid
();

2225 
£ed
 *= 1337;

2228 
v
 = 
£ed
;

2229 
i
 = 0; i < 
NFS4_VERIFIER_SIZE
; i++) {

2230 
vîifõr
[
i
] = 
v
 & 0xff;

2231 
v
 >>= 8;

2233 
	}
}

2239 
	$nfs4_p›uœã_›í
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

2241 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2242 
OPEN4¨gs
 *
ﬂrgs
;

2243 
uöt32_t
 
ac˚ss_mask
 = 0;

2244 
vîifõr4
 
vîifõr
;

2245 
i
;

2247 i‡(
d©a
->
fûÀr
.
Êags
 & 
O_WRONLY
) {

2248 
ac˚ss_mask
 |
ACCESS4_MODIFY
;

2250 i‡(
d©a
->
fûÀr
.
Êags
 & 
O_RDWR
) {

2251 
ac˚ss_mask
 |
ACCESS4_READ
|
ACCESS4_MODIFY
;

2253 i‡(!(
d©a
->
fûÀr
.
Êags
 & 
O_WRONLY
)) {

2254 
ac˚ss_mask
 |
ACCESS4_READ
;

2258 
i
 = 
	`nfs4_›_ac˚ss
(
nfs
, &
›
[0], 
ac˚ss_mask
);

2261 
›
[
i
].
¨g›
 = 
OP_OPEN
;

2262 
ﬂrgs
 = &
›
[
i
++].
nfs_¨g›4_u
.
››í
;

2263 
	`mem£t
(
ﬂrgs
, 0, (*oargs));

2265 i‡(
ac˚ss_mask
 & 
ACCESS4_READ
) {

2266 
ﬂrgs
->
sh¨e_ac˚ss
 |
OPEN4_SHARE_ACCESS_READ
;

2268 i‡(
ac˚ss_mask
 & 
ACCESS4_MODIFY
) {

2269 
ﬂrgs
->
sh¨e_ac˚ss
 |
OPEN4_SHARE_ACCESS_WRITE
;

2271 
ﬂrgs
->
sh¨e_díy
 = 
OPEN4_SHARE_DENY_NONE
;

2272 
ﬂrgs
->
ow√r
.
˛õ¡id
 = 
nfs
->
nfsi
->clientid;

2273 
ﬂrgs
->
ow√r
.ow√r.
ow√r_Àn
 = 4;

2274 
ﬂrgs
->
ow√r
.ow√r.
ow√r_vÆ
 = (*)&
d©a
->
›í_ow√r
;

2275 
ﬂrgs
->
£qid
 = 0;

2276 i‡(
d©a
->
fûÀr
.
Êags
 & 
O_CREAT
) {

2277 
¸óãhow4
 *
ch
;

2278 
Áâr4
 *
Á
;

2280 
ch
 = &
ﬂrgs
->
›íhow
.
›íÊag4_u
.
how
;

2281 
Á
 = &
ch
->
¸óãhow4_u
.
¸óã©ås
;

2283 
ﬂrgs
->
›íhow
.
›íty≥
 = 
OPEN4_CREATE
;

2284 i‡(
d©a
->
fûÀr
.
Êags
|
O_EXCL
) {

2285 
ch
->
mode
 = 
EXCLUSIVE4
;

2287 
	`nfs4_öô_øndom_vîifõr
(&
vîifõr
[0]);

2288 
	`mem˝y
(
ch
->
¸óãhow4_u
.
¸óãvîf
, 
vîifõr
,

2289 (
vîifõr4
));

2291 
ch
->
mode
 = 
UNCHECKED4
;

2292 
Á
->
©åmask
.
bôm≠4_Àn
 = 
d©a
->
fûÀr
.
blob1
.
Àn
;

2293 
Á
->
©åmask
.
bôm≠4_vÆ
 = 
d©a
->
fûÀr
.
blob1
.
vÆ
;

2295 
Á
->
©å_vÆs
.
©åli°4_Àn
 = 
d©a
->
fûÀr
.
blob2
.
Àn
;

2296 
Á
->
©å_vÆs
.
©åli°4_vÆ
 = 
d©a
->
fûÀr
.
blob2
.
vÆ
;

2299 
ﬂrgs
->
›íhow
.
›íty≥
 = 
OPEN4_NOCREATE
;

2301 
ﬂrgs
->
˛aim
.˛aim = 
CLAIM_NULL
;

2302 
ﬂrgs
->
˛aim
.
›í_˛aim4_u
.
fûe
.
utf8°rög_Àn
 =

2303 
	`°æí
(
d©a
->
fûÀr
.data);

2304 
ﬂrgs
->
˛aim
.
›í_˛aim4_u
.
fûe
.
utf8°rög_vÆ
 =

2305 
d©a
->
fûÀr
.data;

2308 
i
 +
	`nfs4_›_gëfh
(
nfs
, &
›
[i]);

2310  
i
;

2311 
	}
}

2314 
	$nfs4_›í_ªadlök_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2315 *
¥iv©e_d©a
)

2317 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2318 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2319 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2320 
READLINK4ªsok
 *
æªsok
;

2321 
i
;

2322 *
∑th
;

2324 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2326 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "READLINK")) {

2330 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_READLINK
, "READLINK")) < 0) {

2334 
æªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ªadlök
.
READLINK4ªs_u
.
ªsok4
;

2336 
∑th
 = 
	`mÆloc
(2 + 
	`°æí
(
d©a
->path) +

2337 
æªsok
->
lök
.
utf8°rög_Àn
);

2338 i‡(
∑th
 =
NULL
) {

2339 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2341 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2342 
d©a
->
¥iv©e_d©a
);

2343 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2346 
	`•rötf
(
∑th
, "%s/%.*s", 
d©a
->path,

2347 
æªsok
->
lök
.
utf8°rög_Àn
,ÑÃesok->lök.
utf8°rög_vÆ
);

2350 
	`‰ì
(
d©a
->
∑th
);

2351 
d©a
->
∑th
 = 
NULL
;

2352 
	`‰ì
(
d©a
->
fûÀr
.data);

2353 
d©a
->
fûÀr
.d©®
NULL
;

2355 
d©a
->
∑th
 = 
	`nfs4_ªsﬁve_∑th
(
nfs
,Öath);

2356 
	`‰ì
(
∑th
);

2357 i‡(
d©a
->
∑th
 =
NULL
) {

2358 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2359 
d©a
->
¥iv©e_d©a
);

2360 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2364 
	`d©a_•lô_∑th
(
d©a
);

2366 #ifde‡
HAVE_MULTITHREADING


2367 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2368 
	`nfs_mt_muãx_lock
(&
nfs
->
nfsi
->
nfs4_›í_cou¡î_muãx
);

2371 
d©a
->
›í_ow√r
 = 
nfs
->
nfsi
->
›í_cou¡î
++;

2372 #ifde‡
HAVE_MULTITHREADING


2373 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2374 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
nfsi
->
nfs4_›í_cou¡î_muãx
);

2378 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_›í
;

2379 
d©a
->
fûÀr
.
max_›
 = 3;

2381 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_›í_cb
) < 0) {

2382 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
ªs
, d©a->
¥iv©e_d©a
);

2383 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2386 
	}
}

2389 
	$nfs4_p›uœã_lookup_ªadlök
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

2391 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2392 
i
;

2394 
i
 = 
	`nfs4_›_lookup
(
nfs
, &
›
[0], 
d©a
->
fûÀr
.data);

2395 
i
 +
	`nfs4_›_ªadlök
(
nfs
, &
›
[i]);

2397  
i
;

2398 
	}
}

2404 
	$nfs4_›í_ªadlök
(
Ωc_c⁄ãxt
 *
Ωc
, 
COMPOUND4ªs
 *
ªs
,

2405 
nfs4_cb_d©a
 *
d©a
)

2407 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2408 
i
;

2410 
i
 = 0; i < ()
ªs
->
ªßºay
.
ªßºay_Àn
; i++) {

2411 
OPEN4ªs
 *
‹es
;

2413 i‡(
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
ªs›
 !
OP_OPEN
) {

2416 
‹es
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
››í
;

2418 i‡(
‹es
->
°©us
 !
NFS4ERR_SYMLINK
) {

2422 i‡(
d©a
->
fûÀr
.
Êags
 & 
O_NOFOLLOW
) {

2423 
	`nfs_£t_îr‹
(
nfs
, "SymlinkÉncountered during "

2425 
d©a
->
	`cb
(-
ELOOP
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2426 
d©a
->
¥iv©e_d©a
);

2433 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_lookup_ªadlök
;

2434 
d©a
->
fûÀr
.
max_›
 = 2;

2436 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
,

2437 
nfs4_›í_ªadlök_cb
) < 0) {

2438 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

2439 
d©a
->
¥iv©e_d©a
);

2440 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2447 
	}
}

2455 
	$nfs4_›í_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

2456 
Êags
, 
mode
)

2458 i‡(
Êags
 & 
O_APPEND
 && !(Êag†& (
O_RDWR
|
O_WRONLY
))) {

2459 
Êags
 &~
O_APPEND
;

2462 i‡(
Êags
 & 
O_CREAT
) {

2463 
uöt32_t
 *
d
;

2466 
d
 = 
	`mÆloc
(2 * (
uöt32_t
));

2467 i‡(
d
 =
NULL
) {

2468 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

2469 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2472 
d
[0] = 0;

2473 
d
[1] = 1 << (
FATTR4_MODE
 - 32);

2475 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
d
;

2476 
d©a
->
fûÀr
.
blob1
.
Àn
 = 2;

2477 
d©a
->
fûÀr
.
blob1
.
‰ì
 = free;

2480 
d
 = 
	`mÆloc
((
uöt32_t
));

2481 i‡(
d
 =
NULL
) {

2482 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

2483 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2487 *
d
 = 
	`ht⁄l
(
mode
);

2489 
d©a
->
fûÀr
.
blob2
.
vÆ
 = 
d
;

2490 
d©a
->
fûÀr
.
blob2
.
Àn
 = 4;

2491 
d©a
->
fûÀr
.
blob2
.
‰ì
 = free;

2494 #ifde‡
HAVE_MULTITHREADING


2495 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2496 
	`nfs_mt_muãx_lock
(&
nfs
->
nfsi
->
nfs4_›í_cou¡î_muãx
);

2499 
d©a
->
›í_ow√r
 = 
nfs
->
nfsi
->
›í_cou¡î
++;

2500 #ifde‡
HAVE_MULTITHREADING


2501 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2502 
	`nfs_mt_muãx_u∆ock
(&
nfs
->
nfsi
->
nfs4_›í_cou¡î_muãx
);

2505 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_›í
;

2506 
d©a
->
fûÀr
.
max_›
 = 3;

2507 
d©a
->
fûÀr
.
Êags
 = flags;

2509 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_›í_cb
) < 0) {

2510 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2515 
	}
}

2518 
	$nfs4_›í_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
Êags
,

2519 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2521 
nfs4_cb_d©a
 *
d©a
;

2522 
uöt32_t
 
m
;

2523 
ªt
;

2525 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
∑th
);

2526 i‡(
d©a
 =
NULL
) {

2530 
d©a
->
cb
 = cb;

2531 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2534 i‡(
Êags
 & 
O_TRUNC
 && !(Êag†& (
O_RDWR
|
O_WRONLY
))) {

2535 
Êags
 &~
O_TRUNC
;

2538 i‡(
Êags
 & 
O_EXCL
) {

2539 
Êags
 &~
O_TRUNC
;

2542 i‡(
Êags
 & 
O_TRUNC
) {

2543 
d©a
->
›í_cb
 = 
nfs4_›í_åunˇã_cb
;

2545 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`mÆloc
(12);

2546 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

2547 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

2548 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2551 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

2553 
	`mem£t
(
d©a
->
fûÀr
.
blob3
.
vÆ
, 0, 12);

2555 i‡(
Êags
 & 
O_EXCL
) {

2556 
d©a
->
›í_cb
 = 
nfs4_›í_chmod_cb
;

2558 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`mÆloc
(4);

2559 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

2560 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

2561 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2564 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

2566 
m
 = 
	`ht⁄l
(
mode
);

2567 
	`mem˝y
(
d©a
->
fûÀr
.
blob3
.
vÆ
, &
m
, (
uöt32_t
));

2570 #ifde‡
HAVE_MULTITHREADING


2571 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2572 
	`nfs_mt_muãx_lock
(&
nfs
->
nfsi
->
nfs4_›í_ˇŒ_muãx
);

2573 
d©a
->
Êags
 |
MUTEX_HELD
;

2576 
ªt
 = 
	`nfs4_›í_async_öã∫Æ
(
nfs
, 
d©a
, 
Êags
, 
mode
);

2577  
ªt
;

2578 
	}
}

2581 
	$nfs4_f°©64_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

2582 *
¥iv©e_d©a
)

2584 
COMPOUND4¨gs
 
¨gs
;

2585 
nfs_¨g›4
 
›
[2];

2586 
nfs4_cb_d©a
 *
d©a
;

2587 
i
;

2589 
d©a
 = 
	`ˇŒoc
(1, (*data));

2590 i‡(
d©a
 =
NULL
) {

2591 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2596 
d©a
->
nfs
 =Çfs;

2597 
d©a
->
cb
 = cb;

2598 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2600 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
nfsfh
);

2601 
i
 +
	`nfs4_›_gë©å
(
nfs
, &
›
[i], 
°™d¨d_©åibuãs
, 2);

2603 
	`mem£t
(&
¨gs
, 0, (args));

2604 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2605 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2607 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_x°©64_cb
, &
¨gs
,

2608 
d©a
Ë=
NULL
) {

2609 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2614 
	}
}

2617 
	$nfs4_gëa˛_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2618 *
¥iv©e_d©a
)

2620 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2621 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2622 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2623 
GETATTR4ªsok
 *
g¨esok
;

2624 
Áâr4_a˛
 
a˛
;

2625 
ZDR
 
zdr
;

2626 
i
;

2628 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2630 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "GETACL")) {

2631 
d©a
->
	`cb
(-
EIO
, 
nfs
, "GETACL faûed", d©a->
¥iv©e_d©a
);

2632 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2636 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETATTR
, "GETATTR")) < 0) {

2637 
d©a
->
	`cb
(-
EIO
, 
nfs
, "GETACL faûed", d©a->
¥iv©e_d©a
);

2638 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2641 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

2643 
	`mem£t
(&
a˛
, 0, (acl));

2644 
	`zdrmem_¸óã
(&
zdr
,

2645 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

2646 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
,

2647 
ZDR_DECODE
);

2648 i‡(
	`zdr_Áâr4_a˛
(&
zdr
, &
a˛
)) {

2649 
d©a
->
	`cb
(0, 
nfs
, &
a˛
, d©a->
¥iv©e_d©a
);

2651 
d©a
->
	`cb
(-
EIO
, 
nfs
, "FaûedÅÿunm¨shÆ»Áâr4_a˛", d©a->
¥iv©e_d©a
);

2654 
	`zdr_de°roy
(&
zdr
);

2655 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2656 
	}
}

2659 
	$nfs4_gëa˛_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

2660 *
¥iv©e_d©a
)

2662 
COMPOUND4¨gs
 
¨gs
;

2663 
nfs_¨g›4
 
›
[2];

2664 
nfs4_cb_d©a
 *
d©a
;

2665 
i
;

2667 
d©a
 = 
	`ˇŒoc
(1, (*data));

2668 i‡(
d©a
 =
NULL
) {

2669 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2674 
d©a
->
nfs
 =Çfs;

2675 
d©a
->
cb
 = cb;

2676 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2678 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
nfsfh
);

2679 
i
 +
	`nfs4_›_gë©å
(
nfs
, &
›
[i], 
gëa˛_©åibuãs
, 1);

2681 
	`mem£t
(&
¨gs
, 0, (args));

2682 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2683 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2685 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_gëa˛_cb
, &
¨gs
,

2686 
d©a
Ë=
NULL
) {

2687 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2692 
	}
}

2696 
	$nfs4_˛o£_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2697 *
¥iv©e_d©a
)

2699 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2700 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2701 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2702 
nfsfh
 *nfsfh = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2704 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2706 i‡(
ªs
) {

2707 
	`nfs_ö¸emít_£qid
(
nfsfh
, 
ªs
->
°©us
);

2710 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "CLOSE")) {

2714 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

2715 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2716 
	}
}

2719 
	$nfs4_˛o£_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
nfs_cb
 
cb
,

2720 *
¥iv©e_d©a
)

2722 
COMPOUND4¨gs
 
¨gs
;

2723 
nfs_¨g›4
 
›
[3];

2724 
nfs4_cb_d©a
 *
d©a
;

2725 
i
;

2727 
d©a
 = 
	`ˇŒoc
(1, (*data));

2728 i‡(
d©a
 =
NULL
) {

2729 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2734 #ifde‡
HAVE_MULTITHREADING


2735 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

2736 
	`nfs_mt_muãx_lock
(&
nfs
->
nfsi
->
nfs4_›í_ˇŒ_muãx
);

2737 
d©a
->
Êags
 |
MUTEX_HELD
;

2740 
d©a
->
nfs
 =Çfs;

2741 
d©a
->
cb
 = cb;

2742 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2744 
	`mem£t
(
›
, 0, (op));

2746 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
nfsfh
);

2747 
i
 +
	`nfs4_›_˛o£
(
nfs
, &
›
[i], 
nfsfh
);

2749 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
nfsfh
;

2750 
d©a
->
fûÀr
.
blob0
.
‰ì
 = (
blob_‰ì
)
nfs_‰ì_nfsfh
;

2752 
	`mem£t
(&
¨gs
, 0, (args));

2753 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2754 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2756 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_˛o£_cb
, &
¨gs
,

2757 
d©a
Ë=
NULL
) {

2758 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

2759 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2764 
	}
}

2767 
	$nfs4_¥ód_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2768 *
¥iv©e_d©a
)

2770 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2771 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2772 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2773 
READ4ªsok
 *
ºes
 = 
NULL
;

2774 
nfsfh
 *nfsfh;

2775 
i
, 
cou¡
;

2777 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2779 
nfsfh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2781 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "READ")) {

2785 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_READ
, "READ")) < 0) {

2788 
ºes
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ªad
.
READ4ªs_u
.
ªsok4
;

2790 i‡(
d©a
->
rw_d©a
.
upd©e_pos
) {

2791 
nfsfh
->
off£t
 = 
d©a
->
rw_d©a
.off£à+ 
ºes
->d©a.
d©a_Àn
;

2794 
cou¡
 = 
ºes
->
d©a
.
d©a_Àn
;

2795 i‡(
cou¡
 > 
Ωc
->
pdu
->
ªque°ed_ªad_cou¡
) {

2796 
cou¡
 = 
Ωc
->
pdu
->
ªque°ed_ªad_cou¡
;

2798 
d©a
->
	`cb
(
cou¡
, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

2799 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2800 
	}
}

2803 
	$nfs4_¥ód_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

2804 *
buf
, 
size_t
 
cou¡
, 
uöt64_t
 
off£t
,

2805 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
)

2807 
COMPOUND4¨gs
 
¨gs
;

2808 
nfs_¨g›4
 
›
[2];

2809 
nfs4_cb_d©a
 *
d©a
;

2810 
i
;

2811 
Ωc_pdu
 *
pdu
;

2813 
d©a
 = 
	`ˇŒoc
(1, (*data));

2814 i‡(
d©a
 =
NULL
) {

2815 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

2820 
d©a
->
nfs
 =Çfs;

2821 
d©a
->
cb
 = cb;

2822 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2824 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
nfsfh
;

2825 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

2826 
d©a
->
rw_d©a
.
off£t
 = offset;

2827 
d©a
->
rw_d©a
.
upd©e_pos
 = update_pos;

2829 
	`mem£t
(
›
, 0, (op));

2831 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
nfsfh
);

2832 
i
 +
	`nfs4_›_ªad
(
nfs
, &
›
[i], 
nfsfh
, 
off£t
, 
cou¡
);

2834 
	`mem£t
(&
¨gs
, 0, (args));

2835 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

2836 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

2838 
pdu
 = 
	`Ωc_nfs4_ªad_èsk
(
nfs
->
Ωc
, 
nfs4_¥ód_cb
, 
buf
, 
cou¡
, &
¨gs
,

2839 
d©a
);

2840 i‡(
pdu
 =
NULL
) {

2841 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2845 
pdu
->
ªque°ed_ªad_cou¡
 = 
cou¡
;

2847 
	}
}

2850 
	$nfs4_symlök_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2851 *
¥iv©e_d©a
)

2853 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2854 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2855 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2857 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2859 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "SYMLINK")) {

2863 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

2864 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2865 
	}
}

2871 
	$nfs4_p›uœã_symlök
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

2873 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2875  
	`nfs4_›_¸óã
(
nfs
, 
›
, 
d©a
->
fûÀr
.d©a, 
NF4LNK
,

2876 
NULL
, NULL, 
d©a
->
fûÀr
.
blob0
.
vÆ
, 0);

2879 
	}
}

2882 
	$nfs4_symlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
èrgë
,

2883 c⁄° *
lök«me
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

2885 
nfs4_cb_d©a
 *
d©a
;

2887 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
lök«me
);

2888 i‡(
d©a
 =
NULL
) {

2892 
d©a
->
cb
 = cb;

2893 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2894 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_symlök
;

2895 
d©a
->
fûÀr
.
max_›
 = 1;

2897 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
	`°rdup
(
èrgë
);

2898 
d©a
->
fûÀr
.
blob0
.
‰ì
 = free;

2900 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_symlök_cb
) < 0) {

2901 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2906 
	}
}

2909 
	$nfs4_ªadlök_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2910 *
¥iv©e_d©a
)

2912 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2913 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2914 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2915 
READLINK4ªsok
 *
æªsok
;

2916 * 
èrgë
;

2917 
i
;

2919 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2921 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "READLINK")) {

2925 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_READLINK
, "READLINK")) < 0) {

2929 
æªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ªadlök
.
READLINK4ªs_u
.
ªsok4
;

2931 
èrgë
 = 
	`°∫dup
(
æªsok
->
lök
.
utf8°rög_vÆ
,

2932 
æªsok
->
lök
.
utf8°rög_Àn
);

2933 i‡(
èrgë
 =
NULL
) {

2934 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, "FailedÅoállocate memory",

2935 
d©a
->
¥iv©e_d©a
);

2936 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2939 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
èrgë
;

2940 
d©a
->
fûÀr
.
blob0
.
‰ì
 = free;

2941 
d©a
->
	`cb
(0, 
nfs
, 
èrgë
, d©a->
¥iv©e_d©a
);

2942 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2943 
	}
}

2946 
	$nfs4_p›uœã_ªadlök
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

2948 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2949 
i
;

2951 
i
 = 
	`nfs4_›_ªadlök
(
nfs
, &
›
[0]);

2953  
i
;

2954 
	}
}

2957 
	$nfs4_ªadlök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

2958 *
¥iv©e_d©a
)

2960 
nfs4_cb_d©a
 *
d©a
;

2962 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

2963 i‡(
d©a
 =
NULL
) {

2967 
d©a
->
cb
 = cb;

2968 
d©a
->
¥iv©e_d©a
 =Örivate_data;

2969 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_ªadlök
;

2970 
d©a
->
fûÀr
.
max_›
 = 1;

2971 
d©a
->
Êags
 |
LOOKUP_FLAG_NO_FOLLOW
;

2973 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_ªadlök_cb
) < 0) {

2974 
	`‰ì_nfs4_cb_d©a
(
d©a
);

2979 
	}
}

2982 
	$nfs4_pwrôe_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

2983 *
¥iv©e_d©a
)

2985 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

2986 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

2987 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

2988 
WRITE4ªsok
 *
wªs
 = 
NULL
;

2989 
nfsfh
 *nfsfh;

2990 
i
;

2992 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

2994 
nfsfh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

2996 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "WRITE")) {

3000 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_WRITE
, "WRITE")) < 0) {

3003 
wªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›wrôe
.
WRITE4ªs_u
.
ªsok4
;

3005 i‡(
d©a
->
rw_d©a
.
upd©e_pos
) {

3006 
nfsfh
->
off£t
 = 
d©a
->
rw_d©a
.off£à+ 
wªs
->
cou¡
;

3009 
d©a
->
	`cb
(
wªs
->
cou¡
, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3010 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3011 
	}
}

3014 
	$nfs4_pwrôe_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

3015 
uöt64_t
 
off£t
, 
size_t
 
cou¡
, c⁄° *
buf
,

3016 
nfs_cb
 
cb
, *
¥iv©e_d©a
, 
upd©e_pos
)

3018 
COMPOUND4¨gs
 
¨gs
;

3019 
nfs_¨g›4
 
›
[2];

3020 
nfs4_cb_d©a
 *
d©a
;

3021 
i
;

3023 
d©a
 = 
	`ˇŒoc
(1, (*data));

3024 i‡(
d©a
 =
NULL
) {

3025 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3030 
d©a
->
nfs
 =Çfs;

3031 
d©a
->
cb
 = cb;

3032 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3034 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
nfsfh
;

3035 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

3036 
d©a
->
rw_d©a
.
off£t
 = offset;

3037 
d©a
->
rw_d©a
.
upd©e_pos
 = update_pos;

3039 
	`mem£t
(
›
, 0, (op));

3041 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
nfsfh
);

3042 
i
 +
	`nfs4_›_wrôe
(
nfs
, &
›
[i], 
nfsfh
, 
off£t
, 
cou¡
, 
buf
);

3044 
	`mem£t
(&
¨gs
, 0, (args));

3045 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

3046 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

3048 i‡(
	`Ωc_nfs4_wrôe_èsk
(
nfs
->
Ωc
, 
nfs4_pwrôe_cb
, 
buf
, 
cou¡
,

3049 &
¨gs
, 
d©a
Ë=
NULL
) {

3050 
	`nfs_£t_îr‹
(
nfs
, "PWRITE "

3051 "Áûed: %s", 
	`Ωc_gë_îr‹
(
nfs
->
Ωc
));

3052 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3053  -
EIO
;

3057 
	}
}

3060 
	$nfs4_wrôe_≠≥nd_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3061 *
¥iv©e_d©a
)

3063 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3064 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3065 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3066 
GETATTR4ªsok
 *
g¨esok
 = 
NULL
;

3067 
nfsfh
 *nfsfh;

3068 
i
;

3069 
uöt64_t
 
off£t
;

3070 *
buf
;

3071 
uöt32_t
 
cou¡
;

3072 
nfs_°©_64
 
°
;

3074 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3076 
nfsfh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

3078 
buf
 = 
d©a
->
fûÀr
.
blob1
.
vÆ
;

3079 
cou¡
 = 
d©a
->
fûÀr
.
blob1
.
Àn
;

3081 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "GETATTR")) {

3085 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETATTR
, "GETATTR")) < 0) {

3090 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

3091 i‡(
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
 < 8) {

3092 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3093 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3097 
	`mem£t
(&
°
, 0, (st));

3098 
	`nfs_∑r£_©åibuãs
(
nfs
, 
d©a
, &
°
,

3099 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

3100 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
);

3101 
off£t
 = 
°
.
nfs_size
;

3103 i‡(
	`nfs4_pwrôe_async_öã∫Æ
(
nfs
, 
nfsfh
, 
off£t
,

3104 (
size_t
)
cou¡
, 
buf
,

3105 
d©a
->
cb
, d©a->
¥iv©e_d©a
, 1) < 0) {

3106 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3107 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3111 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3112 
	}
}

3115 
	$nfs4_wrôe_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh, 
uöt64_t
 
cou¡
,

3116 c⁄° *
buf
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3118 i‡(
nfsfh
->
is_≠≥nd
) {

3119 
COMPOUND4¨gs
 
¨gs
;

3120 
nfs_¨g›4
 
›
[2];

3121 
nfs4_cb_d©a
 *
d©a
;

3122 
i
;

3124 
d©a
 = 
	`ˇŒoc
(1, (*data));

3125 i‡(
d©a
 =
NULL
) {

3126 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3131 
d©a
->
nfs
 =Çfs;

3132 
d©a
->
cb
 = cb;

3133 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3135 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
nfsfh
;

3136 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

3138 
	`mem£t
(
›
, 0, (op));

3140 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
nfsfh
);

3141 
i
 +
	`nfs4_›_gë©å
(
nfs
, &
›
[i], 
°™d¨d_©åibuãs
, 2);

3143 
	`mem£t
(&
¨gs
, 0, (args));

3144 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

3145 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

3147 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
nfsfh
;

3148 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

3150 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
	`disˇrd_c⁄°
(
buf
);

3151 
d©a
->
fûÀr
.
blob1
.
Àn
 = ()
cou¡
;

3152 
d©a
->
fûÀr
.
blob1
.
‰ì
 = 
NULL
;

3154 i‡(
	`Ωc_nfs4_compound_èsk2
(
nfs
->
Ωc
, 
nfs4_wrôe_≠≥nd_cb
,

3155 &
¨gs
, 
d©a
, 
cou¡
Ë=
NULL
) {

3156 
	`nfs_£t_îr‹
(
nfs
, "PWRITE "

3157 "Áûed: %s", 
	`Ωc_gë_îr‹
(
nfs
->
Ωc
));

3158 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3159  -
EIO
;

3165  
	`nfs4_pwrôe_async_öã∫Æ
(
nfs
, 
nfsfh
,Çfsfh->
off£t
,

3166 (
size_t
)
cou¡
, 
buf
,

3167 
cb
, 
¥iv©e_d©a
, 1);

3168 
	}
}

3171 
	$nfs4_¸ót_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

3172 
mode
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3174  
	`nfs4_›í_async
(
nfs
, 
∑th
, 
O_CREAT
|
O_WRONLY
|
O_TRUNC
, 
mode
,

3175 
cb
, 
¥iv©e_d©a
);

3176 
	}
}

3179 
	$nfs4_u∆ök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

3180 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3182  
	`nfs4_ªmove_async
(
nfs
, 
∑th
, 
cb
, 
¥iv©e_d©a
);

3183 
	}
}

3186 
	$nfs4_lök_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3187 *
¥iv©e_d©a
)

3189 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3190 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3191 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3193 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3195 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "LINK")) {

3199 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3200 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3201 
	}
}

3204 
	$nfs4_p›uœã_lök
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

3206 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3207 
nfsfh
 *nfsfh = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

3209 
i
;

3211 
i
 = 
	`nfs4_›_ßvefh
(
nfs
, &
›
[0]);

3212 
i
 +
	`nfs4_›_putfh
(
nfs
, &
›
[i], 
nfsfh
);

3213 
i
 +
	`nfs4_›_lök
(
nfs
, &
›
[i], 
d©a
->
fûÀr
.data);

3215  
i
;

3216 
	}
}

3219 
	$nfs4_lök_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3220 *
¥iv©e_d©a
)

3222 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3223 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3224 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3225 
GETFH4ªsok
 *
gfhªsok
;

3226 
i
;

3227 
nfsfh
 *
fh
;

3229 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3231 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "LINK")) {

3235 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETFH
, "GETFH")) < 0) {

3238 
gfhªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
;

3241 
fh
 = 
	`ˇŒoc
(1, (*fh));

3242 i‡(
fh
 =
NULL
) {

3243 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3245 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3246 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3249 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

3250 
d©a
->
fûÀr
.
blob0
.
‰ì
 = (
blob_‰ì
)
nfs_‰ì_nfsfh
;

3252 
fh
->fh.
Àn
 = 
gfhªsok
->
obje˘
.
nfs_fh4_Àn
;

3253 
fh
->fh.
vÆ
 = 
	`mÆloc
(fh->fh.
Àn
);

3254 i‡(
fh
->fh.
vÆ
 =
NULL
) {

3255 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3257 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3258 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3261 
	`mem˝y
(
fh
->fh.
vÆ
, 
gfhªsok
->
obje˘
.
nfs_fh4_vÆ
, fh->fh.
Àn
);

3264 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_lök
;

3265 
d©a
->
fûÀr
.
max_›
 = 3;

3267 
	`‰ì
(
d©a
->
∑th
);

3268 
d©a
->
∑th
 = d©a->
fûÀr
.
blob1
.
vÆ
;

3269 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
NULL
;

3270 
d©a
->
fûÀr
.
blob1
.
‰ì
 = 
NULL
;

3272 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_lök_2_cb
) < 0) {

3273 
d©a
->
	`cb
(-
EFAULT
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3274 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3277 
	}
}

3285 
	$nfs4_lök_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

3286 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3288 
nfs4_cb_d©a
 *
d©a
;

3290 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
√w∑th
);

3291 i‡(
d©a
 =
NULL
) {

3295 
d©a
->
cb
 = cb;

3296 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3297 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_gëfh
;

3298 
d©a
->
fûÀr
.
max_›
 = 1;

3301 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
	`°rdup
(
ﬁd∑th
);

3302 i‡(
d©a
->
fûÀr
.
blob1
.
vÆ
 =
NULL
) {

3303 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

3304 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3307 
d©a
->
fûÀr
.
blob1
.
‰ì
 = free;

3309 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_lök_1_cb
) < 0) {

3310 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3315 
	}
}

3318 
	$nfs4_ª«me_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3319 *
¥iv©e_d©a
)

3321 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3322 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3323 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3325 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3327 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "RENAME")) {

3331 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3332 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3333 
	}
}

3336 
	$nfs4_p›uœã_ª«me
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

3338 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3339 
nfsfh
 *nfsfh = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

3340 
i
;

3342 
i
 = 
	`nfs4_›_ßvefh
(
nfs
, &
›
[0]);

3343 
i
 +
	`nfs4_›_putfh
(
nfs
, &
›
[i], 
nfsfh
);

3344 
i
 +
	`nfs4_›_ª«me
(
nfs
, &
›
[i], 
d©a
->
fûÀr
.data,

3345 
d©a
->
fûÀr
.
blob1
.
vÆ
);

3347  
i
;

3348 
	}
}

3351 
	$nfs4_ª«me_1_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3352 *
¥iv©e_d©a
)

3354 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3355 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3356 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3357 
GETFH4ªsok
 *
gfhªsok
;

3358 
i
;

3359 
nfsfh
 *
fh
;

3361 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3363 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "RENAME")) {

3367 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETFH
, "GETFH")) < 0) {

3370 
gfhªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
;

3373 
fh
 = 
	`ˇŒoc
(1, (*fh));

3374 i‡(
fh
 =
NULL
) {

3375 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3377 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3378 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3381 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

3382 
d©a
->
fûÀr
.
blob0
.
‰ì
 = (
blob_‰ì
)
nfs_‰ì_nfsfh
;

3384 
fh
->fh.
Àn
 = 
gfhªsok
->
obje˘
.
nfs_fh4_Àn
;

3385 
fh
->fh.
vÆ
 = 
	`mÆloc
(fh->fh.
Àn
);

3386 i‡(
fh
->fh.
vÆ
 =
NULL
) {

3387 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3389 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3390 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3393 
	`mem˝y
(
fh
->fh.
vÆ
, 
gfhªsok
->
obje˘
.
nfs_fh4_vÆ
, fh->fh.
Àn
);

3395 
d©a
->
fûÀr
.
blob1
.
vÆ
 = data->filler.data;

3396 
d©a
->
fûÀr
.
blob1
.
‰ì
 = free;

3397 
d©a
->
fûÀr
.d©®
NULL
;

3400 
	`‰ì
(
d©a
->
∑th
);

3401 
d©a
->
∑th
 = 
	`nfs4_ªsﬁve_∑th
(
nfs
, d©a->
fûÀr
.
blob2
.
vÆ
);

3402 i‡(
d©a
->
∑th
 =
NULL
) {

3403 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3404 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3407 
	`d©a_•lô_∑th
(
d©a
);

3409 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_ª«me
;

3410 
d©a
->
fûÀr
.
max_›
 = 3;

3412 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_ª«me_2_cb
) < 0) {

3413 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

3414 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3415 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3418 
	}
}

3426 
	$nfs4_ª«me_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
ﬁd∑th
,

3427 c⁄° *
√w∑th
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3429 
nfs4_cb_d©a
 *
d©a
;

3431 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
√w∑th
);

3432 i‡(
d©a
 =
NULL
) {

3436 
d©a
->
cb
 = cb;

3437 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3438 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_gëfh
;

3439 
d©a
->
fûÀr
.
max_›
 = 1;

3442 
d©a
->
fûÀr
.
blob2
.
vÆ
 = 
	`°rdup
(
ﬁd∑th
);

3443 i‡(
d©a
->
fûÀr
.
blob2
.
vÆ
 =
NULL
) {

3444 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

3445 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3448 
d©a
->
fûÀr
.
blob2
.
‰ì
 = free;

3450 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_ª«me_1_cb
) < 0) {

3451 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3456 
	}
}

3459 
	$nfs4_mknod_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3460 *
¥iv©e_d©a
)

3462 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3463 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3464 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3466 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3468 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "MKNOD")) {

3472 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3473 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3474 
	}
}

3477 
	$nfs4_p›uœã_mknod
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

3479 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3480 
uöt32_t
 
mode
, *
±r
;

3481 
dev
;

3484 
±r
 = (*)
d©a
->
fûÀr
.
blob1
.
vÆ
;

3485 
mode
 = *
±r
;

3486 *
±r
 = 
	`ht⁄l
(
mode
 & ~
S_IFMT
);

3488 
dev
 = 
d©a
->
fûÀr
.
blob2
.
Àn
;

3490 
mode
 & 
S_IFMT
) {

3491 
S_IFBLK
:

3492  
	`nfs4_›_¸óã
(
nfs
, 
›
, 
d©a
->
fûÀr
.d©a, 
NF4BLK
,

3493 &
d©a
->
fûÀr
.
blob0
, &d©a->fûÀr.
blob1
,

3494 
NULL
, 
dev
);

3495 
S_IFCHR
:

3496  
	`nfs4_›_¸óã
(
nfs
, 
›
, 
d©a
->
fûÀr
.d©a, 
NF4CHR
,

3497 &
d©a
->
fûÀr
.
blob0
, &d©a->fûÀr.
blob1
,

3498 
NULL
, 
dev
);

3502 
	}
}

3510 
	$nfs4_mknod_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
, 
dev
,

3511 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3513 
nfs4_cb_d©a
 *
d©a
;

3514 
uöt32_t
 *
u32±r
;

3516 
mode
 & 
S_IFMT
) {

3517 
S_IFCHR
:

3518 
S_IFBLK
:

3521 
	`nfs_£t_îr‹
(
nfs
, "Invalid fileÅype for "

3526 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
∑th
);

3527 i‡(
d©a
 =
NULL
) {

3531 
d©a
->
cb
 = cb;

3532 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3533 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_mknod
;

3534 
d©a
->
fûÀr
.
max_›
 = 1;

3537 
u32±r
 = 
	`mÆloc
(2 * (
uöt32_t
));

3538 i‡(
u32±r
 =
NULL
) {

3539 
	`nfs_£t_îr‹
(
nfs
, "Out of memoryállocating bitmap");

3542 
u32±r
[0] = 0;

3543 
u32±r
[1] = 1 << (
FATTR4_MODE
 - 32);

3544 
d©a
->
fûÀr
.
blob0
.
Àn
 = 2;

3545 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
u32±r
;

3546 
d©a
->
fûÀr
.
blob0
.
‰ì
 = free;

3549 
u32±r
 = 
	`mÆloc
(1 * (
uöt32_t
));

3550 i‡(
u32±r
 =
NULL
) {

3551 
	`nfs_£t_îr‹
(
nfs
, "Out of memoryállocatingáttributes");

3552 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3555 
u32±r
[0] = 
mode
;

3556 
d©a
->
fûÀr
.
blob1
.
Àn
 = 4;

3557 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
u32±r
;

3558 
d©a
->
fûÀr
.
blob1
.
‰ì
 = free;

3560 
d©a
->
fûÀr
.
blob2
.
Àn
 = 
dev
;

3562 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_mknod_cb
) < 0) {

3563 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3568 
	}
}

3571 
nfs4_∑r£_ªaddú
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

3572 
READDIR4ªsok
 *
ªs
);

3575 
	$nfs4_›ídú_2_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3576 *
¥iv©e_d©a
)

3578 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3579 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3580 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3581 
READDIR4ªsok
 *
rdªsok
;

3582 
i
;

3584 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3586 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "READDIR")) {

3590 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_READDIR
, "READDIR")) < 0) {

3593 
rdªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ªaddú
.
READDIR4ªs_u
.
ªsok4
;

3594 
	`nfs4_∑r£_ªaddú
(
nfs
, 
d©a
, 
rdªsok
);

3595 
	}
}

3598 
	$nfs4_›ídú_c⁄töue
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
)

3600 
COMPOUND4¨gs
 
¨gs
;

3601 
nfs_¨g›4
 
›
[2];

3602 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

3603 
uöt64_t
 
cookõ
;

3604 
i
;

3606 
	`mem˝y
(&
cookõ
, 
d©a
->
fûÀr
.
blob2
.
vÆ
, (
uöt64_t
));

3608 
	`mem£t
(
›
, 0, (op));

3610 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

3611 
i
 +
	`nfs4_›_ªaddú
(
nfs
, &
›
[i], 
cookõ
);

3613 
	`mem£t
(&
¨gs
, 0, (args));

3614 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

3615 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

3617 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_›ídú_2_cb
, &
¨gs
,

3618 
d©a
Ë=
NULL
) {

3619 
	`nfs_£t_îr‹
(
nfs
, "FailedÅo queue READDIR command. %s",

3620 
	`nfs_gë_îr‹
(
nfs
));

3621 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3622 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3625 
	}
}

3628 
	$nfs4_∑r£_ªaddú
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

3629 
READDIR4ªsok
 *
ªs
)

3631 
nfsdú
 *nfsdú = 
d©a
->
fûÀr
.
blob1
.
vÆ
;

3632 
íåy4
 *
e
;

3634 
e
 = 
ªs
->
ª∂y
.
íåõs
;

3635 
e
) {

3636 
nfsdúít
 *nfsdirent;

3637 
nfs_°©_64
 
°
;

3639 
	`mem˝y
(
d©a
->
fûÀr
.
blob2
.
vÆ
, &
e
->
cookõ
, (
uöt64_t
));

3641 
nfsdúít
 = 
	`mÆloc
((nfsdirent));

3642 i‡(
nfsdúít
 =
NULL
) {

3643 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

3644 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3645 
d©a
->
¥iv©e_d©a
);

3646 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3649 
nfsdúít
->
«me
 = 
	`°rdup
(
e
->«me.
utf8°rög_vÆ
);

3650 i‡(
nfsdúít
->
«me
 =
NULL
) {

3651 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

3652 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3653 
d©a
->
¥iv©e_d©a
);

3654 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3655 
	`‰ì
(
nfsdúít
);

3659 
	`mem£t
(&
°
, 0, (st));

3660 i‡(
	`nfs_∑r£_©åibuãs
(
nfs
, 
d©a
, &
°
,

3661 
e
->
©ås
.
©å_vÆs
.
©åli°4_vÆ
,

3662 
e
->
©ås
.
©å_vÆs
.
©åli°4_Àn
) < 0) {

3663 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

3664 
d©a
->
¥iv©e_d©a
);

3665 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3666 
	`‰ì
(
nfsdúít
->
«me
);

3667 
	`‰ì
(
nfsdúít
);

3671 
nfsdúít
->
öode
 = 
°
.
nfs_öo
;

3672 
nfsdúít
->
mode
 = (
uöt32_t
)
°
.
nfs_mode
;

3673 
°
.
nfs_mode
 & 
S_IFMT
) {

3674 
S_IFREG
:

3675 
nfsdúít
->
ty≥
 = 
NF4REG
;

3677 
S_IFDIR
:

3678 
nfsdúít
->
ty≥
 = 
NF4DIR
;

3680 
S_IFBLK
:

3681 
nfsdúít
->
ty≥
 = 
NF4BLK
;

3683 
S_IFCHR
:

3684 
nfsdúít
->
ty≥
 = 
NF4CHR
;

3686 
S_IFLNK
:

3687 
nfsdúít
->
ty≥
 = 
NF4LNK
;

3689 
S_IFSOCK
:

3690 
nfsdúít
->
ty≥
 = 
NF4SOCK
;

3692 
S_IFIFO
:

3693 
nfsdúít
->
ty≥
 = 
NF4FIFO
;

3696 
nfsdúít
->
size
 = 
°
.
nfs_size
;

3697 
nfsdúít
->
©ime
.
tv_£c
 = ()
°
.
nfs_©ime
;

3698 
nfsdúít
->
©ime
.
tv_u£c
 = ()(
°
.
nfs_©ime_n£c
/1000);

3699 
nfsdúít
->
©ime_n£c
 = (
uöt32_t
)
°
.
nfs_©ime_n£c
;

3700 
nfsdúít
->
mtime
.
tv_£c
 = ()
°
.
nfs_mtime
;

3701 
nfsdúít
->
mtime
.
tv_u£c
 = ()(
°
.
nfs_mtime_n£c
/1000);

3702 
nfsdúít
->
mtime_n£c
 = (
uöt32_t
)
°
.
nfs_mtime_n£c
;

3703 
nfsdúít
->
˘ime
.
tv_£c
 = ()
°
.
nfs_˘ime
;

3704 
nfsdúít
->
˘ime
.
tv_u£c
 = ()(
°
.
nfs_˘ime_n£c
/1000);

3705 
nfsdúít
->
˘ime_n£c
 = (
uöt32_t
)
°
.
nfs_˘ime_n£c
;

3706 
nfsdúít
->
uid
 = (
uöt32_t
)
°
.
nfs_uid
;

3707 
nfsdúít
->
gid
 = (
uöt32_t
)
°
.
nfs_gid
;

3708 
nfsdúít
->
∆ök
 = (
uöt32_t
)
°
.
nfs_∆ök
;

3709 
nfsdúít
->
dev
 = 
°
.
nfs_dev
;

3710 
nfsdúít
->
rdev
 = 
°
.
nfs_rdev
;

3711 
nfsdúít
->
blksize
 = 
NFS_BLKSIZE
;

3712 
nfsdúít
->
blocks
 = 
°
.
nfs_blocks
;

3713 
nfsdúít
->
u£d
 = 
°
.
nfs_u£d
;

3715 
nfsdúít
->
√xt
 = 
nfsdú
->
íåõs
;

3716 
nfsdú
->
íåõs
 = 
nfsdúít
;

3717 
e
 =É->
√xã¡ry
;

3720 i‡(
ªs
->
ª∂y
.
eof
 == 0) {

3721 
	`nfs4_›ídú_c⁄töue
(
nfs
, 
d©a
);

3725 
nfsdú
->
cuºít
 =Çfsdú->
íåõs
;

3726 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
NULL
;

3727 
d©a
->
	`cb
(0, 
nfs
, 
nfsdú
, d©a->
¥iv©e_d©a
);

3728 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3729 
	}
}

3732 
	$nfs4_›ídú_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3733 *
¥iv©e_d©a
)

3735 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3736 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3737 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3738 
nfsfh
 *
fh
;

3739 
GETFH4ªsok
 *
gªsok
;

3740 
READDIR4ªsok
 *
rdªsok
;

3741 
i
;

3743 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3745 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "READDIR")) {

3750 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETFH
, "GETFH")) < 0) {

3753 
gªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gëfh
.
GETFH4ªs_u
.
ªsok4
;

3755 
fh
 = 
	`ˇŒoc
(1, (*fh));

3756 i‡(
fh
 =
NULL
) {

3757 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3759 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3760 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3764 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

3765 
d©a
->
fûÀr
.
blob0
.
‰ì
 = (
blob_‰ì
)
nfs_‰ì_nfsfh
;

3767 
fh
->fh.
Àn
 = 
gªsok
->
obje˘
.
nfs_fh4_Àn
;

3768 
fh
->fh.
vÆ
 = 
	`mÆloc
(fh->fh.
Àn
);

3769 i‡(
fh
->fh.
vÆ
 =
NULL
) {

3770 
	`nfs_£t_îr‹
(
nfs
, "Out of memory. FailedÅoállocate "

3772 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3773 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3776 
	`mem˝y
(
fh
->fh.
vÆ
, 
gªsok
->
obje˘
.
nfs_fh4_vÆ
, fh->fh.
Àn
);

3778 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_READDIR
, "READDIR")) < 0) {

3781 
rdªsok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ªaddú
.
READDIR4ªs_u
.
ªsok4
;

3782 
	`nfs4_∑r£_ªaddú
(
nfs
, 
d©a
, 
rdªsok
);

3783 
	}
}

3786 
	$nfs4_p›uœã_ªaddú
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

3788 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3789 
uöt64_t
 
cookõ
;

3790 
i
;

3792 
	`mem˝y
(&
cookõ
, 
d©a
->
fûÀr
.
blob2
.
vÆ
, (
uöt64_t
));

3794 
i
 = 
	`nfs4_›_gëfh
(
nfs
, &
›
[0]);

3795 
i
 +
	`nfs4_›_ªaddú
(
nfs
, &
›
[i], 
cookõ
);

3797  
i
;

3798 
	}
}

3806 
	$nfs4_›ídú_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

3807 *
¥iv©e_d©a
)

3809 
nfs4_cb_d©a
 *
d©a
;

3810 
nfsdú
 *nfsdir;

3812 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

3813 i‡(
d©a
 =
NULL
) {

3817 
d©a
->
cb
 = cb;

3818 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3819 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_ªaddú
;

3820 
d©a
->
fûÀr
.
max_›
 = 2;

3822 
nfsdú
 = 
	`ˇŒoc
(1, (nfsdir));

3823 i‡(
nfsdú
 =
NULL
) {

3824 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3825 
	`nfs_£t_îr‹
(
nfs
, "failedÅoállocate buffer forÇfsdir");

3829 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
nfsdú
;

3830 
d©a
->
fûÀr
.
blob1
.
‰ì
 = (
blob_‰ì
)
nfs_‰ì_nfsdú
;

3832 
d©a
->
fûÀr
.
blob2
.
vÆ
 = 
	`ˇŒoc
(1, (
uöt64_t
));

3833 i‡(
d©a
->
fûÀr
.
blob2
.
vÆ
 =
NULL
) {

3834 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3835 
	`nfs_£t_îr‹
(
nfs
, "failedÅoállocate buffer for cookie");

3838 
d©a
->
fûÀr
.
blob2
.
‰ì
 = (
blob_‰ì
)free;

3840 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_›ídú_cb
) < 0) {

3841 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3846 
	}
}

3849 
	$nfs4_åunˇã_˛o£_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3850 *
¥iv©e_d©a
)

3852 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3853 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3854 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3855 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

3857 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3859 i‡(
ªs
) {

3860 
	`nfs_ö¸emít_£qid
(
fh
, 
ªs
->
°©us
);

3863 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "CLOSE")) {

3867 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3868 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3869 
	}
}

3872 
	$nfs4_åunˇã_›í_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3873 *
¥iv©e_d©a
)

3875 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3876 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3877 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

3878 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3879 
COMPOUND4¨gs
 
¨gs
;

3880 
nfs_¨g›4
 
›
[4];

3881 
i
;

3883 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "OPEN")) {

3887 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

3888 
i
 +
	`nfs4_›_åunˇã
(
nfs
, &
›
[i], 
fh
, 
d©a
->
fûÀr
.
blob3
.
vÆ
);

3889 
i
 +
	`nfs4_›_˛o£
(
nfs
, &
›
[i], 
fh
);

3891 
	`mem£t
(&
¨gs
, 0, (args));

3892 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

3893 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

3895 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_åunˇã_˛o£_cb
, &
¨gs
,

3896 
d©a
Ë=
NULL
) {

3898 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

3899 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3902 
	}
}

3908 
	$nfs4_åunˇã_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
uöt64_t
 
Àngth
,

3909 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

3911 
nfs4_cb_d©a
 *
d©a
;

3913 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
∑th
);

3914 i‡(
d©a
 =
NULL
) {

3918 
d©a
->
cb
 = cb;

3919 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3920 
d©a
->
›í_cb
 = 
nfs4_åunˇã_›í_cb
;

3922 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`mÆloc
(12);

3923 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

3924 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

3925 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3928 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

3930 
	`mem£t
(
d©a
->
fûÀr
.
blob3
.
vÆ
, 0, 12);

3931 
Àngth
 = 
	`nfs_ht⁄64
(length);

3932 
	`mem˝y
(
d©a
->
fûÀr
.
blob3
.
vÆ
, &
Àngth
, (
uöt64_t
));

3934 #ifde‡
HAVE_MULTITHREADING


3935 i‡(
nfs
->
Ωc
->
mu…ôhªadög_íabÀd
) {

3936 
	`nfs_mt_muãx_lock
(&
nfs
->
nfsi
->
nfs4_›í_ˇŒ_muãx
);

3937 
d©a
->
Êags
 |
MUTEX_HELD
;

3940 i‡(
	`nfs4_›í_async_öã∫Æ
(
nfs
, 
d©a
, 
O_WRONLY
, 0) < 0) {

3945 
	}
}

3948 
	$nfs4_fsync_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

3949 *
¥iv©e_d©a
)

3951 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

3952 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

3953 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

3955 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

3957 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "FSYNC")) {

3961 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

3962 
	`‰ì_nfs4_cb_d©a
(
d©a
);

3963 
	}
}

3966 
	$nfs4_fsync_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
, 
nfs_cb
 
cb
,

3967 *
¥iv©e_d©a
)

3969 
COMPOUND4¨gs
 
¨gs
;

3970 
nfs_¨g›4
 
›
[2];

3971 
nfs4_cb_d©a
 *
d©a
;

3972 
i
;

3974 
d©a
 = 
	`ˇŒoc
(1, (*data));

3975 i‡(
d©a
 =
NULL
) {

3976 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

3980 
d©a
->
nfs
 =Çfs;

3981 
d©a
->
cb
 = cb;

3982 
d©a
->
¥iv©e_d©a
 =Örivate_data;

3984 
	`mem£t
(
›
, 0, (op));

3986 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

3987 
i
 +
	`nfs4_›_commô
(
nfs
, &
›
[i]);

3989 
	`mem£t
(&
¨gs
, 0, (args));

3990 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

3991 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

3993 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_fsync_cb
, &
¨gs
,

3994 
d©a
Ë=
NULL
) {

3995 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

3996 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4001 
	}
}

4004 
	$nfs4_·runˇã_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
,

4005 
uöt64_t
 
Àngth
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4007 
COMPOUND4¨gs
 
¨gs
;

4008 
nfs_¨g›4
 
›
[2];

4009 
nfs4_cb_d©a
 *
d©a
;

4010 
i
;

4012 
d©a
 = 
	`ˇŒoc
(1, (*data));

4013 i‡(
d©a
 =
NULL
) {

4014 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4018 
d©a
->
nfs
 =Çfs;

4019 
d©a
->
cb
 = cb;

4020 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4022 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`ˇŒoc
(1, 12);

4023 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

4024 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

4025 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4028 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

4030 
Àngth
 = 
	`nfs_ht⁄64
(length);

4031 
	`mem˝y
(
d©a
->
fûÀr
.
blob3
.
vÆ
, &
Àngth
, (
uöt64_t
));

4033 
	`mem£t
(
›
, 0, (op));

4035 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

4036 
i
 +
	`nfs4_›_åunˇã
(
nfs
, &
›
[i], 
fh
, 
d©a
->
fûÀr
.
blob3
.
vÆ
);

4038 
	`mem£t
(&
¨gs
, 0, (args));

4039 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4040 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4042 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_fsync_cb
, &
¨gs
,

4043 
d©a
Ë=
NULL
) {

4044 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

4045 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4050 
	}
}

4053 
	$nfs4_l£ek_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4054 *
¥iv©e_d©a
)

4056 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4057 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4058 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4059 
GETATTR4ªsok
 *
g¨esok
 = 
NULL
;

4060 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

4061 
nfs_°©_64
 
°
;

4062 
öt64_t
 
off£t
;

4063 
i
;

4065 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4067 
	`mem˝y
(&
off£t
, 
d©a
->
fûÀr
.
blob1
.
vÆ
, (
öt64_t
));

4069 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "LSEEK")) {

4073 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETATTR
, "GETATTR")) < 0) {

4076 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

4078 
	`mem£t
(&
°
, 0, (st));

4079 
	`nfs_∑r£_©åibuãs
(
nfs
, 
d©a
, &
°
,

4080 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

4081 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
);

4083 i‡(
off£t
 < 0 &&

4084 -
off£t
 > (
öt64_t
)
°
.
nfs_size
) {

4085 
	`nfs_£t_îr‹
(
nfs
, "Negative offset forÜseek("

4087 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, &
fh
->
off£t
,

4088 
d©a
->
¥iv©e_d©a
);

4090 
fh
->
off£t
 = off£à+ 
°
.
nfs_size
;

4091 
d©a
->
	`cb
(0, 
nfs
, &
fh
->
off£t
, d©a->
¥iv©e_d©a
);

4094 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4095 
	}
}

4101 
	$nfs4_l£ek_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
, 
öt64_t
 
off£t
,

4102 
whí˚
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4104 
COMPOUND4¨gs
 
¨gs
;

4105 
nfs_¨g›4
 
›
[2];

4106 
nfs4_cb_d©a
 *
d©a
;

4107 
i
;

4109 i‡(
whí˚
 =
SEEK_SET
) {

4110 i‡(
off£t
 < 0) {

4111 
	`nfs_£t_îr‹
(
nfs
, "Negative offset forÜseek("

4113 
	`cb
(-
EINVAL
, 
nfs
, &
fh
->
off£t
, 
¥iv©e_d©a
);

4115 
fh
->
off£t
 = offset;

4116 
	`cb
(0, 
nfs
, &
fh
->
off£t
, 
¥iv©e_d©a
);

4120 i‡(
whí˚
 =
SEEK_CUR
) {

4121 i‡(
off£t
 < 0 &&

4122 
fh
->
off£t
 < (
uöt64_t
)(-offset)) {

4123 
	`nfs_£t_îr‹
(
nfs
, "Negative offset forÜseek("

4125 
	`cb
(-
EINVAL
, 
nfs
, &
fh
->
off£t
, 
¥iv©e_d©a
);

4127 
fh
->
off£t
 += offset;

4128 
	`cb
(0, 
nfs
, &
fh
->
off£t
, 
¥iv©e_d©a
);

4133 
d©a
 = 
	`ˇŒoc
(1, (*data));

4134 i‡(
d©a
 =
NULL
) {

4135 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4139 
d©a
->
nfs
 =Çfs;

4140 
d©a
->
cb
 = cb;

4141 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4143 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

4144 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

4146 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
	`mÆloc
((
uöt64_t
));

4147 i‡(
d©a
->
fûÀr
.
blob1
.
vÆ
 =
NULL
) {

4148 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4149 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4152 
	`mem˝y
(
d©a
->
fûÀr
.
blob1
.
vÆ
, &
off£t
, (
uöt64_t
));

4154 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

4155 
i
 +
	`nfs4_›_gë©å
(
nfs
, &
›
[i], 
°™d¨d_©åibuãs
, 2);

4157 
	`mem£t
(&
¨gs
, 0, (args));

4158 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4159 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4161 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_l£ek_cb
, &
¨gs
,

4162 
d©a
Ë=
NULL
) {

4163 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4168 
	}
}

4171 
	$nfs4_lockf_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4172 *
¥iv©e_d©a
)

4174 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4175 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4176 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4177 
LOCK4ªsok
 *
Ãesok
 = 
NULL
;

4178 
LOCKU4ªs
 *
luªs
 = 
NULL
;

4179 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

4180 
nfs4_lock_›
 
cmd
;

4181 
i
;

4183 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4185 
cmd
 = 
d©a
->
fûÀr
.
blob1
.
Àn
;

4187 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "LOCKF")) {

4191 
cmd
) {

4192 
NFS4_F_LOCK
:

4193 
NFS4_F_TLOCK
:

4194 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_LOCK
, "LOCK")) < 0) {

4198 
Ãesok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›lock
.
LOCK4ªs_u
.
ªsok4
;

4199 
nfs
->
nfsi
->
has_lock_ow√r
 = 1;

4200 
fh
->
lock_°©eid
.
£qid
 = 
Ãesok
->lock_stateid.seqid;

4201 
	`mem˝y
(
fh
->
lock_°©eid
.
Ÿhî
, 
Ãesok
->lock_stateid.other, 12);

4203 
NFS4_F_ULOCK
:

4204 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_LOCKU
, "LOCKU")) < 0) {

4207 
luªs
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›locku
;

4208 
fh
->
lock_°©eid
.
£qid
 = 
luªs
->
LOCKU4ªs_u
.lock_stateid.seqid;

4209 
	`mem˝y
(
fh
->
lock_°©eid
.
Ÿhî
,

4210 
luªs
->
LOCKU4ªs_u
.
lock_°©eid
.
Ÿhî
, 12);

4212 
NFS4_F_TEST
:

4216 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4218 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4219 
	}
}

4225 
	$nfs4_lockf_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
,

4226 
nfs4_lock_›
 
cmd
, 
uöt64_t
 
cou¡
,

4227 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4229 
COMPOUND4¨gs
 
¨gs
;

4230 
nfs_¨g›4
 
›
[2];

4231 
nfs4_cb_d©a
 *
d©a
;

4232 
i
;

4234 
d©a
 = 
	`ˇŒoc
(1, (*data));

4235 i‡(
d©a
 =
NULL
) {

4236 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4240 
d©a
->
nfs
 =Çfs;

4241 
d©a
->
cb
 = cb;

4242 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4244 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

4245 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

4247 
d©a
->
fûÀr
.
blob1
.
Àn
 = 
cmd
;

4249 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

4250 
cmd
) {

4251 
NFS4_F_LOCK
:

4252 
i
 +
	`nfs4_›_lock
(
nfs
, &
›
[i], 
fh
, 
OP_LOCK
, 
WRITEW_LT
,

4253 0, 
fh
->
off£t
, 
cou¡
);

4255 
NFS4_F_TLOCK
:

4256 
i
 +
	`nfs4_›_lock
(
nfs
, &
›
[i], 
fh
, 
OP_LOCK
, 
WRITE_LT
,

4257 0, 
fh
->
off£t
, 
cou¡
);

4259 
NFS4_F_ULOCK
:

4260 
i
 +
	`nfs4_›_locku
(
nfs
, &
›
[i], 
fh
, 
WRITE_LT
,

4261 
fh
->
off£t
, 
cou¡
);

4263 
NFS4_F_TEST
:

4264 
i
 +
	`nfs4_›_lockt
(
nfs
, &
›
[i], 
fh
, 
WRITEW_LT
,

4265 
fh
->
off£t
, 
cou¡
);

4269 
	`mem£t
(&
¨gs
, 0, (args));

4270 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4271 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4273 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_lockf_cb
, &
¨gs
,

4274 
d©a
Ë=
NULL
) {

4275 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4280 
	}
}

4283 
	$nfs4_f˙é_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4284 *
¥iv©e_d©a
)

4286 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4287 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4288 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4289 
LOCK4ªsok
 *
Ãesok
 = 
NULL
;

4290 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

4291 
nfs4_f˙é_›
 
cmd
;

4292 
nfs4_Êock
 *
Ê
;

4293 
i
;

4295 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4297 
cmd
 = 
d©a
->
fûÀr
.
blob1
.
Àn
;

4299 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "FCNTL")) {

4303 
cmd
) {

4304 
NFS4_F_SETLK
:

4305 
NFS4_F_SETLKW
:

4306 
Ê
 = (
nfs4_Êock
 *)
d©a
->
fûÀr
.
blob1
.
vÆ
;

4308 
Ê
->
l_ty≥
) {

4309 
F_RDLCK
:

4310 
F_WRLCK
:

4311 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_LOCK
,

4316 
Ãesok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›lock
.
LOCK4ªs_u
.
ªsok4
;

4317 
nfs
->
nfsi
->
has_lock_ow√r
 = 1;

4318 
fh
->
lock_°©eid
.
£qid
 = 
Ãesok
->lock_stateid.seqid;

4319 
	`mem˝y
(
fh
->
lock_°©eid
.
Ÿhî
,

4320 
Ãesok
->
lock_°©eid
.
Ÿhî
, 12);

4322 
F_UNLCK
:

4323 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_LOCKU
,

4332 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4334 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4335 
	}
}

4338 
	$nfs4_f˙é_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
,

4339 
nfs4_cb_d©a
 *
d©a
)

4341 
COMPOUND4¨gs
 
¨gs
;

4342 
nfs_¨g›4
 
›
[2];

4343 
nfs4_Êock
 *
Ê
;

4344 
nfs4_f˙é_›
 
cmd
;

4345 
i
, 
lock_ty≥
;

4347 
cmd
 = 
d©a
->
fûÀr
.
blob1
.
Àn
;

4349 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

4350 
cmd
) {

4351 
NFS4_F_SETLK
:

4352 
NFS4_F_SETLKW
:

4353 
Ê
 = 
d©a
->
fûÀr
.
blob1
.
vÆ
;

4355 
Ê
->
l_ty≥
) {

4356 
F_RDLCK
:

4357 
lock_ty≥
 = 
cmd
 =
NFS4_F_SETLK
 ? 
READ_LT
 : 
READW_LT
;

4358 
i
 +
	`nfs4_›_lock
(
nfs
, &
›
[i], 
fh
, 
OP_LOCK
, 
lock_ty≥
,

4359 0, 
Ê
->
l_°¨t
, fl->
l_Àn
);

4361 
F_WRLCK
:

4362 
lock_ty≥
 = 
cmd
 =
NFS4_F_SETLK
 ? 
WRITE_LT
 : 
WRITEW_LT
;

4363 
i
 +
	`nfs4_›_lock
(
nfs
, &
›
[i], 
fh
, 
OP_LOCK
, 
lock_ty≥
,

4364 0, 
Ê
->
l_°¨t
, fl->
l_Àn
);

4366 
F_UNLCK
:

4367 
i
 +
	`nfs4_›_locku
(
nfs
, &
›
[i], 
fh
, 
WRITE_LT
,

4368 
Ê
->
l_°¨t
, fl->
l_Àn
);

4374 
	`mem£t
(&
¨gs
, 0, (args));

4375 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4376 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4378 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_f˙é_cb
, &
¨gs
,

4379 
d©a
Ë=
NULL
) {

4380 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4385 
	}
}

4388 
	$nfs4_f˙é_°©_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4389 *
¥iv©e_d©a
)

4391 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4392 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4393 
nfsfh
 *
fh
 = 
d©a
->
fûÀr
.
blob0
.
vÆ
;

4394 
nfs4_f˙é_›
 
cmd
 = 
d©a
->
fûÀr
.
blob1
.
Àn
;

4395 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4396 
GETATTR4ªsok
 *
g¨esok
;

4397 
nfs4_Êock
 *
Ê
;

4398 
nfs_°©_64
 
°
;

4399 
i
;

4401 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "STAT64")) {

4405 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETATTR
, "GETATTR")) < 0) {

4408 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

4409 
	`mem£t
(&
°
, 0, (st));

4410 i‡(
	`nfs_∑r£_©åibuãs
(
nfs
, 
d©a
, &
°
,

4411 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

4412 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
) < 0) {

4413 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4414 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4417 
cmd
) {

4418 
NFS4_F_SETLK
:

4419 
NFS4_F_SETLKW
:

4420 
Ê
 = 
d©a
->
fûÀr
.
blob1
.
vÆ
;

4422 
Ê
->
l_whí˚
 = 
SEEK_SET
;

4423 
Ê
->
l_°¨t
 = 
°
.
nfs_size
 + fl->l_start;

4424 i‡(
	`nfs4_f˙é_async_öã∫Æ
(
nfs
, 
fh
, 
d©a
)) {

4425 
d©a
->
	`cb
(-
ENOMEM
, 
nfs
, 
	`nfs_gë_îr‹
(nfs),

4426 
d©a
->
¥iv©e_d©a
);

4427 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4430 
	}
}

4437 
	$nfs4_f˙é_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
,

4438 
nfs4_f˙é_›
 
cmd
, *
¨g
,

4439 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4441 
nfs4_cb_d©a
 *
d©a
;

4442 
nfs4_Êock
 *
Ê
;

4443 
COMPOUND4¨gs
 
¨gs
;

4444 
nfs_¨g›4
 
›
[2];

4445 
i
;

4447 
d©a
 = 
	`ˇŒoc
(1, (*data));

4448 i‡(
d©a
 =
NULL
) {

4449 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4453 
d©a
->
nfs
 =Çfs;

4454 
d©a
->
cb
 = cb;

4455 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4457 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
fh
;

4458 
d©a
->
fûÀr
.
blob0
.
‰ì
 = 
NULL
;

4460 
d©a
->
fûÀr
.
blob1
.
Àn
 = 
cmd
;

4461 
d©a
->
fûÀr
.
blob1
.
vÆ
 = 
¨g
;

4462 
d©a
->
fûÀr
.
blob1
.
‰ì
 = 
NULL
;

4464 
cmd
) {

4465 
NFS4_F_SETLK
:

4466 
NFS4_F_SETLKW
:

4467 
Ê
 = 
¨g
;

4468 
Ê
->
l_whí˚
) {

4469 
SEEK_SET
:

4470  
	`nfs4_f˙é_async_öã∫Æ
(
nfs
, 
fh
, 
d©a
);

4471 
SEEK_CUR
:

4472 
Ê
->
l_whí˚
 = 
SEEK_SET
;

4473 
Ê
->
l_°¨t
 = 
fh
->
off£t
 + fl->l_start;

4474  
	`nfs4_f˙é_async_öã∫Æ
(
nfs
, 
fh
, 
d©a
);

4475 
SEEK_END
:

4476 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

4477 
i
 +
	`nfs4_›_gë©å
(
nfs
, &
›
[i], 
°™d¨d_©åibuãs
,

4480 
	`mem£t
(&
¨gs
, 0, (args));

4481 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4482 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4484 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
,

4485 
nfs4_f˙é_°©_cb
,

4486 &
¨gs
, 
d©a
Ë=
NULL
) {

4487 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4492 
	`nfs_£t_îr‹
(
nfs
, "fcntl: unknown fl->whence:%d\n",

4493 
Ê
->
l_whí˚
);

4494 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4497 
	`nfs_£t_îr‹
(
nfs
, "f˙é: unknow¿cmd:%d\n", 
cmd
);

4498 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4500 
	}
}

4503 
	$nfs_∑r£_°©vfs
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

4504 
°©vfs
 *
svfs
, c⁄° *
buf
, 
Àn
)

4506 
uöt64_t
 
u64
;

4507 
uöt32_t
 
u32
;

4509 
svfs
->
f_bsize
 = 
NFS_BLKSIZE
;

4510 
svfs
->
f_‰size
 = 
NFS_BLKSIZE
;

4512 #i‡!
	`deföed
(
__ANDROID__
)

4513 
svfs
->
f_Êag
 = 0;

4520 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 16);

4521 
	`mem˝y
(&
u64
, 
buf
, 8);

4522 
svfs
->
f_fsid
 = ()
	`nfs_¡oh64
(
u64
);

4523 
buf
 += 8;

4524 
Àn
 -= 8;

4525 
	`mem˝y
(&
u64
, 
buf
, 8);

4526 
svfs
->
f_fsid
 |()
	`nfs_¡oh64
(
u64
);

4527 
buf
 += 8;

4528 
Àn
 -= 8;

4531 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4532 
	`mem˝y
(&
u64
, 
buf
, 8);

4533 #i‡!
	`deföed
(
__ANDROID__
)

4534 
svfs
->
f_Ávaû
 = (
fsfû˙t_t
)
	`nfs_¡oh64
(
u64
);

4536 
buf
 += 8;

4537 
Àn
 -= 8;

4540 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4541 
	`mem˝y
(&
u64
, 
buf
, 8);

4542 
svfs
->
f_f‰ì
 = (
fsfû˙t_t
)
	`nfs_¡oh64
(
u64
);

4543 
buf
 += 8;

4544 
Àn
 -= 8;

4547 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4548 
	`mem˝y
(&
u64
, 
buf
, 8);

4549 
svfs
->
f_fûes
 = (
fsfû˙t_t
)
	`nfs_¡oh64
(
u64
);

4550 
buf
 += 8;

4551 
Àn
 -= 8;

4554 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

4555 
	`mem˝y
(&
u32
, 
buf
, 4);

4556 #i‡!
	`deföed
(
__ANDROID__
)

4557 
svfs
->
f_«memax
 = 
	`¡ohl
(
u32
);

4559 
buf
 += 4;

4560 
Àn
 -= 4;

4563 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4564 
	`mem˝y
(&
u64
, 
buf
, 8);

4565 
svfs
->
f_bavaû
 = (
fsblk˙t_t
)(
	`nfs_¡oh64
(
u64
Ë/ svfs->
f_‰size
);

4566 
buf
 += 8;

4567 
Àn
 -= 8;

4570 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4571 
	`mem˝y
(&
u64
, 
buf
, 8);

4572 
svfs
->
f_b‰ì
 = (
fsblk˙t_t
)(
	`nfs_¡oh64
(
u64
Ë/ svfs->
f_‰size
);

4573 
buf
 += 8;

4574 
Àn
 -= 8;

4577 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4578 
	`mem˝y
(&
u64
, 
buf
, 8);

4579 
svfs
->
f_blocks
 = (
fsblk˙t_t
)(
	`nfs_¡oh64
(
u64
Ë/ svfs->
f_‰size
);

4580 
buf
 += 8;

4581 
Àn
 -= 8;

4584 
	}
}

4587 
	$nfs_∑r£_°©vfs64
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

4588 
nfs_°©vfs_64
 *
svfs64
, c⁄° *
buf
, 
Àn
)

4590 
uöt64_t
 
u64
;

4591 
uöt32_t
 
u32
;

4593 
svfs64
->
f_bsize
 = 
NFS_BLKSIZE
;

4594 
svfs64
->
f_‰size
 = 
NFS_BLKSIZE
;

4595 
svfs64
->
f_Êag
 = 0;

4601 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 16);

4602 
	`mem˝y
(&
u64
, 
buf
, 8);

4603 
svfs64
->
f_fsid
 = 
	`nfs_¡oh64
(
u64
);

4604 
buf
 += 8;

4605 
Àn
 -= 8;

4606 
	`mem˝y
(&
u64
, 
buf
, 8);

4607 
svfs64
->
f_fsid
 |
	`nfs_¡oh64
(
u64
);

4608 
buf
 += 8;

4609 
Àn
 -= 8;

4612 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4613 
	`mem˝y
(&
u64
, 
buf
, 8);

4614 
svfs64
->
f_Ávaû
 = 
	`nfs_¡oh64
(
u64
);

4615 
buf
 += 8;

4616 
Àn
 -= 8;

4619 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4620 
	`mem˝y
(&
u64
, 
buf
, 8);

4621 
svfs64
->
f_f‰ì
 = 
	`nfs_¡oh64
(
u64
);

4622 
buf
 += 8;

4623 
Àn
 -= 8;

4626 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4627 
	`mem˝y
(&
u64
, 
buf
, 8);

4628 
svfs64
->
f_fûes
 = 
	`nfs_¡oh64
(
u64
);

4629 
buf
 += 8;

4630 
Àn
 -= 8;

4633 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 4);

4634 
	`mem˝y
(&
u32
, 
buf
, 4);

4635 
svfs64
->
f_«memax
 = 
	`¡ohl
(
u32
);

4636 
buf
 += 4;

4637 
Àn
 -= 4;

4640 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4641 
	`mem˝y
(&
u64
, 
buf
, 8);

4642 
svfs64
->
f_bavaû
 = 
	`nfs_¡oh64
(
u64
Ë/ svfs64->
f_‰size
;

4643 
buf
 += 8;

4644 
Àn
 -= 8;

4647 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4648 
	`mem˝y
(&
u64
, 
buf
, 8);

4649 
svfs64
->
f_b‰ì
 = 
	`nfs_¡oh64
(
u64
Ë/ svfs64->
f_‰size
;

4650 
buf
 += 8;

4651 
Àn
 -= 8;

4654 
	`CHECK_GETATTR_BUF_SPACE
(
Àn
, 8);

4655 
	`mem˝y
(&
u64
, 
buf
, 8);

4656 
svfs64
->
f_blocks
 = 
	`nfs_¡oh64
(
u64
Ë/ svfs64->
f_‰size
;

4657 
buf
 += 8;

4658 
Àn
 -= 8;

4661 
	}
}

4664 
	$nfs4_°©vfs_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4665 *
¥iv©e_d©a
)

4667 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4668 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4669 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4670 
GETATTR4ªsok
 *
g¨esok
;

4671 
°©vfs
 
svfs
;

4672 
nfs_°©vfs_64
 
svfs64
;

4673 
i
;

4675 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

4677 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "STATVFS")) {

4681 
	`mem£t
(&
svfs
, 0, (svfs));

4682 
	`mem£t
(&
svfs64
, 0, (svfs64));

4684 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_GETATTR
, "GETATTR")) < 0) {

4687 
g¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›gë©å
.
GETATTR4ªs_u
.
ªsok4
;

4689 i‡(
d©a
->
Êags
 & 
LOOKUP_FLAG_IS_STATVFS64
) {

4691 i‡(
	`nfs_∑r£_°©vfs64
(
nfs
, 
d©a
, &
svfs64
,

4692 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

4693 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
) < 0) {

4694 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4695 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4699 
d©a
->
	`cb
(0, 
nfs
, &
svfs64
, d©a->
¥iv©e_d©a
);

4702 i‡(
	`nfs_∑r£_°©vfs
(
nfs
, 
d©a
, &
svfs
,

4703 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_vÆ
,

4704 
g¨esok
->
obj_©åibuãs
.
©å_vÆs
.
©åli°4_Àn
) < 0) {

4705 
d©a
->
	`cb
(-
EINVAL
, 
nfs
, 
	`nfs_gë_îr‹
“fs), d©a->
¥iv©e_d©a
);

4706 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4710 
d©a
->
	`cb
(0, 
nfs
, &
svfs
, d©a->
¥iv©e_d©a
);

4713 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4714 
	}
}

4717 
	$nfs4_°©vfs_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

4718 
is_°©vfs64
,

4719 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4721 
nfs4_cb_d©a
 *
d©a
;

4722 
COMPOUND4¨gs
 
¨gs
;

4723 
nfsfh
 
fh
;

4724 
nfs_¨g›4
 
›
[2];

4725 
i
;

4727 
d©a
 = 
	`ˇŒoc
(1, (*data));

4728 i‡(
d©a
 =
NULL
) {

4729 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4733 
d©a
->
nfs
 =Çfs;

4734 
d©a
->
cb
 = cb;

4735 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4736 i‡(
is_°©vfs64
) {

4737 
d©a
->
Êags
 |
LOOKUP_FLAG_IS_STATVFS64
;

4740 
fh
.fh.
Àn
 = 
nfs
->
nfsi
->
roŸfh
.len;

4741 
fh
.fh.
vÆ
 = 
nfs
->
nfsi
->
roŸfh
.val;

4743 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], &
fh
);

4744 
i
 +
	`nfs4_›_gë©å
(
nfs
, &
›
[i], 
°©vfs_©åibuãs
, 2);

4746 
	`mem£t
(&
¨gs
, 0, (args));

4747 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4748 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4750 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_°©vfs_cb
, &
¨gs
,

4751 
d©a
Ë=
NULL
) {

4752 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4757 
	}
}

4760 
	$nfs4_°©vfs_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

4761 *
¥iv©e_d©a
)

4763  
	`nfs4_°©vfs_async_öã∫Æ
(
nfs
, 
∑th
, 0,

4764 
cb
, 
¥iv©e_d©a
);

4765 
	}
}

4768 
	$nfs4_°©vfs64_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

4769 *
¥iv©e_d©a
)

4771  
	`nfs4_°©vfs_async_öã∫Æ
(
nfs
, 
∑th
, 1,

4772 
cb
, 
¥iv©e_d©a
);

4773 
	}
}

4776 
	$nfs4_chmod_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4777 *
¥iv©e_d©a
)

4779 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4780 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4781 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4783 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "CHMOD")) {

4787 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4788 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4789 
	}
}

4792 
	$nfs4_p›uœã_chmod
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

4794  
	`nfs4_›_chmod
(
d©a
->
nfs
, 
›
, 
NULL
, d©a->
fûÀr
.
blob3
.
vÆ
);

4795 
	}
}

4798 
	$nfs4_chmod_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

4799 
no_fﬁlow
, 
mode
, 
nfs_cb
 
cb
,

4800 *
¥iv©e_d©a
)

4802 
nfs4_cb_d©a
 *
d©a
;

4803 
uöt32_t
 
m
;

4805 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

4806 i‡(
d©a
 =
NULL
) {

4810 
d©a
->
cb
 = cb;

4811 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4812 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_chmod
;

4813 
d©a
->
fûÀr
.
max_›
 = 1;

4815 i‡(
no_fﬁlow
) {

4816 
d©a
->
Êags
 |
LOOKUP_FLAG_NO_FOLLOW
;

4819 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`mÆloc
((
uöt32_t
));

4820 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

4821 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

4822 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4825 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

4827 
m
 = 
	`ht⁄l
(
mode
);

4828 
	`mem˝y
(
d©a
->
fûÀr
.
blob3
.
vÆ
, &
m
, (
uöt32_t
));

4830 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_chmod_cb
) < 0) {

4835 
	}
}

4838 
	$nfs4_fchmod_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
, 
mode
,

4839 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4841 
COMPOUND4¨gs
 
¨gs
;

4842 
nfs_¨g›4
 
›
[2];

4843 
nfs4_cb_d©a
 *
d©a
;

4844 
uöt32_t
 
m
;

4845 
i
;

4847 
d©a
 = 
	`ˇŒoc
(1, (*data));

4848 i‡(
d©a
 =
NULL
) {

4849 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

4853 
d©a
->
nfs
 =Çfs;

4854 
d©a
->
cb
 = cb;

4855 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4857 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`mÆloc
((
uöt32_t
));

4858 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

4859 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

4860 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4863 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

4865 
m
 = 
	`ht⁄l
(
mode
);

4866 
	`mem˝y
(
d©a
->
fûÀr
.
blob3
.
vÆ
, &
m
, (
uöt32_t
));

4868 
	`mem£t
(
›
, 0, (op));

4870 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

4871 
i
 +
	`nfs4_›_chmod
(
nfs
, &
›
[i], 
fh
, 
d©a
->
fûÀr
.
blob3
.
vÆ
);

4873 
	`mem£t
(&
¨gs
, 0, (args));

4874 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

4875 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

4877 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_fsync_cb
, &
¨gs
,

4878 
d©a
Ë=
NULL
) {

4879 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

4880 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4885 
	}
}

4887 
	#CHOWN_BLOB_SIZE
 64

	)

4889 
	$nfs4_¸óã_chown_buf„r
(
nfs_c⁄ãxt
 *
nfs
, 
nfs4_cb_d©a
 *
d©a
,

4890 
uid
, 
gid
)

4892 *
°r
;

4893 
i
, 
l
;

4894 
uöt32_t
 
Àn
;

4896 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`ˇŒoc
(1, 
CHOWN_BLOB_SIZE
);

4897 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

4898 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

4901 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

4903 
i
 = 0;

4904 
°r
 = 
d©a
->
fûÀr
.
blob3
.
vÆ
;

4906 
l
 = 
	`¢¥ötf
(&
°r
[
i
 + 4], 
CHOWN_BLOB_SIZE
 - 4 - i,

4907 "%d", 
uid
);

4908 i‡(
l
 < 0) {

4909 
	`nfs_£t_îr‹
(
nfs
, "snprintf failed");

4912 
Àn
 = 
	`ht⁄l
(
l
);

4914 
	`mem˝y
(&
°r
[
i
], &
Àn
, (
uöt32_t
));

4915 
i
 +4 + 
l
;

4916 
i
 = (i + 3) & ~0x03;

4919 
l
 = 
	`¢¥ötf
(&
°r
[
i
 + 4], 
CHOWN_BLOB_SIZE
 - 4 - i,

4920 "%d", 
gid
);

4921 i‡(
l
 < 0) {

4922 
	`nfs_£t_îr‹
(
nfs
, "snprintf failed");

4925 
Àn
 = 
	`ht⁄l
(
l
);

4927 
	`mem˝y
(&
°r
[
i
], &
Àn
, (
uöt32_t
));

4928 
i
 +4 + 
l
;

4929 
i
 = (i + 3) & ~0x03;

4931 
d©a
->
fûÀr
.
blob3
.
Àn
 = 
i
;

4934 
	}
}

4937 
	$nfs4_chown_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

4938 *
¥iv©e_d©a
)

4940 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

4941 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

4942 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

4944 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "OPEN")) {

4948 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

4949 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4950 
	}
}

4953 
	$nfs4_p›uœã_chown
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

4955  
	`nfs4_›_chown
(
d©a
->
nfs
, 
›
, 
NULL
, d©a->
fûÀr
.
blob3
.
vÆ
,

4956 
d©a
->
fûÀr
.
blob3
.
Àn
);

4957 
	}
}

4960 
	$nfs4_chown_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

4961 
no_fﬁlow
, 
uid
, 
gid
,

4962 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4964 
nfs4_cb_d©a
 *
d©a
;

4966 
d©a
 = 
	`öô_cb_d©a_•lô_∑th
(
nfs
, 
∑th
);

4967 i‡(
d©a
 =
NULL
) {

4971 
d©a
->
cb
 = cb;

4972 
d©a
->
¥iv©e_d©a
 =Örivate_data;

4973 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_chown
;

4974 
d©a
->
fûÀr
.
max_›
 = 1;

4976 i‡(
no_fﬁlow
) {

4977 
d©a
->
Êags
 |
LOOKUP_FLAG_NO_FOLLOW
;

4980 i‡(
	`nfs4_¸óã_chown_buf„r
(
nfs
, 
d©a
, 
uid
, 
gid
) < 0) {

4981 
	`‰ì_nfs4_cb_d©a
(
d©a
);

4985 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_chown_cb
) < 0) {

4990 
	}
}

4993 
	$nfs4_fchown_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *
fh
, 
uid
, 
gid
,

4994 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

4996 
COMPOUND4¨gs
 
¨gs
;

4997 
nfs_¨g›4
 
›
[2];

4998 
nfs4_cb_d©a
 *
d©a
;

4999 
i
;

5001 
d©a
 = 
	`ˇŒoc
(1, (*data));

5002 i‡(
d©a
 =
NULL
) {

5003 
	`nfs_£t_îr‹
(
nfs
, "Out of memory.");

5007 
d©a
->
nfs
 =Çfs;

5008 
d©a
->
cb
 = cb;

5009 
d©a
->
¥iv©e_d©a
 =Örivate_data;

5011 i‡(
	`nfs4_¸óã_chown_buf„r
(
nfs
, 
d©a
, 
uid
, 
gid
) < 0) {

5012 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5016 
	`mem£t
(
›
, 0, (op));

5018 
i
 = 
	`nfs4_›_putfh
(
nfs
, &
›
[0], 
fh
);

5019 
i
 +
	`nfs4_›_chown
(
nfs
, &
›
[i], 
fh
, 
d©a
->
fûÀr
.
blob3
.
vÆ
,

5020 
d©a
->
fûÀr
.
blob3
.
Àn
);

5022 
	`mem£t
(&
¨gs
, 0, (args));

5023 
¨gs
.
¨g¨øy
.
¨g¨øy_Àn
 = 
i
;

5024 
¨gs
.
¨g¨øy
.
¨g¨øy_vÆ
 = 
›
;

5026 i‡(
	`Ωc_nfs4_compound_èsk
(
nfs
->
Ωc
, 
nfs4_fsync_cb
, &
¨gs
,

5027 
d©a
Ë=
NULL
) {

5028 
d©a
->
fûÀr
.
blob0
.
vÆ
 = 
NULL
;

5029 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5034 
	}
}

5037 
	$nfs4_ac˚ss_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

5038 *
¥iv©e_d©a
)

5040 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

5041 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

5042 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

5043 
ACCESS4ªsok
 *
¨esok
;

5044 
i
;

5046 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

5048 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "ACCESS")) {

5052 i‡((
i
 = 
	`nfs4_föd_›
(
nfs
, 
d©a
, 
ªs
, 
OP_ACCESS
, "ACCESS")) < 0) {

5056 
¨esok
 = &
ªs
->
ªßºay
.
ªßºay_vÆ
[
i
].
nfs_ªs›4_u
.
›ac˚ss
.
ACCESS4ªs_u
.
ªsok4
;

5059 i‡(
d©a
->
fûÀr
.
Êags
) {

5060 
mode
 = 0;

5062 i‡(
¨esok
->
ac˚ss
 & 
ACCESS4_READ
) {

5063 
mode
 |
R_OK
;

5065 i‡(
¨esok
->
ac˚ss
 & 
ACCESS4_MODIFY
) {

5066 
mode
 |
W_OK
;

5068 i‡(
¨esok
->
ac˚ss
 & 
ACCESS4_EXECUTE
) {

5069 
mode
 |
X_OK
;

5071 
d©a
->
	`cb
(
mode
, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

5072 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5076 i‡(
¨esok
->
suµ‹ãd
 !¨esok->
ac˚ss
) {

5077 
d©a
->
	`cb
(-
EACCES
, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

5078 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5082 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

5083 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5084 
	}
}

5087 
	$nfs4_ac˚ss_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

5088 
is_ac˚ss2
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

5090 
nfs4_cb_d©a
 *
d©a
;

5091 
uöt32_t
 
m
;

5093 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

5094 i‡(
d©a
 =
NULL
) {

5098 
d©a
->
cb
 = cb;

5099 
d©a
->
¥iv©e_d©a
 =Örivate_data;

5100 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_ac˚ss
;

5101 
d©a
->
fûÀr
.
max_›
 = 1;

5102 
d©a
->
fûÀr
.
Êags
 = 
is_ac˚ss2
;

5104 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`mÆloc
((
uöt32_t
));

5105 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

5106 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

5109 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

5111 
m
 = 0;

5112 i‡(
mode
 & 
R_OK
) {

5113 
m
 |
ACCESS4_READ
;

5115 i‡(
mode
 & 
W_OK
) {

5116 
m
 |
ACCESS4_MODIFY
;

5118 i‡(
mode
 & 
X_OK
) {

5119 
m
 |
ACCESS4_EXECUTE
;

5121 
	`mem˝y
(
d©a
->
fûÀr
.
blob3
.
vÆ
, &
m
, (
uöt32_t
));

5123 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_ac˚ss_cb
) < 0) {

5124 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5129 
	}
}

5132 
	$nfs4_ac˚ss_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
mode
,

5133 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

5135  
	`nfs4_ac˚ss_öã∫Æ
(
nfs
, 
∑th
, 
mode
, 0,

5136 
cb
, 
¥iv©e_d©a
);

5137 
	}
}

5140 
	$nfs4_ac˚ss2_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
, 
nfs_cb
 
cb
,

5141 *
¥iv©e_d©a
)

5143  
	`nfs4_ac˚ss_öã∫Æ
(
nfs
, 
∑th
, 
R_OK
|
W_OK
|
X_OK
, 1,

5144 
cb
, 
¥iv©e_d©a
);

5145 
	}
}

5148 
	$nfs4_utimes_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
comm™d_d©a
,

5149 *
¥iv©e_d©a
)

5151 
nfs4_cb_d©a
 *
d©a
 = 
¥iv©e_d©a
;

5152 
nfs_c⁄ãxt
 *
nfs
 = 
d©a
->nfs;

5153 
COMPOUND4ªs
 *
ªs
 = 
comm™d_d©a
;

5155 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

5157 i‡(
	`check_nfs4_îr‹
(
nfs
, 
°©us
, 
d©a
, 
ªs
, "UTIMES")) {

5161 
d©a
->
	`cb
(0, 
nfs
, 
NULL
, d©a->
¥iv©e_d©a
);

5162 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5163 
	}
}

5166 
	$nfs4_p›uœã_utimes
(
nfs4_cb_d©a
 *
d©a
, 
nfs_¨g›4
 *
›
)

5168  
	`nfs4_›_utimes
(
d©a
->
nfs
, 
›
, 
NULL
, d©a->
fûÀr
.
blob3
.
vÆ
,

5169 
d©a
->
fûÀr
.
blob3
.
Àn
);

5170 
	}
}

5173 
	$nfs4_utimes_async_öã∫Æ
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

5174 
no_fﬁlow
, 
timevÆ
 *
times
,

5175 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

5177 
nfs4_cb_d©a
 *
d©a
;

5178 *
buf
;

5179 
uöt32_t
 
u32
;

5180 
uöt64_t
 
u64
;

5182 
d©a
 = 
	`öô_cb_d©a_fuŒ_∑th
(
nfs
, 
∑th
);

5183 i‡(
d©a
 =
NULL
) {

5187 
d©a
->
cb
 = cb;

5188 
d©a
->
¥iv©e_d©a
 =Örivate_data;

5189 
d©a
->
fûÀr
.
func
 = 
nfs4_p›uœã_utimes
;

5190 
d©a
->
fûÀr
.
max_›
 = 1;

5192 i‡(
no_fﬁlow
) {

5193 
d©a
->
Êags
 |
LOOKUP_FLAG_NO_FOLLOW
;

5196 
d©a
->
fûÀr
.
blob3
.
Àn
 = 2 * (4 + 8 + 4);

5197 
buf
 = 
d©a
->
fûÀr
.
blob3
.
vÆ
 = 
	`ˇŒoc
(1, d©a->fûÀr.blob3.
Àn
);

5198 i‡(
d©a
->
fûÀr
.
blob3
.
vÆ
 =
NULL
) {

5199 
	`nfs_£t_îr‹
(
nfs
, "Out of memory");

5202 
d©a
->
fûÀr
.
blob3
.
‰ì
 = free;

5204 i‡(
times
 !
NULL
) {

5206 
u32
 = 
	`ht⁄l
(
SET_TO_CLIENT_TIME4
);

5207 
	`mem˝y
(
buf
, &
u32
, (
uöt32_t
));

5208 
u64
 = 
	`nfs_ht⁄64
(
times
[0].
tv_£c
);

5209 
	`mem˝y
(
buf
 + 4, &
u64
, (
uöt64_t
));

5210 
u32
 = 
	`ht⁄l
(
times
[0].
tv_u£c
 * 1000);

5211 
	`mem˝y
(
buf
 + 12, &
u32
, (
uöt32_t
));

5212 
buf
 += 16;

5214 
u32
 = 
	`ht⁄l
(
SET_TO_CLIENT_TIME4
);

5215 
	`mem˝y
(
buf
, &
u32
, (
uöt32_t
));

5216 
u64
 = 
	`nfs_ht⁄64
(
times
[1].
tv_£c
);

5217 
	`mem˝y
(
buf
 + 4, &
u64
, (
uöt64_t
));

5218 
u32
 = 
	`ht⁄l
(
times
[1].
tv_u£c
 * 1000);

5219 
	`mem˝y
(
buf
 + 12, &
u32
, (
uöt32_t
));

5222 
u32
 = 
	`ht⁄l
(
SET_TO_SERVER_TIME4
);

5223 
	`mem˝y
(
buf
, &
u32
, (
uöt32_t
));

5225 
u32
 = 
	`ht⁄l
(
SET_TO_SERVER_TIME4
);

5226 
	`mem˝y
(
buf
 + 4, &
u32
, (
uöt32_t
));

5227 
d©a
->
fûÀr
.
blob3
.
Àn
 = 8;

5230 i‡(
	`nfs4_lookup_∑th_async
(
nfs
, 
d©a
, 
nfs4_utimes_cb
) < 0) {

5231 
	`‰ì_nfs4_cb_d©a
(
d©a
);

5236 
	}
}

5239 
	$nfs4_utime_async
(
nfs_c⁄ãxt
 *
nfs
, c⁄° *
∑th
,

5240 
utimbuf
 *
times
, 
nfs_cb
 
cb
, *
¥iv©e_d©a
)

5242 i‡(
times
 =
NULL
) {

5243  
	`nfs4_utimes_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
NULL
,

5244 
cb
, 
¥iv©e_d©a
);

5246 
timevÆ
 
√w_times
[2];

5248 
√w_times
[0].
tv_£c
 = 
times
->
a˘ime
;

5249 
√w_times
[0].
tv_u£c
 = 0;

5250 
√w_times
[1].
tv_£c
 = 
times
->
modtime
;

5251 
√w_times
[1].
tv_u£c
 = 0;

5253  
	`nfs4_utimes_async_öã∫Æ
(
nfs
, 
∑th
, 0, 
√w_times
,

5254 
cb
, 
¥iv©e_d©a
);

5255 
	}
}

	@lib/pdu.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
AROS


23 
	~"¨os_com∑t.h
"

26 #ifde‡
PS2_EE


27 
	~"ps2_com∑t.h
"

30 #ifde‡
PS3_PPU


31 
	~"ps3_com∑t.h
"

34 #ifde‡
WIN32


35 
	~<wö32/wö32_com∑t.h
>

38 #ifde‡
HAVE_NETINET_IN_H


39 
	~<√töë/ö.h
>

42 #ifde‡
HAVE_SYS_SOCKET_H


43 
	~<sys/sockë.h
>

46 #i‡
deföed
(
HAVE_SYS_UIO_H
Ë|| (deföed(
__APPLE__
Ë&& deföed(
__MACH__
))

47 
	~<sys/uio.h
>

50 #ifde‡
HAVE_STRINGS_H


51 
	~<°rögs.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 
	~<as£π.h
>

58 
	~<î∫o.h
>

59 
	~"¶i°.h
"

60 
	~"libnfs-zdr.h
"

61 
	~"libnfs.h
"

62 
	~"libnfs-øw.h
"

63 
	~"libnfs-¥iv©e.h
"

65 #ifde‡
HAVE_LIBKRB5


66 
	~"krb5-wøµî.h
"

69 
	$Ωc_ª£t_queue
(
Ωc_queue
 *
q
)

71 
q
->
hód
 = 
NULL
;

72 
q
->
èû
 = 
NULL
;

73 
	}
}

78 
	$Ωc_íqueue
(
Ωc_queue
 *
q
, 
Ωc_pdu
 *
pdu
)

80 i‡(
q
->
hód
 =
NULL
)

81 
q
->
hód
 = 
pdu
;

83 
q
->
èû
->
√xt
 = 
pdu
;

84 
q
->
èû
 = 
pdu
;

85 
pdu
->
√xt
 = 
NULL
;

86 
	}
}

91 
	$Ωc_ªtu∫_to_queue
(
Ωc_queue
 *
q
, 
Ωc_pdu
 *
pdu
)

93 
pdu
->
√xt
 = 
q
->
hód
;

94 
q
->
hód
 = 
pdu
;

95 i‡(
q
->
èû
 =
NULL
)

96 
q
->
èû
 = 
pdu
;

97 
	}
}

99 
	$Ωc_hash_xid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
xid
)

101  (
xid
 * 7919Ë% 
Ωc
->
num_hashes
;

102 
	}
}

104 
	#PAD_TO_8_BYTES
(
x
Ë((x + 0x07Ë& ~0x07)

	)

106 
Ωc_pdu
 *
	$Ωc_Æloˇã_ª∂y_pdu
(
Ωc_c⁄ãxt
 *
Ωc
,

107 
Ωc_msg
 *
ªs
,

108 
size_t
 
Æloc_höt
)

110 
Ωc_pdu
 *
pdu
;

112 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

114 
pdu
 = 
	`mÆloc
((
Ωc_pdu
Ë+ 
ZDR_ENCODEBUF_MINSIZE
 + 
Æloc_höt
);

115 i‡(
pdu
 =
NULL
) {

116 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory: FailedÅoállocateÖdu structureándÉncode buffer");

117  
NULL
;

119 
	`mem£t
(
pdu
, 0, (
Ωc_pdu
));

120 
pdu
->
Êags
 = 
PDU_DISCARD_AFTER_SENDING
;

121 
pdu
->
xid
 = 0;

122 
pdu
->
cb
 = 
NULL
;

123 
pdu
->
¥iv©e_d©a
 = 
NULL
;

124 
pdu
->
zdr_decode_‚
 = 
NULL
;

125 
pdu
->
zdr_decode_bufsize
 = 0;

127 
pdu
->
outd©a
.
d©a
 = (*)(pdu + 1);

130 
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
,Ödu->
outd©a
.
d©a
, 4, 
NULL
);

132 
	`zdrmem_¸óã
(&
pdu
->
zdr
, &pdu->
outd©a
.
d©a
[4],

133 
ZDR_ENCODEBUF_MINSIZE
 + 
Æloc_höt
, 
ZDR_ENCODE
);

135 i‡(
	`zdr_ª∂ymsg
(
Ωc
, &
pdu
->
zdr
, 
ªs
) == 0) {

136 
	`Ωc_£t_îr‹
(
Ωc
, "zdr_replymsg failed with %s",

137 
	`Ωc_gë_îr‹
(
Ωc
));

138 
	`zdr_de°roy
(&
pdu
->
zdr
);

139 
	`‰ì
(
pdu
);

140  
NULL
;

144 
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, &pdu->
outd©a
.
d©a
[4],

145 
	`zdr_gëpos
(&
pdu
->
zdr
), 
NULL
);

147  
pdu
;

148 
	}
}

150 
Ωc_pdu
 *
	$Ωc_Æloˇã_pdu2
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
, 
zdΩroc_t
 
zdr_decode_‚
, 
zdr_decode_bufsize
, 
size_t
 
Æloc_höt
)

152 
Ωc_pdu
 *
pdu
;

153 
Ωc_msg
 
msg
;

154 
pdu_size
;

155 #ifde‡
HAVE_LIBKRB5


156 
uöt32_t
 
vÆ
;

159 #ifde‡
HAVE_TLS


164 c⁄° 
boﬁ_t
 
£nd_auth_és
 = !!(
¥o˚duª
 & 0x80000000U);

165 
¥o˚duª
 = (procedure & 0x7FFFFFFFU);

168 
	`as£π
(!
£nd_auth_és
 || (
¥ogøm
 =
NFS_PROGRAM
 && 
¥o˚duª
 == 0));

171 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

176 
pdu_size
 = 
	`PAD_TO_8_BYTES
((
Ωc_pdu
));

177 
pdu_size
 +
	`PAD_TO_8_BYTES
(
zdr_decode_bufsize
);

179 
pdu
 = 
	`mÆloc
(
pdu_size
 + 
ZDR_ENCODEBUF_MINSIZE
 + 
Æloc_höt
);

180 i‡(
pdu
 =
NULL
) {

181 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory: FailedÅoállocateÖdu structureándÉncode buffer");

182  
NULL
;

184 
	`mem£t
(
pdu
, 0, 
pdu_size
);

185 #ifde‡
HAVE_MULTITHREADING


186 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

187 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

190 
pdu
->
xid
 = 
Ωc
->xid++;

191 #ifde‡
HAVE_MULTITHREADING


192 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

193 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

196 
pdu
->
cb
 = cb;

197 
pdu
->
¥iv©e_d©a
 =Örivate_data;

198 
pdu
->
zdr_decode_‚
 = zdr_decode_fn;

199 
pdu
->
zdr_decode_bufsize
 = zdr_decode_bufsize;

201 
pdu
->
outd©a
.
d©a
 = ((*Ìdu + 
pdu_size
);

204 
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
,Ödu->
outd©a
.
d©a
, 4, 
NULL
);

206 
	`zdrmem_¸óã
(&
pdu
->
zdr
, &pdu->
outd©a
.
d©a
[4],

207 
ZDR_ENCODEBUF_MINSIZE
 + 
Æloc_höt
, 
ZDR_ENCODE
);

209 
	`mem£t
(&
msg
, 0, (
Ωc_msg
));

210 
msg
.
xid
 = 
pdu
->xid;

211 
msg
.
dúe˘i⁄
 = 
CALL
;

212 
msg
.
body
.
cbody
.
Ωcvîs
 = 
RPC_MSG_VERSION
;

213 
msg
.
body
.
cbody
.
¥og
 = 
¥ogøm
;

214 
msg
.
body
.
cbody
.
vîs
 = 
vîsi⁄
;

215 
msg
.
body
.
cbody
.
¥oc
 = 
¥o˚duª
;

217 
pdu
->
do_nŸ_ªåy
 = (
¥ogøm
 !
NFS_PROGRAM
);

220 i‡(
¥o˚duª
 == 0) {

221 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_Êav‹
 = 
AUTH_NONE
;

222 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_Àngth
 = 0;

223 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_ba£
 = 
NULL
;

230 
pdu
->
do_nŸ_ªåy
 = 
TRUE
;

232 
msg
.
body
.
cbody
.
¸ed
 = 
Ωc
->
auth
->
ah_¸ed
;

235 
msg
.
body
.
cbody
.
vîf
 = 
Ωc
->
auth
->
ah_vîf
;

237 #ifde‡
HAVE_TLS


239 
	`as£π
(
pdu
->
ex≥˘_°¨âls
 =
FALSE
);

241 i‡(
£nd_auth_és
) {

242 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_Êav‹
 = 
AUTH_TLS
;

243 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_Àngth
 = 0;

244 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_ba£
 = 
NULL
;

246 
pdu
->
ex≥˘_°¨âls
 = 
TRUE
;

250 #ifde‡
HAVE_LIBKRB5


251 #ifde‡
HAVE_MULTITHREADING


252 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

253 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

256 i‡(
Ωc
->
£c
 !
RPC_SEC_UNDEFINED
) {

257 
ZDR
 
tmpzdr
;

258 
Àvñ
 = 
RPC_GSS_SVC_NONE
;

260 
pdu
->
gss_£qno
 = 
Ωc
->gss_seqno;

262 
	`zdrmem_¸óã
(&
tmpzdr
, 
pdu
->
¸eds
, 64, 
ZDR_ENCODE
);

263 
Ωc
->
£c
) {

264 
RPC_SEC_UNDEFINED
:

266 
RPC_SEC_KRB5
:

267 
Àvñ
 = 
RPC_GSS_SVC_NONE
;

269 
RPC_SEC_KRB5I
:

270 i‡(
pdu
->
gss_£qno
 > 0) {

271 
Àvñ
 = 
RPC_GSS_SVC_INTEGRITY
;

274 
RPC_SEC_KRB5P
:

275 i‡(
pdu
->
gss_£qno
 > 0) {

276 
Àvñ
 = 
RPC_GSS_SVC_PRIVACY
;

280 i‡(
	`libnfs_authgss_gí_¸eds
(
Ωc
, &
tmpzdr
, 
Àvñ
) < 0) {

281 
	`zdr_de°roy
(&
tmpzdr
);

282 
	`Ωc_£t_îr‹
(
Ωc
, "zdr_callmsg failed with %s",

283 
	`Ωc_gë_îr‹
(
Ωc
));

284 
Áûed
;

286 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_Êav‹
 = 
AUTH_GSS
;

287 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_Àngth
 = 
tmpzdr
.
pos
;

288 
msg
.
body
.
cbody
.
¸ed
.
ﬂ_ba£
 = 
pdu
->
¸eds
;

289 
	`zdr_de°roy
(&
tmpzdr
);

291 
Ωc
->
gss_£qno
++;

292 i‡(
Ωc
->
gss_£qno
 > 1) {

293 
msg
.
body
.
cbody
.
vîf
.
ﬂ_Êav‹
 = 
AUTH_GSS
;

294 
msg
.
body
.
cbody
.
vîf
.
gss_c⁄ãxt
 = 
Ωc
->gss_context;

297 #ifde‡
HAVE_MULTITHREADING


298 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

299 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

304 i‡(
	`zdr_ˇŒmsg
(
Ωc
, &
pdu
->
zdr
, &
msg
) == 0) {

305 
	`Ωc_£t_îr‹
(
Ωc
, "zdr_callmsg failed with %s",

306 
	`Ωc_gë_îr‹
(
Ωc
));

307 
Áûed
;

310 #ifde‡
HAVE_LIBKRB5


311 
Ωc
->
£c
) {

312 
RPC_SEC_UNDEFINED
:

313 
RPC_SEC_KRB5
:

315 
RPC_SEC_KRB5P
:

316 
RPC_SEC_KRB5I
:

317 i‡(
pdu
->
gss_£qno
 > 0) {

318 
pdu
->
°¨t_of_∑ylﬂd
 = 
	`zdr_gëpos
(&pdu->
zdr
);

319 
vÆ
 = 0;

320 i‡(!
	`libnfs_zdr_u_öt
(&
pdu
->
zdr
, &
vÆ
)) {

321 
Áûed
;

323 
vÆ
 = 
pdu
->
gss_£qno
;

324 i‡(!
	`libnfs_zdr_u_öt
(&
pdu
->
zdr
, &
vÆ
)) {

325 
Áûed
;

333 
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, &pdu->
outd©a
.
d©a
[4],

334 
	`zdr_gëpos
(&
pdu
->
zdr
), 
NULL
);

336  
pdu
;

337 
Áûed
:

338 
	`Ωc_£t_îr‹
(
Ωc
, "zdr_callmsg failed with %s",

339 
	`Ωc_gë_îr‹
(
Ωc
));

340 
	`zdr_de°roy
(&
pdu
->
zdr
);

341 
	`‰ì
(
pdu
);

342  
NULL
;

343 
	}
}

345 
Ωc_pdu
 *
	$Ωc_Æloˇã_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
, 
zdΩroc_t
 
zdr_decode_‚
, 
zdr_decode_bufsize
)

347  
	`Ωc_Æloˇã_pdu2
(
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, 
cb
, 
¥iv©e_d©a
, 
zdr_decode_‚
, 
zdr_decode_bufsize
, 0);

348 
	}
}

350 
	$Ωc_‰ì_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
)

352 #ifde‡
HAVE_LIBKRB5


353 
uöt32_t
 
mö
;

356 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

358 i‡(
pdu
->
zdr_decode_buf
 !
NULL
) {

359 
	`zdr_‰ì
(
pdu
->
zdr_decode_‚
,Ödu->
zdr_decode_buf
);

362 #ifde‡
HAVE_LIBKRB5


363 
	`gss_ªÀa£_buf„r
(&
mö
, &
pdu
->
ouçut_buf„r
);

365 
	`zdr_de°roy
(&
pdu
->
zdr
);

367 
	`Ωc_‰ì_iove˘‹
(
Ωc
, &
pdu
->
out
);

368 
	`‰ì
(
pdu
);

369 
	}
}

371 
	$Ωc_£t_√xt_xid
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
xid
)

373 #ifde‡
HAVE_MULTITHREADING


374 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

375 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

378 
Ωc
->
xid
 = xid;

379 #ifde‡
HAVE_MULTITHREADING


380 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

381 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

384 
	}
}

386 
	$pdu_£t_timeout
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
, 
uöt64_t
 
now_m£cs
)

388 i‡(
Ωc
->
timeout
 <= 0) {

390 
pdu
->
timeout
 = 0;

395 i‡(
now_m£cs
 == 0) {

396 
now_m£cs
 = 
	`Ωc_cuºít_time
();

406 i‡(
pdu
->
timeout
 == 0) {

407 
pdu
->
timeout
 = 
now_m£cs
 + 
Ωc
->timeout;

408 #i‚de‡
HAVE_CLOCK_GETTIME


416 
pdu
->
timeout
 += 1000;

420 i‡(
pdu
->
maj‹_timeout
 == 0) {

421 
pdu
->
maj‹_timeout
 = 
now_m£cs
 + (
Ωc
->
timeout
 *Ñpc->
ªå™s
);

422 #i‚de‡
HAVE_CLOCK_GETTIME


423 
pdu
->
maj‹_timeout
 += 1000;

426 i‡(
pdu
->
maj‹_timeout
 <Ödu->
timeout
) {

427 
pdu
->
maj‹_timeout
 =Ödu->
timeout
;

430 
	}
}

432 
	$Ωc_queue_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
)

434 
i
, 
size
 = 0, 
pos
;

435 
uöt32_t
 
ªc‹dm¨kî
;

436 #ifde‡
HAVE_LIBKRB5


437 
uöt32_t
 
maj
, 
mö
, 
vÆ
, 
Àn
;

438 
gss_buf„r_desc
 
mesßge_buf„r
, 
ouçut_tokí
;

439 *
buf
;

442 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

444 #ifde‡
HAVE_LIBKRB5


445 
Ωc
->
£c
) {

446 
RPC_SEC_UNDEFINED
:

447 
RPC_SEC_KRB5
:

449 
RPC_SEC_KRB5I
:

450 i‡(
pdu
->
gss_£qno
 == 0) {

453 
pos
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

454 
	`zdr_£ços
(&
pdu
->
zdr
,Ödu->
°¨t_of_∑ylﬂd
);

455 
vÆ
 = 
pos
 - 
pdu
->
°¨t_of_∑ylﬂd
 - 4;

456 i‡(!
	`libnfs_zdr_u_öt
(&
pdu
->
zdr
, &
vÆ
)) {

457 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

460 
	`zdr_£ços
(&
pdu
->
zdr
, 
pos
);

463 
mesßge_buf„r
.
Àngth
 = 
	`zdr_gëpos
(&
pdu
->
zdr
Ë-Ödu->
°¨t_of_∑ylﬂd
 - 4;

464 
mesßge_buf„r
.
vÆue
 = 
	`zdr_gë±r
(&
pdu
->
zdr
Ë+Ödu->
°¨t_of_∑ylﬂd
 + 4;

465 
maj
 = 
	`gss_gë_mic
(&
mö
, 
Ωc
->
gss_c⁄ãxt
,

466 
GSS_C_QOP_DEFAULT
,

467 &
mesßge_buf„r
,

468 &
ouçut_tokí
);

469 i‡(
maj
 !
GSS_S_COMPLETE
) {

470 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

473 
buf
 = 
ouçut_tokí
.
vÆue
;

474 
Àn
 = 
ouçut_tokí
.
Àngth
;

475 i‡(!
	`libnfs_zdr_byãs
(&
pdu
->
zdr
, &
buf
, &
Àn
,Üen)) {

476 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

477 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

480 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

482 
RPC_SEC_KRB5P
:

483 i‡(
pdu
->
gss_£qno
 == 0) {

486 
pos
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

487 
mesßge_buf„r
.
Àngth
 = 
	`zdr_gëpos
(&
pdu
->
zdr
Ë-Ödu->
°¨t_of_∑ylﬂd
 - 4;

488 
mesßge_buf„r
.
vÆue
 = 
	`zdr_gë±r
(&
pdu
->
zdr
Ë+Ödu->
°¨t_of_∑ylﬂd
 + 4;

489 
maj
 = 
	`gss_wøp
 (&
mö
, 
Ωc
->
gss_c⁄ãxt
, 1,

490 
GSS_C_QOP_DEFAULT
,

491 &
mesßge_buf„r
,

492 
NULL
,

493 &
ouçut_tokí
);

494 i‡(
maj
 !
GSS_S_COMPLETE
) {

495 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

498 
	`zdr_£ços
(&
pdu
->
zdr
,Ödu->
°¨t_of_∑ylﬂd
);

499 
buf
 = 
ouçut_tokí
.
vÆue
;

500 
Àn
 = 
ouçut_tokí
.
Àngth
;

501 i‡(!
	`libnfs_zdr_byãs
(&
pdu
->
zdr
, &
buf
, &
Àn
,Üen)) {

502 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

503 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

506 
	`gss_ªÀa£_buf„r
(&
mö
, &
ouçut_tokí
);

511 
pos
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

517 
	`pdu_£t_timeout
(
Ωc
, 
pdu
, 0);

519 
i
 = 1; i < 
pdu
->
out
.
niov
; i++) {

520 
size
 +
pdu
->
out
.
iov
[
i
].
Àn
;

522 
pdu
->
out
.
tŸÆ_size
 = 
size
 + 4;

532 i‡(
pos
 > 
size
) {

533 
cou¡
 = 
pos
 - 
size
;

535 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
,

536 &
pdu
->
outd©a
.
d©a
[pdu->
out
.
tŸÆ_size
],

537 
cou¡
, 
NULL
) < 0) {

538 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

541 
pdu
->
out
.
tŸÆ_size
 +
cou¡
;

542 
size
 = 
pos
;

546 
ªc‹dm¨kî
 = 
	`ht⁄l
(
size
 | 0x80000000);

547 
	`mem˝y
(
pdu
->
out
.
iov
[0].
buf
, &
ªc‹dm¨kî
, 4);

561 i‡(
Ωc
->
is_udp
 != 0

562 #ifde‡
HAVE_TLS


563 || 
pdu
->
ex≥˘_°¨âls


566 
hash
;

568 #ifde‡
HAVE_TLS


569 i‡(
pdu
->
ex≥˘_°¨âls
) {

571 
	`as£π
(!
Ωc
->
is_udp
);

572 
	`as£π
(!
Ωc
->
is_brﬂdˇ°
);

574 
	`RPC_LOG
(
Ωc
, 2, "Sending AUTH_TLS NULL RPC (%d bytes)",

575 
pdu
->
out
.
tŸÆ_size
);

579 i‡(
Ωc
->
is_brﬂdˇ°
) {

580 i‡(
	`£ndto
(
Ωc
->
fd
, 
pdu
->
zdr
.
buf
, 
size
, 
MSG_DONTWAIT
,

581 (
sockaddr
 *)&
Ωc
->
udp_de°
,

582 (
Ωc
->
udp_de°
)) < 0) {

583 
	`Ωc_£t_îr‹
(
Ωc
, "SídtÿÁûed wôhÉºnÿ%s", 
	`°ªº‹
(
î∫o
));

584 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

588 
iovec
 
iov
[
RPC_MAX_VECTORS
];

589 
niov
 = 
pdu
->
out
.niov;

591 
iovec
 *
iovp
 = (
Ωc
->
is_udp
 ? &
iov
[1] : &iov[0]);

592 c⁄° 
iovn
 = (
Ωc
->
is_udp
 ? 
niov
 - 1 :Çiov);

594 
i
 = 0; i < 
niov
; i++) {

595 
iov
[
i
].
iov_ba£
 = 
pdu
->
out
.iov[i].
buf
;

596 
iov
[
i
].
iov_Àn
 = 
pdu
->
out
.iov[i].
Àn
;

598 i‡(
	`wrôev
(
Ωc
->
fd
, 
iovp
, 
iovn
) < 0) {

599 
	`Ωc_£t_îr‹
(
Ωc
, "SídtÿÁûed wôhÉºnÿ%s", 
	`°ªº‹
(
î∫o
));

600 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

605 
hash
 = 
	`Ωc_hash_xid
(
Ωc
, 
pdu
->
xid
);

606 #ifde‡
HAVE_MULTITHREADING


607 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

608 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

611 
	`Ωc_íqueue
(&
Ωc
->
waôpdu
[
hash
], 
pdu
);

612 
Ωc
->
waôpdu_Àn
++;

613 #ifde‡
HAVE_MULTITHREADING


614 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

615 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

621 
pdu
->
outd©a
.
size
 = size;

622 #ifde‡
HAVE_MULTITHREADING


623 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

624 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

627 
	`Ωc_íqueue
(&
Ωc
->
outqueue
, 
pdu
);

628 #ifde‡
HAVE_MULTITHREADING


629 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

630 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

633 i‡(
Ωc
->
outqueue
.
hód
 =
pdu
) {

634 
	`Ωc_wrôe_to_sockë
(
Ωc
);

638 
	}
}

640 
	$Ωc_¥o˚ss_ª∂y
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdr
)

642 
Ωc_msg
 
msg
;

643 
Ωc_pdu
 *
pdu
 = 
Ωc
->pdu;

645 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

647 
	`mem£t
(&
msg
, 0, (
Ωc_msg
));

648 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
 = 
_nuŒ_auth
;

649 i‡(
pdu
->
zdr_decode_bufsize
 > 0) {

650 
pdu
->
zdr_decode_buf
 = (*Ìdu + 
	`PAD_TO_8_BYTES
((
Ωc_pdu
));

652 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
whîe
 = 
pdu
->
zdr_decode_buf
;

653 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
¥oc
 = 
pdu
->
zdr_decode_‚
;

654 #ifde‡
HAVE_LIBKRB5


655 i‡(
Ωc
->
£c
 =
RPC_SEC_KRB5I
 && 
pdu
->
gss_£qno
 > 0) {

656 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
krb5i
 = 1;

658 i‡(
Ωc
->
£c
 =
RPC_SEC_KRB5P
 && 
pdu
->
gss_£qno
 > 0) {

659 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
krb5p
 = 1;

660 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
ouçut_buf„r
 = &
pdu
->output_buffer;

661 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
gss_c⁄ãxt
 = 
Ωc
->gss_context;

664 i‡(
	`zdr_ª∂ymsg
(
Ωc
, 
zdr
, &
msg
) == 0) {

665 
	`Ωc_£t_îr‹
(
Ωc
, "zdr_replymsg failed inÑpc_process_reply: "

666 "%s", 
	`Ωc_gë_îr‹
(
Ωc
));

667 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "MessageÑejected by server",

668 
pdu
->
¥iv©e_d©a
);

669 i‡(
pdu
->
zdr_decode_buf
 !
NULL
) {

670 
pdu
->
zdr_decode_buf
 = 
NULL
;

674 i‡(
msg
.
body
.
rbody
.
°©
 !
MSG_ACCEPTED
) {

675 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "RPC PackëÇŸác˚±ed byÅhê£rvî",Ödu->
¥iv©e_d©a
);

678 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
°©
) {

679 
SUCCESS
:

681 
Ωc
->
œ°_suc˚ssful_Ωc_ª•⁄£
 = 
	`Ωc_cuºít_time
();

682 i‡(
pdu
->
¢r_logged
) {

683 
	`RPC_LOG
(
Ωc
, 1, "[pdu %p] Server %s OK",

684 
pdu
, 
Ωc
->
£rvî
);

687 i‡(
pdu
->
ö
.
buf
) {

688 
Ωc
->
pdu
->
‰ì_pdu
 = 1;

692 #ifde‡
HAVE_TLS


699 i‡(
pdu
->
ex≥˘_°¨âls
) {

700 c⁄° *c⁄° 
°¨âls_°r
 = "STARTTLS";

701 c⁄° 
°¨âls_Àn
 = 8;

703 i‡(
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_Êav‹
 !
AUTH_NONE
) {

704 
	`RPC_LOG
(
Ωc
, 1, "Server sent bad verifier flavor (%d) inÑesponse "

706 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_Êav‹
);

707 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
,

708 "Sîvî síàbad vîifõ∏Êav‹", 
pdu
->
¥iv©e_d©a
);

710 } i‡(
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_Àngth
 !
°¨âls_Àn
 ||

711 
	`memcmp
(
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_ba£
,

712 
°¨âls_°r
, 
°¨âls_Àn
)) {

713 
	`RPC_LOG
(
Ωc
, 1, "Server doesÇot support TLS");

714 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
,

715 "Sîvî d€†nŸ suµ‹àTLS", 
pdu
->
¥iv©e_d©a
);

721 #ifde‡
HAVE_LIBKRB5


722 i‡(
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_Êav‹
 =
AUTH_GSS
) {

723 
uöt32_t
 
maj
, 
mö
;

724 
gss_buf„r_desc
 
mesßge_buf„r
, 
tokí_buf„r
;

725 
uöt32_t
 
£qno
;

730 i‡(
pdu
->
gss_£qno
 == 0) {

731 
Ωc_gss_öô_ªs
 *
gú
 = (Ωc_gss_öô_ª†*)
pdu
->
zdr_decode_buf
;

733 
Ωc
->
c⁄ãxt_Àn
 = 
gú
->
h™dÀ
.
h™dÀ_Àn
;

734 
	`‰ì
(
Ωc
->
c⁄ãxt
);

735 
Ωc
->
c⁄ãxt
 = 
	`mÆloc
‘pc->
c⁄ãxt_Àn
);

736 i‡(
Ωc
->
c⁄ãxt
 =
NULL
) {

737 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "FaûedÅÿÆloˇãÑpc->c⁄ãxt",Ödu->
¥iv©e_d©a
);

740 
	`mem˝y
(
Ωc
->
c⁄ãxt
, 
gú
->
h™dÀ
.
h™dÀ_vÆ
,Ñpc->
c⁄ãxt_Àn
);

742 i‡(
	`krb5_auth_ªque°
(
Ωc
,Ñpc->
auth_d©a
,

743 (*)
gú
->
gss_tokí
.
gss_tokí_vÆ
,

744 
gú
->
gss_tokí
.
gss_tokí_Àn
) < 0) {

745 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "krb5_auth_ªque°Ñëu∫edÉº‹",Ödu->
¥iv©e_d©a
);

750 i‡(
pdu
->
gss_£qno
 > 0) {

751 
£qno
 = 
	`ht⁄l
(
pdu
->
gss_£qno
);

752 
mesßge_buf„r
.
vÆue
 = (*)&
£qno
;

753 
mesßge_buf„r
.
Àngth
 = 4;

755 
tokí_buf„r
.
vÆue
 = 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_ba£
;

756 
tokí_buf„r
.
Àngth
 = 
msg
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
.
ﬂ_Àngth
;

757 
maj
 = 
	`gss_vîify_mic
(&
mö
,

758 
Ωc
->
gss_c⁄ãxt
,

759 &
mesßge_buf„r
,

760 &
tokí_buf„r
,

761 
GSS_C_QOP_DEFAULT
);

762 i‡(
maj
) {

763 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "gss_vîify_mi¯Áûed f‹Åhêvîifõr",Ödu->
¥iv©e_d©a
);

769 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_SUCCESS
,Ödu->
zdr_decode_buf
,Ödu->
¥iv©e_d©a
);

771 
PROG_UNAVAIL
:

772 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "SîvîÑe•⁄ded: ProgømÇŸávaûabÀ",Ödu->
¥iv©e_d©a
);

774 
PROG_MISMATCH
:

775 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "SîvîÑe•⁄ded: Progøm vîsi⁄ mism©ch",Ödu->
¥iv©e_d©a
);

777 
PROC_UNAVAIL
:

778 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "SîvîÑe•⁄ded: Pro˚duªÇŸávaûabÀ",Ödu->
¥iv©e_d©a
);

780 
GARBAGE_ARGS
:

781 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "SîvîÑe•⁄ded: G¨bagê¨gumíts",Ödu->
¥iv©e_d©a
);

783 
SYSTEM_ERR
:

784 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "SîvîÑe•⁄ded: Sy°em Eº‹",Ödu->
¥iv©e_d©a
);

787 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "Unknow¿Ω¯ª•⁄£ from sîvî",Ödu->
¥iv©e_d©a
);

792 
	}
}

794 
	$Ωc_£nd_îr‹_ª∂y
(
Ωc_c⁄ãxt
 *
Ωc
,

795 
Ωc_msg
 *
ˇŒ
,

796 
ac˚±_°©
 
îr
,

797 
mö_vîs
, 
max_vîs
)

799 
Ωc_pdu
 *
pdu
;

800 
Ωc_msg
 
ªs
;

802 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

804 
	`mem£t
(&
ªs
, 0, (
Ωc_msg
));

805 
ªs
.
xid
 = 
ˇŒ
->xid;

806 
ªs
.
dúe˘i⁄
 = 
REPLY
;

807 
ªs
.
body
.
rbody
.
°©
 = 
MSG_ACCEPTED
;

808 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
mism©ch_öfo
.
low
 = 
mö_vîs
;

809 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
mism©ch_öfo
.
high
 = 
max_vîs
;

810 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
 = 
_nuŒ_auth
;

811 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
°©
 = 
îr
;

813 i‡(
Ωc
->
is_udp
) {

815 
	`mem˝y
(&
Ωc
->
udp_de°
, &Ωc->
udp_§c
, (rpc->udp_dest));

818 
pdu
 = 
	`Ωc_Æloˇã_ª∂y_pdu
(
Ωc
, &
ªs
, 0);

819 i‡(
pdu
 =
NULL
) {

820 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo sendÉrror_reply: %s",

821 
	`Ωc_gë_îr‹
(
Ωc
));

824 
	`Ωc_queue_pdu
(
Ωc
, 
pdu
);

827 
	}
}

829 
	$Ωc_£nd_ª∂y
(
Ωc_c⁄ãxt
 *
Ωc
,

830 
Ωc_msg
 *
ˇŒ
,

831 *
ª∂y
,

832 
zdΩroc_t
 
ícode_‚
,

833 
Æloc_höt
)

835 
Ωc_pdu
 *
pdu
;

836 
Ωc_msg
 
ªs
;

838 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

840 
	`mem£t
(&
ªs
, 0, (
Ωc_msg
));

841 
ªs
.
xid
 = 
ˇŒ
->xid;

842 
ªs
.
dúe˘i⁄
 = 
REPLY
;

843 
ªs
.
body
.
rbody
.
°©
 = 
MSG_ACCEPTED
;

844 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
vîf
 = 
_nuŒ_auth
;

845 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
°©
 = 
SUCCESS
;

847 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
whîe
 =Ñeply;

848 
ªs
.
body
.
rbody
.
ª∂y
.
¨ïly
.
ª∂y_d©a
.
ªsu…s
.
¥oc
 = 
ícode_‚
;

850 i‡(
Ωc
->
is_udp
) {

852 
	`mem˝y
(&
Ωc
->
udp_de°
, &Ωc->
udp_§c
, (rpc->udp_dest));

855 
pdu
 = 
	`Ωc_Æloˇã_ª∂y_pdu
(
Ωc
, &
ªs
, 
Æloc_höt
);

856 i‡(
pdu
 =
NULL
) {

857 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo sendÉrror_reply: %s",

858 
	`Ωc_gë_îr‹
(
Ωc
));

861 
	`Ωc_queue_pdu
(
Ωc
, 
pdu
);

864 
	}
}

866 
	$Ωc_¥o˚ss_ˇŒ
(
Ωc_c⁄ãxt
 *
Ωc
, 
ZDR
 *
zdr
)

868 
Ωc_msg
 
ˇŒ
;

869 
Ωc_ídpoöt
 *
ídpoöt
;

870 
i
, 
mö_vîsi⁄
 = 0, 
max_vîsi⁄
 = 0, 
found_¥ogøm
 = 0;

872 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

874 
	`mem£t
(&
ˇŒ
, 0, (
Ωc_msg
));

875 i‡(
	`zdr_ˇŒmsg
(
Ωc
, 
zdr
, &
ˇŒ
) == 0) {

876 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo decode CALL message. %s",

877 
	`Ωc_gë_îr‹
(
Ωc
));

878  
	`Ωc_£nd_îr‹_ª∂y
(
Ωc
, &
ˇŒ
, 
GARBAGE_ARGS
, 0, 0);

880 
ídpoöt
 = 
Ωc
->
ídpoöts
;Éndpoöt;Éndpoöàídpoöt->
√xt
) {

881 i‡(
ˇŒ
.
body
.
cbody
.
¥og
 =
ídpoöt
->
¥ogøm
) {

882 i‡(!
found_¥ogøm
) {

883 
mö_vîsi⁄
 = 
max_vîsi⁄
 = 
ídpoöt
->
vîsi⁄
;

885 i‡(
ídpoöt
->
vîsi⁄
 < 
mö_vîsi⁄
) {

886 
mö_vîsi⁄
 = 
ídpoöt
->
vîsi⁄
;

888 i‡(
ídpoöt
->
vîsi⁄
 > 
max_vîsi⁄
) {

889 
max_vîsi⁄
 = 
ídpoöt
->
vîsi⁄
;

891 
found_¥ogøm
 = 1;

892 i‡(
ˇŒ
.
body
.
cbody
.
vîs
 =
ídpoöt
->
vîsi⁄
) {

897 i‡(
ídpoöt
 =
NULL
) {

898 
	`Ωc_£t_îr‹
(
Ωc
, "NoÉndpoint found for CALL "

900 ()
ˇŒ
.
body
.
cbody
.
¥og
,

901 ()
ˇŒ
.
body
.
cbody
.
vîs
);

902 i‡(!
found_¥ogøm
) {

903  
	`Ωc_£nd_îr‹_ª∂y
(
Ωc
, &
ˇŒ
, 
PROG_UNAVAIL
,

906  
	`Ωc_£nd_îr‹_ª∂y
(
Ωc
, &
ˇŒ
, 
PROG_MISMATCH
,

907 
mö_vîsi⁄
, 
max_vîsi⁄
);

909 
i
 = 0; i < 
ídpoöt
->
num_¥ocs
; i++) {

910 i‡(
ídpoöt
->
¥ocs
[
i
].
¥oc
 =
ˇŒ
.
body
.
cbody
.proc) {

911 i‡(
ídpoöt
->
¥ocs
[
i
].
decode_buf_size
) {

912 
ˇŒ
.
body
.
cbody
.
¨gs
 = 
	`zdr_mÆloc
(
zdr
, 
ídpoöt
->
¥ocs
[
i
].
decode_buf_size
);

913 
	`mem£t
(
ˇŒ
.
body
.
cbody
.
¨gs
, 0, 
ídpoöt
->
¥ocs
[
i
].
decode_buf_size
);

915 i‡(!
ídpoöt
->
¥ocs
[
i
].
	`decode_‚
(
zdr
, 
ˇŒ
.
body
.
cbody
.
¨gs
)) {

916 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo unmarshall "

918  
	`Ωc_£nd_îr‹_ª∂y
(
Ωc
, &
ˇŒ
, 
GARBAGE_ARGS
, 0 ,0);

920  
ídpoöt
->
¥ocs
[
i
].
	`func
(
Ωc
, &
ˇŒ
,Éndpoöt->¥ocs[i].
›aque
);

924  
	`Ωc_£nd_îr‹_ª∂y
(
Ωc
, &
ˇŒ
, 
PROC_UNAVAIL
, 0 ,0);

925 
	}
}

927 
Ωc_pdu
 *
	$Ωc_föd_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
xid
)

929 
Ωc_pdu
 *
pdu
, *
¥ev_pdu
;

930 
Ωc_queue
 *
q
;

931 
hash
;

933 #ifde‡
HAVE_MULTITHREADING


934 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

935 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

940 
hash
 = 
	`Ωc_hash_xid
(
Ωc
,Ñpc->
rm_xid
[1]);

941 
q
 = &
Ωc
->
waôpdu
[
hash
];

945 
¥ev_pdu
 = 
NULL
;

946 
pdu
=
q
->
hód
;Ödu;Öduıdu->
√xt
) {

947 i‡(
pdu
->
xid
 !
Ωc
->
rm_xid
[1]) {

948 
¥ev_pdu
 = 
pdu
;

951 i‡(
Ωc
->
is_udp
 =0 ||Ñpc->
is_brﬂdˇ°
 == 0) {

953 i‡(
pdu
 =
q
->
hód
)

954 
q
->
hód
 = 
pdu
->
√xt
;

955 i‡(
pdu
 =
q
->
èû
)

956 
q
->
èû
 = 
¥ev_pdu
;

957 i‡(
¥ev_pdu
 !
NULL
)

958 
¥ev_pdu
->
√xt
 = 
pdu
->next;

959 
Ωc
->
waôpdu_Àn
--;

964 #ifde‡
HAVE_MULTITHREADING


965 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

966 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

970  
pdu
;

971 
	}
}

973 
	$Ωc_ˇn˚l_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_pdu
 *
pdu
)

978 
pdu
 = 
	`Ωc_föd_pdu
(
Ωc
,Ödu->
xid
);

979 i‡(
pdu
) {

980 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

984  -
ENOENT
;

985 
	}
}

987 
	$Ωc_¥o˚ss_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, *
buf
, 
size
)

989 
ZDR
 
zdr
;

991 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

993 
	`mem£t
(&
zdr
, 0, (
ZDR
));

995 
	`zdrmem_¸óã
(&
zdr
, 
buf
, 
size
, 
ZDR_DECODE
);

996 i‡(
Ωc
->
is_£rvî_c⁄ãxt
) {

997 
ªt
;

999 
ªt
 = 
	`Ωc_¥o˚ss_ˇŒ
(
Ωc
, &
zdr
);

1000 
	`zdr_de°roy
(&
zdr
);

1001  
ªt
;

1004 i‡(
	`Ωc_¥o˚ss_ª∂y
(
Ωc
, &
zdr
) != 0) {

1005 
	`Ωc_£t_îr‹
(
Ωc
, "rpc_procdess_reply failed");

1008 i‡(
Ωc
->
‰agmíts
 =
NULL
 &&Ñpc->
pdu
 &&Ñpc->pdu->
ö
.
buf
) {

1009 
	`mem˝y
(&
Ωc
->
pdu
->
zdr
, &zdr, (zdr));

1010 
Ωc
->
pdu
->
‰ì_zdr
 = 1;

1012 
	`zdr_de°roy
(&
zdr
);

1015 
	}
}

	@lib/socket.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
AROS


23 
	~"¨os_com∑t.h
"

26 #ifde‡
PS2_EE


27 
	~"ps2_com∑t.h
"

30 #ifde‡
PS3_PPU


31 
	~"ps3_com∑t.h
"

34 #ifde‡
WIN32


35 
	~<wö32/wö32_com∑t.h
>

38 #ifde‡
HAVE_ARPA_INET_H


39 
	~<¨∑/öë.h
>

42 #ifde‡
HAVE_POLL_H


43 
	~<pﬁl.h
>

46 #i‡
deföed
(
HAVE_SYS_UIO_H
Ë|| (deföed(
__APPLE__
Ë&& deföed(
__MACH__
))

47 
	~<sys/uio.h
>

50 #ifde‡
HAVE_UNISTD_H


51 
	~<uni°d.h
>

54 #ifde‡
HAVE_SYS_IOCTL_H


55 
	~<sys/io˘l.h
>

58 #ifde‡
HAVE_SYS_SOCKET_H


59 
	~<sys/sockë.h
>

62 #ifde‡
HAVE_NETINET_IN_H


63 
	~<√töë/ö.h
>

66 #ifde‡
HAVE_NETINET_TCP_H


67 
	~<√töë/t˝.h
>

70 #ifde‡
HAVE_NETDB_H


71 
	~<√tdb.h
>

74 #ifde‡
HAVE_SYS_FILIO_H


75 
	~<sys/fûio.h
>

78 #ifde‡
HAVE_SYS_SOCKIO_H


79 
	~<sys/sockio.h
>

82 
	~<°dio.h
>

83 
	~<°dlib.h
>

84 
	~<as£π.h
>

85 
	~<f˙é.h
>

86 
	~<°rög.h
>

87 
	~<î∫o.h
>

88 
	~<time.h
>

89 
	~<sys/ty≥s.h
>

90 
	~"libnfs-zdr.h
"

91 
	~"libnfs.h
"

92 
	~"libnfs-øw.h
"

93 
	~"libnfs-¥iv©e.h
"

94 
	~"¶i°.h
"

96 #ifde‡
WIN32


98 
	~"wö32_î∫owøµî.h
"

101 #i‚de‡
MSG_NOSIGNAL


102 #i‡(
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)Ë|| deföed(
PS2_EE
)

103 
	#MSG_NOSIGNAL
 0

	)

108 
Ωc_ªc⁄√˘_ªqueue
(
Ωc_c⁄ãxt
 *
Ωc
);

111 
	$¸óã_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

113 #ifde‡
SOCK_CLOEXEC


114 #ifde‡
__löux__


118 
fd
 = 
	`sockë
(
domaö
, 
ty≥
|
SOCK_CLOEXEC
, 
¥Ÿocﬁ
);

119 i‡(
fd
 >0 || 
î∫o
 !
EINVAL
)

120  
fd
;

124  
	`sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

125 
	}
}

128 
	$£t_n⁄blockög
(
fd
)

130 
v
 = 0;

131 #i‡
	`deföed
(
WIN32
)

132 
u_l⁄g
 
n⁄blockög
=1;

133 
v
 = 
	`io˘l
(
fd
, 
FIONBIO
, &
n⁄blockög
);

135 
v
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

136 
v
 = 
	`f˙é
(
fd
, 
F_SETFL
, v | 
O_NONBLOCK
);

138  
v
;

139 
	}
}

142 
	$£t_nﬁögî
(
fd
)

144 #i‡!
	`deföed
(
PS2_EE
)

145 
lögî
 
 g
;

146 
 g
.
l_⁄off
 = 1;

147 
 g
.
l_lögî
 = 0;

148 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
 g
, (lng));

150 
	}
}

153 
	$£t_böd_devi˚
(
fd
, *
i‚ame
)

155 
rc
 = 0;

157 #ifde‡
HAVE_SO_BINDTODEVICE


158 i‡(*
i‚ame
) {

159 
rc
 = 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
i‚ame
,

160 
	`°æí
(
i‚ame
));

164  
rc
;

165 
	}
}

167 #ifde‡
HAVE_NETINET_TCP_H


169 
	$£t_t˝_sock›t
(
sockfd
, 
›äame
, 
vÆue
)

171 
Àvñ
;

173 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
__sun
Ë|| (deföed(
__APPLE__
Ë&& deföed(
__MACH__
))

174 
¥Ÿ€¡
 *
buf
;

176 i‡((
buf
 = 
	`gë¥Ÿoby«me
("t˝")Ë!
NULL
)

177 
Àvñ
 = 
buf
->
p_¥Ÿo
;

181 
Àvñ
 = 
SOL_TCP
;

184  
	`£tsock›t
(
sockfd
, 
Àvñ
, 
›äame
, (*)&
vÆue
,

185 (
vÆue
));

186 
	}
}

189 
	$£t_kì∑live
(
sockfd
)

191 #ifde‡
SO_KEEPALIVE


192 c⁄° 
íabÀ_kì∑live
 = 1;

194 i‡(
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

195 &
íabÀ_kì∑live
, (enable_keepalive)) != 0) {

196 
	`LOG
("£tsock›t(SO_KEEPALIVEËÁûed: %s", 
	`°ªº‹
(
î∫o
));

208 #i‡
	`deföed
(
TCP_KEEPIDLE
)

211 c⁄° 
kìpidÀ_£cs
 = 60;

213 i‡(
	`£t_t˝_sock›t
(
sockfd
, 
TCP_KEEPIDLE
, 
kìpidÀ_£cs
) != 0) {

214 
	`LOG
("£tsock›t(TCP_KEEPIDLEËÁûed: %s", 
	`°ªº‹
(
î∫o
));

220 #i‡
	`deföed
(
TCP_KEEPINTVL
)

223 c⁄° 
kìpöãrvÆ_£cs
 = 60;

225 i‡(
	`£t_t˝_sock›t
(
sockfd
, 
TCP_KEEPINTVL
, 
kìpöãrvÆ_£cs
) != 0) {

226 
	`LOG
("£tsock›t(TCP_KEEPINTVLËÁûed: %s", 
	`°ªº‹
(
î∫o
));

232 #i‡
	`deföed
(
TCP_KEEPCNT
)

235 c⁄° 
kìp˙t
 = 3;

237 i‡(
	`£t_t˝_sock›t
(
sockfd
, 
TCP_KEEPCNT
, 
kìp˙t
) != 0) {

238 
	`LOG
("£tsock›t(TCP_KEEPCNTËÁûed: %s", 
	`°ªº‹
(
î∫o
));

245 
	}
}

249 
	$Ωc_gë_fd
(
Ωc_c⁄ãxt
 *
Ωc
)

251 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

253 i‡(
Ωc
->
ﬁd_fd
) {

254  
Ωc
->
ﬁd_fd
;

257  
Ωc
->
fd
;

258 
	}
}

261 
	$Ωc_has_queue
(
Ωc_queue
 *
q
)

263  
q
->
hód
 !
NULL
;

264 
	}
}

267 
	$Ωc_which_evíts
(
Ωc_c⁄ãxt
 *
Ωc
)

269 
evíts
;

271 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

273 
evíts
 = 
Ωc
->
is_c⁄√˘ed
 ? 
POLLIN
 : 
POLLOUT
;

275 i‡(
Ωc
->
is_udp
 != 0) {

277  
POLLIN
;

280 #ifde‡
HAVE_MULTITHREADING


281 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

282 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

285 i‡(
	`Ωc_has_queue
(&
Ωc
->
outqueue
)) {

286 
evíts
 |
POLLOUT
;

288 #ifde‡
HAVE_MULTITHREADING


289 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

290 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

293  
evíts
;

294 
	}
}

297 
	$Ωc_wrôe_to_sockë
(
Ωc_c⁄ãxt
 *
Ωc
)

299 
Ωc_pdu
 *
pdu
;

300 
iovec
 
iov
[
RPC_MAX_VECTORS
];

301 
ªt
 = 0;

303 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

305 i‡(
Ωc
->
fd
 == -1) {

306 
	`Ωc_£t_îr‹
(
Ωc
, "tryingÅo write butÇot connected");

310 #ifde‡
HAVE_MULTITHREADING


311 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

312 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

317 (
Ωc
->
max_waôpdu_Àn
 == 0 ||

318 
Ωc
->
max_waôpdu_Àn
 >Ñpc->
waôpdu_Àn
) &&

319 (
pdu
 = 
Ωc
->
outqueue
.
hód
Ë!
NULL
) {

320 
niov
 = 0;

321 
uöt32_t
 
num_pdus
 = 0;

322 *
œ°_buf
 = 
NULL
;

323 
ssize_t
 
cou¡
;

326 
size_t
 
num_d⁄e
 = 
pdu
->
out
.num_done;

327 
pdu_niov
 = 
pdu
->
out
.
niov
;

328 
i
;

330 
i
 = 0; i < 
pdu_niov
; i++) {

331 *
buf
 = 
pdu
->
out
.
iov
[
i
].buf;

332 
size_t
 
Àn
 = 
pdu
->
out
.
iov
[
i
].len;

333 i‡(
num_d⁄e
 >
Àn
) {

334 
num_d⁄e
 -
Àn
;

337 
buf
 +
num_d⁄e
;

338 
Àn
 -
num_d⁄e
;

339 
num_d⁄e
 = 0;

342 i‡(
œ°_buf
 !
buf
) {

343 
iov
[
niov
].
iov_ba£
 = 
buf
;

344 
iov
[
niov
].
iov_Àn
 = 
Àn
;

345 
niov
++;

346 i‡(
niov
 >
RPC_MAX_VECTORS
)

348 
œ°_buf
 = (
buf
 + 
Àn
);

350 
iov
[
niov
 - 1].
iov_Àn
 +
Àn
;

351 
œ°_buf
 +
Àn
;

355 
num_pdus
++;

356 
pdu
 =Ödu->
√xt
;

357 } (
Ωc
->
max_waôpdu_Àn
 == 0 ||

358 
Ωc
->
max_waôpdu_Àn
 > (Ωc->
waôpdu_Àn
 + 
num_pdus
)) &&

359 
pdu
 !
NULL
 && 
niov
 < 
RPC_MAX_VECTORS
);

361 
cou¡
 = 
	`wrôev
(
Ωc
->
fd
, 
iov
, 
niov
);

362 i‡(
cou¡
 == -1) {

363 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

364 
ªt
 = 0;

365 
föished
;

368 
	`Ωc_£t_îr‹_locked
(
Ωc
, "Error when writingÅo "

369 "sockë :%d %s", 
î∫o
,

370 
	`Ωc_gë_îr‹
(
Ωc
));

371 
ªt
 = -1;

372 
föished
;

376 
cou¡
 > 0 && (
pdu
 = 
Ωc
->
outqueue
.
hód
Ë!
NULL
) {

377 
size_t
 
ªmaöög
 = (
pdu
->
out
.
tŸÆ_size
 -Ödu->out.
num_d⁄e
);

378 i‡(
ªmaöög
 <
cou¡
) {

379 
hash
;

381 
cou¡
 -
ªmaöög
;

383 
pdu
->
out
.
num_d⁄e
 =Ödu->out.
tŸÆ_size
;

385 
Ωc
->
outqueue
.
hód
 = 
pdu
->
√xt
;

386 i‡(
pdu
->
√xt
 =
NULL
)

387 
Ωc
->
outqueue
.
èû
 = 
NULL
;

389 i‡(
pdu
->
Êags
 & 
PDU_DISCARD_AFTER_SENDING
) {

390 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

391 
ªt
 = 0;

392 
föished
;

395 
hash
 = 
	`Ωc_hash_xid
(
Ωc
, 
pdu
->
xid
);

396 
	`Ωc_íqueue
(&
Ωc
->
waôpdu
[
hash
], 
pdu
);

397 
Ωc
->
waôpdu_Àn
++;

400 
pdu
->
out
.
num_d⁄e
 +
cou¡
;

406 
föished
:

407 #ifde‡
HAVE_MULTITHREADING


408 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

409 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

412  
ªt
;

413 
	}
}

415 
	$adju°_öbuf
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 
pdu_size
)

417 *
buf
;

419 i‡(
Ωc
->
öbuf_size
 < 
pdu_size
) {

420 i‡(
pdu_size
 > 
NFS_MAX_XFER_SIZE
 + 4096) {

421 
	`Ωc_£t_îr‹
(
Ωc
, "Incoming PDUÉxceedsÜimit of %d "

422 "byãs.", 
NFS_MAX_XFER_SIZE
 + 4096);

425 
buf
 = 
	`ªÆloc
(
Ωc
->
öbuf
, 
pdu_size
);

426 i‡(
buf
 =
NULL
) {

427 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocate buffer of %d "

429 "sockë.", ()
pdu_size
, 
î∫o
);

432 
Ωc
->
öbuf_size
 = 
pdu_size
;

433 
Ωc
->
öbuf
 = 
buf
;

436 
	}
}

438 *
	$Ωc_ªas£mbÀ_pdu
(
Ωc_c⁄ãxt
 *
Ωc
, 
uöt32_t
 *
pdu_size
)

440 
Ωc_‰agmít
 *
‰agmít
;

441 *
ªasbuf
 = 
NULL
, *
±r
;

442 
uöt32_t
 
size
;

444 
size
 = 
Ωc
->
öpos
;

445 
‰agmít
 = 
Ωc
->
‰agmíts
; føgmít; føgmíà‰agmít->
√xt
) {

446 
size
 +
‰agmít
->size;

447 i‡(
size
 < 
‰agmít
->size) {

448 
	`Ωc_£t_îr‹
(
Ωc
, "FragmentsÅooÜarge");

449 
	`Ωc_‰ì_Æl_‰agmíts
(
Ωc
);

450  
NULL
;

454 
ªasbuf
 = 
	`mÆloc
(
size
);

455 i‡(
ªasbuf
 =
NULL
) {

456 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoÑeassemble PDU");

457 
	`Ωc_‰ì_Æl_‰agmíts
(
Ωc
);

458  
NULL
;

460 
±r
 = 
ªasbuf
;

461 
‰agmít
 = 
Ωc
->
‰agmíts
; føgmít; føgmíà‰agmít->
√xt
) {

462 
	`mem˝y
(
±r
, 
‰agmít
->
d©a
, føgmít->
size
);

463 
±r
 +
‰agmít
->
size
;

465 
	`mem˝y
(
±r
, 
Ωc
->
öbuf
,Ñpc->
öpos
);

467 *
pdu_size
 = 
size
;

468  
ªasbuf
;

469 
	}
}

471 
	$Ωc_föished_pdu
(
Ωc_c⁄ãxt
 *
Ωc
)

473 i‡(
Ωc
->
pdu
 &&Ñpc->pdu->
‰ì_pdu
) {

474 
Ωc
->
pdu
->
	`cb
‘pc, 
RPC_STATUS_SUCCESS
,Ñpc->pdu->
zdr_decode_buf
,Ñpc->pdu->
¥iv©e_d©a
);

476 i‡(
Ωc
->
pdu
 &&Ñpc->pdu->
‰ì_zdr
) {

477 
	`zdr_de°roy
(&
Ωc
->
pdu
->
zdr
);

479 
Ωc
->
°©e
 = 
READ_RM
;

480 
Ωc
->
öpos
 = 0;

481 i‡(
Ωc
->
is_udp
 =0 ||Ñpc->
is_brﬂdˇ°
 == 0) {

482 
	`Ωc_‰ì_pdu
(
Ωc
,Ñpc->
pdu
);

483 
Ωc
->
pdu
 = 
NULL
;

485 
	}
}

487 
	#MAX_UDP_SIZE
 65536

	)

488 
	#MAX_FRAGMENT_SIZE
 8*1024*1024

	)

490 
	$Ωc_ªad_‰om_sockë
(
Ωc_c⁄ãxt
 *
Ωc
)

492 
ssize_t
 
cou¡
;

493 
pos
;

495 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

497 i‡(
Ωc
->
is_udp
) {

498 
sockÀn_t
 
sockÀn
 = (
Ωc
->
udp_§c
);

499 *
buf
 = 
NULL
;

501 
buf
 = 
	`mÆloc
(
MAX_UDP_SIZE
);

502 i‡(
buf
 =
NULL
) {

503 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo malloc buffer for "

507 
cou¡
 = 
	`ªcv‰om
(
Ωc
->
fd
, 
buf
, 
MAX_UDP_SIZE
, 
MSG_DONTWAIT
,

508 (
sockaddr
 *)&
Ωc
->
udp_§c
, &
sockÀn
);

509 i‡(
cou¡
 == -1) {

510 
	`‰ì
(
buf
);

511 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

514 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÑecvfrom: %s",

515 
	`°ªº‹
(
î∫o
));

518 
Ωc
->
rm_xid
[0] = 
cou¡
;

519 
Ωc
->
rm_xid
[1] = 
	`¡ohl
(*(
uöt32_t
 *)&
buf
[0]);

520 
Ωc
->
pdu
 = 
	`Ωc_föd_pdu
‘pc, 
	`¡ohl
(*(
uöt32_t
 *)&
buf
[0]));

521 i‡(
Ωc
->
pdu
 =
NULL
) {

522 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo match incoming PDU/XID."

524 
	`‰ì
(
buf
);

527 i‡(
	`Ωc_¥o˚ss_pdu
(
Ωc
, 
buf
, 
cou¡
) != 0) {

528 
	`Ωc_£t_îr‹
(
Ωc
, "Invalid/garbageÖduÑeceived from "

530 
	`‰ì
(
buf
);

533 
	`‰ì
(
buf
);

538 i‡(
Ωc
->
öpos
 == 0) {

539 
Ωc
->
°©e
) {

540 
READ_RM
:

546 
Ωc
->
pdu_size
 = 8;

547 
Ωc
->
buf
 = (*)&Ωc->
rm_xid
[0];

548 
Ωc
->
pdu
 = 
NULL
;

550 
READ_PAYLOAD
:

552 
Ωc
->
öpos
 = 4;

553 
Ωc
->
pdu_size
 =Ñpc->
rm_xid
[0];

554 
Ωc
->
buf
 =Ñpc->
öbuf
 +Ñpc->
öpos
;

567 i‡(
Ωc
->
pdu
 &&Ñpc->pdu->
ö
.
buf
 &&Ñpc->
pdu_size
 > 1024) {

568 
Ωc
->
pdu_size
 = 1024;

571 
READ_UNKNOWN
:

572 
READ_FRAGMENT
:

574 
Ωc
->
öpos
 = 4;

575 
Ωc
->
pdu_size
 =Ñpc->
rm_xid
[0];

576 
Ωc
->
buf
 =Ñpc->
öbuf
 +Ñpc->
öpos
;

578 
READ_IOVEC
:

579 
Ωc
->
buf
 = &Ωc->
pdu
->
ö
.buf[Ωc->pdu->
öpos
];

580 
Ωc
->
pdu_size
 =Ñpc->
pdu
->
ªad_cou¡
;

582 
READ_PADDING
:

587 
Ωc
->
pdu_size
 =Ñpc->
rm_xid
[0];

588 
Ωc
->
buf
 =Ñpc->
öbuf
;

593 
cou¡
 = 
Ωc
->
pdu_size
 -Ñpc->
öpos
;

598 i‡(
Ωc
->
°©e
 =
READ_PADDING
) {

599 
Ωc
->
buf
 =Ñpc->
öbuf
;

600 i‡(
cou¡
 > 
Ωc
->
öbuf_size
) {

601 
cou¡
 = 
Ωc
->
öbuf_size
;

604 
cou¡
 = 
	`ªcv
(
Ωc
->
fd
,Ñpc->
buf
, cou¡, 
MSG_DONTWAIT
);

605 i‡(
cou¡
 < 0) {

610 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

613 
	`Ωc_£t_îr‹
(
Ωc
, "Read from socket(%d) failed,Érrno:%d (%s). "

614 "Closög sockë.", 
Ωc
->
fd
, 
î∫o
, 
	`°ªº‹
(errno));

615 
	`RPC_LOG
(
Ωc
, 2, "Read from socket(%d) failed,Érrno:%d (%s). "

616 "Closög sockë.", 
Ωc
->
fd
, 
î∫o
, 
	`°ªº‹
(errno));

619 i‡(
cou¡
 == 0) {

620 
	`Ωc_£t_îr‹
(
Ωc
, "Remote side closed connection for socket fd %d",

621 
Ωc
->
fd
);

622 
	`RPC_LOG
(
Ωc
, 2, "Remote side closed connection for socket fd %d",

623 
Ωc
->
fd
);

627 
Ωc
->
öpos
 +
cou¡
;

628 
Ωc
->
buf
 +
cou¡
;

630 i‡(
Ωc
->
öpos
 =Ωc->
pdu_size
) {

631 
Ωc
->
°©e
) {

632 
READ_RM
:

634 
Ωc
->
rm_xid
[0] = 
	`¡ohl
(rpc->rm_xid[0]);

635 i‡(
Ωc
->
rm_xid
[0] & 0x80000000) {

636 
Ωc
->
°©e
 = 
READ_PAYLOAD
;

638 
	`Ωc_£t_îr‹
(
Ωc
, "Fragment supportÇot yet working");

639 
Ωc
->
°©e
 = 
READ_FRAGMENT
;

642 
Ωc
->
rm_xid
[0] &= 0x7fffffff;

643 i‡(
Ωc
->
rm_xid
[0] < 8 ||Ñpc->rm_xid[0] > 
MAX_FRAGMENT_SIZE
) {

644 
	`Ωc_£t_îr‹
(
Ωc
, "InvalidÑecordmarker size");

647 
	`adju°_öbuf
(
Ωc
,Ñpc->
rm_xid
[0]);

649 
	`mem˝y
(
Ωc
->
öbuf
, &Ωc->
rm_xid
[1], 4);

654 
Ωc
->
öpos
 = 0;

655 
Ωc
->
rm_xid
[1] = 
	`¡ohl
(rpc->rm_xid[1]);

656 i‡(!
Ωc
->
is_£rvî_c⁄ãxt
) {

657 
Ωc
->
pdu
 = 
	`Ωc_föd_pdu
‘pc,Ñpc->
rm_xid
[1]);

661 i‡(
Ωc
->
pdu
 =
NULL
) {

662 
Ωc
->
°©e
 = 
READ_UNKNOWN
;

667 
READ_FRAGMENT
:

668 i‡(
	`Ωc_add_‰agmít
(
Ωc
,Ñpc->
öbuf
,Ñpc->
öpos
) != 0) {

669 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue fragment forÑeassembly.");

672 
Ωc
->
°©e
 = 
READ_RM
;

673 
Ωc
->
öpos
 = 0;

675 
READ_UNKNOWN
:

676 
Ωc
->
°©e
 = 
READ_RM
;

677 
Ωc
->
öpos
 = 0;

679 
READ_PAYLOAD
:

680 i‡(
Ωc
->
‰agmíts
) {

681 
Ωc
->
buf
 = 
	`Ωc_ªas£mbÀ_pdu
‘pc, &Ωc->
pdu_size
);

682 i‡(
Ωc
->
buf
 =
NULL
) {

686 
Ωc
->
buf
 =Ñpc->
öbuf
;

688 i‡(
	`Ωc_¥o˚ss_pdu
(
Ωc
,Ñpc->
buf
,Ñpc->
pdu_size
) != 0) {

689 
	`Ωc_£t_îr‹
(
Ωc
, "Invalid/garbageÖdu"

695 i‡(
Ωc
->
pdu
 &&Ñpc->pdu->
‰ì_zdr
) {

696 
tmp_cou¡
;

699 i‡(!
	`zdr_uöt32_t
(&
Ωc
->
pdu
->
zdr
, &Ωc->pdu->
ªad_cou¡
))

701 
pos
 = 
	`zdr_gëpos
(&
Ωc
->
pdu
->
zdr
);

702 
cou¡
 = 
Ωc
->
öpos
 - 
pos
;

703 i‡(
Ωc
->
pdu
->
ªad_cou¡
 >Ñpc->pdu->
ªque°ed_ªad_cou¡
) {

704 
Ωc
->
pdu
->
ªad_cou¡
 =Ñpc->pdu->
ªque°ed_ªad_cou¡
;

706 i‡(
cou¡
 > 
Ωc
->
pdu
->
ªad_cou¡
) {

707 
cou¡
 = 
Ωc
->
pdu
->
ªad_cou¡
;

709 i‡(
Ωc
->
pdu
->
ö
.
Àn
 >Ñpc->pdu->
ªad_cou¡
) {

711 
Ωc
->
pdu
->
ö
.
Àn
 =Ñpc->pdu->
ªad_cou¡
;

713 
tmp_cou¡
 = 
cou¡
;

714 i‡(
Ωc
->
pdu
->
ö
.
Àn
 <
cou¡
) {

715 
tmp_cou¡
 = 
Ωc
->
pdu
->
ö
.
Àn
;

717 
	`mem˝y
(
Ωc
->
pdu
->
ö
.
buf
, &Ωc->
öbuf
[
pos
], 
tmp_cou¡
);

718 i‡(
Ωc
->
pdu
->
ö
.
Àn
 <
cou¡
) {

721 
Ωc
->
pdu
->
öpos
 = 
cou¡
;

722 
Ωc
->
pdu
->
ªad_cou¡
 -
cou¡
;

723 
Ωc
->
°©e
 = 
READ_IOVEC
;

724 
Ωc
->
öpos
 = 0;

725 
Ωc
->
rm_xid
[0] -
pos
 + 
cou¡
;

729 i‡(
Ωc
->
‰agmíts
) {

730 
	`‰ì
(
Ωc
->
buf
);

731 
Ωc
->
buf
 = 
NULL
;

732 
	`Ωc_‰ì_Æl_‰agmíts
(
Ωc
);

734 
	`Ωc_föished_pdu
(
Ωc
);

736 
READ_IOVEC
:

737 
Ωc
->
pdu
->
öpos
 +Ωc->
pdu_size
;

738 
Ωc
->
pdu
->
ªad_cou¡
 -Ωc->
pdu_size
;

739 
Ωc
->
rm_xid
[0] -Ωc->
pdu_size
;

740 i‡(!
Ωc
->
rm_xid
[0]) {

741 
	`Ωc_föished_pdu
(
Ωc
);

744 
Ωc
->
°©e
 = 
READ_PADDING
;

745 
Ωc
->
öpos
 = 0;

747 
READ_PADDING
:

748 
	`Ωc_föished_pdu
(
Ωc
);

755 
	}
}

758 
	$maybe_ˇŒ_c⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
)

760 
Ωc_cb
 
tmp_cb
 = 
Ωc
->
c⁄√˘_cb
;

762 i‡(
Ωc
->
c⁄√˘_cb
 =
NULL
) {

766 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

767 
	`tmp_cb
(
Ωc
, 
°©us
,Ñpc->
îr‹_°rög
,Ñpc->
c⁄√˘_d©a
);

768 
	}
}

776 
	$Ωc_timeout_sˇn
(
Ωc_c⁄ãxt
 *
Ωc
)

778 
Ωc_pdu
 *
pdu
;

779 
Ωc_pdu
 *
√xt_pdu
;

780 
uöt64_t
 
t
 = 
	`Ωc_cuºít_time
();

781 
i
;

783 c⁄° 
œ°_Ωc_m£cs
 =

784 ((
Ωc
->
œ°_suc˚ssful_Ωc_ª•⁄£
 == 0) ? -1 :

785 (
t
 - 
Ωc
->
œ°_suc˚ssful_Ωc_ª•⁄£
));

786 
boﬁ_t
 
√ed_ªc⁄√˘
 = 
FALSE
;

791 i‡(
t
 <
Ωc
->
œ°_timeout_sˇn
 + 1000) {

794 
Ωc
->
œ°_timeout_sˇn
 = 
t
;

796 #ifde‡
HAVE_MULTITHREADING


797 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

798 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

801 
pdu
 = 
Ωc
->
outqueue
.
hód
;Ödu;Ödu = 
√xt_pdu
) {

802 
√xt_pdu
 = 
pdu
->
√xt
;

804 i‡(
pdu
->
timeout
 == 0) {

808 i‡(
t
 < 
pdu
->
timeout
) {

818 i‡(!
pdu
->
do_nŸ_ªåy
 && 
Ωc
->
ªå™s
 > 0) {

820 
pdu
->
timeout
 = 0;

822 i‡(
t
 >
pdu
->
maj‹_timeout
) {

824 
pdu
->
maj‹_timeout
 = 0;

825 i‡(!
pdu
->
¢r_logged
) {

827 
pdu
->
¢r_logged
 = 
TRUE
;

828 
	`RPC_LOG
(
Ωc
, 1, "[pdu %p] Server %sÇot "

830 
pdu
, 
Ωc
->
£rvî
);

832 i‡(!
√ed_ªc⁄√˘
) {

833 
√ed_ªc⁄√˘
 = (
œ°_Ωc_m£cs
 > 
Ωc
->
timeout
);

837 
	`pdu_£t_timeout
(
Ωc
, 
pdu
, 
t
);

839 
	`LIBNFS_LIST_REMOVE
(&
Ωc
->
outqueue
.
hód
, 
pdu
);

840 i‡(!
Ωc
->
outqueue
.
hód
) {

841 
Ωc
->
outqueue
.
èû
 = 
NULL
;

843 
	`Ωc_£t_îr‹_locked
(
Ωc
, "commandÅimed out");

844 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_TIMEOUT
,

845 
NULL
, 
pdu
->
¥iv©e_d©a
);

846 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

849 
i
 = 0; i < 
Ωc
->
num_hashes
; i++) {

850 
Ωc_queue
 *
q
;

852 
q
 = &
Ωc
->
waôpdu
[
i
];

853 
pdu
 = 
q
->
hód
;Ödu;Ödu = 
√xt_pdu
) {

854 
√xt_pdu
 = 
pdu
->
√xt
;

856 i‡(
pdu
->
timeout
 == 0) {

860 i‡(
t
 < 
pdu
->
timeout
) {

864 
	`LIBNFS_LIST_REMOVE
(&
q
->
hód
, 
pdu
);

865 i‡(!
q
->
hód
) {

866 
q
->
èû
 = 
NULL
;

868 
Ωc
->
waôpdu_Àn
--;

875 i‡(!
pdu
->
do_nŸ_ªåy
 && 
Ωc
->
ªå™s
 > 0) {

877 
pdu
->
timeout
 = 0;

879 i‡(
t
 >
pdu
->
maj‹_timeout
) {

881 
pdu
->
maj‹_timeout
 = 0;

882 i‡(!
pdu
->
¢r_logged
) {

884 
pdu
->
¢r_logged
 = 
TRUE
;

885 
	`RPC_LOG
(
Ωc
, 1, "[pdu %p] Server %s "

887 
pdu
, 
Ωc
->
£rvî
);

889 i‡(!
√ed_ªc⁄√˘
) {

890 
√ed_ªc⁄√˘
 = (
œ°_Ωc_m£cs
 > 
Ωc
->
timeout
);

894 
	`pdu_£t_timeout
(
Ωc
, 
pdu
, 
t
);

897 
	`Ωc_ªtu∫_to_queue
(&
Ωc
->
outqueue
, 
pdu
);

899 
pdu
->
out
.
num_d⁄e
 = 0;

903 
	`Ωc_£t_îr‹_locked
(
Ωc
, "commandÅimed out");

904 
pdu
->
	`cb
(
Ωc
, 
RPC_STATUS_TIMEOUT
,

905 
NULL
, 
pdu
->
¥iv©e_d©a
);

906 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

910 #ifde‡
HAVE_MULTITHREADING


911 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

912 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

916 i‡(
√ed_ªc⁄√˘
) {

917 
	`RPC_LOG
(
Ωc
, 2, "rpc_timeout_scan: RecoveryáctionÇeeded for fd %d",

918 
Ωc
->
fd
);

921  (
√ed_ªc⁄√˘
 ? -1 : 0);

922 
	}
}

925 
	$Ωc_£rvi˚
(
Ωc_c⁄ãxt
 *
Ωc
, 
ªvíts
)

927 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

935 i‡(
	`Ωc_timeout_sˇn
(
Ωc
) != 0) {

936  
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

939 i‡(
ªvíts
 =-1 ||Ñevít†& (
POLLERR
|
POLLHUP
)) {

940 i‡(
ªvíts
 !-1 &&Ñevít†& 
POLLERR
) {

942 #ifde‡
WIN32


943 
îr
 = 0;

945 
îr
 = 0;

947 
sockÀn_t
 
îr_size
 = (
îr
);

949 i‡(
	`gësock›t
(
Ωc
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

950 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

951 i‡(
îr
 == 0) {

952 
îr
 = 
î∫o
;

954 
	`Ωc_£t_îr‹
(
Ωc
, "rpc_service: socketÉrror "

956 
	`°ªº‹
(
îr
),Érr);

958 
	`Ωc_£t_îr‹
(
Ωc
, "rpc_service: POLLERR, "

962 i‡(
ªvíts
 !-1 &&Ñevít†& 
POLLHUP
) {

963 
	`Ωc_£t_îr‹
(
Ωc
, "Socket failed with POLLHUP");

965 i‡(
Ωc
->
auto_ªc⁄√˘
) {

966  
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

968 
	`maybe_ˇŒ_c⁄√˘_cb
(
Ωc
, 
RPC_STATUS_ERROR
);

973 i‡(
Ωc
->
is_c⁄√˘ed
 =0 &&Ñpc->
fd
 !-1 && (
ªvíts
 & 
POLLOUT
)) {

974 
îr
 = 0;

975 
sockÀn_t
 
îr_size
 = (
îr
);

977 i‡(
	`gësock›t
(
Ωc
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

978 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

979 i‡(
îr
 == 0) {

980 
îr
 = 
î∫o
;

982 
	`Ωc_£t_îr‹
(
Ωc
, "rpc_service: socketÉrror "

984 
	`°ªº‹
(
îr
),Érr);

985 
	`maybe_ˇŒ_c⁄√˘_cb
(
Ωc
, 
RPC_STATUS_ERROR
);

989 
Ωc
->
is_c⁄√˘ed
 = 1;

990 
	`RPC_LOG
(
Ωc
, 2, "c⁄√˘i⁄É°ablished o¿fd %d",Ñpc->
fd
);

991 
	`maybe_ˇŒ_c⁄√˘_cb
(
Ωc
, 
RPC_STATUS_SUCCESS
);

995 #ifde‡
HAVE_TLS


1007 i‡(
Ωc
->
és_c⁄ãxt
.
°©e
 =
TLS_HANDSHAKE_IN_PROGRESS
 &&

1008 (
ªvíts
 & (
POLLOUT
 | 
POLLIN
))) {

1009 
és_cb_d©a
 *
d©a
 = &
Ωc
->
és_c⁄ãxt
.data;

1012 
	`as£π
(
Ωc
->
u£_és
);

1014 
Ωc
->
és_c⁄ãxt
.
°©e
 = 
	`do_és_h™dshake
(rpc);

1016 
Ωc
->
és_c⁄ãxt
.
°©e
) {

1017 
TLS_HANDSHAKE_IN_PROGRESS
:

1018 
	`RPC_LOG
(
Ωc
, 2, "do_tls_handshake()Ñeturned "

1020 
Ωc
->
fd
);

1022 
TLS_HANDSHAKE_COMPLETED
:

1023 
	`RPC_LOG
(
Ωc
, 2, "do_tls_handshake()Ñeturned "

1025 
Ωc
->
fd
);

1026 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_SUCCESS
, 
NULL
, d©a->
¥iv©e_d©a
);

1028 
TLS_HANDSHAKE_FAILED
:

1029 
	`RPC_LOG
(
Ωc
, 1, "do_tls_handshake()Ñeturned "

1031 
Ωc
->
fd
);

1032 
d©a
->
	`cb
(
Ωc
, 
RPC_STATUS_ERROR
, "TLS_HANDSHAKE_FAILED",

1033 
d©a
->
¥iv©e_d©a
);

1037 
	`as£π
(0);

1044 i‡(
ªvíts
 & 
POLLIN
) {

1045 i‡(
	`Ωc_ªad_‰om_sockë
(
Ωc
) != 0) {

1046 i‡(
Ωc
->
is_£rvî_c⁄ãxt
) {

1049 #ifde‡
HAVE_TLS


1064  
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

1069 #ifde‡
HAVE_TLS


1076 i‡(
Ωc
->
u£_és
 && (Ωc->
és_c⁄ãxt
.
°©e
 !
TLS_HANDSHAKE_COMPLETED
)) {

1077 
	`RPC_LOG
(
Ωc
, 2, "TLS handshake state %d on fd %d, skipping socket write!",

1078 
Ωc
->
és_c⁄ãxt
.
°©e
,Ñpc->
fd
);

1083 i‡(
ªvíts
 & 
POLLOUT
 && 
	`Ωc_has_queue
(&
Ωc
->
outqueue
)) {

1084 i‡(
	`Ωc_wrôe_to_sockë
(
Ωc
) != 0) {

1085 i‡(
Ωc
->
is_£rvî_c⁄ãxt
) {

1088  
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

1094 
	}
}

1110 
	$Ωc_£t_ªsûõncy
(
Ωc_c⁄ãxt
 *
Ωc
,

1111 
num_t˝_ªc⁄√˘
,

1112 
timeout_m£cs
,

1113 
ªå™s
)

1115 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1118 i‡(
Ωc
->
is_£rvî_c⁄ãxt
) {

1122 
	`as£π
(
ªå™s
 >= 0);

1127 
	`as£π
(
ªå™s
 =0 || 
timeout_m£cs
 > 0);

1129 
Ωc
->
auto_ªc⁄√˘
 = 
num_t˝_ªc⁄√˘
;

1130 
Ωc
->
timeout
 = 
timeout_m£cs
;

1131 
Ωc
->
ªå™s
 =Ñetrans;

1132 
	}
}

1136 
	$Ωc_£t_t˝_syn˙t
(
Ωc_c⁄ãxt
 *
Ωc
, 
v
)

1138 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1140 
Ωc
->
t˝_syn˙t
 = 
v
;

1141 
	}
}

1143 #i‚de‡
TCP_SYNCNT


1144 
	#TCP_SYNCNT
 7

	)

1148 
	$Ωc_c⁄√˘_sockaddr_async
(
Ωc_c⁄ãxt
 *
Ωc
)

1150 
sockaddr_°‹age
 *
s
 = &
Ωc
->s;

1151 
sockÀn_t
 
socksize
;

1153 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1155 
s
->
ss_Ámûy
) {

1156 
AF_INET
:

1157 
socksize
 = (
sockaddr_ö
);

1158 
Ωc
->
fd
 = 
	`¸óã_sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

1159 i‡(
	`£t_böd_devi˚
(
Ωc
->
fd
,Ñpc->
i‚ame
) != 0) {

1160 
	`Ωc_£t_îr‹
 (
Ωc
, "FailedÅo bindÅo interface");

1164 #ifde‡
HAVE_NETINET_TCP_H


1165 i‡(
Ωc
->
t˝_syn˙t
 !
RPC_PARAM_UNDEFINED
) {

1166 
	`£t_t˝_sock›t
(
Ωc
->
fd
, 
TCP_SYNCNT
,Ñpc->
t˝_syn˙t
);

1170 
AF_INET6
:

1171 
socksize
 = (
sockaddr_ö6
);

1172 
Ωc
->
fd
 = 
	`¸óã_sockë
(
AF_INET6
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

1173 i‡(
	`£t_böd_devi˚
(
Ωc
->
fd
,Ñpc->
i‚ame
) != 0) {

1174 
	`Ωc_£t_îr‹
 (
Ωc
, "FailedÅo bindÅo interface");

1178 #ifde‡
HAVE_NETINET_TCP_H


1179 i‡(
Ωc
->
t˝_syn˙t
 !
RPC_PARAM_UNDEFINED
) {

1180 
	`£t_t˝_sock›t
(
Ωc
->
fd
, 
TCP_SYNCNT
,Ñpc->
t˝_syn˙t
);

1185 
	`Ωc_£t_îr‹
(
Ωc
, "C™ÇŸ h™dÀ AF_FAMILY:%d", 
s
->
ss_Ámûy
);

1189 i‡(
Ωc
->
fd
 == -1) {

1190 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo open socket");

1194 i‡(
Ωc
->
ﬁd_fd
) {

1195 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
PS3_PPU
Ë&& !deföed(
PS2_EE
)

1196 i‡(
	`dup2
(
Ωc
->
fd
,Ñpc->
ﬁd_fd
) == -1) {

1197 
	`Ωc_£t_îr‹
(
Ωc
, "dup2(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

1200 
	`˛o£
(
Ωc
->
fd
);

1201 
Ωc
->
fd
 =Ñpc->
ﬁd_fd
;

1205 
	`˛o£
(
Ωc
->
ﬁd_fd
);

1206 
Ωc
->
ﬁd_fd
 = 0;

1229 
sockaddr_°‹age
 
ss
;

1230 
sockaddr_ö
 *
sö
;

1231 #i‡!
	`deföed
(
PS3_PPU
Ë&& !deföed(
PS2_EE
)

1232 
sockaddr_ö6
 *
sö6
;

1234 
p‹tOfs
 = 0;

1235 c⁄° 
fú°P‹t
 = 512;

1236 c⁄° 
p‹tCou¡
 = 
IPPORT_RESERVED
 - 
fú°P‹t
;

1237 
°¨tOfs
, 
p‹t
, 
rc
;

1239 
sö
 = (
sockaddr_ö
 *)&
ss
;

1240 #i‡!
	`deföed
(
PS3_PPU
Ë&& !deföed(
PS2_EE
)

1241 
sö6
 = (
sockaddr_ö6
 *)&
ss
;

1243 i‡(
p‹tOfs
 == 0) {

1244 
p‹tOfs
 = 
	`Ωc_cuºít_time
() % 400;

1246 
°¨tOfs
 = 
p‹tOfs
;

1248 
rc
 = -1;

1249 
p‹t
 = 
	`ht⁄s
(
fú°P‹t
 + 
p‹tOfs
);

1250 
p‹tOfs
 = (p‹tOf†+ 1Ë% 
p‹tCou¡
;

1253 i‡(!
	`gë£rvbyp‹t
(
p‹t
, "tcp")) {

1254 
	`mem£t
(&
ss
, 0, (ss));

1256 
s
->
ss_Ámûy
) {

1257 
AF_INET
:

1258 
sö
->
sö_p‹t
 = 
p‹t
;

1259 
sö
->
sö_Ámûy
 = 
AF_INET
;

1260 #ifde‡
HAVE_SOCKADDR_LEN


1261 
sö
->
sö_Àn
 =

1262 (
sockaddr_ö
);

1265 #i‡!
	`deföed
(
PS3_PPU
Ë&& !deföed(
PS2_EE
)

1266 
AF_INET6
:

1267 
sö6
->
sö6_p‹t
 = 
p‹t
;

1268 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

1269 #ifde‡
HAVE_SOCKADDR_LEN


1270 
sö6
->
sö6_Àn
 =

1271 (
sockaddr_ö6
);

1277 
rc
 = 
	`böd
(
Ωc
->
fd
, (
sockaddr
 *)&
ss
,

1278 
socksize
);

1279 #i‡!
	`deföed
(
WIN32
)

1281 i‡(
rc
 !0 && 
î∫o
 =
EACCES
)

1285 } 
rc
 !0 && 
p‹tOfs
 !
°¨tOfs
);

1288 
Ωc
->
is_n⁄blockög
 = !
	`£t_n⁄blockög
‘pc->
fd
);

1289 
	`£t_nﬁögî
(
Ωc
->
fd
);

1291 #ifde‡
HAVE_NETINET_TCP_H


1296 i‡(
	`£t_kì∑live
(
Ωc
->
fd
) != 0) {

1297 
	`Ωc_£t_îr‹
(
Ωc
, "CannotÉnable keepalive for fd %d: %s",

1298 
Ωc
->
fd
, 
	`°ªº‹
(
î∫o
));

1303 i‡(
	`c⁄√˘
(
Ωc
->
fd
, (
sockaddr
 *)
s
, 
socksize
) != 0 &&

1304 
î∫o
 !
EINPROGRESS
) {

1305 
	`Ωc_£t_îr‹
(
Ωc
, "connect()Åo server failed. %s(%d)",

1306 
	`°ªº‹
(
î∫o
),Érrno);

1311 
	}
}

1314 
	$Ωc_£t_sockaddr
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
, 
p‹t
)

1316 
addröfo
 *
ai
 = 
NULL
;

1318 i‡(
	`gëaddröfo
(
£rvî
, 
NULL
, NULL, &
ai
) != 0) {

1319 
	`Ωc_£t_îr‹
(
Ωc
, "Invalidáddress:%s. "

1320 "C™ÇŸÑesﬁv i¡ÿIPv4/v6 såu˘uª.", 
£rvî
);

1324 
ai
->
ai_Ámûy
) {

1325 
AF_INET
:

1326 ((
sockaddr_ö
 *)&
Ωc
->
s
)->
sö_Ámûy
 = 
ai
->
ai_Ámûy
;

1327 ((
sockaddr_ö
 *)&
Ωc
->
s
)->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1328 ((
sockaddr_ö
 *)&
Ωc
->
s
)->
sö_addr
 =

1329 ((
sockaddr_ö
 *)(*)(
ai
->
ai_addr
))->
sö_addr
;

1330 #ifde‡
HAVE_SOCKADDR_LEN


1331 ((
sockaddr_ö
 *)&
Ωc
->
s
)->
sö_Àn
 =

1332 (
sockaddr_ö
);

1335 #i‡!
	`deföed
(
PS3_PPU
Ë&& !deföed(
PS2_EE
)

1336 
AF_INET6
:

1337 ((
sockaddr_ö6
 *)&
Ωc
->
s
)->
sö6_Ámûy
 = 
ai
->
ai_Ámûy
;

1338 ((
sockaddr_ö6
 *)&
Ωc
->
s
)->
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1339 ((
sockaddr_ö6
 *)&
Ωc
->
s
)->
sö6_addr
 =

1340 ((
sockaddr_ö6
 *)(*)(
ai
->
ai_addr
))->
sö6_addr
;

1341 #ifde‡
HAVE_SOCKADDR_LEN


1342 ((
sockaddr_ö6
 *)&
Ωc
->
s
)->
sö6_Àn
 =

1343 (
sockaddr_ö6
);

1348 
	`‰ìaddröfo
(
ai
);

1351 
	}
}

1354 
	$Ωc_c⁄√˘_async
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
£rvî
, 
p‹t
,

1355 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

1357 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1359 i‡(
Ωc
->
is_£rvî_c⁄ãxt
) {

1360 
	`Ωc_£t_îr‹
(
Ωc
, "CanÇot connect oná server context");

1364 i‡(
Ωc
->
fd
 != -1) {

1365 
	`Ωc_£t_îr‹
(
Ωc
, "TryingÅo connect whileálready connected");

1369 i‡(
Ωc
->
is_udp
 != 0) {

1370 
	`Ωc_£t_îr‹
(
Ωc
, "TryingÅo connect on UDP socket");

1374 
Ωc
->
auto_ªc⁄√˘
 = 0;

1376 i‡(
	`Ωc_£t_sockaddr
(
Ωc
, 
£rvî
, 
p‹t
) != 0) {

1380 
Ωc
->
c⁄√˘_cb
 = 
cb
;

1381 
Ωc
->
c⁄√˘_d©a
 = 
¥iv©e_d©a
;

1383 i‡(
	`Ωc_c⁄√˘_sockaddr_async
(
Ωc
) != 0) {

1388 
	}
}

1391 
	$Ωc_disc⁄√˘
(
Ωc_c⁄ãxt
 *
Ωc
, c⁄° *
îr‹
)

1393 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1395 i‡(
Ωc
->
fd
 != -1) {

1396 
	`˛o£
(
Ωc
->
fd
);

1397 
Ωc
->
fd
 = -1;

1401 i‡(!
Ωc
->
is_c⁄√˘ed
) {

1406 
	`Ωc_£t_ªsûõncy
(
Ωc
, 0,Ñpc->
timeout
, 0);

1408 
Ωc
->
is_c⁄√˘ed
 = 0;

1410 i‡(!
Ωc
->
is_£rvî_c⁄ãxt
) {

1411 
	`Ωc_îr‹_Æl_pdus
(
Ωc
, 
îr‹
);

1414 
	`maybe_ˇŒ_c⁄√˘_cb
(
Ωc
, 
RPC_STATUS_CANCEL
);

1416 
	}
}

1418 #ifde‡
HAVE_TLS


1425 
	$ªc⁄√˘_cb_és
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
,

1426 *
comm™d_d©a
, *
¥iv©e_d©a
)

1428 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1431 
	`as£π
(
Ωc
->
u£_és
);

1434 
	`as£π
(
Ωc
->
és_c⁄ãxt
.
°©e
 =
TLS_HANDSHAKE_COMPLETED
 ||

1435 
Ωc
->
és_c⁄ãxt
.
°©e
 =
TLS_HANDSHAKE_FAILED
);

1441 i‡(
Ωc
->
és_c⁄ãxt
.
°©e
 =
TLS_HANDSHAKE_FAILED
) {

1442 
	`RPC_LOG
(
Ωc
, 1, "reconnect_cb_tls: TLS handshake failed,Ñestarting connection!");

1444 i‡(
Ωc
->
fd
 != -1) {

1445 
	`˛o£
(
Ωc
->
fd
);

1446 
Ωc
->
fd
 = -1;

1448 
Ωc
->
is_c⁄√˘ed
 = 0;

1449 
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

1453 
	`RPC_LOG
(
Ωc
, 2, "reconnect_cb_tls: TLS handshake completed successfully!");

1454 
	}
}

1458 
	$ªc⁄√˘_cb
(
Ωc_c⁄ãxt
 *
Ωc
, 
°©us
, *
d©a
,

1459 *
¥iv©e_d©a
)

1461 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1463 i‡(
°©us
 !
RPC_STATUS_SUCCESS
) {

1464 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoÑeconnectásync");

1465 
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

1469 
Ωc
->
is_c⁄√˘ed
 = 1;

1470 
Ωc
->
c⁄√˘_cb
 = 
NULL
;

1471 
Ωc
->
ﬁd_fd
 = 0;

1473 #ifde‡
HAVE_TLS


1477 
	`RPC_LOG
(
Ωc
, 2, "ªc⁄√˘_cb cÆÀd wôh sètu†%d", 
°©us
);

1478 i‡(
Ωc
->
u£_és
) {

1479 i‡(
	`Ωc_nuŒ_èsk_authés
(
Ωc
,Ñpc->
nfs_vîsi⁄
,

1480 
ªc⁄√˘_cb_és
, 
NULL
) == NULL) {

1481 
	`RPC_LOG
(
Ωc
, 1, "reconnect_cb:Ñpc_null_task_authtls() failed, "

1490 i‡(
Ωc
->
fd
 != -1) {

1491 
	`˛o£
(
Ωc
->
fd
);

1492 
Ωc
->
fd
 = -1;

1494 
Ωc
->
is_c⁄√˘ed
 = 0;

1495 
	`Ωc_ªc⁄√˘_ªqueue
(
Ωc
);

1500 
	}
}

1506 
	$Ωc_ªc⁄√˘_ªqueue
(
Ωc_c⁄ãxt
 *
Ωc
)

1508 
Ωc_pdu
 *
pdu
, *
√xt
;

1509 
i
;

1511 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1513 i‡(
Ωc
->
auto_ªc⁄√˘
 == 0) {

1514 
	`RPC_LOG
(
Ωc
, 1, "reconnect is disabled");

1515 
	`Ωc_îr‹_Æl_pdus
(
Ωc
, "RPC ERROR: FailedÅoÑeconnectásync");

1519 i‡(
Ωc
->
is_c⁄√˘ed
) {

1520 
Ωc
->
num_ªåõs
 =Ñpc->
auto_ªc⁄√˘
;

1523 i‡(
Ωc
->
fd
 != -1) {

1524 
Ωc
->
ﬁd_fd
 =Ñpc->
fd
;

1526 
Ωc
->
fd
 = -1;

1527 
Ωc
->
is_c⁄√˘ed
 = 0;

1529 i‡(
Ωc
->
outqueue
.
hód
) {

1530 
Ωc
->
outqueue
.
hód
->
out
.
num_d⁄e
 = 0;

1533 
Ωc
->
öpos
 = 0;

1534 
Ωc
->
°©e
 = 
READ_RM
;

1540 #ifde‡
HAVE_MULTITHREADING


1541 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

1542 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

1545 
i
 = 0; i < 
Ωc
->
num_hashes
; i++) {

1546 
Ωc_queue
 *
q
 = &
Ωc
->
waôpdu
[
i
];

1547 
pdu
 = 
q
->
hód
;Ödu;Ödu = 
√xt
) {

1548 
√xt
 = 
pdu
->next;

1549 
	`Ωc_ªtu∫_to_queue
(&
Ωc
->
outqueue
, 
pdu
);

1551 
pdu
->
out
.
num_d⁄e
 = 0;

1553 
	`Ωc_ª£t_queue
(
q
);

1555 
Ωc
->
waôpdu_Àn
 = 0;

1556 #ifde‡
HAVE_MULTITHREADING


1557 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

1558 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

1562 i‡(
Ωc
->
auto_ªc⁄√˘
 < 0 ||Ñpc->
num_ªåõs
 > 0) {

1563 
Ωc
->
num_ªåõs
--;

1564 
Ωc
->
c⁄√˘_cb
 = 
ªc⁄√˘_cb
;

1565 
	`RPC_LOG
(
Ωc
, 1, "reconnect initiated");

1566 i‡(
	`Ωc_c⁄√˘_sockaddr_async
(
Ωc
) != 0) {

1567 
	`Ωc_îr‹_Æl_pdus
(
Ωc
, "RPC ERROR: FailedÅo "

1574 
	`RPC_LOG
(
Ωc
, 1, "reconnect:álláttempts failed.");

1575 
	`Ωc_îr‹_Æl_pdus
(
Ωc
, "RPC ERROR: AlláttemptsÅoÑeconnect failed.");

1577 
	}
}

1581 
	$Ωc_böd_udp
(
Ωc_c⁄ãxt
 *
Ωc
, *
addr
, 
p‹t
)

1583 
addröfo
 *
ai
 = 
NULL
;

1584 
£rvi˚
[6];

1586 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1588 i‡(
Ωc
->
is_udp
 == 0) {

1589 
	`Ωc_£t_îr‹
(
Ωc
, "CantÇot bind UDP. Not UDP context");

1593 
	`•rötf
(
£rvi˚
, "%d", 
p‹t
);

1594 i‡(
	`gëaddröfo
(
addr
, 
£rvi˚
, 
NULL
, &
ai
) != 0) {

1595 
	`Ωc_£t_îr‹
(
Ωc
, "Invalidáddress:%s. "

1596 "C™ÇŸÑesﬁv i¡ÿIPv4/v6 såu˘uª.", 
addr
);

1600 
ai
->
ai_Ámûy
) {

1601 
AF_INET
:

1602 
Ωc
->
fd
 = 
	`¸óã_sockë
(
ai
->
ai_Ámûy
, 
SOCK_DGRAM
, 0);

1603 i‡(
Ωc
->
fd
 == -1) {

1604 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo create UDP socket: %s",

1605 
	`°ªº‹
(
î∫o
));

1606 
	`‰ìaddröfo
(
ai
);

1610 i‡(
	`böd
(
Ωc
->
fd
, (
sockaddr
 *)
ai
->
ai_addr
,

1611 (
sockaddr_ö
)) != 0) {

1612 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo bindÅo UDP socket: %s",

1613 
	`°ªº‹
(
î∫o
));

1614 
	`‰ìaddröfo
(
ai
);

1619 
	`Ωc_£t_îr‹
(
Ωc
, "CanÇot handle UPD sockets of family %d "

1620 "yë", 
ai
->
ai_Ámûy
);

1621 
	`‰ìaddröfo
(
ai
);

1625 
	`‰ìaddröfo
(
ai
);

1628 
	}
}

1631 
	$Ωc_£t_udp_de°ö©i⁄
(
Ωc_c⁄ãxt
 *
Ωc
, *
addr
, 
p‹t
,

1632 
is_brﬂdˇ°
)

1634 
addröfo
 *
ai
 = 
NULL
;

1635 
£rvi˚
[6];

1637 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1639 i‡(
Ωc
->
is_udp
 == 0) {

1640 
	`Ωc_£t_îr‹
(
Ωc
, "CanÇot set destination sockaddr. Not UDP "

1645 
	`•rötf
(
£rvi˚
, "%d", 
p‹t
);

1646 i‡(
	`gëaddröfo
(
addr
, 
£rvi˚
, 
NULL
, &
ai
) != 0) {

1647 
	`Ωc_£t_îr‹
(
Ωc
, "Invalidáddress:%s. "

1648 "C™ÇŸÑesﬁv i¡ÿIPv4/v6 såu˘uª.", 
addr
);

1652 
Ωc
->
is_brﬂdˇ°
 = is_broadcast;

1653 
	`£tsock›t
(
Ωc
->
fd
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
is_brﬂdˇ°
, (is_broadcast));

1655 
	`mem˝y
(&
Ωc
->
udp_de°
, 
ai
->
ai_addr
,ái->
ai_addæí
);

1656 
	`‰ìaddröfo
(
ai
);

1658 i‡(!
is_brﬂdˇ°
) {

1659 i‡(
	`c⁄√˘
(
Ωc
->
fd
, (
sockaddr
 *)&Ωc->
udp_de°
, ‘pc->udp_de°)Ë!0 && 
î∫o
 !
EINPROGRESS
) {

1660 
	`Ωc_£t_îr‹
(
Ωc
, "c⁄√˘(ËtÿUDPáddªs†Áûed. %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

1666 
	}
}

1668 
sockaddr
 *

1669 
	$Ωc_gë_ªcv_sockaddr
(
Ωc_c⁄ãxt
 *
Ωc
)

1671 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1673  (
sockaddr
 *)&
Ωc
->
udp_§c
;

1674 
	}
}

1677 
	$Ωc_queue_Àngth
(
Ωc_c⁄ãxt
 *
Ωc
)

1679 
i
 = 0;

1680 
Ωc_pdu
 *
pdu
;

1682 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1684 
pdu
 = 
Ωc
->
outqueue
.
hód
;Ödu;Ödu =Ödu->
√xt
) {

1685 
i
++;

1688 #ifde‡
HAVE_MULTITHREADING


1689 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

1690 
	`nfs_mt_muãx_lock
(&
Ωc
->
Ωc_muãx
);

1693 
i
 +
Ωc
->
waôpdu_Àn
;

1694 #ifde‡
HAVE_MULTITHREADING


1695 i‡(
Ωc
->
mu…ôhªadög_íabÀd
) {

1696 
	`nfs_mt_muãx_u∆ock
(&
Ωc
->
Ωc_muãx
);

1700  
i
;

1701 
	}
}

1703 
	$Ωc_gë_num_awaôög
(
Ωc_c⁄ãxt
 *
Ωc
)

1705  
Ωc
->
waôpdu_Àn
;

1706 
	}
}

1708 
	$Ωc_£t_awaôög_limô
(
Ωc_c⁄ãxt
 *
Ωc
, 
limô
)

1710 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1712 
Ωc
->
max_waôpdu_Àn
 = 
limô
;

1713 
	}
}

1716 
	$Ωc_£t_fd
(
Ωc_c⁄ãxt
 *
Ωc
, 
fd
)

1718 
	`as£π
(
Ωc
->
magic
 =
RPC_CONTEXT_MAGIC
);

1720 
Ωc
->
fd
 = fd;

1721 
	}
}

1724 
	$Ωc_is_udp_sockë
(
Ωc_c⁄ãxt
 *
Ωc
)

1726 #ifde‡
WIN32


1727 
ty≥
 = 0;

1729 
ty≥
 = 0;

1731 
sockÀn_t
 
Àn
 = (
ty≥
);

1733 
	`gësock›t
(
Ωc
->
fd
, 
SOL_SOCKET
, 
SO_TYPE
, &
ty≥
, &
Àn
);

1734  
ty≥
 =
SOCK_DGRAM
;

1735 
	}
}

	@mount/libnfs-raw-mount.c

35 
	~"libnfs-zdr.h
"

36 
	~"libnfs-øw-mou¡.h
"

38 
uöt32_t


39 
	$zdr_fh™dÀ3
 (
ZDR
 *
zdrs
, 
fh™dÀ3
 *
objp
)

41 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
fh™dÀ3_vÆ
, (
uöt32_t
 *Ë&objp->
fh™dÀ3_Àn
, 
FHSIZE3
))

42  
FALSE
;

43  
TRUE
;

44 
	}
}

46 
uöt32_t


47 
	$zdr_dú∑th
 (
ZDR
 *
zdrs
, 
dú∑th
 *
objp
)

49 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, 
MNTPATHLEN
))

50  
FALSE
;

51  
TRUE
;

52 
	}
}

54 
uöt32_t


55 
	$zdr_«me
 (
ZDR
 *
zdrs
, 
«me
 *
objp
)

57 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, 
MNTNAMLEN
))

58  
FALSE
;

59  
TRUE
;

60 
	}
}

62 
uöt32_t


63 
	$zdr_mou¡°©3
 (
ZDR
 *
zdrs
, 
mou¡°©3
 *
objp
)

65 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

66  
FALSE
;

67  
TRUE
;

68 
	}
}

70 
uöt32_t


71 
	$zdr_mou¡li°
 (
ZDR
 *
zdrs
, 
mou¡li°
 *
objp
)

73 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)
objp
,  (
mou¡body
), (
zdΩroc_t
Ë
zdr_mou¡body
))

74  
FALSE
;

75  
TRUE
;

76 
	}
}

78 
uöt32_t


79 
	$zdr_mou¡body
 (
ZDR
 *
zdrs
, 
mou¡body
 *
objp
)

81 i‡(!
	`zdr_«me
 (
zdrs
, &
objp
->
ml_ho°«me
))

82  
FALSE
;

83 i‡(!
	`zdr_dú∑th
 (
zdrs
, &
objp
->
ml_dúe˘‹y
))

84  
FALSE
;

85 i‡(!
	`zdr_mou¡li°
 (
zdrs
, &
objp
->
ml_√xt
))

86  
FALSE
;

87  
TRUE
;

88 
	}
}

90 
uöt32_t


91 
	$zdr_groups
 (
ZDR
 *
zdrs
, 
groups
 *
objp
)

93 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)
objp
,  (
grou≤ode
), (
zdΩroc_t
Ë
zdr_grou≤ode
))

94  
FALSE
;

95  
TRUE
;

96 
	}
}

98 
uöt32_t


99 
	$zdr_grou≤ode
 (
ZDR
 *
zdrs
, 
grou≤ode
 *
objp
)

101 i‡(!
	`zdr_«me
 (
zdrs
, &
objp
->
gr_«me
))

102  
FALSE
;

103 i‡(!
	`zdr_groups
 (
zdrs
, &
objp
->
gr_√xt
))

104  
FALSE
;

105  
TRUE
;

106 
	}
}

108 
uöt32_t


109 
	$zdr_exp‹ts
 (
ZDR
 *
zdrs
, 
exp‹ts
 *
objp
)

111 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)
objp
,  (
exp‹äode
), (
zdΩroc_t
Ë
zdr_exp‹äode
))

112  
FALSE
;

113  
TRUE
;

114 
	}
}

116 
uöt32_t


117 
	$zdr_exp‹äode
 (
ZDR
 *
zdrs
, 
exp‹äode
 *
objp
)

119 i‡(!
	`zdr_dú∑th
 (
zdrs
, &
objp
->
ex_dú
))

120  
FALSE
;

121 i‡(!
	`zdr_groups
 (
zdrs
, &
objp
->
ex_groups
))

122  
FALSE
;

123 i‡(!
	`zdr_exp‹ts
 (
zdrs
, &
objp
->
ex_√xt
))

124  
FALSE
;

125  
TRUE
;

126 
	}
}

128 
uöt32_t


129 
	$zdr_mou¡ªs3_ok
 (
ZDR
 *
zdrs
, 
mou¡ªs3_ok
 *
objp
)

131 i‡(!
	`zdr_fh™dÀ3
 (
zdrs
, &
objp
->
fh™dÀ
))

132  
FALSE
;

133 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
auth_Êav‹s
.
auth_Êav‹s_vÆ
, (
uöt32_t
 *Ë&objp->auth_Êav‹s.
auth_Êav‹s_Àn
, ~0,

134  (), (
zdΩroc_t
Ë
zdr_öt
))

135  
FALSE
;

136  
TRUE
;

137 
	}
}

139 
uöt32_t


140 
	$zdr_mou¡ªs3
 (
ZDR
 *
zdrs
, 
mou¡ªs3
 *
objp
)

142 i‡(!
	`zdr_mou¡°©3
 (
zdrs
, &
objp
->
fhs_°©us
))

143  
FALSE
;

144 
objp
->
fhs_°©us
) {

145 
MNT3_OK
:

146 i‡(!
	`zdr_mou¡ªs3_ok
 (
zdrs
, &
objp
->
mou¡ªs3_u
.
mou¡öfo
))

147  
FALSE
;

152  
TRUE
;

153 
	}
}

155 
uöt32_t


156 
	$zdr_mou¡°©1
 (
ZDR
 *
zdrs
, 
mou¡°©1
 *
objp
)

158 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

159  
FALSE
;

160  
TRUE
;

161 
	}
}

163 
uöt32_t


164 
	$zdr_fh™dÀ1
 (
ZDR
 *
zdrs
, 
fh™dÀ1
 
objp
)

166 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
FHSIZE
))

167  
FALSE
;

168  
TRUE
;

169 
	}
}

171 
uöt32_t


172 
	$zdr_mou¡ªs1_ok
 (
ZDR
 *
zdrs
, 
mou¡ªs1_ok
 *
objp
)

174 i‡(!
	`zdr_fh™dÀ1
 (
zdrs
, 
objp
->
fh™dÀ
))

175  
FALSE
;

176  
TRUE
;

177 
	}
}

179 
uöt32_t


180 
	$zdr_mou¡ªs1
 (
ZDR
 *
zdrs
, 
mou¡ªs1
 *
objp
)

182 i‡(!
	`zdr_mou¡°©1
 (
zdrs
, &
objp
->
fhs_°©us
))

183  
FALSE
;

184 
objp
->
fhs_°©us
) {

185 
MNT1_OK
:

186 i‡(!
	`zdr_mou¡ªs1_ok
 (
zdrs
, &
objp
->
mou¡ªs1_u
.
mou¡öfo
))

187  
FALSE
;

192  
TRUE
;

193 
	}
}

	@mount/libnfs-raw-mount.h

35 #i‚de‡
_MOUNT_H_RPCGEN


36 
	#_MOUNT_H_RPCGEN


	)

38 
	~<nfsc/libnfs-zdr.h
>

41 #ifde‡
__˝lu•lus


45 
	#MNTPATHLEN
 1024

	)

46 
	#MNTNAMLEN
 255

	)

47 
	#FHSIZE3
 64

	)

50 
uöt32_t
 
fh™dÀ3_Àn
;

51 *
fh™dÀ3_vÆ
;

52 } 
	tfh™dÀ3
;

54 *
	tdú∑th
;

56 *
	t«me
;

58 
	emou¡°©3
 {

59 
MNT3_OK
 = 0,

60 
MNT3ERR_PERM
 = 1,

61 
MNT3ERR_NOENT
 = 2,

62 
MNT3ERR_IO
 = 5,

63 
MNT3ERR_ACCES
 = 13,

64 
MNT3ERR_NOTDIR
 = 20,

65 
MNT3ERR_INVAL
 = 22,

66 
MNT3ERR_NAMETOOLONG
 = 63,

67 
MNT3ERR_NOTSUPP
 = 10004,

68 
MNT3ERR_SERVERFAULT
 = 10006,

70 
mou¡°©3
 
	tmou¡°©3
;

72 
mou¡body
 *
	tmou¡li°
;

74 
	smou¡body
 {

75 
«me
 
ml_ho°«me
;

76 
dú∑th
 
ml_dúe˘‹y
;

77 
mou¡li°
 
ml_√xt
;

79 
mou¡body
 
	tmou¡body
;

81 
grou≤ode
 *
	tgroups
;

83 
	sgrou≤ode
 {

84 
«me
 
gr_«me
;

85 
groups
 
gr_√xt
;

87 
grou≤ode
 
	tgrou≤ode
;

89 
exp‹äode
 *
	texp‹ts
;

91 
	sexp‹äode
 {

92 
dú∑th
 
ex_dú
;

93 
groups
 
ex_groups
;

94 
exp‹ts
 
ex_√xt
;

96 
exp‹äode
 
	texp‹äode
;

98 
	smou¡ªs3_ok
 {

99 
fh™dÀ3
 
fh™dÀ
;

101 
uöt32_t
 
auth_Êav‹s_Àn
;

102 *
auth_Êav‹s_vÆ
;

103 } 
auth_Êav‹s
;

105 
mou¡ªs3_ok
 
	tmou¡ªs3_ok
;

107 
	smou¡ªs3
 {

108 
mou¡°©3
 
fhs_°©us
;

110 
mou¡ªs3_ok
 
mou¡öfo
;

111 } 
mou¡ªs3_u
;

113 
mou¡ªs3
 
	tmou¡ªs3
;

115 
	emou¡°©1
 {

116 
MNT1_OK
 = 0,

117 
MNT1ERR_PERM
 = 1,

118 
MNT1ERR_NOENT
 = 2,

119 
MNT1ERR_IO
 = 5,

120 
MNT1ERR_ACCES
 = 13,

121 
MNT1ERR_NOTDIR
 = 20,

122 
MNT1ERR_INVAL
 = 22,

123 
MNT1ERR_NAMETOOLONG
 = 63,

124 
MNT1ERR_NOTSUPP
 = 10004,

125 
MNT1ERR_SERVERFAULT
 = 10006,

127 
mou¡°©1
 
	tmou¡°©1
;

128 
	#FHSIZE
 32

	)

130 
	tfh™dÀ1
[
FHSIZE
];

132 
	smou¡ªs1_ok
 {

133 
fh™dÀ1
 
fh™dÀ
;

135 
mou¡ªs1_ok
 
	tmou¡ªs1_ok
;

137 
	smou¡ªs1
 {

138 
mou¡°©1
 
fhs_°©us
;

140 
mou¡ªs1_ok
 
mou¡öfo
;

141 } 
mou¡ªs1_u
;

143 
mou¡ªs1
 
	tmou¡ªs1
;

145 
	#MOUNT_PROGRAM
 100005

	)

146 
	#MOUNT_V1
 1

	)

148 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

149 
	#MOUNT1_NULL
 0

	)

150 * 
mou¡1_nuŒ_1
(*, *);

151 * 
mou¡1_nuŒ_1_svc
(*, 
svc_ªq
 *);

152 
	#MOUNT1_MNT
 1

	)

153 
mou¡ªs1
 * 
mou¡1_m¡_1
(
dú∑th
 *, *);

154 
mou¡ªs1
 * 
mou¡1_m¡_1_svc
(
dú∑th
 *, 
svc_ªq
 *);

155 
	#MOUNT1_DUMP
 2

	)

156 
mou¡li°
 * 
mou¡1_dump_1
(*, *);

157 
mou¡li°
 * 
mou¡1_dump_1_svc
(*, 
svc_ªq
 *);

158 
	#MOUNT1_UMNT
 3

	)

159 * 
mou¡1_um¡_1
(
dú∑th
 *, *);

160 * 
mou¡1_um¡_1_svc
(
dú∑th
 *, 
svc_ªq
 *);

161 
	#MOUNT1_UMNTALL
 4

	)

162 * 
mou¡1_um¡Æl_1
(*, *);

163 * 
mou¡1_um¡Æl_1_svc
(*, 
svc_ªq
 *);

164 
	#MOUNT1_EXPORT
 5

	)

165 
exp‹ts
 * 
mou¡1_exp‹t_1
(*, *);

166 
exp‹ts
 * 
mou¡1_exp‹t_1_svc
(*, 
svc_ªq
 *);

167 
mou¡_¥ogøm_1_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

170 
	#MOUNT1_NULL
 0

	)

171 * 
mou¡1_nuŒ_1
();

172 * 
mou¡1_nuŒ_1_svc
();

173 
	#MOUNT1_MNT
 1

	)

174 
mou¡ªs1
 * 
mou¡1_m¡_1
();

175 
mou¡ªs1
 * 
mou¡1_m¡_1_svc
();

176 
	#MOUNT1_DUMP
 2

	)

177 
mou¡li°
 * 
mou¡1_dump_1
();

178 
mou¡li°
 * 
mou¡1_dump_1_svc
();

179 
	#MOUNT1_UMNT
 3

	)

180 * 
mou¡1_um¡_1
();

181 * 
mou¡1_um¡_1_svc
();

182 
	#MOUNT1_UMNTALL
 4

	)

183 * 
mou¡1_um¡Æl_1
();

184 * 
mou¡1_um¡Æl_1_svc
();

185 
	#MOUNT1_EXPORT
 5

	)

186 
exp‹ts
 * 
mou¡1_exp‹t_1
();

187 
exp‹ts
 * 
mou¡1_exp‹t_1_svc
();

188 
mou¡_¥ogøm_1_‰ìªsu…
 ();

190 
	#MOUNT_V3
 3

	)

192 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

193 
	#MOUNT3_NULL
 0

	)

194 * 
mou¡3_nuŒ_3
(*, *);

195 * 
mou¡3_nuŒ_3_svc
(*, 
svc_ªq
 *);

196 
	#MOUNT3_MNT
 1

	)

197 
mou¡ªs3
 * 
mou¡3_m¡_3
(
dú∑th
 *, *);

198 
mou¡ªs3
 * 
mou¡3_m¡_3_svc
(
dú∑th
 *, 
svc_ªq
 *);

199 
	#MOUNT3_DUMP
 2

	)

200 
mou¡li°
 * 
mou¡3_dump_3
(*, *);

201 
mou¡li°
 * 
mou¡3_dump_3_svc
(*, 
svc_ªq
 *);

202 
	#MOUNT3_UMNT
 3

	)

203 * 
mou¡3_um¡_3
(
dú∑th
 *, *);

204 * 
mou¡3_um¡_3_svc
(
dú∑th
 *, 
svc_ªq
 *);

205 
	#MOUNT3_UMNTALL
 4

	)

206 * 
mou¡3_um¡Æl_3
(*, *);

207 * 
mou¡3_um¡Æl_3_svc
(*, 
svc_ªq
 *);

208 
	#MOUNT3_EXPORT
 5

	)

209 
exp‹ts
 * 
mou¡3_exp‹t_3
(*, *);

210 
exp‹ts
 * 
mou¡3_exp‹t_3_svc
(*, 
svc_ªq
 *);

211 
mou¡_¥ogøm_3_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

214 
	#MOUNT3_NULL
 0

	)

215 * 
mou¡3_nuŒ_3
();

216 * 
mou¡3_nuŒ_3_svc
();

217 
	#MOUNT3_MNT
 1

	)

218 
mou¡ªs3
 * 
mou¡3_m¡_3
();

219 
mou¡ªs3
 * 
mou¡3_m¡_3_svc
();

220 
	#MOUNT3_DUMP
 2

	)

221 
mou¡li°
 * 
mou¡3_dump_3
();

222 
mou¡li°
 * 
mou¡3_dump_3_svc
();

223 
	#MOUNT3_UMNT
 3

	)

224 * 
mou¡3_um¡_3
();

225 * 
mou¡3_um¡_3_svc
();

226 
	#MOUNT3_UMNTALL
 4

	)

227 * 
mou¡3_um¡Æl_3
();

228 * 
mou¡3_um¡Æl_3_svc
();

229 
	#MOUNT3_EXPORT
 5

	)

230 
exp‹ts
 * 
mou¡3_exp‹t_3
();

231 
exp‹ts
 * 
mou¡3_exp‹t_3_svc
();

232 
mou¡_¥ogøm_3_‰ìªsu…
 ();

237 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

238 
uöt32_t
 
zdr_fh™dÀ3
 (
ZDR
 *, 
fh™dÀ3
*);

239 
uöt32_t
 
zdr_dú∑th
 (
ZDR
 *, 
dú∑th
*);

240 
uöt32_t
 
zdr_«me
 (
ZDR
 *, 
«me
*);

241 
uöt32_t
 
zdr_mou¡°©3
 (
ZDR
 *, 
mou¡°©3
*);

242 
uöt32_t
 
zdr_mou¡li°
 (
ZDR
 *, 
mou¡li°
*);

243 
uöt32_t
 
zdr_mou¡body
 (
ZDR
 *, 
mou¡body
*);

244 
uöt32_t
 
zdr_groups
 (
ZDR
 *, 
groups
*);

245 
uöt32_t
 
zdr_grou≤ode
 (
ZDR
 *, 
grou≤ode
*);

246 
uöt32_t
 
zdr_exp‹ts
 (
ZDR
 *, 
exp‹ts
*);

247 
uöt32_t
 
zdr_exp‹äode
 (
ZDR
 *, 
exp‹äode
*);

248 
uöt32_t
 
zdr_mou¡ªs3_ok
 (
ZDR
 *, 
mou¡ªs3_ok
*);

249 
uöt32_t
 
zdr_mou¡ªs3
 (
ZDR
 *, 
mou¡ªs3
*);

250 
uöt32_t
 
zdr_mou¡°©1
 (
ZDR
 *, 
mou¡°©1
*);

251 
uöt32_t
 
zdr_fh™dÀ1
 (
ZDR
 *, 
fh™dÀ1
);

252 
uöt32_t
 
zdr_mou¡ªs1_ok
 (
ZDR
 *, 
mou¡ªs1_ok
*);

253 
uöt32_t
 
zdr_mou¡ªs1
 (
ZDR
 *, 
mou¡ªs1
*);

256 
uöt32_t
 
zdr_fh™dÀ3
 ();

257 
uöt32_t
 
zdr_dú∑th
 ();

258 
uöt32_t
 
zdr_«me
 ();

259 
uöt32_t
 
zdr_mou¡°©3
 ();

260 
uöt32_t
 
zdr_mou¡li°
 ();

261 
uöt32_t
 
zdr_mou¡body
 ();

262 
uöt32_t
 
zdr_groups
 ();

263 
uöt32_t
 
zdr_grou≤ode
 ();

264 
uöt32_t
 
zdr_exp‹ts
 ();

265 
uöt32_t
 
zdr_exp‹äode
 ();

266 
uöt32_t
 
zdr_mou¡ªs3_ok
 ();

267 
uöt32_t
 
zdr_mou¡ªs3
 ();

268 
uöt32_t
 
zdr_mou¡°©1
 ();

269 
uöt32_t
 
zdr_fh™dÀ1
 ();

270 
uöt32_t
 
zdr_mou¡ªs1_ok
 ();

271 
uöt32_t
 
zdr_mou¡ªs1
 ();

275 #ifde‡
__˝lu•lus


	@mount/mount.c

18 #ifde‡
PS2_EE


19 
	~"ps2_com∑t.h
"

22 #ifde‡
WIN32


23 
	~<wö32/wö32_com∑t.h
>

26 
	~<°dio.h
>

27 
	~<î∫o.h
>

28 
	~"libnfs-zdr.h
"

29 
	~"libnfs.h
"

30 
	~"libnfs-øw.h
"

31 
	~"libnfs-¥iv©e.h
"

32 
	~"libnfs-øw-mou¡.h
"

34 
Ωc_pdu
 *

35 
	$Ωc_mou¡3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

37 
Ωc_pdu
 *
pdu
;

39 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
MOUNT3_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

40 i‡(
pdu
 =
NULL
) {

41 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for mount/null call");

42  
NULL
;

45 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

46 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for mount/null call");

47  
NULL
;

50  
pdu
;

51 
	}
}

53 
Ωc_pdu
 *

54 
	$Ωc_mou¡3_m¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, *
¥iv©e_d©a
)

56 
Ωc_pdu
 *
pdu
;

58 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
MOUNT3_MNT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_mou¡ªs3
, (
mou¡ªs3
));

59 i‡(
pdu
 =
NULL
) {

60 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for mount/mnt call");

61  
NULL
;

64 i‡(
	`zdr_dú∑th
(&
pdu
->
zdr
, &
exp‹t
) == 0) {

65 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror. FailedÅoÉncode mount/mnt call");

66 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

67  
NULL
;

70 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

71 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for mount/mnt call");

72  
NULL
;

75  
pdu
;

76 
	}
}

78 
Ωc_pdu
 *

79 
	$Ωc_mou¡3_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

81 
Ωc_pdu
 *
pdu
;

83 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
MOUNT3_DUMP
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_mou¡li°
, (
mou¡li°
));

84 i‡(
pdu
 =
NULL
) {

85 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for mount/dump");

86  
NULL
;

89 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

90 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue mount/dumpÖdu");

91  
NULL
;

94  
pdu
;

95 
	}
}

97 
Ωc_pdu
 *

98 
	$Ωc_mou¡3_um¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, *
¥iv©e_d©a
)

100 
Ωc_pdu
 *
pdu
;

102 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
MOUNT3_UMNT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

103 i‡(
pdu
 =
NULL
) {

104 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for mount/umnt");

105  
NULL
;

108 i‡(
	`zdr_dú∑th
(&
pdu
->
zdr
, &
exp‹t
) == 0) {

109 
	`Ωc_£t_îr‹
(
Ωc
, "failedÅoÉncode dirpath for mount/umnt");

110 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

111  
NULL
;

114 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

115 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue mount/umntÖdu");

116  
NULL
;

119  
pdu
;

120 
	}
}

122 
Ωc_pdu
 *

123 
	$Ωc_mou¡3_um¡Æl_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

125 
Ωc_pdu
 *
pdu
;

127 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
MOUNT3_UMNTALL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

128 i‡(
pdu
 =
NULL
) {

129 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for mount/umntall");

130  
NULL
;

133 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

134 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue mount/umntallÖdu");

135  
NULL
;

138  
pdu
;

139 
	}
}

141 
Ωc_pdu
 *

142 
	$Ωc_mou¡3_exp‹t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

144 
Ωc_pdu
 *
pdu
;

146 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V3
, 
MOUNT3_EXPORT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_exp‹ts
, (
exp‹ts
));

147 i‡(
pdu
 =
NULL
) {

148 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for mount/export");

149  
NULL
;

152 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

153 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue mount/exportÖdu");

154  
NULL
;

157  
pdu
;

158 
	}
}

160 *
	$mou¡°©3_to_°r
(
°
)

162 
mou¡°©3
 
°©
 = 
°
;

164 *
°r
 = "unknown mount stat";

165 
°©
) {

166 
MNT3_OK
: 
°r
="MNT3_OK"; ;

167 
MNT3ERR_PERM
: 
°r
="MNT3ERR_PERM"; ;

168 
MNT3ERR_NOENT
: 
°r
="MNT3ERR_NOENT"; ;

169 
MNT3ERR_IO
: 
°r
="MNT3ERR_IO"; ;

170 
MNT3ERR_ACCES
: 
°r
="MNT3ERR_ACCES"; ;

171 
MNT3ERR_NOTDIR
: 
°r
="MNT3ERR_NOTDIR"; ;

172 
MNT3ERR_INVAL
: 
°r
="MNT3ERR_INVAL"; ;

173 
MNT3ERR_NAMETOOLONG
: 
°r
="MNT3ERR_NAMETOOLONG"; ;

174 
MNT3ERR_NOTSUPP
: 
°r
="MNT3ERR_NOTSUPP"; ;

175 
MNT3ERR_SERVERFAULT
: 
°r
="MNT3ERR_SERVERFAULT"; ;

177  
°r
;

178 
	}
}

181 
	$mou¡°©3_to_î∫o
(
°
)

183 
mou¡°©3
 
°©
 = 
°
;

185 
°©
) {

186 
MNT3_OK
:  0; ;

187 
MNT3ERR_PERM
:  -
EPERM
; ;

188 
MNT3ERR_NOENT
:  -
EPERM
; ;

189 
MNT3ERR_IO
:  -
EIO
; ;

190 
MNT3ERR_ACCES
:  -
EACCES
; ;

191 
MNT3ERR_NOTDIR
:  -
ENOTDIR
; ;

192 
MNT3ERR_INVAL
:  -
EINVAL
; ;

193 
MNT3ERR_NAMETOOLONG
:  -
E2BIG
; ;

194 
MNT3ERR_NOTSUPP
:  -
EINVAL
; ;

195 
MNT3ERR_SERVERFAULT
:  -
EIO
; ;

197  -
ERANGE
;

198 
	}
}

200 
Ωc_pdu
 *

201 
	$Ωc_mou¡1_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

203 
Ωc_pdu
 *
pdu
;

205 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V1
, 
MOUNT1_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

206 i‡(
pdu
 =
NULL
) {

207 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for MOUNT1/NULL call");

208  
NULL
;

211 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

212 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for MOUNT1/NULL call");

213  
NULL
;

216  
pdu
;

217 
	}
}

219 
Ωc_pdu
 *

220 
	$Ωc_mou¡1_m¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, *
¥iv©e_d©a
)

222 
Ωc_pdu
 *
pdu
;

224 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V1
, 
MOUNT1_MNT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_mou¡ªs1
, (
mou¡ªs1
));

225 i‡(
pdu
 =
NULL
) {

226 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for MOUNT1/MNT call");

227  
NULL
;

230 i‡(
	`zdr_dú∑th
(&
pdu
->
zdr
, &
exp‹t
) == 0) {

231 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror. FailedÅoÉncode MOUNT1/MNT call");

232 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

233  
NULL
;

236 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

237 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for MOUNT1/MNT call");

238  
NULL
;

241  
pdu
;

242 
	}
}

244 
Ωc_pdu
 *

245 
	$Ωc_mou¡1_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

247 
Ωc_pdu
 *
pdu
;

249 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V1
, 
MOUNT1_DUMP
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_mou¡li°
, (
mou¡li°
));

250 i‡(
pdu
 =
NULL
) {

251 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for MOUNT1/DUMP");

252  
NULL
;

255 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

256 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue MOUNT1/DUMPÖdu");

257  
NULL
;

260  
pdu
;

261 
	}
}

263 
Ωc_pdu
 *

264 
	$Ωc_mou¡1_um¡_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, *
¥iv©e_d©a
)

266 
Ωc_pdu
 *
pdu
;

268 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V1
, 
MOUNT1_UMNT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

269 i‡(
pdu
 =
NULL
) {

270 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for MOUNT1/UMNT");

271  
NULL
;

274 i‡(
	`zdr_dú∑th
(&
pdu
->
zdr
, &
exp‹t
) == 0) {

275 
	`Ωc_£t_îr‹
(
Ωc
, "failedÅoÉncode dirpath for MOUNT1/UMNT");

276 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

277  
NULL
;

280 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

281 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue MOUNT1/UMNTÖdu");

282  
NULL
;

285  
pdu
;

286 
	}
}

288 
Ωc_pdu
 *

289 
	$Ωc_mou¡1_um¡Æl_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

291 
Ωc_pdu
 *
pdu
;

293 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V1
, 
MOUNT1_UMNTALL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

294 i‡(
pdu
 =
NULL
) {

295 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for MOUNT1/UMNTALL");

296  
NULL
;

299 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

300 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue MOUNT1/UMNTALLÖdu");

301  
NULL
;

304  
pdu
;

305 
	}
}

307 
Ωc_pdu
 *

308 
	$Ωc_mou¡1_exp‹t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

310 
Ωc_pdu
 *
pdu
;

312 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
MOUNT_PROGRAM
, 
MOUNT_V1
, 
MOUNT1_EXPORT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_exp‹ts
, (
exp‹ts
));

313 i‡(
pdu
 =
NULL
) {

314 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅoállocateÖdu for MOUNT1/EXPORT");

315  
NULL
;

318 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

319 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue MOUNT1/EXPORTÖdu");

320  
NULL
;

323  
pdu
;

324 
	}
}

	@nfs/libnfs-raw-nfs.c

35 
	~"libnfs-zdr.h
"

36 
	~"libnfs-øw-nfs.h
"

38 
uöt32_t


39 
	$zdr_cookõvîf3
 (
ZDR
 *
zdrs
, 
cookõvîf3
 
objp
)

41 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFS3_COOKIEVERFSIZE
))

42  
FALSE
;

43  
TRUE
;

44 
	}
}

46 
uöt32_t


47 
	$zdr_cookõ3
 (
ZDR
 *
zdrs
, 
cookõ3
 *
objp
)

49 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

50  
FALSE
;

51  
TRUE
;

52 
	}
}

54 
uöt32_t


55 
	$zdr_nfs_fh3
 (
ZDR
 *
zdrs
, 
nfs_fh3
 *
objp
)

57 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, 
NFS3_FHSIZE
))

58  
FALSE
;

59  
TRUE
;

60 
	}
}

62 
uöt32_t


63 
	$zdr_fûíame3
 (
ZDR
 *
zdrs
, 
fûíame3
 *
objp
)

65 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, ~0))

66  
FALSE
;

67  
TRUE
;

68 
	}
}

70 
uöt32_t


71 
	$zdr_dú›¨gs3
 (
ZDR
 *
zdrs
, 
dú›¨gs3
 *
objp
)

73 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
dú
))

74  
FALSE
;

75 i‡(!
	`zdr_fûíame3
 (
zdrs
, &
objp
->
«me
))

76  
FALSE
;

77  
TRUE
;

78 
	}
}

80 
uöt32_t


81 
	$zdr_·y≥3
 (
ZDR
 *
zdrs
, 
·y≥3
 *
objp
)

83 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

84  
FALSE
;

85  
TRUE
;

86 
	}
}

88 
uöt32_t


89 
	$zdr_mode3
 (
ZDR
 *
zdrs
, 
mode3
 *
objp
)

91 i‡(!
	`zdr_u_öt
 (
zdrs
, 
objp
))

92  
FALSE
;

93  
TRUE
;

94 
	}
}

96 
uöt32_t


97 
	$zdr_uid3
 (
ZDR
 *
zdrs
, 
uid3
 *
objp
)

99 i‡(!
	`zdr_u_öt
 (
zdrs
, 
objp
))

100  
FALSE
;

101  
TRUE
;

102 
	}
}

104 
uöt32_t


105 
	$zdr_gid3
 (
ZDR
 *
zdrs
, 
gid3
 *
objp
)

107 i‡(!
	`zdr_u_öt
 (
zdrs
, 
objp
))

108  
FALSE
;

109  
TRUE
;

110 
	}
}

112 
uöt32_t


113 
	$zdr_size3
 (
ZDR
 *
zdrs
, 
size3
 *
objp
)

115 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

116  
FALSE
;

117  
TRUE
;

118 
	}
}

120 
uöt32_t


121 
	$zdr_fûeid3
 (
ZDR
 *
zdrs
, 
fûeid3
 *
objp
)

123 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

124  
FALSE
;

125  
TRUE
;

126 
	}
}

128 
uöt32_t


129 
	$zdr_•ecd©a3
 (
ZDR
 *
zdrs
, 
•ecd©a3
 *
objp
)

131 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
•ecd©a1
))

132  
FALSE
;

133 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
•ecd©a2
))

134  
FALSE
;

135  
TRUE
;

136 
	}
}

138 
uöt32_t


139 
	$zdr_nf°ime3
 (
ZDR
 *
zdrs
, 
nf°ime3
 *
objp
)

141 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
£c⁄ds
))

142  
FALSE
;

143 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
n£c⁄ds
))

144  
FALSE
;

145  
TRUE
;

146 
	}
}

148 
uöt32_t


149 
	$zdr_Áâr3
 (
ZDR
 *
zdrs
, 
Áâr3
 *
objp
)

151 i‡(!
	`zdr_·y≥3
 (
zdrs
, &
objp
->
ty≥
))

152  
FALSE
;

153 i‡(!
	`zdr_mode3
 (
zdrs
, &
objp
->
mode
))

154  
FALSE
;

155 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
∆ök
))

156  
FALSE
;

157 i‡(!
	`zdr_uid3
 (
zdrs
, &
objp
->
uid
))

158  
FALSE
;

159 i‡(!
	`zdr_gid3
 (
zdrs
, &
objp
->
gid
))

160  
FALSE
;

161 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
size
))

162  
FALSE
;

163 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
u£d
))

164  
FALSE
;

165 i‡(!
	`zdr_•ecd©a3
 (
zdrs
, &
objp
->
rdev
))

166  
FALSE
;

167 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
fsid
))

168  
FALSE
;

169 i‡(!
	`zdr_fûeid3
 (
zdrs
, &
objp
->
fûeid
))

170  
FALSE
;

171 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

172  
FALSE
;

173 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

174  
FALSE
;

175 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
˘ime
))

176  
FALSE
;

177  
TRUE
;

178 
	}
}

180 
uöt32_t


181 
	$zdr_po°_›_©å
 (
ZDR
 *
zdrs
, 
po°_›_©å
 *
objp
)

183 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
©åibuãs_fﬁlow
))

184  
FALSE
;

185 
objp
->
©åibuãs_fﬁlow
) {

186 
TRUE
:

187 i‡(!
	`zdr_Áâr3
 (
zdrs
, &
objp
->
po°_›_©å_u
.
©åibuãs
))

188  
FALSE
;

190 
FALSE
:

193  
FALSE
;

195  
TRUE
;

196 
	}
}

198 
uöt32_t


199 
	$zdr_nfs°©3
 (
ZDR
 *
zdrs
, 
nfs°©3
 *
objp
)

201 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

202  
FALSE
;

203  
TRUE
;

204 
	}
}

206 
uöt32_t


207 
	$zdr_°abÀ_how
 (
ZDR
 *
zdrs
, 
°abÀ_how
 *
objp
)

209 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

210  
FALSE
;

211  
TRUE
;

212 
	}
}

214 
uöt32_t


215 
	$zdr_off£t3
 (
ZDR
 *
zdrs
, 
off£t3
 *
objp
)

217 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

218  
FALSE
;

219  
TRUE
;

220 
	}
}

222 
uöt32_t


223 
	$zdr_cou¡3
 (
ZDR
 *
zdrs
, 
cou¡3
 *
objp
)

225 i‡(!
	`zdr_u_öt
 (
zdrs
, 
objp
))

226  
FALSE
;

227  
TRUE
;

228 
	}
}

230 
uöt32_t


231 
	$zdr_wcc_©å
 (
ZDR
 *
zdrs
, 
wcc_©å
 *
objp
)

233 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
size
))

234  
FALSE
;

235 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

236  
FALSE
;

237 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
˘ime
))

238  
FALSE
;

239  
TRUE
;

240 
	}
}

242 
uöt32_t


243 
	$zdr_¥e_›_©å
 (
ZDR
 *
zdrs
, 
¥e_›_©å
 *
objp
)

245 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
©åibuãs_fﬁlow
))

246  
FALSE
;

247 
objp
->
©åibuãs_fﬁlow
) {

248 
TRUE
:

249 i‡(!
	`zdr_wcc_©å
 (
zdrs
, &
objp
->
¥e_›_©å_u
.
©åibuãs
))

250  
FALSE
;

252 
FALSE
:

255  
FALSE
;

257  
TRUE
;

258 
	}
}

260 
uöt32_t


261 
	$zdr_wcc_d©a
 (
ZDR
 *
zdrs
, 
wcc_d©a
 *
objp
)

263 i‡(!
	`zdr_¥e_›_©å
 (
zdrs
, &
objp
->
bef‹e
))

264  
FALSE
;

265 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
a·î
))

266  
FALSE
;

267  
TRUE
;

268 
	}
}

270 
uöt32_t


271 
	$zdr_WRITE3¨gs
 (
ZDR
 *
zdrs
, 
WRITE3¨gs
 *
objp
)

273 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
fûe
))

274  
FALSE
;

275 i‡(!
	`zdr_off£t3
 (
zdrs
, &
objp
->
off£t
))

276  
FALSE
;

277 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

278  
FALSE
;

279 i‡(!
	`zdr_°abÀ_how
 (
zdrs
, &
objp
->
°abÀ
))

280  
FALSE
;

281 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, ~0))

282  
FALSE
;

283  
TRUE
;

284 
	}
}

286 
uöt32_t


287 
	$zdr_wrôevîf3
 (
ZDR
 *
zdrs
, 
wrôevîf3
 
objp
)

289 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFS3_WRITEVERFSIZE
))

290  
FALSE
;

291  
TRUE
;

292 
	}
}

294 
uöt32_t


295 
	$zdr_WRITE3ªsok
 (
ZDR
 *
zdrs
, 
WRITE3ªsok
 *
objp
)

297 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
fûe_wcc
))

298  
FALSE
;

299 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

300  
FALSE
;

301 i‡(!
	`zdr_°abÀ_how
 (
zdrs
, &
objp
->
commôãd
))

302  
FALSE
;

303 i‡(!
	`zdr_wrôevîf3
 (
zdrs
, 
objp
->
vîf
))

304  
FALSE
;

305  
TRUE
;

306 
	}
}

308 
uöt32_t


309 
	$zdr_WRITE3ªsÁû
 (
ZDR
 *
zdrs
, 
WRITE3ªsÁû
 *
objp
)

311 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
fûe_wcc
))

312  
FALSE
;

313  
TRUE
;

314 
	}
}

316 
uöt32_t


317 
	$zdr_WRITE3ªs
 (
ZDR
 *
zdrs
, 
WRITE3ªs
 *
objp
)

319 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

320  
FALSE
;

321 
objp
->
°©us
) {

322 
NFS3_OK
:

323 i‡(!
	`zdr_WRITE3ªsok
 (
zdrs
, &
objp
->
WRITE3ªs_u
.
ªsok
))

324  
FALSE
;

327 i‡(!
	`zdr_WRITE3ªsÁû
 (
zdrs
, &
objp
->
WRITE3ªs_u
.
ªsÁû
))

328  
FALSE
;

331  
TRUE
;

332 
	}
}

334 
uöt32_t


335 
	$zdr_LOOKUP3¨gs
 (
ZDR
 *
zdrs
, 
LOOKUP3¨gs
 *
objp
)

337 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
wh©
))

338  
FALSE
;

339  
TRUE
;

340 
	}
}

342 
uöt32_t


343 
	$zdr_LOOKUP3ªsok
 (
ZDR
 *
zdrs
, 
LOOKUP3ªsok
 *
objp
)

345 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
obje˘
))

346  
FALSE
;

347 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

348  
FALSE
;

349 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
dú_©åibuãs
))

350  
FALSE
;

351  
TRUE
;

352 
	}
}

354 
uöt32_t


355 
	$zdr_LOOKUP3ªsÁû
 (
ZDR
 *
zdrs
, 
LOOKUP3ªsÁû
 *
objp
)

357 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
dú_©åibuãs
))

358  
FALSE
;

359  
TRUE
;

360 
	}
}

362 
uöt32_t


363 
	$zdr_LOOKUP3ªs
 (
ZDR
 *
zdrs
, 
LOOKUP3ªs
 *
objp
)

365 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

366  
FALSE
;

367 
objp
->
°©us
) {

368 
NFS3_OK
:

369 i‡(!
	`zdr_LOOKUP3ªsok
 (
zdrs
, &
objp
->
LOOKUP3ªs_u
.
ªsok
))

370  
FALSE
;

373 i‡(!
	`zdr_LOOKUP3ªsÁû
 (
zdrs
, &
objp
->
LOOKUP3ªs_u
.
ªsÁû
))

374  
FALSE
;

377  
TRUE
;

378 
	}
}

380 
uöt32_t


381 
	$zdr_COMMIT3¨gs
 (
ZDR
 *
zdrs
, 
COMMIT3¨gs
 *
objp
)

383 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
fûe
))

384  
FALSE
;

385 i‡(!
	`zdr_off£t3
 (
zdrs
, &
objp
->
off£t
))

386  
FALSE
;

387 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

388  
FALSE
;

389  
TRUE
;

390 
	}
}

392 
uöt32_t


393 
	$zdr_COMMIT3ªsok
 (
ZDR
 *
zdrs
, 
COMMIT3ªsok
 *
objp
)

395 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
fûe_wcc
))

396  
FALSE
;

397 i‡(!
	`zdr_wrôevîf3
 (
zdrs
, 
objp
->
vîf
))

398  
FALSE
;

399  
TRUE
;

400 
	}
}

402 
uöt32_t


403 
	$zdr_COMMIT3ªsÁû
 (
ZDR
 *
zdrs
, 
COMMIT3ªsÁû
 *
objp
)

405 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
fûe_wcc
))

406  
FALSE
;

407  
TRUE
;

408 
	}
}

410 
uöt32_t


411 
	$zdr_COMMIT3ªs
 (
ZDR
 *
zdrs
, 
COMMIT3ªs
 *
objp
)

413 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

414  
FALSE
;

415 
objp
->
°©us
) {

416 
NFS3_OK
:

417 i‡(!
	`zdr_COMMIT3ªsok
 (
zdrs
, &
objp
->
COMMIT3ªs_u
.
ªsok
))

418  
FALSE
;

421 i‡(!
	`zdr_COMMIT3ªsÁû
 (
zdrs
, &
objp
->
COMMIT3ªs_u
.
ªsÁû
))

422  
FALSE
;

425  
TRUE
;

426 
	}
}

428 
uöt32_t


429 
	$zdr_ACCESS3¨gs
 (
ZDR
 *
zdrs
, 
ACCESS3¨gs
 *
objp
)

431 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
obje˘
))

432  
FALSE
;

433 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
ac˚ss
))

434  
FALSE
;

435  
TRUE
;

436 
	}
}

438 
uöt32_t


439 
	$zdr_ACCESS3ªsok
 (
ZDR
 *
zdrs
, 
ACCESS3ªsok
 *
objp
)

441 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

442  
FALSE
;

443 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
ac˚ss
))

444  
FALSE
;

445  
TRUE
;

446 
	}
}

448 
uöt32_t


449 
	$zdr_ACCESS3ªsÁû
 (
ZDR
 *
zdrs
, 
ACCESS3ªsÁû
 *
objp
)

451 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

452  
FALSE
;

453  
TRUE
;

454 
	}
}

456 
uöt32_t


457 
	$zdr_ACCESS3ªs
 (
ZDR
 *
zdrs
, 
ACCESS3ªs
 *
objp
)

459 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

460  
FALSE
;

461 
objp
->
°©us
) {

462 
NFS3_OK
:

463 i‡(!
	`zdr_ACCESS3ªsok
 (
zdrs
, &
objp
->
ACCESS3ªs_u
.
ªsok
))

464  
FALSE
;

467 i‡(!
	`zdr_ACCESS3ªsÁû
 (
zdrs
, &
objp
->
ACCESS3ªs_u
.
ªsÁû
))

468  
FALSE
;

471  
TRUE
;

472 
	}
}

474 
uöt32_t


475 
	$zdr_GETATTR3¨gs
 (
ZDR
 *
zdrs
, 
GETATTR3¨gs
 *
objp
)

477 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
obje˘
))

478  
FALSE
;

479  
TRUE
;

480 
	}
}

482 
uöt32_t


483 
	$zdr_GETATTR3ªsok
 (
ZDR
 *
zdrs
, 
GETATTR3ªsok
 *
objp
)

485 i‡(!
	`zdr_Áâr3
 (
zdrs
, &
objp
->
obj_©åibuãs
))

486  
FALSE
;

487  
TRUE
;

488 
	}
}

490 
uöt32_t


491 
	$zdr_GETATTR3ªs
 (
ZDR
 *
zdrs
, 
GETATTR3ªs
 *
objp
)

493 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

494  
FALSE
;

495 
objp
->
°©us
) {

496 
NFS3_OK
:

497 i‡(!
	`zdr_GETATTR3ªsok
 (
zdrs
, &
objp
->
GETATTR3ªs_u
.
ªsok
))

498  
FALSE
;

503  
TRUE
;

504 
	}
}

506 
uöt32_t


507 
	$zdr_time_how
 (
ZDR
 *
zdrs
, 
time_how
 *
objp
)

509 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

510  
FALSE
;

511  
TRUE
;

512 
	}
}

514 
uöt32_t


515 
	$zdr_£t_mode3
 (
ZDR
 *
zdrs
, 
£t_mode3
 *
objp
)

517 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
£t_ô
))

518  
FALSE
;

519 
objp
->
£t_ô
) {

520 
TRUE
:

521 i‡(!
	`zdr_mode3
 (
zdrs
, &
objp
->
£t_mode3_u
.
mode
))

522  
FALSE
;

527  
TRUE
;

528 
	}
}

530 
uöt32_t


531 
	$zdr_£t_uid3
 (
ZDR
 *
zdrs
, 
£t_uid3
 *
objp
)

533 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
£t_ô
))

534  
FALSE
;

535 
objp
->
£t_ô
) {

536 
TRUE
:

537 i‡(!
	`zdr_uid3
 (
zdrs
, &
objp
->
£t_uid3_u
.
uid
))

538  
FALSE
;

543  
TRUE
;

544 
	}
}

546 
uöt32_t


547 
	$zdr_£t_gid3
 (
ZDR
 *
zdrs
, 
£t_gid3
 *
objp
)

549 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
£t_ô
))

550  
FALSE
;

551 
objp
->
£t_ô
) {

552 
TRUE
:

553 i‡(!
	`zdr_gid3
 (
zdrs
, &
objp
->
£t_gid3_u
.
gid
))

554  
FALSE
;

559  
TRUE
;

560 
	}
}

562 
uöt32_t


563 
	$zdr_£t_size3
 (
ZDR
 *
zdrs
, 
£t_size3
 *
objp
)

565 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
£t_ô
))

566  
FALSE
;

567 
objp
->
£t_ô
) {

568 
TRUE
:

569 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
£t_size3_u
.
size
))

570  
FALSE
;

575  
TRUE
;

576 
	}
}

578 
uöt32_t


579 
	$zdr_£t_©ime
 (
ZDR
 *
zdrs
, 
£t_©ime
 *
objp
)

581 i‡(!
	`zdr_time_how
 (
zdrs
, &
objp
->
£t_ô
))

582  
FALSE
;

583 
objp
->
£t_ô
) {

584 
SET_TO_CLIENT_TIME
:

585 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
£t_©ime_u
.
©ime
))

586  
FALSE
;

591  
TRUE
;

592 
	}
}

594 
uöt32_t


595 
	$zdr_£t_mtime
 (
ZDR
 *
zdrs
, 
£t_mtime
 *
objp
)

597 i‡(!
	`zdr_time_how
 (
zdrs
, &
objp
->
£t_ô
))

598  
FALSE
;

599 
objp
->
£t_ô
) {

600 
SET_TO_CLIENT_TIME
:

601 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
£t_mtime_u
.
mtime
))

602  
FALSE
;

607  
TRUE
;

608 
	}
}

610 
uöt32_t


611 
	$zdr_ßâr3
 (
ZDR
 *
zdrs
, 
ßâr3
 *
objp
)

613 i‡(!
	`zdr_£t_mode3
 (
zdrs
, &
objp
->
mode
))

614  
FALSE
;

615 i‡(!
	`zdr_£t_uid3
 (
zdrs
, &
objp
->
uid
))

616  
FALSE
;

617 i‡(!
	`zdr_£t_gid3
 (
zdrs
, &
objp
->
gid
))

618  
FALSE
;

619 i‡(!
	`zdr_£t_size3
 (
zdrs
, &
objp
->
size
))

620  
FALSE
;

621 i‡(!
	`zdr_£t_©ime
 (
zdrs
, &
objp
->
©ime
))

622  
FALSE
;

623 i‡(!
	`zdr_£t_mtime
 (
zdrs
, &
objp
->
mtime
))

624  
FALSE
;

625  
TRUE
;

626 
	}
}

628 
uöt32_t


629 
	$zdr_¸óãmode3
 (
ZDR
 *
zdrs
, 
¸óãmode3
 *
objp
)

631 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

632  
FALSE
;

633  
TRUE
;

634 
	}
}

636 
uöt32_t


637 
	$zdr_¸óãvîf3
 (
ZDR
 *
zdrs
, 
¸óãvîf3
 
objp
)

639 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFS3_CREATEVERFSIZE
))

640  
FALSE
;

641  
TRUE
;

642 
	}
}

644 
uöt32_t


645 
	$zdr_¸óãhow3
 (
ZDR
 *
zdrs
, 
¸óãhow3
 *
objp
)

647 i‡(!
	`zdr_¸óãmode3
 (
zdrs
, &
objp
->
mode
))

648  
FALSE
;

649 
objp
->
mode
) {

650 
UNCHECKED
:

651 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
¸óãhow3_u
.
obj_©åibuãs
))

652  
FALSE
;

654 
GUARDED
:

655 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
¸óãhow3_u
.
g_obj_©åibuãs
))

656  
FALSE
;

658 
EXCLUSIVE
:

659 i‡(!
	`zdr_¸óãvîf3
 (
zdrs
, 
objp
->
¸óãhow3_u
.
vîf
))

660  
FALSE
;

663  
FALSE
;

665  
TRUE
;

666 
	}
}

668 
uöt32_t


669 
	$zdr_CREATE3¨gs
 (
ZDR
 *
zdrs
, 
CREATE3¨gs
 *
objp
)

671 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
whîe
))

672  
FALSE
;

673 i‡(!
	`zdr_¸óãhow3
 (
zdrs
, &
objp
->
how
))

674  
FALSE
;

675  
TRUE
;

676 
	}
}

678 
uöt32_t


679 
	$zdr_po°_›_fh3
 (
ZDR
 *
zdrs
, 
po°_›_fh3
 *
objp
)

681 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
h™dÀ_fﬁlows
))

682  
FALSE
;

683 
objp
->
h™dÀ_fﬁlows
) {

684 
TRUE
:

685 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
po°_›_fh3_u
.
h™dÀ
))

686  
FALSE
;

688 
FALSE
:

691  
FALSE
;

693  
TRUE
;

694 
	}
}

696 
uöt32_t


697 
	$zdr_CREATE3ªsok
 (
ZDR
 *
zdrs
, 
CREATE3ªsok
 *
objp
)

699 i‡(!
	`zdr_po°_›_fh3
 (
zdrs
, &
objp
->
obj
))

700  
FALSE
;

701 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

702  
FALSE
;

703 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

704  
FALSE
;

705  
TRUE
;

706 
	}
}

708 
uöt32_t


709 
	$zdr_CREATE3ªsÁû
 (
ZDR
 *
zdrs
, 
CREATE3ªsÁû
 *
objp
)

711 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

712  
FALSE
;

713  
TRUE
;

714 
	}
}

716 
uöt32_t


717 
	$zdr_CREATE3ªs
 (
ZDR
 *
zdrs
, 
CREATE3ªs
 *
objp
)

719 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

720  
FALSE
;

721 
objp
->
°©us
) {

722 
NFS3_OK
:

723 i‡(!
	`zdr_CREATE3ªsok
 (
zdrs
, &
objp
->
CREATE3ªs_u
.
ªsok
))

724  
FALSE
;

727 i‡(!
	`zdr_CREATE3ªsÁû
 (
zdrs
, &
objp
->
CREATE3ªs_u
.
ªsÁû
))

728  
FALSE
;

731  
TRUE
;

732 
	}
}

734 
uöt32_t


735 
	$zdr_REMOVE3¨gs
 (
ZDR
 *
zdrs
, 
REMOVE3¨gs
 *
objp
)

737 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
obje˘
))

738  
FALSE
;

739  
TRUE
;

740 
	}
}

742 
uöt32_t


743 
	$zdr_REMOVE3ªsok
 (
ZDR
 *
zdrs
, 
REMOVE3ªsok
 *
objp
)

745 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

746  
FALSE
;

747  
TRUE
;

748 
	}
}

750 
uöt32_t


751 
	$zdr_REMOVE3ªsÁû
 (
ZDR
 *
zdrs
, 
REMOVE3ªsÁû
 *
objp
)

753 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

754  
FALSE
;

755  
TRUE
;

756 
	}
}

758 
uöt32_t


759 
	$zdr_REMOVE3ªs
 (
ZDR
 *
zdrs
, 
REMOVE3ªs
 *
objp
)

761 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

762  
FALSE
;

763 
objp
->
°©us
) {

764 
NFS3_OK
:

765 i‡(!
	`zdr_REMOVE3ªsok
 (
zdrs
, &
objp
->
REMOVE3ªs_u
.
ªsok
))

766  
FALSE
;

769 i‡(!
	`zdr_REMOVE3ªsÁû
 (
zdrs
, &
objp
->
REMOVE3ªs_u
.
ªsÁû
))

770  
FALSE
;

773  
TRUE
;

774 
	}
}

776 
uöt32_t


777 
	$zdr_READ3¨gs
 (
ZDR
 *
zdrs
, 
READ3¨gs
 *
objp
)

779 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
fûe
))

780  
FALSE
;

781 i‡(!
	`zdr_off£t3
 (
zdrs
, &
objp
->
off£t
))

782  
FALSE
;

783 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

784  
FALSE
;

785  
TRUE
;

786 
	}
}

788 
uöt32_t


789 
	$zdr_READ3ªsok
 (
ZDR
 *
zdrs
, 
READ3ªsok
 *
objp
)

791 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
fûe_©åibuãs
))

792  
FALSE
;

793 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

794  
FALSE
;

795 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

796  
FALSE
;

797 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, ~0))

798  
FALSE
;

799  
TRUE
;

800 
	}
}

802 
uöt32_t


803 
	$zdr_READ3ªsÁû
 (
ZDR
 *
zdrs
, 
READ3ªsÁû
 *
objp
)

805 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
fûe_©åibuãs
))

806  
FALSE
;

807  
TRUE
;

808 
	}
}

810 
uöt32_t


811 
	$zdr_READ3ªs
 (
ZDR
 *
zdrs
, 
READ3ªs
 *
objp
)

813 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

814  
FALSE
;

815 
objp
->
°©us
) {

816 
NFS3_OK
:

817 i‡(!
	`zdr_READ3ªsok
 (
zdrs
, &
objp
->
READ3ªs_u
.
ªsok
))

818  
FALSE
;

821 i‡(!
	`zdr_READ3ªsÁû
 (
zdrs
, &
objp
->
READ3ªs_u
.
ªsÁû
))

822  
FALSE
;

825  
TRUE
;

826 
	}
}

828 
uöt32_t


829 
	$zdr_FSINFO3¨gs
 (
ZDR
 *
zdrs
, 
FSINFO3¨gs
 *
objp
)

831 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
f§oŸ
))

832  
FALSE
;

833  
TRUE
;

834 
	}
}

836 
uöt32_t


837 
	$zdr_FSINFO3ªsok
 (
ZDR
 *
zdrs
, 
FSINFO3ªsok
 *
objp
)

839 
öt32_t
 *
buf
;

841 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

842 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

843  
FALSE
;

844 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 7 * 
BYTES_PER_ZDR_UNIT
);

845 i‡(
buf
 =
NULL
) {

846 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
πmax
))

847  
FALSE
;

848 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
π¥ef
))

849  
FALSE
;

850 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
πmu…
))

851  
FALSE
;

852 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wtmax
))

853  
FALSE
;

854 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wçªf
))

855  
FALSE
;

856 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wtmu…
))

857  
FALSE
;

858 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
dçªf
))

859  
FALSE
;

862 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
πmax
);

863 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
π¥ef
);

864 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
πmu…
);

865 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
wtmax
);

866 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
wçªf
);

867 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
wtmu…
);

868 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
dçªf
);

870 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
maxfûesize
))

871  
FALSE
;

872 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
time_dñè
))

873  
FALSE
;

874 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥›îtõs
))

875  
FALSE
;

876  
TRUE
;

877 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

878 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

879  
FALSE
;

880 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 7 * 
BYTES_PER_ZDR_UNIT
);

881 i‡(
buf
 =
NULL
) {

882 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
πmax
))

883  
FALSE
;

884 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
π¥ef
))

885  
FALSE
;

886 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
πmu…
))

887  
FALSE
;

888 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wtmax
))

889  
FALSE
;

890 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wçªf
))

891  
FALSE
;

892 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wtmu…
))

893  
FALSE
;

894 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
dçªf
))

895  
FALSE
;

898 
objp
->
πmax
 = 
	`IZDR_GET_U_LONG
(
buf
);

899 
objp
->
π¥ef
 = 
	`IZDR_GET_U_LONG
(
buf
);

900 
objp
->
πmu…
 = 
	`IZDR_GET_U_LONG
(
buf
);

901 
objp
->
wtmax
 = 
	`IZDR_GET_U_LONG
(
buf
);

902 
objp
->
wçªf
 = 
	`IZDR_GET_U_LONG
(
buf
);

903 
objp
->
wtmu…
 = 
	`IZDR_GET_U_LONG
(
buf
);

904 
objp
->
dçªf
 = 
	`IZDR_GET_U_LONG
(
buf
);

906 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
maxfûesize
))

907  
FALSE
;

908 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
time_dñè
))

909  
FALSE
;

910 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥›îtõs
))

911  
FALSE
;

912  
TRUE
;

915 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

916  
FALSE
;

917 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
πmax
))

918  
FALSE
;

919 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
π¥ef
))

920  
FALSE
;

921 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
πmu…
))

922  
FALSE
;

923 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wtmax
))

924  
FALSE
;

925 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wçªf
))

926  
FALSE
;

927 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
wtmu…
))

928  
FALSE
;

929 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
dçªf
))

930  
FALSE
;

931 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
maxfûesize
))

932  
FALSE
;

933 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
time_dñè
))

934  
FALSE
;

935 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥›îtõs
))

936  
FALSE
;

937  
TRUE
;

938 
	}
}

940 
uöt32_t


941 
	$zdr_FSINFO3ªsÁû
 (
ZDR
 *
zdrs
, 
FSINFO3ªsÁû
 *
objp
)

943 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

944  
FALSE
;

945  
TRUE
;

946 
	}
}

948 
uöt32_t


949 
	$zdr_FSINFO3ªs
 (
ZDR
 *
zdrs
, 
FSINFO3ªs
 *
objp
)

951 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

952  
FALSE
;

953 
objp
->
°©us
) {

954 
NFS3_OK
:

955 i‡(!
	`zdr_FSINFO3ªsok
 (
zdrs
, &
objp
->
FSINFO3ªs_u
.
ªsok
))

956  
FALSE
;

959 i‡(!
	`zdr_FSINFO3ªsÁû
 (
zdrs
, &
objp
->
FSINFO3ªs_u
.
ªsÁû
))

960  
FALSE
;

963  
TRUE
;

964 
	}
}

966 
uöt32_t


967 
	$zdr_FSSTAT3¨gs
 (
ZDR
 *
zdrs
, 
FSSTAT3¨gs
 *
objp
)

969 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
f§oŸ
))

970  
FALSE
;

971  
TRUE
;

972 
	}
}

974 
uöt32_t


975 
	$zdr_FSSTAT3ªsok
 (
ZDR
 *
zdrs
, 
FSSTAT3ªsok
 *
objp
)

977 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

978  
FALSE
;

979 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
tbyãs
))

980  
FALSE
;

981 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
fbyãs
))

982  
FALSE
;

983 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
abyãs
))

984  
FALSE
;

985 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
tfûes
))

986  
FALSE
;

987 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
ffûes
))

988  
FALSE
;

989 i‡(!
	`zdr_size3
 (
zdrs
, &
objp
->
afûes
))

990  
FALSE
;

991 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
öv¨£c
))

992  
FALSE
;

993  
TRUE
;

994 
	}
}

996 
uöt32_t


997 
	$zdr_FSSTAT3ªsÁû
 (
ZDR
 *
zdrs
, 
FSSTAT3ªsÁû
 *
objp
)

999 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1000  
FALSE
;

1001  
TRUE
;

1002 
	}
}

1004 
uöt32_t


1005 
	$zdr_FSSTAT3ªs
 (
ZDR
 *
zdrs
, 
FSSTAT3ªs
 *
objp
)

1007 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1008  
FALSE
;

1009 
objp
->
°©us
) {

1010 
NFS3_OK
:

1011 i‡(!
	`zdr_FSSTAT3ªsok
 (
zdrs
, &
objp
->
FSSTAT3ªs_u
.
ªsok
))

1012  
FALSE
;

1015 i‡(!
	`zdr_FSSTAT3ªsÁû
 (
zdrs
, &
objp
->
FSSTAT3ªs_u
.
ªsÁû
))

1016  
FALSE
;

1019  
TRUE
;

1020 
	}
}

1022 
uöt32_t


1023 
	$zdr_PATHCONF3¨gs
 (
ZDR
 *
zdrs
, 
PATHCONF3¨gs
 *
objp
)

1025 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
obje˘
))

1026  
FALSE
;

1027  
TRUE
;

1028 
	}
}

1030 
uöt32_t


1031 
	$zdr_PATHCONF3ªsok
 (
ZDR
 *
zdrs
, 
PATHCONF3ªsok
 *
objp
)

1033 
öt32_t
 *
buf
;

1035 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

1036 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1037  
FALSE
;

1038 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 6 * 
BYTES_PER_ZDR_UNIT
);

1039 i‡(
buf
 =
NULL
) {

1040 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
lökmax
))

1041  
FALSE
;

1042 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
«me_max
))

1043  
FALSE
;

1044 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
no_åunc
))

1045  
FALSE
;

1046 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
chown_ª°ri˘ed
))

1047  
FALSE
;

1048 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ˇ£_ö£nsôive
))

1049  
FALSE
;

1050 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ˇ£_¥e£rvög
))

1051  
FALSE
;

1053 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
lökmax
);

1054 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
«me_max
);

1055 
	`IZDR_PUT_BOOL
(
buf
, 
objp
->
no_åunc
);

1056 
	`IZDR_PUT_BOOL
(
buf
, 
objp
->
chown_ª°ri˘ed
);

1057 
	`IZDR_PUT_BOOL
(
buf
, 
objp
->
ˇ£_ö£nsôive
);

1058 
	`IZDR_PUT_BOOL
(
buf
, 
objp
->
ˇ£_¥e£rvög
);

1060  
TRUE
;

1061 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

1062 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1063  
FALSE
;

1064 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 6 * 
BYTES_PER_ZDR_UNIT
);

1065 i‡(
buf
 =
NULL
) {

1066 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
lökmax
))

1067  
FALSE
;

1068 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
«me_max
))

1069  
FALSE
;

1070 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
no_åunc
))

1071  
FALSE
;

1072 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
chown_ª°ri˘ed
))

1073  
FALSE
;

1074 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ˇ£_ö£nsôive
))

1075  
FALSE
;

1076 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ˇ£_¥e£rvög
))

1077  
FALSE
;

1079 
objp
->
lökmax
 = 
	`IZDR_GET_U_LONG
(
buf
);

1080 
objp
->
«me_max
 = 
	`IZDR_GET_U_LONG
(
buf
);

1081 
objp
->
no_åunc
 = 
	`IZDR_GET_BOOL
(
buf
);

1082 
objp
->
chown_ª°ri˘ed
 = 
	`IZDR_GET_BOOL
(
buf
);

1083 
objp
->
ˇ£_ö£nsôive
 = 
	`IZDR_GET_BOOL
(
buf
);

1084 
objp
->
ˇ£_¥e£rvög
 = 
	`IZDR_GET_BOOL
(
buf
);

1086  
TRUE
;

1089 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1090  
FALSE
;

1091 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
lökmax
))

1092  
FALSE
;

1093 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
«me_max
))

1094  
FALSE
;

1095 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
no_åunc
))

1096  
FALSE
;

1097 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
chown_ª°ri˘ed
))

1098  
FALSE
;

1099 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ˇ£_ö£nsôive
))

1100  
FALSE
;

1101 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ˇ£_¥e£rvög
))

1102  
FALSE
;

1103  
TRUE
;

1104 
	}
}

1106 
uöt32_t


1107 
	$zdr_PATHCONF3ªsÁû
 (
ZDR
 *
zdrs
, 
PATHCONF3ªsÁû
 *
objp
)

1109 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1110  
FALSE
;

1111  
TRUE
;

1112 
	}
}

1114 
uöt32_t


1115 
	$zdr_PATHCONF3ªs
 (
ZDR
 *
zdrs
, 
PATHCONF3ªs
 *
objp
)

1117 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1118  
FALSE
;

1119 
objp
->
°©us
) {

1120 
NFS3_OK
:

1121 i‡(!
	`zdr_PATHCONF3ªsok
 (
zdrs
, &
objp
->
PATHCONF3ªs_u
.
ªsok
))

1122  
FALSE
;

1125 i‡(!
	`zdr_PATHCONF3ªsÁû
 (
zdrs
, &
objp
->
PATHCONF3ªs_u
.
ªsÁû
))

1126  
FALSE
;

1129  
TRUE
;

1130 
	}
}

1132 
uöt32_t


1133 
	$zdr_nf•©h3
 (
ZDR
 *
zdrs
, 
nf•©h3
 *
objp
)

1135 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, ~0))

1136  
FALSE
;

1137  
TRUE
;

1138 
	}
}

1140 
uöt32_t


1141 
	$zdr_symlökd©a3
 (
ZDR
 *
zdrs
, 
symlökd©a3
 *
objp
)

1143 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
symlök_©åibuãs
))

1144  
FALSE
;

1145 i‡(!
	`zdr_nf•©h3
 (
zdrs
, &
objp
->
symlök_d©a
))

1146  
FALSE
;

1147  
TRUE
;

1148 
	}
}

1150 
uöt32_t


1151 
	$zdr_SYMLINK3¨gs
 (
ZDR
 *
zdrs
, 
SYMLINK3¨gs
 *
objp
)

1153 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
whîe
))

1154  
FALSE
;

1155 i‡(!
	`zdr_symlökd©a3
 (
zdrs
, &
objp
->
symlök
))

1156  
FALSE
;

1157  
TRUE
;

1158 
	}
}

1160 
uöt32_t


1161 
	$zdr_SYMLINK3ªsok
 (
ZDR
 *
zdrs
, 
SYMLINK3ªsok
 *
objp
)

1163 i‡(!
	`zdr_po°_›_fh3
 (
zdrs
, &
objp
->
obj
))

1164  
FALSE
;

1165 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1166  
FALSE
;

1167 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1168  
FALSE
;

1169  
TRUE
;

1170 
	}
}

1172 
uöt32_t


1173 
	$zdr_SYMLINK3ªsÁû
 (
ZDR
 *
zdrs
, 
SYMLINK3ªsÁû
 *
objp
)

1175 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1176  
FALSE
;

1177  
TRUE
;

1178 
	}
}

1180 
uöt32_t


1181 
	$zdr_SYMLINK3ªs
 (
ZDR
 *
zdrs
, 
SYMLINK3ªs
 *
objp
)

1183 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1184  
FALSE
;

1185 
objp
->
°©us
) {

1186 
NFS3_OK
:

1187 i‡(!
	`zdr_SYMLINK3ªsok
 (
zdrs
, &
objp
->
SYMLINK3ªs_u
.
ªsok
))

1188  
FALSE
;

1191 i‡(!
	`zdr_SYMLINK3ªsÁû
 (
zdrs
, &
objp
->
SYMLINK3ªs_u
.
ªsÁû
))

1192  
FALSE
;

1195  
TRUE
;

1196 
	}
}

1198 
uöt32_t


1199 
	$zdr_READLINK3¨gs
 (
ZDR
 *
zdrs
, 
READLINK3¨gs
 *
objp
)

1201 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
symlök
))

1202  
FALSE
;

1203  
TRUE
;

1204 
	}
}

1206 
uöt32_t


1207 
	$zdr_READLINK3ªsok
 (
ZDR
 *
zdrs
, 
READLINK3ªsok
 *
objp
)

1209 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
symlök_©åibuãs
))

1210  
FALSE
;

1211 i‡(!
	`zdr_nf•©h3
 (
zdrs
, &
objp
->
d©a
))

1212  
FALSE
;

1213  
TRUE
;

1214 
	}
}

1216 
uöt32_t


1217 
	$zdr_READLINK3ªsÁû
 (
ZDR
 *
zdrs
, 
READLINK3ªsÁû
 *
objp
)

1219 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
symlök_©åibuãs
))

1220  
FALSE
;

1221  
TRUE
;

1222 
	}
}

1224 
uöt32_t


1225 
	$zdr_READLINK3ªs
 (
ZDR
 *
zdrs
, 
READLINK3ªs
 *
objp
)

1227 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1228  
FALSE
;

1229 
objp
->
°©us
) {

1230 
NFS3_OK
:

1231 i‡(!
	`zdr_READLINK3ªsok
 (
zdrs
, &
objp
->
READLINK3ªs_u
.
ªsok
))

1232  
FALSE
;

1235 i‡(!
	`zdr_READLINK3ªsÁû
 (
zdrs
, &
objp
->
READLINK3ªs_u
.
ªsÁû
))

1236  
FALSE
;

1239  
TRUE
;

1240 
	}
}

1242 
uöt32_t


1243 
	$zdr_devi˚d©a3
 (
ZDR
 *
zdrs
, 
devi˚d©a3
 *
objp
)

1245 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
dev_©åibuãs
))

1246  
FALSE
;

1247 i‡(!
	`zdr_•ecd©a3
 (
zdrs
, &
objp
->
•ec
))

1248  
FALSE
;

1249  
TRUE
;

1250 
	}
}

1252 
uöt32_t


1253 
	$zdr_mknodd©a3
 (
ZDR
 *
zdrs
, 
mknodd©a3
 *
objp
)

1255 i‡(!
	`zdr_·y≥3
 (
zdrs
, &
objp
->
ty≥
))

1256  
FALSE
;

1257 
objp
->
ty≥
) {

1258 
NF3CHR
:

1259 i‡(!
	`zdr_devi˚d©a3
 (
zdrs
, &
objp
->
mknodd©a3_u
.
chr_devi˚
))

1260  
FALSE
;

1262 
NF3BLK
:

1263 i‡(!
	`zdr_devi˚d©a3
 (
zdrs
, &
objp
->
mknodd©a3_u
.
blk_devi˚
))

1264  
FALSE
;

1266 
NF3SOCK
:

1267 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
mknodd©a3_u
.
sock_©åibuãs
))

1268  
FALSE
;

1270 
NF3FIFO
:

1271 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
mknodd©a3_u
.
pùe_©åibuãs
))

1272  
FALSE
;

1277  
TRUE
;

1278 
	}
}

1280 
uöt32_t


1281 
	$zdr_MKNOD3¨gs
 (
ZDR
 *
zdrs
, 
MKNOD3¨gs
 *
objp
)

1283 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
whîe
))

1284  
FALSE
;

1285 i‡(!
	`zdr_mknodd©a3
 (
zdrs
, &
objp
->
wh©
))

1286  
FALSE
;

1287  
TRUE
;

1288 
	}
}

1290 
uöt32_t


1291 
	$zdr_MKNOD3ªsok
 (
ZDR
 *
zdrs
, 
MKNOD3ªsok
 *
objp
)

1293 i‡(!
	`zdr_po°_›_fh3
 (
zdrs
, &
objp
->
obj
))

1294  
FALSE
;

1295 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1296  
FALSE
;

1297 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1298  
FALSE
;

1299  
TRUE
;

1300 
	}
}

1302 
uöt32_t


1303 
	$zdr_MKNOD3ªsÁû
 (
ZDR
 *
zdrs
, 
MKNOD3ªsÁû
 *
objp
)

1305 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1306  
FALSE
;

1307  
TRUE
;

1308 
	}
}

1310 
uöt32_t


1311 
	$zdr_MKNOD3ªs
 (
ZDR
 *
zdrs
, 
MKNOD3ªs
 *
objp
)

1313 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1314  
FALSE
;

1315 
objp
->
°©us
) {

1316 
NFS3_OK
:

1317 i‡(!
	`zdr_MKNOD3ªsok
 (
zdrs
, &
objp
->
MKNOD3ªs_u
.
ªsok
))

1318  
FALSE
;

1321 i‡(!
	`zdr_MKNOD3ªsÁû
 (
zdrs
, &
objp
->
MKNOD3ªs_u
.
ªsÁû
))

1322  
FALSE
;

1325  
TRUE
;

1326 
	}
}

1328 
uöt32_t


1329 
	$zdr_MKDIR3¨gs
 (
ZDR
 *
zdrs
, 
MKDIR3¨gs
 *
objp
)

1331 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
whîe
))

1332  
FALSE
;

1333 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
©åibuãs
))

1334  
FALSE
;

1335  
TRUE
;

1336 
	}
}

1338 
uöt32_t


1339 
	$zdr_MKDIR3ªsok
 (
ZDR
 *
zdrs
, 
MKDIR3ªsok
 *
objp
)

1341 i‡(!
	`zdr_po°_›_fh3
 (
zdrs
, &
objp
->
obj
))

1342  
FALSE
;

1343 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1344  
FALSE
;

1345 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1346  
FALSE
;

1347  
TRUE
;

1348 
	}
}

1350 
uöt32_t


1351 
	$zdr_MKDIR3ªsÁû
 (
ZDR
 *
zdrs
, 
MKDIR3ªsÁû
 *
objp
)

1353 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1354  
FALSE
;

1355  
TRUE
;

1356 
	}
}

1358 
uöt32_t


1359 
	$zdr_MKDIR3ªs
 (
ZDR
 *
zdrs
, 
MKDIR3ªs
 *
objp
)

1361 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1362  
FALSE
;

1363 
objp
->
°©us
) {

1364 
NFS3_OK
:

1365 i‡(!
	`zdr_MKDIR3ªsok
 (
zdrs
, &
objp
->
MKDIR3ªs_u
.
ªsok
))

1366  
FALSE
;

1369 i‡(!
	`zdr_MKDIR3ªsÁû
 (
zdrs
, &
objp
->
MKDIR3ªs_u
.
ªsÁû
))

1370  
FALSE
;

1373  
TRUE
;

1374 
	}
}

1376 
uöt32_t


1377 
	$zdr_RMDIR3¨gs
 (
ZDR
 *
zdrs
, 
RMDIR3¨gs
 *
objp
)

1379 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
obje˘
))

1380  
FALSE
;

1381  
TRUE
;

1382 
	}
}

1384 
uöt32_t


1385 
	$zdr_RMDIR3ªsok
 (
ZDR
 *
zdrs
, 
RMDIR3ªsok
 *
objp
)

1387 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1388  
FALSE
;

1389  
TRUE
;

1390 
	}
}

1392 
uöt32_t


1393 
	$zdr_RMDIR3ªsÁû
 (
ZDR
 *
zdrs
, 
RMDIR3ªsÁû
 *
objp
)

1395 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
dú_wcc
))

1396  
FALSE
;

1397  
TRUE
;

1398 
	}
}

1400 
uöt32_t


1401 
	$zdr_RMDIR3ªs
 (
ZDR
 *
zdrs
, 
RMDIR3ªs
 *
objp
)

1403 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1404  
FALSE
;

1405 
objp
->
°©us
) {

1406 
NFS3_OK
:

1407 i‡(!
	`zdr_RMDIR3ªsok
 (
zdrs
, &
objp
->
RMDIR3ªs_u
.
ªsok
))

1408  
FALSE
;

1411 i‡(!
	`zdr_RMDIR3ªsÁû
 (
zdrs
, &
objp
->
RMDIR3ªs_u
.
ªsÁû
))

1412  
FALSE
;

1415  
TRUE
;

1416 
	}
}

1418 
uöt32_t


1419 
	$zdr_RENAME3¨gs
 (
ZDR
 *
zdrs
, 
RENAME3¨gs
 *
objp
)

1421 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
‰om
))

1422  
FALSE
;

1423 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
to
))

1424  
FALSE
;

1425  
TRUE
;

1426 
	}
}

1428 
uöt32_t


1429 
	$zdr_RENAME3ªsok
 (
ZDR
 *
zdrs
, 
RENAME3ªsok
 *
objp
)

1431 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
‰omdú_wcc
))

1432  
FALSE
;

1433 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
todú_wcc
))

1434  
FALSE
;

1435  
TRUE
;

1436 
	}
}

1438 
uöt32_t


1439 
	$zdr_RENAME3ªsÁû
 (
ZDR
 *
zdrs
, 
RENAME3ªsÁû
 *
objp
)

1441 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
‰omdú_wcc
))

1442  
FALSE
;

1443 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
todú_wcc
))

1444  
FALSE
;

1445  
TRUE
;

1446 
	}
}

1448 
uöt32_t


1449 
	$zdr_RENAME3ªs
 (
ZDR
 *
zdrs
, 
RENAME3ªs
 *
objp
)

1451 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1452  
FALSE
;

1453 
objp
->
°©us
) {

1454 
NFS3_OK
:

1455 i‡(!
	`zdr_RENAME3ªsok
 (
zdrs
, &
objp
->
RENAME3ªs_u
.
ªsok
))

1456  
FALSE
;

1459 i‡(!
	`zdr_RENAME3ªsÁû
 (
zdrs
, &
objp
->
RENAME3ªs_u
.
ªsÁû
))

1460  
FALSE
;

1463  
TRUE
;

1464 
	}
}

1466 
uöt32_t


1467 
	$zdr_READDIRPLUS3¨gs
 (
ZDR
 *
zdrs
, 
READDIRPLUS3¨gs
 *
objp
)

1469 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
dú
))

1470  
FALSE
;

1471 i‡(!
	`zdr_cookõ3
 (
zdrs
, &
objp
->
cookõ
))

1472  
FALSE
;

1473 i‡(!
	`zdr_cookõvîf3
 (
zdrs
, 
objp
->
cookõvîf
))

1474  
FALSE
;

1475 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
dúcou¡
))

1476  
FALSE
;

1477 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
maxcou¡
))

1478  
FALSE
;

1479  
TRUE
;

1480 
	}
}

1482 
uöt32_t


1483 
	$zdr_íåy∂us3
 (
ZDR
 *
zdrs
, 
íåy∂us3
 *
objp
)

1485 i‡(!
	`zdr_fûeid3
 (
zdrs
, &
objp
->
fûeid
))

1486  
FALSE
;

1487 i‡(!
	`zdr_fûíame3
 (
zdrs
, &
objp
->
«me
))

1488  
FALSE
;

1489 i‡(!
	`zdr_cookõ3
 (
zdrs
, &
objp
->
cookõ
))

1490  
FALSE
;

1491 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
«me_©åibuãs
))

1492  
FALSE
;

1493 i‡(!
	`zdr_po°_›_fh3
 (
zdrs
, &
objp
->
«me_h™dÀ
))

1494  
FALSE
;

1495 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
√xã¡ry
,  (
íåy∂us3
), (
zdΩroc_t
Ë
zdr_íåy∂us3
))

1496  
FALSE
;

1497  
TRUE
;

1498 
	}
}

1500 
uöt32_t


1501 
	$zdr_dúli°∂us3
 (
ZDR
 *
zdrs
, 
dúli°∂us3
 *
objp
)

1503 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
íåõs
,  (
íåy∂us3
), (
zdΩroc_t
Ë
zdr_íåy∂us3
))

1504  
FALSE
;

1505 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

1506  
FALSE
;

1507  
TRUE
;

1508 
	}
}

1510 
uöt32_t


1511 
	$zdr_READDIRPLUS3ªsok
 (
ZDR
 *
zdrs
, 
READDIRPLUS3ªsok
 *
objp
)

1513 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
dú_©åibuãs
))

1514  
FALSE
;

1515 i‡(!
	`zdr_cookõvîf3
 (
zdrs
, 
objp
->
cookõvîf
))

1516  
FALSE
;

1517 i‡(!
	`zdr_dúli°∂us3
 (
zdrs
, &
objp
->
ª∂y
))

1518  
FALSE
;

1519  
TRUE
;

1520 
	}
}

1522 
uöt32_t


1523 
	$zdr_READDIRPLUS3ªsÁû
 (
ZDR
 *
zdrs
, 
READDIRPLUS3ªsÁû
 *
objp
)

1525 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
dú_©åibuãs
))

1526  
FALSE
;

1527  
TRUE
;

1528 
	}
}

1530 
uöt32_t


1531 
	$zdr_READDIRPLUS3ªs
 (
ZDR
 *
zdrs
, 
READDIRPLUS3ªs
 *
objp
)

1533 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1534  
FALSE
;

1535 
objp
->
°©us
) {

1536 
NFS3_OK
:

1537 i‡(!
	`zdr_READDIRPLUS3ªsok
 (
zdrs
, &
objp
->
READDIRPLUS3ªs_u
.
ªsok
))

1538  
FALSE
;

1541 i‡(!
	`zdr_READDIRPLUS3ªsÁû
 (
zdrs
, &
objp
->
READDIRPLUS3ªs_u
.
ªsÁû
))

1542  
FALSE
;

1545  
TRUE
;

1546 
	}
}

1548 
uöt32_t


1549 
	$zdr_READDIR3¨gs
 (
ZDR
 *
zdrs
, 
READDIR3¨gs
 *
objp
)

1551 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
dú
))

1552  
FALSE
;

1553 i‡(!
	`zdr_cookõ3
 (
zdrs
, &
objp
->
cookõ
))

1554  
FALSE
;

1555 i‡(!
	`zdr_cookõvîf3
 (
zdrs
, 
objp
->
cookõvîf
))

1556  
FALSE
;

1557 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

1558  
FALSE
;

1559  
TRUE
;

1560 
	}
}

1562 
uöt32_t


1563 
	$zdr_íåy3
 (
ZDR
 *
zdrs
, 
íåy3
 *
objp
)

1565 i‡(!
	`zdr_fûeid3
 (
zdrs
, &
objp
->
fûeid
))

1566  
FALSE
;

1567 i‡(!
	`zdr_fûíame3
 (
zdrs
, &
objp
->
«me
))

1568  
FALSE
;

1569 i‡(!
	`zdr_cookõ3
 (
zdrs
, &
objp
->
cookõ
))

1570  
FALSE
;

1571 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
√xã¡ry
,  (
íåy3
), (
zdΩroc_t
Ë
zdr_íåy3
))

1572  
FALSE
;

1573  
TRUE
;

1574 
	}
}

1576 
uöt32_t


1577 
	$zdr_dúli°3
 (
ZDR
 *
zdrs
, 
dúli°3
 *
objp
)

1579 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
íåõs
,  (
íåy3
), (
zdΩroc_t
Ë
zdr_íåy3
))

1580  
FALSE
;

1581 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

1582  
FALSE
;

1583  
TRUE
;

1584 
	}
}

1586 
uöt32_t


1587 
	$zdr_READDIR3ªsok
 (
ZDR
 *
zdrs
, 
READDIR3ªsok
 *
objp
)

1589 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
dú_©åibuãs
))

1590  
FALSE
;

1591 i‡(!
	`zdr_cookõvîf3
 (
zdrs
, 
objp
->
cookõvîf
))

1592  
FALSE
;

1593 i‡(!
	`zdr_dúli°3
 (
zdrs
, &
objp
->
ª∂y
))

1594  
FALSE
;

1595  
TRUE
;

1596 
	}
}

1598 
uöt32_t


1599 
	$zdr_READDIR3ªsÁû
 (
ZDR
 *
zdrs
, 
READDIR3ªsÁû
 *
objp
)

1601 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
dú_©åibuãs
))

1602  
FALSE
;

1603  
TRUE
;

1604 
	}
}

1606 
uöt32_t


1607 
	$zdr_READDIR3ªs
 (
ZDR
 *
zdrs
, 
READDIR3ªs
 *
objp
)

1609 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1610  
FALSE
;

1611 
objp
->
°©us
) {

1612 
NFS3_OK
:

1613 i‡(!
	`zdr_READDIR3ªsok
 (
zdrs
, &
objp
->
READDIR3ªs_u
.
ªsok
))

1614  
FALSE
;

1617 i‡(!
	`zdr_READDIR3ªsÁû
 (
zdrs
, &
objp
->
READDIR3ªs_u
.
ªsÁû
))

1618  
FALSE
;

1621  
TRUE
;

1622 
	}
}

1624 
uöt32_t


1625 
	$zdr_LINK3¨gs
 (
ZDR
 *
zdrs
, 
LINK3¨gs
 *
objp
)

1627 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
fûe
))

1628  
FALSE
;

1629 i‡(!
	`zdr_dú›¨gs3
 (
zdrs
, &
objp
->
lök
))

1630  
FALSE
;

1631  
TRUE
;

1632 
	}
}

1634 
uöt32_t


1635 
	$zdr_LINK3ªsok
 (
ZDR
 *
zdrs
, 
LINK3ªsok
 *
objp
)

1637 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
fûe_©åibuãs
))

1638  
FALSE
;

1639 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
lökdú_wcc
))

1640  
FALSE
;

1641  
TRUE
;

1642 
	}
}

1644 
uöt32_t


1645 
	$zdr_LINK3ªsÁû
 (
ZDR
 *
zdrs
, 
LINK3ªsÁû
 *
objp
)

1647 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
fûe_©åibuãs
))

1648  
FALSE
;

1649 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
lökdú_wcc
))

1650  
FALSE
;

1651  
TRUE
;

1652 
	}
}

1654 
uöt32_t


1655 
	$zdr_LINK3ªs
 (
ZDR
 *
zdrs
, 
LINK3ªs
 *
objp
)

1657 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1658  
FALSE
;

1659 
objp
->
°©us
) {

1660 
NFS3_OK
:

1661 i‡(!
	`zdr_LINK3ªsok
 (
zdrs
, &
objp
->
LINK3ªs_u
.
ªsok
))

1662  
FALSE
;

1665 i‡(!
	`zdr_LINK3ªsÁû
 (
zdrs
, &
objp
->
LINK3ªs_u
.
ªsÁû
))

1666  
FALSE
;

1669  
TRUE
;

1670 
	}
}

1672 
uöt32_t


1673 
	$zdr_ßârgu¨d3
 (
ZDR
 *
zdrs
, 
ßârgu¨d3
 *
objp
)

1675 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
check
))

1676  
FALSE
;

1677 
objp
->
check
) {

1678 
TRUE
:

1679 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
ßârgu¨d3_u
.
obj_˘ime
))

1680  
FALSE
;

1682 
FALSE
:

1685  
FALSE
;

1687  
TRUE
;

1688 
	}
}

1690 
uöt32_t


1691 
	$zdr_SETATTR3¨gs
 (
ZDR
 *
zdrs
, 
SETATTR3¨gs
 *
objp
)

1693 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
obje˘
))

1694  
FALSE
;

1695 i‡(!
	`zdr_ßâr3
 (
zdrs
, &
objp
->
√w_©åibuãs
))

1696  
FALSE
;

1697 i‡(!
	`zdr_ßârgu¨d3
 (
zdrs
, &
objp
->
gu¨d
))

1698  
FALSE
;

1699  
TRUE
;

1700 
	}
}

1702 
uöt32_t


1703 
	$zdr_SETATTR3ªsok
 (
ZDR
 *
zdrs
, 
SETATTR3ªsok
 *
objp
)

1705 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
obj_wcc
))

1706  
FALSE
;

1707  
TRUE
;

1708 
	}
}

1710 
uöt32_t


1711 
	$zdr_SETATTR3ªsÁû
 (
ZDR
 *
zdrs
, 
SETATTR3ªsÁû
 *
objp
)

1713 i‡(!
	`zdr_wcc_d©a
 (
zdrs
, &
objp
->
obj_wcc
))

1714  
FALSE
;

1715  
TRUE
;

1716 
	}
}

1718 
uöt32_t


1719 
	$zdr_SETATTR3ªs
 (
ZDR
 *
zdrs
, 
SETATTR3ªs
 *
objp
)

1721 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

1722  
FALSE
;

1723 
objp
->
°©us
) {

1724 
NFS3_OK
:

1725 i‡(!
	`zdr_SETATTR3ªsok
 (
zdrs
, &
objp
->
SETATTR3ªs_u
.
ªsok
))

1726  
FALSE
;

1729 i‡(!
	`zdr_SETATTR3ªsÁû
 (
zdrs
, &
objp
->
SETATTR3ªs_u
.
ªsÁû
))

1730  
FALSE
;

1733  
TRUE
;

1734 
	}
}

1736 
uöt32_t


1737 
	$zdr_fh™dÀ2
 (
ZDR
 *
zdrs
, 
fh™dÀ2
 
objp
)

1739 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
FHSIZE2
))

1740  
FALSE
;

1741  
TRUE
;

1742 
	}
}

1744 
uöt32_t


1745 
	$zdr_·y≥2
 (
ZDR
 *
zdrs
, 
·y≥2
 *
objp
)

1747 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

1748  
FALSE
;

1749  
TRUE
;

1750 
	}
}

1752 
uöt32_t


1753 
	$zdr_Áâr2
 (
ZDR
 *
zdrs
, 
Áâr2
 *
objp
)

1755 
öt32_t
 *
buf
;

1757 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

1758 i‡(!
	`zdr_·y≥2
 (
zdrs
, &
objp
->
ty≥
))

1759  
FALSE
;

1760 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 10 * 
BYTES_PER_ZDR_UNIT
);

1761 i‡(
buf
 =
NULL
) {

1762 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

1763  
FALSE
;

1764 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
∆ök
))

1765  
FALSE
;

1766 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

1767  
FALSE
;

1768 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

1769  
FALSE
;

1770 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
size
))

1771  
FALSE
;

1772 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocksize
))

1773  
FALSE
;

1774 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
rdev
))

1775  
FALSE
;

1776 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocks
))

1777  
FALSE
;

1778 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fsid
))

1779  
FALSE
;

1780 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fûeid
))

1781  
FALSE
;

1784 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
mode
);

1785 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
∆ök
);

1786 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
uid
);

1787 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
gid
);

1788 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
size
);

1789 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
blocksize
);

1790 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
rdev
);

1791 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
blocks
);

1792 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
fsid
);

1793 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
fûeid
);

1795 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

1796  
FALSE
;

1797 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

1798  
FALSE
;

1799 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
˘ime
))

1800  
FALSE
;

1801  
TRUE
;

1802 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

1803 i‡(!
	`zdr_·y≥2
 (
zdrs
, &
objp
->
ty≥
))

1804  
FALSE
;

1805 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 10 * 
BYTES_PER_ZDR_UNIT
);

1806 i‡(
buf
 =
NULL
) {

1807 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

1808  
FALSE
;

1809 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
∆ök
))

1810  
FALSE
;

1811 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

1812  
FALSE
;

1813 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

1814  
FALSE
;

1815 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
size
))

1816  
FALSE
;

1817 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocksize
))

1818  
FALSE
;

1819 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
rdev
))

1820  
FALSE
;

1821 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocks
))

1822  
FALSE
;

1823 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fsid
))

1824  
FALSE
;

1825 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fûeid
))

1826  
FALSE
;

1829 
objp
->
mode
 = 
	`IZDR_GET_U_LONG
(
buf
);

1830 
objp
->
∆ök
 = 
	`IZDR_GET_U_LONG
(
buf
);

1831 
objp
->
uid
 = 
	`IZDR_GET_U_LONG
(
buf
);

1832 
objp
->
gid
 = 
	`IZDR_GET_U_LONG
(
buf
);

1833 
objp
->
size
 = 
	`IZDR_GET_U_LONG
(
buf
);

1834 
objp
->
blocksize
 = 
	`IZDR_GET_U_LONG
(
buf
);

1835 
objp
->
rdev
 = 
	`IZDR_GET_U_LONG
(
buf
);

1836 
objp
->
blocks
 = 
	`IZDR_GET_U_LONG
(
buf
);

1837 
objp
->
fsid
 = 
	`IZDR_GET_U_LONG
(
buf
);

1838 
objp
->
fûeid
 = 
	`IZDR_GET_U_LONG
(
buf
);

1840 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

1841  
FALSE
;

1842 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

1843  
FALSE
;

1844 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
˘ime
))

1845  
FALSE
;

1846  
TRUE
;

1849 i‡(!
	`zdr_·y≥2
 (
zdrs
, &
objp
->
ty≥
))

1850  
FALSE
;

1851 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

1852  
FALSE
;

1853 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
∆ök
))

1854  
FALSE
;

1855 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

1856  
FALSE
;

1857 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

1858  
FALSE
;

1859 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
size
))

1860  
FALSE
;

1861 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocksize
))

1862  
FALSE
;

1863 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
rdev
))

1864  
FALSE
;

1865 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocks
))

1866  
FALSE
;

1867 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fsid
))

1868  
FALSE
;

1869 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fûeid
))

1870  
FALSE
;

1871 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

1872  
FALSE
;

1873 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

1874  
FALSE
;

1875 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
˘ime
))

1876  
FALSE
;

1877  
TRUE
;

1878 
	}
}

1880 
uöt32_t


1881 
	$zdr_ßâr2
 (
ZDR
 *
zdrs
, 
ßâr2
 *
objp
)

1883 
öt32_t
 *
buf
;

1885 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

1886 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 4 * 
BYTES_PER_ZDR_UNIT
);

1887 i‡(
buf
 =
NULL
) {

1888 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

1889  
FALSE
;

1890 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

1891  
FALSE
;

1892 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

1893  
FALSE
;

1894 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
size
))

1895  
FALSE
;

1898 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
mode
);

1899 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
uid
);

1900 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
gid
);

1901 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
size
);

1903 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

1904  
FALSE
;

1905 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

1906  
FALSE
;

1907  
TRUE
;

1908 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

1909 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 4 * 
BYTES_PER_ZDR_UNIT
);

1910 i‡(
buf
 =
NULL
) {

1911 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

1912  
FALSE
;

1913 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

1914  
FALSE
;

1915 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

1916  
FALSE
;

1917 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
size
))

1918  
FALSE
;

1921 
objp
->
mode
 = 
	`IZDR_GET_U_LONG
(
buf
);

1922 
objp
->
uid
 = 
	`IZDR_GET_U_LONG
(
buf
);

1923 
objp
->
gid
 = 
	`IZDR_GET_U_LONG
(
buf
);

1924 
objp
->
size
 = 
	`IZDR_GET_U_LONG
(
buf
);

1926 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

1927  
FALSE
;

1928 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

1929  
FALSE
;

1930  
TRUE
;

1933 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

1934  
FALSE
;

1935 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

1936  
FALSE
;

1937 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

1938  
FALSE
;

1939 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
size
))

1940  
FALSE
;

1941 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
©ime
))

1942  
FALSE
;

1943 i‡(!
	`zdr_nf°ime3
 (
zdrs
, &
objp
->
mtime
))

1944  
FALSE
;

1945  
TRUE
;

1946 
	}
}

1948 
uöt32_t


1949 
	$zdr_fûíame2
 (
ZDR
 *
zdrs
, 
fûíame2
 *
objp
)

1951 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, 
MAXNAMLEN2
))

1952  
FALSE
;

1953  
TRUE
;

1954 
	}
}

1956 
uöt32_t


1957 
	$zdr_∑th2
 (
ZDR
 *
zdrs
, 
∑th2
 *
objp
)

1959 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, 
MAXPATHLEN2
))

1960  
FALSE
;

1961  
TRUE
;

1962 
	}
}

1964 
uöt32_t


1965 
	$zdr_nfsd©a2
 (
ZDR
 *
zdrs
, 
nfsd©a2
 *
objp
)

1967 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
nfsd©a2_vÆ
, (
u_öt
 *Ë&objp->
nfsd©a2_Àn
, 
NFSMAXDATA2
))

1968  
FALSE
;

1969  
TRUE
;

1970 
	}
}

1972 
uöt32_t


1973 
	$zdr_nfscookõ2
 (
ZDR
 *
zdrs
, 
nfscookõ2
 
objp
)

1975 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFSCOOKIESIZE2
))

1976  
FALSE
;

1977  
TRUE
;

1978 
	}
}

1980 
uöt32_t


1981 
	$zdr_íåy2
 (
ZDR
 *
zdrs
, 
íåy2
 *
objp
)

1983 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
fûeid
))

1984  
FALSE
;

1985 i‡(!
	`zdr_fûíame2
 (
zdrs
, &
objp
->
«me
))

1986  
FALSE
;

1987 i‡(!
	`zdr_nfscookõ2
 (
zdrs
, 
objp
->
cookõ
))

1988  
FALSE
;

1989 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
√xã¡ry
,  (
íåy2
), (
zdΩroc_t
Ë
zdr_íåy2
))

1990  
FALSE
;

1991  
TRUE
;

1992 
	}
}

1994 
uöt32_t


1995 
	$zdr_dú›¨gs2
 (
ZDR
 *
zdrs
, 
dú›¨gs2
 *
objp
)

1997 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
dú
))

1998  
FALSE
;

1999 i‡(!
	`zdr_fûíame2
 (
zdrs
, &
objp
->
«me
))

2000  
FALSE
;

2001  
TRUE
;

2002 
	}
}

2004 
uöt32_t


2005 
	$zdr_GETATTR2¨gs
 (
ZDR
 *
zdrs
, 
GETATTR2¨gs
 *
objp
)

2007 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fh™dÀ
))

2008  
FALSE
;

2009  
TRUE
;

2010 
	}
}

2012 
uöt32_t


2013 
	$zdr_GETATTR2ªsok
 (
ZDR
 *
zdrs
, 
GETATTR2ªsok
 *
objp
)

2015 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2016  
FALSE
;

2017  
TRUE
;

2018 
	}
}

2020 
uöt32_t


2021 
	$zdr_GETATTR2ªs
 (
ZDR
 *
zdrs
, 
GETATTR2ªs
 *
objp
)

2023 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2024  
FALSE
;

2025 
objp
->
°©us
) {

2026 
NFS3_OK
:

2027 i‡(!
	`zdr_GETATTR2ªsok
 (
zdrs
, &
objp
->
GETATTR2ªs_u
.
ªsok
))

2028  
FALSE
;

2033  
TRUE
;

2034 
	}
}

2036 
uöt32_t


2037 
	$zdr_SETATTR2¨gs
 (
ZDR
 *
zdrs
, 
SETATTR2¨gs
 *
objp
)

2039 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fh™dÀ
))

2040  
FALSE
;

2041 i‡(!
	`zdr_ßâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2042  
FALSE
;

2043  
TRUE
;

2044 
	}
}

2046 
uöt32_t


2047 
	$zdr_SETATTR2ªsok
 (
ZDR
 *
zdrs
, 
SETATTR2ªsok
 *
objp
)

2049 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2050  
FALSE
;

2051  
TRUE
;

2052 
	}
}

2054 
uöt32_t


2055 
	$zdr_SETATTR2ªs
 (
ZDR
 *
zdrs
, 
SETATTR2ªs
 *
objp
)

2057 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2058  
FALSE
;

2059 
objp
->
°©us
) {

2060 
NFS3_OK
:

2061 i‡(!
	`zdr_SETATTR2ªsok
 (
zdrs
, &
objp
->
SETATTR2ªs_u
.
ªsok
))

2062  
FALSE
;

2067  
TRUE
;

2068 
	}
}

2070 
uöt32_t


2071 
	$zdr_LOOKUP2¨gs
 (
ZDR
 *
zdrs
, 
LOOKUP2¨gs
 *
objp
)

2073 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
wh©
))

2074  
FALSE
;

2075  
TRUE
;

2076 
	}
}

2078 
uöt32_t


2079 
	$zdr_LOOKUP2ªsok
 (
ZDR
 *
zdrs
, 
LOOKUP2ªsok
 *
objp
)

2081 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2082  
FALSE
;

2083 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2084  
FALSE
;

2085  
TRUE
;

2086 
	}
}

2088 
uöt32_t


2089 
	$zdr_LOOKUP2ªs
 (
ZDR
 *
zdrs
, 
LOOKUP2ªs
 *
objp
)

2091 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2092  
FALSE
;

2093 
objp
->
°©us
) {

2094 
NFS3_OK
:

2095 i‡(!
	`zdr_LOOKUP2ªsok
 (
zdrs
, &
objp
->
LOOKUP2ªs_u
.
ªsok
))

2096  
FALSE
;

2101  
TRUE
;

2102 
	}
}

2104 
uöt32_t


2105 
	$zdr_READLINK2¨gs
 (
ZDR
 *
zdrs
, 
READLINK2¨gs
 *
objp
)

2107 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2108  
FALSE
;

2109  
TRUE
;

2110 
	}
}

2112 
uöt32_t


2113 
	$zdr_READLINK2ªsok
 (
ZDR
 *
zdrs
, 
READLINK2ªsok
 *
objp
)

2115 i‡(!
	`zdr_∑th2
 (
zdrs
, &
objp
->
d©a
))

2116  
FALSE
;

2117  
TRUE
;

2118 
	}
}

2120 
uöt32_t


2121 
	$zdr_READLINK2ªs
 (
ZDR
 *
zdrs
, 
READLINK2ªs
 *
objp
)

2123 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2124  
FALSE
;

2125 
objp
->
°©us
) {

2126 
NFS3_OK
:

2127 i‡(!
	`zdr_READLINK2ªsok
 (
zdrs
, &
objp
->
READLINK2ªs_u
.
ªsok
))

2128  
FALSE
;

2133  
TRUE
;

2134 
	}
}

2136 
uöt32_t


2137 
	$zdr_READ2¨gs
 (
ZDR
 *
zdrs
, 
READ2¨gs
 *
objp
)

2139 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2140  
FALSE
;

2141 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
off£t
))

2142  
FALSE
;

2143 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
cou¡
))

2144  
FALSE
;

2145 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tŸÆcou¡
))

2146  
FALSE
;

2147  
TRUE
;

2148 
	}
}

2150 
uöt32_t


2151 
	$zdr_READ2ªsok
 (
ZDR
 *
zdrs
, 
READ2ªsok
 *
objp
)

2153 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2154  
FALSE
;

2155 i‡(!
	`zdr_nfsd©a2
 (
zdrs
, &
objp
->
d©a
))

2156  
FALSE
;

2157  
TRUE
;

2158 
	}
}

2160 
uöt32_t


2161 
	$zdr_READ2ªs
 (
ZDR
 *
zdrs
, 
READ2ªs
 *
objp
)

2163 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2164  
FALSE
;

2165 
objp
->
°©us
) {

2166 
NFS3_OK
:

2167 i‡(!
	`zdr_READ2ªsok
 (
zdrs
, &
objp
->
READ2ªs_u
.
ªsok
))

2168  
FALSE
;

2173  
TRUE
;

2174 
	}
}

2176 
uöt32_t


2177 
	$zdr_WRITE2¨gs
 (
ZDR
 *
zdrs
, 
WRITE2¨gs
 *
objp
)

2179 
öt32_t
 *
buf
;

2181 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

2182 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2183  
FALSE
;

2184 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

2185 i‡(
buf
 =
NULL
) {

2186 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
begöoff£t
))

2187  
FALSE
;

2188 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
off£t
))

2189  
FALSE
;

2190 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tŸÆcou¡
))

2191  
FALSE
;

2194 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
begöoff£t
);

2195 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
off£t
);

2196 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
tŸÆcou¡
);

2198 i‡(!
	`zdr_nfsd©a2
 (
zdrs
, &
objp
->
d©a
))

2199  
FALSE
;

2200  
TRUE
;

2201 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

2202 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2203  
FALSE
;

2204 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

2205 i‡(
buf
 =
NULL
) {

2206 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
begöoff£t
))

2207  
FALSE
;

2208 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
off£t
))

2209  
FALSE
;

2210 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tŸÆcou¡
))

2211  
FALSE
;

2214 
objp
->
begöoff£t
 = 
	`IZDR_GET_U_LONG
(
buf
);

2215 
objp
->
off£t
 = 
	`IZDR_GET_U_LONG
(
buf
);

2216 
objp
->
tŸÆcou¡
 = 
	`IZDR_GET_U_LONG
(
buf
);

2218 i‡(!
	`zdr_nfsd©a2
 (
zdrs
, &
objp
->
d©a
))

2219  
FALSE
;

2220  
TRUE
;

2223 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2224  
FALSE
;

2225 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
begöoff£t
))

2226  
FALSE
;

2227 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
off£t
))

2228  
FALSE
;

2229 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tŸÆcou¡
))

2230  
FALSE
;

2231 i‡(!
	`zdr_nfsd©a2
 (
zdrs
, &
objp
->
d©a
))

2232  
FALSE
;

2233  
TRUE
;

2234 
	}
}

2236 
uöt32_t


2237 
	$zdr_WRITE2ªsok
 (
ZDR
 *
zdrs
, 
WRITE2ªsok
 *
objp
)

2239 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2240  
FALSE
;

2241  
TRUE
;

2242 
	}
}

2244 
uöt32_t


2245 
	$zdr_WRITE2ªs
 (
ZDR
 *
zdrs
, 
WRITE2ªs
 *
objp
)

2247 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2248  
FALSE
;

2249 
objp
->
°©us
) {

2250 
NFS3_OK
:

2251 i‡(!
	`zdr_WRITE2ªsok
 (
zdrs
, &
objp
->
WRITE2ªs_u
.
ªsok
))

2252  
FALSE
;

2257  
TRUE
;

2258 
	}
}

2260 
uöt32_t


2261 
	$zdr_CREATE2¨gs
 (
ZDR
 *
zdrs
, 
CREATE2¨gs
 *
objp
)

2263 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
whîe
))

2264  
FALSE
;

2265 i‡(!
	`zdr_ßâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2266  
FALSE
;

2267  
TRUE
;

2268 
	}
}

2270 
uöt32_t


2271 
	$zdr_CREATE2ªsok
 (
ZDR
 *
zdrs
, 
CREATE2ªsok
 *
objp
)

2273 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2274  
FALSE
;

2275 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2276  
FALSE
;

2277  
TRUE
;

2278 
	}
}

2280 
uöt32_t


2281 
	$zdr_CREATE2ªs
 (
ZDR
 *
zdrs
, 
CREATE2ªs
 *
objp
)

2283 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2284  
FALSE
;

2285 
objp
->
°©us
) {

2286 
NFS3_OK
:

2287 i‡(!
	`zdr_CREATE2ªsok
 (
zdrs
, &
objp
->
CREATE2ªs_u
.
ªsok
))

2288  
FALSE
;

2293  
TRUE
;

2294 
	}
}

2296 
uöt32_t


2297 
	$zdr_REMOVE2¨gs
 (
ZDR
 *
zdrs
, 
REMOVE2¨gs
 *
objp
)

2299 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
wh©
))

2300  
FALSE
;

2301  
TRUE
;

2302 
	}
}

2304 
uöt32_t


2305 
	$zdr_REMOVE2ªs
 (
ZDR
 *
zdrs
, 
REMOVE2ªs
 *
objp
)

2307 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2308  
FALSE
;

2309  
TRUE
;

2310 
	}
}

2312 
uöt32_t


2313 
	$zdr_RENAME2¨gs
 (
ZDR
 *
zdrs
, 
RENAME2¨gs
 *
objp
)

2315 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
‰om
))

2316  
FALSE
;

2317 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
to
))

2318  
FALSE
;

2319  
TRUE
;

2320 
	}
}

2322 
uöt32_t


2323 
	$zdr_RENAME2ªs
 (
ZDR
 *
zdrs
, 
RENAME2ªs
 *
objp
)

2325 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2326  
FALSE
;

2327  
TRUE
;

2328 
	}
}

2330 
uöt32_t


2331 
	$zdr_LINK2¨gs
 (
ZDR
 *
zdrs
, 
LINK2¨gs
 *
objp
)

2333 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
‰om
))

2334  
FALSE
;

2335 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
to
))

2336  
FALSE
;

2337  
TRUE
;

2338 
	}
}

2340 
uöt32_t


2341 
	$zdr_LINK2ªs
 (
ZDR
 *
zdrs
, 
LINK2ªs
 *
objp
)

2343 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2344  
FALSE
;

2345  
TRUE
;

2346 
	}
}

2348 
uöt32_t


2349 
	$zdr_SYMLINK2¨gs
 (
ZDR
 *
zdrs
, 
SYMLINK2¨gs
 *
objp
)

2351 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
‰om
))

2352  
FALSE
;

2353 i‡(!
	`zdr_∑th2
 (
zdrs
, &
objp
->
to
))

2354  
FALSE
;

2355 i‡(!
	`zdr_ßâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2356  
FALSE
;

2357  
TRUE
;

2358 
	}
}

2360 
uöt32_t


2361 
	$zdr_SYMLINK2ªs
 (
ZDR
 *
zdrs
, 
SYMLINK2ªs
 *
objp
)

2363 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2364  
FALSE
;

2365  
TRUE
;

2366 
	}
}

2368 
uöt32_t


2369 
	$zdr_MKDIR2¨gs
 (
ZDR
 *
zdrs
, 
MKDIR2¨gs
 *
objp
)

2371 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
whîe
))

2372  
FALSE
;

2373 i‡(!
	`zdr_ßâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2374  
FALSE
;

2375  
TRUE
;

2376 
	}
}

2378 
uöt32_t


2379 
	$zdr_MKDIR2ªsok
 (
ZDR
 *
zdrs
, 
MKDIR2ªsok
 *
objp
)

2381 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
fûe
))

2382  
FALSE
;

2383 i‡(!
	`zdr_Áâr2
 (
zdrs
, &
objp
->
©åibuãs
))

2384  
FALSE
;

2385  
TRUE
;

2386 
	}
}

2388 
uöt32_t


2389 
	$zdr_MKDIR2ªs
 (
ZDR
 *
zdrs
, 
MKDIR2ªs
 *
objp
)

2391 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2392  
FALSE
;

2393 
objp
->
°©us
) {

2394 
NFS3_OK
:

2395 i‡(!
	`zdr_MKDIR2ªsok
 (
zdrs
, &
objp
->
MKDIR2ªs_u
.
ªsok
))

2396  
FALSE
;

2401  
TRUE
;

2402 
	}
}

2404 
uöt32_t


2405 
	$zdr_RMDIR2¨gs
 (
ZDR
 *
zdrs
, 
RMDIR2¨gs
 *
objp
)

2407 i‡(!
	`zdr_dú›¨gs2
 (
zdrs
, &
objp
->
wh©
))

2408  
FALSE
;

2409  
TRUE
;

2410 
	}
}

2412 
uöt32_t


2413 
	$zdr_RMDIR2ªs
 (
ZDR
 *
zdrs
, 
RMDIR2ªs
 *
objp
)

2415 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2416  
FALSE
;

2417  
TRUE
;

2418 
	}
}

2420 
uöt32_t


2421 
	$zdr_READDIR2¨gs
 (
ZDR
 *
zdrs
, 
READDIR2¨gs
 *
objp
)

2423 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
dú
))

2424  
FALSE
;

2425 i‡(!
	`zdr_nfscookõ2
 (
zdrs
, 
objp
->
cookõ
))

2426  
FALSE
;

2427 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
cou¡
))

2428  
FALSE
;

2429  
TRUE
;

2430 
	}
}

2432 
uöt32_t


2433 
	$zdr_READDIR2ªsok
 (
ZDR
 *
zdrs
, 
READDIR2ªsok
 *
objp
)

2435 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
íåõs
,  (
íåy2
), (
zdΩroc_t
Ë
zdr_íåy2
))

2436  
FALSE
;

2437 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

2438  
FALSE
;

2439  
TRUE
;

2440 
	}
}

2442 
uöt32_t


2443 
	$zdr_READDIR2ªs
 (
ZDR
 *
zdrs
, 
READDIR2ªs
 *
objp
)

2445 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2446  
FALSE
;

2447 
objp
->
°©us
) {

2448 
NFS3_OK
:

2449 i‡(!
	`zdr_READDIR2ªsok
 (
zdrs
, &
objp
->
READDIR2ªs_u
.
ªsok
))

2450  
FALSE
;

2455  
TRUE
;

2456 
	}
}

2458 
uöt32_t


2459 
	$zdr_STATFS2¨gs
 (
ZDR
 *
zdrs
, 
STATFS2¨gs
 *
objp
)

2461 i‡(!
	`zdr_fh™dÀ2
 (
zdrs
, 
objp
->
dú
))

2462  
FALSE
;

2463  
TRUE
;

2464 
	}
}

2466 
uöt32_t


2467 
	$zdr_STATFS2ªsok
 (
ZDR
 *
zdrs
, 
STATFS2ªsok
 *
objp
)

2469 
öt32_t
 *
buf
;

2471 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

2472 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 5 * 
BYTES_PER_ZDR_UNIT
);

2473 i‡(
buf
 =
NULL
) {

2474 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tsize
))

2475  
FALSE
;

2476 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
bsize
))

2477  
FALSE
;

2478 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocks
))

2479  
FALSE
;

2480 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
b‰ì
))

2481  
FALSE
;

2482 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
bavaû
))

2483  
FALSE
;

2485 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
tsize
);

2486 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
bsize
);

2487 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
blocks
);

2488 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
b‰ì
);

2489 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
bavaû
);

2491  
TRUE
;

2492 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

2493 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 5 * 
BYTES_PER_ZDR_UNIT
);

2494 i‡(
buf
 =
NULL
) {

2495 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tsize
))

2496  
FALSE
;

2497 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
bsize
))

2498  
FALSE
;

2499 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocks
))

2500  
FALSE
;

2501 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
b‰ì
))

2502  
FALSE
;

2503 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
bavaû
))

2504  
FALSE
;

2506 
objp
->
tsize
 = 
	`IZDR_GET_U_LONG
(
buf
);

2507 
objp
->
bsize
 = 
	`IZDR_GET_U_LONG
(
buf
);

2508 
objp
->
blocks
 = 
	`IZDR_GET_U_LONG
(
buf
);

2509 
objp
->
b‰ì
 = 
	`IZDR_GET_U_LONG
(
buf
);

2510 
objp
->
bavaû
 = 
	`IZDR_GET_U_LONG
(
buf
);

2512  
TRUE
;

2515 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
tsize
))

2516  
FALSE
;

2517 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
bsize
))

2518  
FALSE
;

2519 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
blocks
))

2520  
FALSE
;

2521 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
b‰ì
))

2522  
FALSE
;

2523 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
bavaû
))

2524  
FALSE
;

2525  
TRUE
;

2526 
	}
}

2528 
uöt32_t


2529 
	$zdr_STATFS2ªs
 (
ZDR
 *
zdrs
, 
STATFS2ªs
 *
objp
)

2531 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2532  
FALSE
;

2533 
objp
->
°©us
) {

2534 
NFS3_OK
:

2535 i‡(!
	`zdr_STATFS2ªsok
 (
zdrs
, &
objp
->
STATFS2ªs_u
.
ªsok
))

2536  
FALSE
;

2541  
TRUE
;

2542 
	}
}

2544 
uöt32_t


2545 
	$zdr_nfß˛_ty≥
 (
ZDR
 *
zdrs
, 
nfß˛_ty≥
 *
objp
)

2547 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2548  
FALSE
;

2549  
TRUE
;

2550 
	}
}

2552 
uöt32_t


2553 
	$zdr_nfß˛_a˚
 (
ZDR
 *
zdrs
, 
nfß˛_a˚
 *
objp
)

2555 i‡(!
	`zdr_nfß˛_ty≥
 (
zdrs
, &
objp
->
ty≥
))

2556  
FALSE
;

2557 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
id
))

2558  
FALSE
;

2559 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
≥rm
))

2560  
FALSE
;

2561  
TRUE
;

2562 
	}
}

2564 
uöt32_t


2565 
	$zdr_GETACL3¨gs
 (
ZDR
 *
zdrs
, 
GETACL3¨gs
 *
objp
)

2567 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
dú
))

2568  
FALSE
;

2569 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mask
))

2570  
FALSE
;

2571  
TRUE
;

2572 
	}
}

2574 
uöt32_t


2575 
	$zdr_GETACL3ªsok
 (
ZDR
 *
zdrs
, 
GETACL3ªsok
 *
objp
)

2577 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
©å
))

2578  
FALSE
;

2579 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mask
))

2580  
FALSE
;

2581 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
a˚_cou¡
))

2582  
FALSE
;

2583 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
a˚
.
a˚_vÆ
, (
u_öt
 *Ë&objp->a˚.
a˚_Àn
, ~0,

2584  (
nfß˛_a˚
), (
zdΩroc_t
Ë
zdr_nfß˛_a˚
))

2585  
FALSE
;

2586 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
deÁu…_a˚_cou¡
))

2587  
FALSE
;

2588 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
deÁu…_a˚
.
deÁu…_a˚_vÆ
, (
u_öt
 *Ë&objp->deÁu…_a˚.
deÁu…_a˚_Àn
, ~0,

2589  (
nfß˛_a˚
), (
zdΩroc_t
Ë
zdr_nfß˛_a˚
))

2590  
FALSE
;

2591  
TRUE
;

2592 
	}
}

2594 
uöt32_t


2595 
	$zdr_GETACL3ªs
 (
ZDR
 *
zdrs
, 
GETACL3ªs
 *
objp
)

2597 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2598  
FALSE
;

2599 
objp
->
°©us
) {

2600 
NFS3_OK
:

2601 i‡(!
	`zdr_GETACL3ªsok
 (
zdrs
, &
objp
->
GETACL3ªs_u
.
ªsok
))

2602  
FALSE
;

2607  
TRUE
;

2608 
	}
}

2610 
uöt32_t


2611 
	$zdr_SETACL3¨gs
 (
ZDR
 *
zdrs
, 
SETACL3¨gs
 *
objp
)

2613 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
dú
))

2614  
FALSE
;

2615 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mask
))

2616  
FALSE
;

2617 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
a˚_cou¡
))

2618  
FALSE
;

2619 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
a˚
.
a˚_vÆ
, (
u_öt
 *Ë&objp->a˚.
a˚_Àn
, ~0,

2620  (
nfß˛_a˚
), (
zdΩroc_t
Ë
zdr_nfß˛_a˚
))

2621  
FALSE
;

2622 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
deÁu…_a˚_cou¡
))

2623  
FALSE
;

2624 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
deÁu…_a˚
.
deÁu…_a˚_vÆ
, (
u_öt
 *Ë&objp->deÁu…_a˚.
deÁu…_a˚_Àn
, ~0,

2625  (
nfß˛_a˚
), (
zdΩroc_t
Ë
zdr_nfß˛_a˚
))

2626  
FALSE
;

2627  
TRUE
;

2628 
	}
}

2630 
uöt32_t


2631 
	$zdr_SETACL3ªsok
 (
ZDR
 *
zdrs
, 
SETACL3ªsok
 *
objp
)

2633 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
©å
))

2634  
FALSE
;

2635  
TRUE
;

2636 
	}
}

2638 
uöt32_t


2639 
	$zdr_SETACL3ªs
 (
ZDR
 *
zdrs
, 
SETACL3ªs
 *
objp
)

2641 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

2642  
FALSE
;

2643 
objp
->
°©us
) {

2644 
NFS3_OK
:

2645 i‡(!
	`zdr_SETACL3ªsok
 (
zdrs
, &
objp
->
SETACL3ªs_u
.
ªsok
))

2646  
FALSE
;

2651  
TRUE
;

2652 
	}
}

	@nfs/libnfs-raw-nfs.h

35 #i‚de‡
_NFS_H_RPCGEN


36 
	#_NFS_H_RPCGEN


	)

37 
	~<nfsc/libnfs-zdr.h
>

39 
	~<nfsc/libnfs-zdr.h
>

42 #ifde‡
__˝lu•lus


46 
	#NFS3_FHSIZE
 64

	)

47 
	#NFS3_WRITEVERFSIZE
 8

	)

48 
	#NFS3_CREATEVERFSIZE
 8

	)

49 
	#NFS3_COOKIEVERFSIZE
 8

	)

53 
	tcookõvîf3
[
NFS3_COOKIEVERFSIZE
];

55 
uöt64_t
 
	tcookõ3
;

57 
	snfs_fh3
 {

59 
u_öt
 
d©a_Àn
;

60 *
d©a_vÆ
;

61 } 
d©a
;

63 
nfs_fh3
 
	tnfs_fh3
;

65 *
	tfûíame3
;

67 
	sdú›¨gs3
 {

68 
nfs_fh3
 
dú
;

69 
fûíame3
 
«me
;

71 
dú›¨gs3
 
	tdú›¨gs3
;

73 
	e·y≥3
 {

74 
NF3REG
 = 1,

75 
NF3DIR
 = 2,

76 
NF3BLK
 = 3,

77 
NF3CHR
 = 4,

78 
NF3LNK
 = 5,

79 
NF3SOCK
 = 6,

80 
NF3FIFO
 = 7,

82 
·y≥3
 
	t·y≥3
;

84 
u_öt
 
	tmode3
;

86 
u_öt
 
	tuid3
;

88 
u_öt
 
	tgid3
;

90 
uöt64_t
 
	tsize3
;

92 
uöt64_t
 
	tfûeid3
;

94 
	s•ecd©a3
 {

95 
u_öt
 
•ecd©a1
;

96 
u_öt
 
•ecd©a2
;

98 
•ecd©a3
 
	t•ecd©a3
;

100 
	snf°ime3
 {

101 
u_öt
 
£c⁄ds
;

102 
u_öt
 
n£c⁄ds
;

104 
nf°ime3
 
	tnf°ime3
;

106 
	sÁâr3
 {

107 
·y≥3
 
ty≥
;

108 
mode3
 
mode
;

109 
u_öt
 
∆ök
;

110 
uid3
 
uid
;

111 
gid3
 
gid
;

112 
size3
 
size
;

113 
size3
 
u£d
;

114 
•ecd©a3
 
rdev
;

115 
uöt64_t
 
fsid
;

116 
fûeid3
 
fûeid
;

117 
nf°ime3
 
©ime
;

118 
nf°ime3
 
mtime
;

119 
nf°ime3
 
˘ime
;

121 
Áâr3
 
	tÁâr3
;

123 
	spo°_›_©å
 {

124 
uöt32_t
 
©åibuãs_fﬁlow
;

126 
Áâr3
 
©åibuãs
;

127 } 
po°_›_©å_u
;

129 
po°_›_©å
 
	tpo°_›_©å
;

131 
	enfs°©3
 {

132 
NFS3_OK
 = 0,

133 
NFS3ERR_PERM
 = 1,

134 
NFS3ERR_NOENT
 = 2,

135 
NFS3ERR_IO
 = 5,

136 
NFS3ERR_NXIO
 = 6,

137 
NFS3ERR_ACCES
 = 13,

138 
NFS3ERR_EXIST
 = 17,

139 
NFS3ERR_XDEV
 = 18,

140 
NFS3ERR_NODEV
 = 19,

141 
NFS3ERR_NOTDIR
 = 20,

142 
NFS3ERR_ISDIR
 = 21,

143 
NFS3ERR_INVAL
 = 22,

144 
NFS3ERR_FBIG
 = 27,

145 
NFS3ERR_NOSPC
 = 28,

146 
NFS3ERR_ROFS
 = 30,

147 
NFS3ERR_MLINK
 = 31,

148 
NFS3ERR_NAMETOOLONG
 = 63,

149 
NFS3ERR_NOTEMPTY
 = 66,

150 
NFS3ERR_DQUOT
 = 69,

151 
NFS3ERR_STALE
 = 70,

152 
NFS3ERR_REMOTE
 = 71,

153 
NFS3ERR_BADHANDLE
 = 10001,

154 
NFS3ERR_NOT_SYNC
 = 10002,

155 
NFS3ERR_BAD_COOKIE
 = 10003,

156 
NFS3ERR_NOTSUPP
 = 10004,

157 
NFS3ERR_TOOSMALL
 = 10005,

158 
NFS3ERR_SERVERFAULT
 = 10006,

159 
NFS3ERR_BADTYPE
 = 10007,

160 
NFS3ERR_JUKEBOX
 = 10008,

162 
nfs°©3
 
	tnfs°©3
;

164 
	e°abÀ_how
 {

165 
UNSTABLE
 = 0,

166 
DATA_SYNC
 = 1,

167 
FILE_SYNC
 = 2,

169 
°abÀ_how
 
	t°abÀ_how
;

171 
uöt64_t
 
	toff£t3
;

173 
u_öt
 
	tcou¡3
;

175 
	swcc_©å
 {

176 
size3
 
size
;

177 
nf°ime3
 
mtime
;

178 
nf°ime3
 
˘ime
;

180 
wcc_©å
 
	twcc_©å
;

182 
	s¥e_›_©å
 {

183 
uöt32_t
 
©åibuãs_fﬁlow
;

185 
wcc_©å
 
©åibuãs
;

186 } 
¥e_›_©å_u
;

188 
¥e_›_©å
 
	t¥e_›_©å
;

190 
	swcc_d©a
 {

191 
¥e_›_©å
 
bef‹e
;

192 
po°_›_©å
 
a·î
;

194 
wcc_d©a
 
	twcc_d©a
;

196 
	sWRITE3¨gs
 {

197 
nfs_fh3
 
fûe
;

198 
off£t3
 
off£t
;

199 
cou¡3
 
cou¡
;

200 
°abÀ_how
 
°abÀ
;

202 
u_öt
 
d©a_Àn
;

203 *
d©a_vÆ
;

204 } 
d©a
;

206 
WRITE3¨gs
 
	tWRITE3¨gs
;

208 
	twrôevîf3
[
NFS3_WRITEVERFSIZE
];

210 
	sWRITE3ªsok
 {

211 
wcc_d©a
 
fûe_wcc
;

212 
cou¡3
 
cou¡
;

213 
°abÀ_how
 
commôãd
;

214 
wrôevîf3
 
vîf
;

216 
WRITE3ªsok
 
	tWRITE3ªsok
;

218 
	sWRITE3ªsÁû
 {

219 
wcc_d©a
 
fûe_wcc
;

221 
WRITE3ªsÁû
 
	tWRITE3ªsÁû
;

223 
	sWRITE3ªs
 {

224 
nfs°©3
 
°©us
;

226 
WRITE3ªsok
 
ªsok
;

227 
WRITE3ªsÁû
 
ªsÁû
;

228 } 
WRITE3ªs_u
;

230 
WRITE3ªs
 
	tWRITE3ªs
;

232 
	sLOOKUP3¨gs
 {

233 
dú›¨gs3
 
wh©
;

235 
LOOKUP3¨gs
 
	tLOOKUP3¨gs
;

237 
	sLOOKUP3ªsok
 {

238 
nfs_fh3
 
obje˘
;

239 
po°_›_©å
 
obj_©åibuãs
;

240 
po°_›_©å
 
dú_©åibuãs
;

242 
LOOKUP3ªsok
 
	tLOOKUP3ªsok
;

244 
	sLOOKUP3ªsÁû
 {

245 
po°_›_©å
 
dú_©åibuãs
;

247 
LOOKUP3ªsÁû
 
	tLOOKUP3ªsÁû
;

249 
	sLOOKUP3ªs
 {

250 
nfs°©3
 
°©us
;

252 
LOOKUP3ªsok
 
ªsok
;

253 
LOOKUP3ªsÁû
 
ªsÁû
;

254 } 
LOOKUP3ªs_u
;

256 
LOOKUP3ªs
 
	tLOOKUP3ªs
;

258 
	sCOMMIT3¨gs
 {

259 
nfs_fh3
 
fûe
;

260 
off£t3
 
off£t
;

261 
cou¡3
 
cou¡
;

263 
COMMIT3¨gs
 
	tCOMMIT3¨gs
;

265 
	sCOMMIT3ªsok
 {

266 
wcc_d©a
 
fûe_wcc
;

267 
wrôevîf3
 
vîf
;

269 
COMMIT3ªsok
 
	tCOMMIT3ªsok
;

271 
	sCOMMIT3ªsÁû
 {

272 
wcc_d©a
 
fûe_wcc
;

274 
COMMIT3ªsÁû
 
	tCOMMIT3ªsÁû
;

276 
	sCOMMIT3ªs
 {

277 
nfs°©3
 
°©us
;

279 
COMMIT3ªsok
 
ªsok
;

280 
COMMIT3ªsÁû
 
ªsÁû
;

281 } 
COMMIT3ªs_u
;

283 
COMMIT3ªs
 
	tCOMMIT3ªs
;

284 
	#ACCESS3_READ
 0x0001

	)

285 
	#ACCESS3_LOOKUP
 0x0002

	)

286 
	#ACCESS3_MODIFY
 0x0004

	)

287 
	#ACCESS3_EXTEND
 0x0008

	)

288 
	#ACCESS3_DELETE
 0x0010

	)

289 
	#ACCESS3_EXECUTE
 0x0020

	)

291 
	sACCESS3¨gs
 {

292 
nfs_fh3
 
obje˘
;

293 
u_öt
 
ac˚ss
;

295 
ACCESS3¨gs
 
	tACCESS3¨gs
;

297 
	sACCESS3ªsok
 {

298 
po°_›_©å
 
obj_©åibuãs
;

299 
u_öt
 
ac˚ss
;

301 
ACCESS3ªsok
 
	tACCESS3ªsok
;

303 
	sACCESS3ªsÁû
 {

304 
po°_›_©å
 
obj_©åibuãs
;

306 
ACCESS3ªsÁû
 
	tACCESS3ªsÁû
;

308 
	sACCESS3ªs
 {

309 
nfs°©3
 
°©us
;

311 
ACCESS3ªsok
 
ªsok
;

312 
ACCESS3ªsÁû
 
ªsÁû
;

313 } 
ACCESS3ªs_u
;

315 
ACCESS3ªs
 
	tACCESS3ªs
;

317 
	sGETATTR3¨gs
 {

318 
nfs_fh3
 
obje˘
;

320 
GETATTR3¨gs
 
	tGETATTR3¨gs
;

322 
	sGETATTR3ªsok
 {

323 
Áâr3
 
obj_©åibuãs
;

325 
GETATTR3ªsok
 
	tGETATTR3ªsok
;

327 
	sGETATTR3ªs
 {

328 
nfs°©3
 
°©us
;

330 
GETATTR3ªsok
 
ªsok
;

331 } 
GETATTR3ªs_u
;

333 
GETATTR3ªs
 
	tGETATTR3ªs
;

335 
	etime_how
 {

336 
DONT_CHANGE
 = 0,

337 
SET_TO_SERVER_TIME
 = 1,

338 
SET_TO_CLIENT_TIME
 = 2,

340 
time_how
 
	ttime_how
;

342 
	s£t_mode3
 {

343 
uöt32_t
 
£t_ô
;

345 
mode3
 
mode
;

346 } 
£t_mode3_u
;

348 
£t_mode3
 
	t£t_mode3
;

350 
	s£t_uid3
 {

351 
uöt32_t
 
£t_ô
;

353 
uid3
 
uid
;

354 } 
£t_uid3_u
;

356 
£t_uid3
 
	t£t_uid3
;

358 
	s£t_gid3
 {

359 
uöt32_t
 
£t_ô
;

361 
gid3
 
gid
;

362 } 
£t_gid3_u
;

364 
£t_gid3
 
	t£t_gid3
;

366 
	s£t_size3
 {

367 
uöt32_t
 
£t_ô
;

369 
size3
 
size
;

370 } 
£t_size3_u
;

372 
£t_size3
 
	t£t_size3
;

374 
	s£t_©ime
 {

375 
time_how
 
£t_ô
;

377 
nf°ime3
 
©ime
;

378 } 
£t_©ime_u
;

380 
£t_©ime
 
	t£t_©ime
;

382 
	s£t_mtime
 {

383 
time_how
 
£t_ô
;

385 
nf°ime3
 
mtime
;

386 } 
£t_mtime_u
;

388 
£t_mtime
 
	t£t_mtime
;

390 
	sßâr3
 {

391 
£t_mode3
 
mode
;

392 
£t_uid3
 
uid
;

393 
£t_gid3
 
gid
;

394 
£t_size3
 
size
;

395 
£t_©ime
 
©ime
;

396 
£t_mtime
 
mtime
;

398 
ßâr3
 
	tßâr3
;

400 
	e¸óãmode3
 {

401 
UNCHECKED
 = 0,

402 
GUARDED
 = 1,

403 
EXCLUSIVE
 = 2,

405 
¸óãmode3
 
	t¸óãmode3
;

407 
	t¸óãvîf3
[
NFS3_CREATEVERFSIZE
];

409 
	s¸óãhow3
 {

410 
¸óãmode3
 
mode
;

412 
ßâr3
 
obj_©åibuãs
;

413 
ßâr3
 
g_obj_©åibuãs
;

414 
¸óãvîf3
 
vîf
;

415 } 
¸óãhow3_u
;

417 
¸óãhow3
 
	t¸óãhow3
;

419 
	sCREATE3¨gs
 {

420 
dú›¨gs3
 
whîe
;

421 
¸óãhow3
 
how
;

423 
CREATE3¨gs
 
	tCREATE3¨gs
;

425 
	spo°_›_fh3
 {

426 
uöt32_t
 
h™dÀ_fﬁlows
;

428 
nfs_fh3
 
h™dÀ
;

429 } 
po°_›_fh3_u
;

431 
po°_›_fh3
 
	tpo°_›_fh3
;

433 
	sCREATE3ªsok
 {

434 
po°_›_fh3
 
obj
;

435 
po°_›_©å
 
obj_©åibuãs
;

436 
wcc_d©a
 
dú_wcc
;

438 
CREATE3ªsok
 
	tCREATE3ªsok
;

440 
	sCREATE3ªsÁû
 {

441 
wcc_d©a
 
dú_wcc
;

443 
CREATE3ªsÁû
 
	tCREATE3ªsÁû
;

445 
	sCREATE3ªs
 {

446 
nfs°©3
 
°©us
;

448 
CREATE3ªsok
 
ªsok
;

449 
CREATE3ªsÁû
 
ªsÁû
;

450 } 
CREATE3ªs_u
;

452 
CREATE3ªs
 
	tCREATE3ªs
;

454 
	sREMOVE3¨gs
 {

455 
dú›¨gs3
 
obje˘
;

457 
REMOVE3¨gs
 
	tREMOVE3¨gs
;

459 
	sREMOVE3ªsok
 {

460 
wcc_d©a
 
dú_wcc
;

462 
REMOVE3ªsok
 
	tREMOVE3ªsok
;

464 
	sREMOVE3ªsÁû
 {

465 
wcc_d©a
 
dú_wcc
;

467 
REMOVE3ªsÁû
 
	tREMOVE3ªsÁû
;

469 
	sREMOVE3ªs
 {

470 
nfs°©3
 
°©us
;

472 
REMOVE3ªsok
 
ªsok
;

473 
REMOVE3ªsÁû
 
ªsÁû
;

474 } 
REMOVE3ªs_u
;

476 
REMOVE3ªs
 
	tREMOVE3ªs
;

478 
	sREAD3¨gs
 {

479 
nfs_fh3
 
fûe
;

480 
off£t3
 
off£t
;

481 
cou¡3
 
cou¡
;

483 
READ3¨gs
 
	tREAD3¨gs
;

485 
	sREAD3ªsok
 {

486 
po°_›_©å
 
fûe_©åibuãs
;

487 
cou¡3
 
cou¡
;

488 
uöt32_t
 
eof
;

490 
u_öt
 
d©a_Àn
;

491 *
d©a_vÆ
;

492 } 
d©a
;

494 
READ3ªsok
 
	tREAD3ªsok
;

496 
	sREAD3ªsÁû
 {

497 
po°_›_©å
 
fûe_©åibuãs
;

499 
READ3ªsÁû
 
	tREAD3ªsÁû
;

501 
	sREAD3ªs
 {

502 
nfs°©3
 
°©us
;

504 
READ3ªsok
 
ªsok
;

505 
READ3ªsÁû
 
ªsÁû
;

506 } 
READ3ªs_u
;

508 
READ3ªs
 
	tREAD3ªs
;

509 
	#FSF3_LINK
 0x0001

	)

510 
	#FSF3_SYMLINK
 0x0002

	)

511 
	#FSF3_HOMOGENEOUS
 0x0008

	)

512 
	#FSF3_CANSETTIME
 0x0010

	)

514 
	sFSINFO3¨gs
 {

515 
nfs_fh3
 
f§oŸ
;

517 
FSINFO3¨gs
 
	tFSINFO3¨gs
;

519 
	sFSINFO3ªsok
 {

520 
po°_›_©å
 
obj_©åibuãs
;

521 
u_öt
 
πmax
;

522 
u_öt
 
π¥ef
;

523 
u_öt
 
πmu…
;

524 
u_öt
 
wtmax
;

525 
u_öt
 
wçªf
;

526 
u_öt
 
wtmu…
;

527 
u_öt
 
dçªf
;

528 
size3
 
maxfûesize
;

529 
nf°ime3
 
time_dñè
;

530 
u_öt
 
¥›îtõs
;

532 
FSINFO3ªsok
 
	tFSINFO3ªsok
;

534 
	sFSINFO3ªsÁû
 {

535 
po°_›_©å
 
obj_©åibuãs
;

537 
FSINFO3ªsÁû
 
	tFSINFO3ªsÁû
;

539 
	sFSINFO3ªs
 {

540 
nfs°©3
 
°©us
;

542 
FSINFO3ªsok
 
ªsok
;

543 
FSINFO3ªsÁû
 
ªsÁû
;

544 } 
FSINFO3ªs_u
;

546 
FSINFO3ªs
 
	tFSINFO3ªs
;

548 
	sFSSTAT3¨gs
 {

549 
nfs_fh3
 
f§oŸ
;

551 
FSSTAT3¨gs
 
	tFSSTAT3¨gs
;

553 
	sFSSTAT3ªsok
 {

554 
po°_›_©å
 
obj_©åibuãs
;

555 
size3
 
tbyãs
;

556 
size3
 
fbyãs
;

557 
size3
 
abyãs
;

558 
size3
 
tfûes
;

559 
size3
 
ffûes
;

560 
size3
 
afûes
;

561 
u_öt
 
öv¨£c
;

563 
FSSTAT3ªsok
 
	tFSSTAT3ªsok
;

565 
	sFSSTAT3ªsÁû
 {

566 
po°_›_©å
 
obj_©åibuãs
;

568 
FSSTAT3ªsÁû
 
	tFSSTAT3ªsÁû
;

570 
	sFSSTAT3ªs
 {

571 
nfs°©3
 
°©us
;

573 
FSSTAT3ªsok
 
ªsok
;

574 
FSSTAT3ªsÁû
 
ªsÁû
;

575 } 
FSSTAT3ªs_u
;

577 
FSSTAT3ªs
 
	tFSSTAT3ªs
;

579 
	sPATHCONF3¨gs
 {

580 
nfs_fh3
 
obje˘
;

582 
PATHCONF3¨gs
 
	tPATHCONF3¨gs
;

584 
	sPATHCONF3ªsok
 {

585 
po°_›_©å
 
obj_©åibuãs
;

586 
u_öt
 
lökmax
;

587 
u_öt
 
«me_max
;

588 
uöt32_t
 
no_åunc
;

589 
uöt32_t
 
chown_ª°ri˘ed
;

590 
uöt32_t
 
ˇ£_ö£nsôive
;

591 
uöt32_t
 
ˇ£_¥e£rvög
;

593 
PATHCONF3ªsok
 
	tPATHCONF3ªsok
;

595 
	sPATHCONF3ªsÁû
 {

596 
po°_›_©å
 
obj_©åibuãs
;

598 
PATHCONF3ªsÁû
 
	tPATHCONF3ªsÁû
;

600 
	sPATHCONF3ªs
 {

601 
nfs°©3
 
°©us
;

603 
PATHCONF3ªsok
 
ªsok
;

604 
PATHCONF3ªsÁû
 
ªsÁû
;

605 } 
PATHCONF3ªs_u
;

607 
PATHCONF3ªs
 
	tPATHCONF3ªs
;

609 *
	tnf•©h3
;

611 
	ssymlökd©a3
 {

612 
ßâr3
 
symlök_©åibuãs
;

613 
nf•©h3
 
symlök_d©a
;

615 
symlökd©a3
 
	tsymlökd©a3
;

617 
	sSYMLINK3¨gs
 {

618 
dú›¨gs3
 
whîe
;

619 
symlökd©a3
 
symlök
;

621 
SYMLINK3¨gs
 
	tSYMLINK3¨gs
;

623 
	sSYMLINK3ªsok
 {

624 
po°_›_fh3
 
obj
;

625 
po°_›_©å
 
obj_©åibuãs
;

626 
wcc_d©a
 
dú_wcc
;

628 
SYMLINK3ªsok
 
	tSYMLINK3ªsok
;

630 
	sSYMLINK3ªsÁû
 {

631 
wcc_d©a
 
dú_wcc
;

633 
SYMLINK3ªsÁû
 
	tSYMLINK3ªsÁû
;

635 
	sSYMLINK3ªs
 {

636 
nfs°©3
 
°©us
;

638 
SYMLINK3ªsok
 
ªsok
;

639 
SYMLINK3ªsÁû
 
ªsÁû
;

640 } 
SYMLINK3ªs_u
;

642 
SYMLINK3ªs
 
	tSYMLINK3ªs
;

644 
	sREADLINK3¨gs
 {

645 
nfs_fh3
 
symlök
;

647 
READLINK3¨gs
 
	tREADLINK3¨gs
;

649 
	sREADLINK3ªsok
 {

650 
po°_›_©å
 
symlök_©åibuãs
;

651 
nf•©h3
 
d©a
;

653 
READLINK3ªsok
 
	tREADLINK3ªsok
;

655 
	sREADLINK3ªsÁû
 {

656 
po°_›_©å
 
symlök_©åibuãs
;

658 
READLINK3ªsÁû
 
	tREADLINK3ªsÁû
;

660 
	sREADLINK3ªs
 {

661 
nfs°©3
 
°©us
;

663 
READLINK3ªsok
 
ªsok
;

664 
READLINK3ªsÁû
 
ªsÁû
;

665 } 
READLINK3ªs_u
;

667 
READLINK3ªs
 
	tREADLINK3ªs
;

669 
	sdevi˚d©a3
 {

670 
ßâr3
 
dev_©åibuãs
;

671 
•ecd©a3
 
•ec
;

673 
devi˚d©a3
 
	tdevi˚d©a3
;

675 
	smknodd©a3
 {

676 
·y≥3
 
ty≥
;

678 
devi˚d©a3
 
chr_devi˚
;

679 
devi˚d©a3
 
blk_devi˚
;

680 
ßâr3
 
sock_©åibuãs
;

681 
ßâr3
 
pùe_©åibuãs
;

682 } 
mknodd©a3_u
;

684 
mknodd©a3
 
	tmknodd©a3
;

686 
	sMKNOD3¨gs
 {

687 
dú›¨gs3
 
whîe
;

688 
mknodd©a3
 
wh©
;

690 
MKNOD3¨gs
 
	tMKNOD3¨gs
;

692 
	sMKNOD3ªsok
 {

693 
po°_›_fh3
 
obj
;

694 
po°_›_©å
 
obj_©åibuãs
;

695 
wcc_d©a
 
dú_wcc
;

697 
MKNOD3ªsok
 
	tMKNOD3ªsok
;

699 
	sMKNOD3ªsÁû
 {

700 
wcc_d©a
 
dú_wcc
;

702 
MKNOD3ªsÁû
 
	tMKNOD3ªsÁû
;

704 
	sMKNOD3ªs
 {

705 
nfs°©3
 
°©us
;

707 
MKNOD3ªsok
 
ªsok
;

708 
MKNOD3ªsÁû
 
ªsÁû
;

709 } 
MKNOD3ªs_u
;

711 
MKNOD3ªs
 
	tMKNOD3ªs
;

713 
	sMKDIR3¨gs
 {

714 
dú›¨gs3
 
whîe
;

715 
ßâr3
 
©åibuãs
;

717 
MKDIR3¨gs
 
	tMKDIR3¨gs
;

719 
	sMKDIR3ªsok
 {

720 
po°_›_fh3
 
obj
;

721 
po°_›_©å
 
obj_©åibuãs
;

722 
wcc_d©a
 
dú_wcc
;

724 
MKDIR3ªsok
 
	tMKDIR3ªsok
;

726 
	sMKDIR3ªsÁû
 {

727 
wcc_d©a
 
dú_wcc
;

729 
MKDIR3ªsÁû
 
	tMKDIR3ªsÁû
;

731 
	sMKDIR3ªs
 {

732 
nfs°©3
 
°©us
;

734 
MKDIR3ªsok
 
ªsok
;

735 
MKDIR3ªsÁû
 
ªsÁû
;

736 } 
MKDIR3ªs_u
;

738 
MKDIR3ªs
 
	tMKDIR3ªs
;

740 
	sRMDIR3¨gs
 {

741 
dú›¨gs3
 
obje˘
;

743 
RMDIR3¨gs
 
	tRMDIR3¨gs
;

745 
	sRMDIR3ªsok
 {

746 
wcc_d©a
 
dú_wcc
;

748 
RMDIR3ªsok
 
	tRMDIR3ªsok
;

750 
	sRMDIR3ªsÁû
 {

751 
wcc_d©a
 
dú_wcc
;

753 
RMDIR3ªsÁû
 
	tRMDIR3ªsÁû
;

755 
	sRMDIR3ªs
 {

756 
nfs°©3
 
°©us
;

758 
RMDIR3ªsok
 
ªsok
;

759 
RMDIR3ªsÁû
 
ªsÁû
;

760 } 
RMDIR3ªs_u
;

762 
RMDIR3ªs
 
	tRMDIR3ªs
;

764 
	sRENAME3¨gs
 {

765 
dú›¨gs3
 
‰om
;

766 
dú›¨gs3
 
to
;

768 
RENAME3¨gs
 
	tRENAME3¨gs
;

770 
	sRENAME3ªsok
 {

771 
wcc_d©a
 
‰omdú_wcc
;

772 
wcc_d©a
 
todú_wcc
;

774 
RENAME3ªsok
 
	tRENAME3ªsok
;

776 
	sRENAME3ªsÁû
 {

777 
wcc_d©a
 
‰omdú_wcc
;

778 
wcc_d©a
 
todú_wcc
;

780 
RENAME3ªsÁû
 
	tRENAME3ªsÁû
;

782 
	sRENAME3ªs
 {

783 
nfs°©3
 
°©us
;

785 
RENAME3ªsok
 
ªsok
;

786 
RENAME3ªsÁû
 
ªsÁû
;

787 } 
RENAME3ªs_u
;

789 
RENAME3ªs
 
	tRENAME3ªs
;

791 
	sREADDIRPLUS3¨gs
 {

792 
nfs_fh3
 
dú
;

793 
cookõ3
 
cookõ
;

794 
cookõvîf3
 
cookõvîf
;

795 
cou¡3
 
dúcou¡
;

796 
cou¡3
 
maxcou¡
;

798 
READDIRPLUS3¨gs
 
	tREADDIRPLUS3¨gs
;

800 
	síåy∂us3
 {

801 
fûeid3
 
fûeid
;

802 
fûíame3
 
«me
;

803 
cookõ3
 
cookõ
;

804 
po°_›_©å
 
«me_©åibuãs
;

805 
po°_›_fh3
 
«me_h™dÀ
;

806 
íåy∂us3
 *
√xã¡ry
;

808 
íåy∂us3
 
	tíåy∂us3
;

810 
	sdúli°∂us3
 {

811 
íåy∂us3
 *
íåõs
;

812 
uöt32_t
 
eof
;

814 
dúli°∂us3
 
	tdúli°∂us3
;

816 
	sREADDIRPLUS3ªsok
 {

817 
po°_›_©å
 
dú_©åibuãs
;

818 
cookõvîf3
 
cookõvîf
;

819 
dúli°∂us3
 
ª∂y
;

821 
READDIRPLUS3ªsok
 
	tREADDIRPLUS3ªsok
;

823 
	sREADDIRPLUS3ªsÁû
 {

824 
po°_›_©å
 
dú_©åibuãs
;

826 
READDIRPLUS3ªsÁû
 
	tREADDIRPLUS3ªsÁû
;

828 
	sREADDIRPLUS3ªs
 {

829 
nfs°©3
 
°©us
;

831 
READDIRPLUS3ªsok
 
ªsok
;

832 
READDIRPLUS3ªsÁû
 
ªsÁû
;

833 } 
READDIRPLUS3ªs_u
;

835 
READDIRPLUS3ªs
 
	tREADDIRPLUS3ªs
;

837 
	sREADDIR3¨gs
 {

838 
nfs_fh3
 
dú
;

839 
cookõ3
 
cookõ
;

840 
cookõvîf3
 
cookõvîf
;

841 
cou¡3
 
cou¡
;

843 
READDIR3¨gs
 
	tREADDIR3¨gs
;

845 
	síåy3
 {

846 
fûeid3
 
fûeid
;

847 
fûíame3
 
«me
;

848 
cookõ3
 
cookõ
;

849 
íåy3
 *
√xã¡ry
;

851 
íåy3
 
	tíåy3
;

853 
	sdúli°3
 {

854 
íåy3
 *
íåõs
;

855 
uöt32_t
 
eof
;

857 
dúli°3
 
	tdúli°3
;

859 
	sREADDIR3ªsok
 {

860 
po°_›_©å
 
dú_©åibuãs
;

861 
cookõvîf3
 
cookõvîf
;

862 
dúli°3
 
ª∂y
;

864 
READDIR3ªsok
 
	tREADDIR3ªsok
;

866 
	sREADDIR3ªsÁû
 {

867 
po°_›_©å
 
dú_©åibuãs
;

869 
READDIR3ªsÁû
 
	tREADDIR3ªsÁû
;

871 
	sREADDIR3ªs
 {

872 
nfs°©3
 
°©us
;

874 
READDIR3ªsok
 
ªsok
;

875 
READDIR3ªsÁû
 
ªsÁû
;

876 } 
READDIR3ªs_u
;

878 
READDIR3ªs
 
	tREADDIR3ªs
;

880 
	sLINK3¨gs
 {

881 
nfs_fh3
 
fûe
;

882 
dú›¨gs3
 
lök
;

884 
LINK3¨gs
 
	tLINK3¨gs
;

886 
	sLINK3ªsok
 {

887 
po°_›_©å
 
fûe_©åibuãs
;

888 
wcc_d©a
 
lökdú_wcc
;

890 
LINK3ªsok
 
	tLINK3ªsok
;

892 
	sLINK3ªsÁû
 {

893 
po°_›_©å
 
fûe_©åibuãs
;

894 
wcc_d©a
 
lökdú_wcc
;

896 
LINK3ªsÁû
 
	tLINK3ªsÁû
;

898 
	sLINK3ªs
 {

899 
nfs°©3
 
°©us
;

901 
LINK3ªsok
 
ªsok
;

902 
LINK3ªsÁû
 
ªsÁû
;

903 } 
LINK3ªs_u
;

905 
LINK3ªs
 
	tLINK3ªs
;

907 
	sßârgu¨d3
 {

908 
uöt32_t
 
check
;

910 
nf°ime3
 
obj_˘ime
;

911 } 
ßârgu¨d3_u
;

913 
ßârgu¨d3
 
	tßârgu¨d3
;

915 
	sSETATTR3¨gs
 {

916 
nfs_fh3
 
obje˘
;

917 
ßâr3
 
√w_©åibuãs
;

918 
ßârgu¨d3
 
gu¨d
;

920 
SETATTR3¨gs
 
	tSETATTR3¨gs
;

922 
	sSETATTR3ªsok
 {

923 
wcc_d©a
 
obj_wcc
;

925 
SETATTR3ªsok
 
	tSETATTR3ªsok
;

927 
	sSETATTR3ªsÁû
 {

928 
wcc_d©a
 
obj_wcc
;

930 
SETATTR3ªsÁû
 
	tSETATTR3ªsÁû
;

932 
	sSETATTR3ªs
 {

933 
nfs°©3
 
°©us
;

935 
SETATTR3ªsok
 
ªsok
;

936 
SETATTR3ªsÁû
 
ªsÁû
;

937 } 
SETATTR3ªs_u
;

939 
SETATTR3ªs
 
	tSETATTR3ªs
;

940 
	#FHSIZE2
 32

	)

942 
	tfh™dÀ2
[
FHSIZE2
];

944 
	e·y≥2
 {

945 
NF2NON
 = 0,

946 
NF2REG
 = 1,

947 
NF2DIR
 = 2,

948 
NF2BLK
 = 3,

949 
NF2CHR
 = 4,

950 
NF2LNK
 = 5,

952 
·y≥2
 
	t·y≥2
;

954 
	sÁâr2
 {

955 
·y≥2
 
ty≥
;

956 
u_öt
 
mode
;

957 
u_öt
 
∆ök
;

958 
u_öt
 
uid
;

959 
u_öt
 
gid
;

960 
u_öt
 
size
;

961 
u_öt
 
blocksize
;

962 
u_öt
 
rdev
;

963 
u_öt
 
blocks
;

964 
u_öt
 
fsid
;

965 
u_öt
 
fûeid
;

966 
nf°ime3
 
©ime
;

967 
nf°ime3
 
mtime
;

968 
nf°ime3
 
˘ime
;

970 
Áâr2
 
	tÁâr2
;

972 
	sßâr2
 {

973 
u_öt
 
mode
;

974 
u_öt
 
uid
;

975 
u_öt
 
gid
;

976 
u_öt
 
size
;

977 
nf°ime3
 
©ime
;

978 
nf°ime3
 
mtime
;

980 
ßâr2
 
	tßâr2
;

981 
	#MAXNAMLEN2
 255

	)

983 *
	tfûíame2
;

984 
	#MAXPATHLEN2
 1024

	)

986 *
	t∑th2
;

987 
	#NFSMAXDATA2
 8192

	)

990 
u_öt
 
nfsd©a2_Àn
;

991 *
nfsd©a2_vÆ
;

992 } 
	tnfsd©a2
;

993 
	#NFSCOOKIESIZE2
 4

	)

995 
	tnfscookõ2
[
NFSCOOKIESIZE2
];

997 
	síåy2
 {

998 
u_öt
 
fûeid
;

999 
fûíame2
 
«me
;

1000 
nfscookõ2
 
cookõ
;

1001 
íåy2
 *
√xã¡ry
;

1003 
íåy2
 
	tíåy2
;

1005 
	sdú›¨gs2
 {

1006 
fh™dÀ2
 
dú
;

1007 
fûíame2
 
«me
;

1009 
dú›¨gs2
 
	tdú›¨gs2
;

1011 
	sGETATTR2¨gs
 {

1012 
fh™dÀ2
 
fh™dÀ
;

1014 
GETATTR2¨gs
 
	tGETATTR2¨gs
;

1016 
	sGETATTR2ªsok
 {

1017 
Áâr2
 
©åibuãs
;

1019 
GETATTR2ªsok
 
	tGETATTR2ªsok
;

1021 
	sGETATTR2ªs
 {

1022 
nfs°©3
 
°©us
;

1024 
GETATTR2ªsok
 
ªsok
;

1025 } 
GETATTR2ªs_u
;

1027 
GETATTR2ªs
 
	tGETATTR2ªs
;

1029 
	sSETATTR2¨gs
 {

1030 
fh™dÀ2
 
fh™dÀ
;

1031 
ßâr2
 
©åibuãs
;

1033 
SETATTR2¨gs
 
	tSETATTR2¨gs
;

1035 
	sSETATTR2ªsok
 {

1036 
Áâr2
 
©åibuãs
;

1038 
SETATTR2ªsok
 
	tSETATTR2ªsok
;

1040 
	sSETATTR2ªs
 {

1041 
nfs°©3
 
°©us
;

1043 
SETATTR2ªsok
 
ªsok
;

1044 } 
SETATTR2ªs_u
;

1046 
SETATTR2ªs
 
	tSETATTR2ªs
;

1048 
	sLOOKUP2¨gs
 {

1049 
dú›¨gs2
 
wh©
;

1051 
LOOKUP2¨gs
 
	tLOOKUP2¨gs
;

1053 
	sLOOKUP2ªsok
 {

1054 
fh™dÀ2
 
fûe
;

1055 
Áâr2
 
©åibuãs
;

1057 
LOOKUP2ªsok
 
	tLOOKUP2ªsok
;

1059 
	sLOOKUP2ªs
 {

1060 
nfs°©3
 
°©us
;

1062 
LOOKUP2ªsok
 
ªsok
;

1063 } 
LOOKUP2ªs_u
;

1065 
LOOKUP2ªs
 
	tLOOKUP2ªs
;

1067 
	sREADLINK2¨gs
 {

1068 
fh™dÀ2
 
fûe
;

1070 
READLINK2¨gs
 
	tREADLINK2¨gs
;

1072 
	sREADLINK2ªsok
 {

1073 
∑th2
 
d©a
;

1075 
READLINK2ªsok
 
	tREADLINK2ªsok
;

1077 
	sREADLINK2ªs
 {

1078 
nfs°©3
 
°©us
;

1080 
READLINK2ªsok
 
ªsok
;

1081 } 
READLINK2ªs_u
;

1083 
READLINK2ªs
 
	tREADLINK2ªs
;

1085 
	sREAD2¨gs
 {

1086 
fh™dÀ2
 
fûe
;

1087 
u_öt
 
off£t
;

1088 
u_öt
 
cou¡
;

1089 
u_öt
 
tŸÆcou¡
;

1091 
READ2¨gs
 
	tREAD2¨gs
;

1093 
	sREAD2ªsok
 {

1094 
Áâr2
 
©åibuãs
;

1095 
nfsd©a2
 
d©a
;

1097 
READ2ªsok
 
	tREAD2ªsok
;

1099 
	sREAD2ªs
 {

1100 
nfs°©3
 
°©us
;

1102 
READ2ªsok
 
ªsok
;

1103 } 
READ2ªs_u
;

1105 
READ2ªs
 
	tREAD2ªs
;

1107 
	sWRITE2¨gs
 {

1108 
fh™dÀ2
 
fûe
;

1109 
u_öt
 
begöoff£t
;

1110 
u_öt
 
off£t
;

1111 
u_öt
 
tŸÆcou¡
;

1112 
nfsd©a2
 
d©a
;

1114 
WRITE2¨gs
 
	tWRITE2¨gs
;

1116 
	sWRITE2ªsok
 {

1117 
Áâr2
 
©åibuãs
;

1119 
WRITE2ªsok
 
	tWRITE2ªsok
;

1121 
	sWRITE2ªs
 {

1122 
nfs°©3
 
°©us
;

1124 
WRITE2ªsok
 
ªsok
;

1125 } 
WRITE2ªs_u
;

1127 
WRITE2ªs
 
	tWRITE2ªs
;

1129 
	sCREATE2¨gs
 {

1130 
dú›¨gs2
 
whîe
;

1131 
ßâr2
 
©åibuãs
;

1133 
CREATE2¨gs
 
	tCREATE2¨gs
;

1135 
	sCREATE2ªsok
 {

1136 
fh™dÀ2
 
fûe
;

1137 
Áâr2
 
©åibuãs
;

1139 
CREATE2ªsok
 
	tCREATE2ªsok
;

1141 
	sCREATE2ªs
 {

1142 
nfs°©3
 
°©us
;

1144 
CREATE2ªsok
 
ªsok
;

1145 } 
CREATE2ªs_u
;

1147 
CREATE2ªs
 
	tCREATE2ªs
;

1149 
	sREMOVE2¨gs
 {

1150 
dú›¨gs2
 
wh©
;

1152 
REMOVE2¨gs
 
	tREMOVE2¨gs
;

1154 
	sREMOVE2ªs
 {

1155 
nfs°©3
 
°©us
;

1157 
REMOVE2ªs
 
	tREMOVE2ªs
;

1159 
	sRENAME2¨gs
 {

1160 
dú›¨gs2
 
‰om
;

1161 
dú›¨gs2
 
to
;

1163 
RENAME2¨gs
 
	tRENAME2¨gs
;

1165 
	sRENAME2ªs
 {

1166 
nfs°©3
 
°©us
;

1168 
RENAME2ªs
 
	tRENAME2ªs
;

1170 
	sLINK2¨gs
 {

1171 
fh™dÀ2
 
‰om
;

1172 
dú›¨gs2
 
to
;

1174 
LINK2¨gs
 
	tLINK2¨gs
;

1176 
	sLINK2ªs
 {

1177 
nfs°©3
 
°©us
;

1179 
LINK2ªs
 
	tLINK2ªs
;

1181 
	sSYMLINK2¨gs
 {

1182 
dú›¨gs2
 
‰om
;

1183 
∑th2
 
to
;

1184 
ßâr2
 
©åibuãs
;

1186 
SYMLINK2¨gs
 
	tSYMLINK2¨gs
;

1188 
	sSYMLINK2ªs
 {

1189 
nfs°©3
 
°©us
;

1191 
SYMLINK2ªs
 
	tSYMLINK2ªs
;

1193 
	sMKDIR2¨gs
 {

1194 
dú›¨gs2
 
whîe
;

1195 
ßâr2
 
©åibuãs
;

1197 
MKDIR2¨gs
 
	tMKDIR2¨gs
;

1199 
	sMKDIR2ªsok
 {

1200 
fh™dÀ2
 
fûe
;

1201 
Áâr2
 
©åibuãs
;

1203 
MKDIR2ªsok
 
	tMKDIR2ªsok
;

1205 
	sMKDIR2ªs
 {

1206 
nfs°©3
 
°©us
;

1208 
MKDIR2ªsok
 
ªsok
;

1209 } 
MKDIR2ªs_u
;

1211 
MKDIR2ªs
 
	tMKDIR2ªs
;

1213 
	sRMDIR2¨gs
 {

1214 
dú›¨gs2
 
wh©
;

1216 
RMDIR2¨gs
 
	tRMDIR2¨gs
;

1218 
	sRMDIR2ªs
 {

1219 
nfs°©3
 
°©us
;

1221 
RMDIR2ªs
 
	tRMDIR2ªs
;

1223 
	sREADDIR2¨gs
 {

1224 
fh™dÀ2
 
dú
;

1225 
nfscookõ2
 
cookõ
;

1226 
u_öt
 
cou¡
;

1228 
READDIR2¨gs
 
	tREADDIR2¨gs
;

1230 
	sREADDIR2ªsok
 {

1231 
íåy2
 *
íåõs
;

1232 
uöt32_t
 
eof
;

1234 
READDIR2ªsok
 
	tREADDIR2ªsok
;

1236 
	sREADDIR2ªs
 {

1237 
nfs°©3
 
°©us
;

1239 
READDIR2ªsok
 
ªsok
;

1240 } 
READDIR2ªs_u
;

1242 
READDIR2ªs
 
	tREADDIR2ªs
;

1244 
	sSTATFS2¨gs
 {

1245 
fh™dÀ2
 
dú
;

1247 
STATFS2¨gs
 
	tSTATFS2¨gs
;

1249 
	sSTATFS2ªsok
 {

1250 
u_öt
 
tsize
;

1251 
u_öt
 
bsize
;

1252 
u_öt
 
blocks
;

1253 
u_öt
 
b‰ì
;

1254 
u_öt
 
bavaû
;

1256 
STATFS2ªsok
 
	tSTATFS2ªsok
;

1258 
	sSTATFS2ªs
 {

1259 
nfs°©3
 
°©us
;

1261 
STATFS2ªsok
 
ªsok
;

1262 } 
STATFS2ªs_u
;

1264 
STATFS2ªs
 
	tSTATFS2ªs
;

1266 
	enfß˛_ty≥
 {

1267 
NFSACL_TYPE_USER_OBJ
 = 0x0001,

1268 
NFSACL_TYPE_USER
 = 0x0002,

1269 
NFSACL_TYPE_GROUP_OBJ
 = 0x0004,

1270 
NFSACL_TYPE_GROUP
 = 0x0008,

1271 
NFSACL_TYPE_CLASS_OBJ
 = 0x0010,

1272 
NFSACL_TYPE_CLASS
 = 0x0020,

1273 
NFSACL_TYPE_DEFAULT
 = 0x1000,

1274 
NFSACL_TYPE_DEFAULT_USER_OBJ
 = 0x1001,

1275 
NFSACL_TYPE_DEFAULT_USER
 = 0x1002,

1276 
NFSACL_TYPE_DEFAULT_GROUP_OBJ
 = 0x1004,

1277 
NFSACL_TYPE_DEFAULT_GROUP
 = 0x1008,

1278 
NFSACL_TYPE_DEFAULT_CLASS_OBJ
 = 0x1010,

1279 
NFSACL_TYPE_DEFAULT_OTHER_OBJ
 = 0x1020,

1281 
nfß˛_ty≥
 
	tnfß˛_ty≥
;

1282 
	#NFSACL_PERM_READ
 0x04

	)

1283 
	#NFSACL_PERM_WRITE
 0x02

	)

1284 
	#NFSACL_PERM_EXEC
 0x01

	)

1286 
	snfß˛_a˚
 {

1287 
nfß˛_ty≥
 
ty≥
;

1288 
u_öt
 
id
;

1289 
u_öt
 
≥rm
;

1291 
nfß˛_a˚
 
	tnfß˛_a˚
;

1292 
	#NFSACL_MASK_ACL_ENTRY
 0x0001

	)

1293 
	#NFSACL_MASK_ACL_COUNT
 0x0002

	)

1294 
	#NFSACL_MASK_ACL_DEFAULT_ENTRY
 0x0004

	)

1295 
	#NFSACL_MASK_ACL_DEFAULT_COUNT
 0x0008

	)

1297 
	sGETACL3¨gs
 {

1298 
nfs_fh3
 
dú
;

1299 
u_öt
 
mask
;

1301 
GETACL3¨gs
 
	tGETACL3¨gs
;

1303 
	sGETACL3ªsok
 {

1304 
po°_›_©å
 
©å
;

1305 
u_öt
 
mask
;

1306 
u_öt
 
a˚_cou¡
;

1308 
u_öt
 
a˚_Àn
;

1309 
nfß˛_a˚
 *
a˚_vÆ
;

1310 } 
a˚
;

1311 
u_öt
 
deÁu…_a˚_cou¡
;

1313 
u_öt
 
deÁu…_a˚_Àn
;

1314 
nfß˛_a˚
 *
deÁu…_a˚_vÆ
;

1315 } 
deÁu…_a˚
;

1317 
GETACL3ªsok
 
	tGETACL3ªsok
;

1319 
	sGETACL3ªs
 {

1320 
nfs°©3
 
°©us
;

1322 
GETACL3ªsok
 
ªsok
;

1323 } 
GETACL3ªs_u
;

1325 
GETACL3ªs
 
	tGETACL3ªs
;

1327 
	sSETACL3¨gs
 {

1328 
nfs_fh3
 
dú
;

1329 
u_öt
 
mask
;

1330 
u_öt
 
a˚_cou¡
;

1332 
u_öt
 
a˚_Àn
;

1333 
nfß˛_a˚
 *
a˚_vÆ
;

1334 } 
a˚
;

1335 
u_öt
 
deÁu…_a˚_cou¡
;

1337 
u_öt
 
deÁu…_a˚_Àn
;

1338 
nfß˛_a˚
 *
deÁu…_a˚_vÆ
;

1339 } 
deÁu…_a˚
;

1341 
SETACL3¨gs
 
	tSETACL3¨gs
;

1343 
	sSETACL3ªsok
 {

1344 
po°_›_©å
 
©å
;

1346 
SETACL3ªsok
 
	tSETACL3ªsok
;

1348 
	sSETACL3ªs
 {

1349 
nfs°©3
 
°©us
;

1351 
SETACL3ªsok
 
ªsok
;

1352 } 
SETACL3ªs_u
;

1354 
SETACL3ªs
 
	tSETACL3ªs
;

1356 
	#NFS_PROGRAM
 100003

	)

1357 
	#NFS_V2
 2

	)

1359 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

1360 
	#NFS2_NULL
 0

	)

1361 * 
nfs2_nuŒ_2
(*, *);

1362 * 
nfs2_nuŒ_2_svc
(*, 
svc_ªq
 *);

1363 
	#NFS2_GETATTR
 1

	)

1364 
GETATTR2ªs
 * 
nfs2_gë©å_2
(
GETATTR2¨gs
 *, *);

1365 
GETATTR2ªs
 * 
nfs2_gë©å_2_svc
(
GETATTR2¨gs
 *, 
svc_ªq
 *);

1366 
	#NFS2_SETATTR
 2

	)

1367 
SETATTR2ªs
 * 
nfs2_£èâr_2
(
SETATTR2¨gs
 *, *);

1368 
SETATTR2ªs
 * 
nfs2_£èâr_2_svc
(
SETATTR2¨gs
 *, 
svc_ªq
 *);

1369 
	#NFS2_LOOKUP
 4

	)

1370 
LOOKUP2ªs
 * 
nfs2_lookup_2
(
LOOKUP2¨gs
 *, *);

1371 
LOOKUP2ªs
 * 
nfs2_lookup_2_svc
(
LOOKUP2¨gs
 *, 
svc_ªq
 *);

1372 
	#NFS2_READLINK
 5

	)

1373 
READLINK2ªs
 * 
nfs2_ªadlök_2
(
READLINK2¨gs
 *, *);

1374 
READLINK2ªs
 * 
nfs2_ªadlök_2_svc
(
READLINK2¨gs
 *, 
svc_ªq
 *);

1375 
	#NFS2_READ
 6

	)

1376 
READ2ªs
 * 
nfs2_ªad_2
(
READ2¨gs
 *, *);

1377 
READ2ªs
 * 
nfs2_ªad_2_svc
(
READ2¨gs
 *, 
svc_ªq
 *);

1378 
	#NFS2_WRITE
 8

	)

1379 
WRITE2ªs
 * 
nfs2_wrôe_2
(
WRITE2¨gs
 *, *);

1380 
WRITE2ªs
 * 
nfs2_wrôe_2_svc
(
WRITE2¨gs
 *, 
svc_ªq
 *);

1381 
	#NFS2_CREATE
 9

	)

1382 
CREATE2ªs
 * 
nfs2_¸óã_2
(
CREATE2¨gs
 *, *);

1383 
CREATE2ªs
 * 
nfs2_¸óã_2_svc
(
CREATE2¨gs
 *, 
svc_ªq
 *);

1384 
	#NFS2_REMOVE
 10

	)

1385 
REMOVE2ªs
 * 
nfs2_ªmove_2
(
REMOVE2¨gs
 *, *);

1386 
REMOVE2ªs
 * 
nfs2_ªmove_2_svc
(
REMOVE2¨gs
 *, 
svc_ªq
 *);

1387 
	#NFS2_RENAME
 11

	)

1388 
RENAME2ªs
 * 
nfs2_ª«me_2
(
RENAME2¨gs
 *, *);

1389 
RENAME2ªs
 * 
nfs2_ª«me_2_svc
(
RENAME2¨gs
 *, 
svc_ªq
 *);

1390 
	#NFS2_LINK
 12

	)

1391 
LINK2ªs
 * 
nfs2_lök_2
(
LINK2¨gs
 *, *);

1392 
LINK2ªs
 * 
nfs2_lök_2_svc
(
LINK2¨gs
 *, 
svc_ªq
 *);

1393 
	#NFS2_SYMLINK
 13

	)

1394 
SYMLINK2ªs
 * 
nfs2_symlök_2
(
SYMLINK2¨gs
 *, *);

1395 
SYMLINK2ªs
 * 
nfs2_symlök_2_svc
(
SYMLINK2¨gs
 *, 
svc_ªq
 *);

1396 
	#NFS2_MKDIR
 14

	)

1397 
MKDIR2ªs
 * 
nfs2_mkdú_2
(
MKDIR2¨gs
 *, *);

1398 
MKDIR2ªs
 * 
nfs2_mkdú_2_svc
(
MKDIR2¨gs
 *, 
svc_ªq
 *);

1399 
	#NFS2_RMDIR
 15

	)

1400 
RMDIR2ªs
 * 
nfs2_rmdú_2
(
RMDIR2¨gs
 *, *);

1401 
RMDIR2ªs
 * 
nfs2_rmdú_2_svc
(
RMDIR2¨gs
 *, 
svc_ªq
 *);

1402 
	#NFS2_READDIR
 16

	)

1403 
READDIR2ªs
 * 
nfs2_ªaddú_2
(
READDIR2¨gs
 *, *);

1404 
READDIR2ªs
 * 
nfs2_ªaddú_2_svc
(
READDIR2¨gs
 *, 
svc_ªq
 *);

1405 
	#NFS2_STATFS
 17

	)

1406 
STATFS2ªs
 * 
nfs2_°©fs_2
(
STATFS2¨gs
 *, *);

1407 
STATFS2ªs
 * 
nfs2_°©fs_2_svc
(
STATFS2¨gs
 *, 
svc_ªq
 *);

1408 
nfs_¥ogøm_2_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

1411 
	#NFS2_NULL
 0

	)

1412 * 
nfs2_nuŒ_2
();

1413 * 
nfs2_nuŒ_2_svc
();

1414 
	#NFS2_GETATTR
 1

	)

1415 
GETATTR2ªs
 * 
nfs2_gë©å_2
();

1416 
GETATTR2ªs
 * 
nfs2_gë©å_2_svc
();

1417 
	#NFS2_SETATTR
 2

	)

1418 
SETATTR2ªs
 * 
nfs2_£èâr_2
();

1419 
SETATTR2ªs
 * 
nfs2_£èâr_2_svc
();

1420 
	#NFS2_LOOKUP
 4

	)

1421 
LOOKUP2ªs
 * 
nfs2_lookup_2
();

1422 
LOOKUP2ªs
 * 
nfs2_lookup_2_svc
();

1423 
	#NFS2_READLINK
 5

	)

1424 
READLINK2ªs
 * 
nfs2_ªadlök_2
();

1425 
READLINK2ªs
 * 
nfs2_ªadlök_2_svc
();

1426 
	#NFS2_READ
 6

	)

1427 
READ2ªs
 * 
nfs2_ªad_2
();

1428 
READ2ªs
 * 
nfs2_ªad_2_svc
();

1429 
	#NFS2_WRITE
 8

	)

1430 
WRITE2ªs
 * 
nfs2_wrôe_2
();

1431 
WRITE2ªs
 * 
nfs2_wrôe_2_svc
();

1432 
	#NFS2_CREATE
 9

	)

1433 
CREATE2ªs
 * 
nfs2_¸óã_2
();

1434 
CREATE2ªs
 * 
nfs2_¸óã_2_svc
();

1435 
	#NFS2_REMOVE
 10

	)

1436 
REMOVE2ªs
 * 
nfs2_ªmove_2
();

1437 
REMOVE2ªs
 * 
nfs2_ªmove_2_svc
();

1438 
	#NFS2_RENAME
 11

	)

1439 
RENAME2ªs
 * 
nfs2_ª«me_2
();

1440 
RENAME2ªs
 * 
nfs2_ª«me_2_svc
();

1441 
	#NFS2_LINK
 12

	)

1442 
LINK2ªs
 * 
nfs2_lök_2
();

1443 
LINK2ªs
 * 
nfs2_lök_2_svc
();

1444 
	#NFS2_SYMLINK
 13

	)

1445 
SYMLINK2ªs
 * 
nfs2_symlök_2
();

1446 
SYMLINK2ªs
 * 
nfs2_symlök_2_svc
();

1447 
	#NFS2_MKDIR
 14

	)

1448 
MKDIR2ªs
 * 
nfs2_mkdú_2
();

1449 
MKDIR2ªs
 * 
nfs2_mkdú_2_svc
();

1450 
	#NFS2_RMDIR
 15

	)

1451 
RMDIR2ªs
 * 
nfs2_rmdú_2
();

1452 
RMDIR2ªs
 * 
nfs2_rmdú_2_svc
();

1453 
	#NFS2_READDIR
 16

	)

1454 
READDIR2ªs
 * 
nfs2_ªaddú_2
();

1455 
READDIR2ªs
 * 
nfs2_ªaddú_2_svc
();

1456 
	#NFS2_STATFS
 17

	)

1457 
STATFS2ªs
 * 
nfs2_°©fs_2
();

1458 
STATFS2ªs
 * 
nfs2_°©fs_2_svc
();

1459 
nfs_¥ogøm_2_‰ìªsu…
 ();

1461 
	#NFS_V3
 3

	)

1463 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

1464 
	#NFS3_NULL
 0

	)

1465 * 
nfs3_nuŒ_3
(*, *);

1466 * 
nfs3_nuŒ_3_svc
(*, 
svc_ªq
 *);

1467 
	#NFS3_GETATTR
 1

	)

1468 
GETATTR3ªs
 * 
nfs3_gë©å_3
(
GETATTR3¨gs
 *, *);

1469 
GETATTR3ªs
 * 
nfs3_gë©å_3_svc
(
GETATTR3¨gs
 *, 
svc_ªq
 *);

1470 
	#NFS3_SETATTR
 2

	)

1471 
SETATTR3ªs
 * 
nfs3_£èâr_3
(
SETATTR3¨gs
 *, *);

1472 
SETATTR3ªs
 * 
nfs3_£èâr_3_svc
(
SETATTR3¨gs
 *, 
svc_ªq
 *);

1473 
	#NFS3_LOOKUP
 3

	)

1474 
LOOKUP3ªs
 * 
nfs3_lookup_3
(
LOOKUP3¨gs
 *, *);

1475 
LOOKUP3ªs
 * 
nfs3_lookup_3_svc
(
LOOKUP3¨gs
 *, 
svc_ªq
 *);

1476 
	#NFS3_ACCESS
 4

	)

1477 
ACCESS3ªs
 * 
nfs3_ac˚ss_3
(
ACCESS3¨gs
 *, *);

1478 
ACCESS3ªs
 * 
nfs3_ac˚ss_3_svc
(
ACCESS3¨gs
 *, 
svc_ªq
 *);

1479 
	#NFS3_READLINK
 5

	)

1480 
READLINK3ªs
 * 
nfs3_ªadlök_3
(
READLINK3¨gs
 *, *);

1481 
READLINK3ªs
 * 
nfs3_ªadlök_3_svc
(
READLINK3¨gs
 *, 
svc_ªq
 *);

1482 
	#NFS3_READ
 6

	)

1483 
READ3ªs
 * 
nfs3_ªad_3
(
READ3¨gs
 *, *);

1484 
READ3ªs
 * 
nfs3_ªad_3_svc
(
READ3¨gs
 *, 
svc_ªq
 *);

1485 
	#NFS3_WRITE
 7

	)

1486 
WRITE3ªs
 * 
nfs3_wrôe_3
(
WRITE3¨gs
 *, *);

1487 
WRITE3ªs
 * 
nfs3_wrôe_3_svc
(
WRITE3¨gs
 *, 
svc_ªq
 *);

1488 
	#NFS3_CREATE
 8

	)

1489 
CREATE3ªs
 * 
nfs3_¸óã_3
(
CREATE3¨gs
 *, *);

1490 
CREATE3ªs
 * 
nfs3_¸óã_3_svc
(
CREATE3¨gs
 *, 
svc_ªq
 *);

1491 
	#NFS3_MKDIR
 9

	)

1492 
MKDIR3ªs
 * 
nfs3_mkdú_3
(
MKDIR3¨gs
 *, *);

1493 
MKDIR3ªs
 * 
nfs3_mkdú_3_svc
(
MKDIR3¨gs
 *, 
svc_ªq
 *);

1494 
	#NFS3_SYMLINK
 10

	)

1495 
SYMLINK3ªs
 * 
nfs3_symlök_3
(
SYMLINK3¨gs
 *, *);

1496 
SYMLINK3ªs
 * 
nfs3_symlök_3_svc
(
SYMLINK3¨gs
 *, 
svc_ªq
 *);

1497 
	#NFS3_MKNOD
 11

	)

1498 
MKNOD3ªs
 * 
nfs3_mknod_3
(
MKNOD3¨gs
 *, *);

1499 
MKNOD3ªs
 * 
nfs3_mknod_3_svc
(
MKNOD3¨gs
 *, 
svc_ªq
 *);

1500 
	#NFS3_REMOVE
 12

	)

1501 
REMOVE3ªs
 * 
nfs3_ªmove_3
(
REMOVE3¨gs
 *, *);

1502 
REMOVE3ªs
 * 
nfs3_ªmove_3_svc
(
REMOVE3¨gs
 *, 
svc_ªq
 *);

1503 
	#NFS3_RMDIR
 13

	)

1504 
RMDIR3ªs
 * 
nfs3_rmdú_3
(
RMDIR3¨gs
 *, *);

1505 
RMDIR3ªs
 * 
nfs3_rmdú_3_svc
(
RMDIR3¨gs
 *, 
svc_ªq
 *);

1506 
	#NFS3_RENAME
 14

	)

1507 
RENAME3ªs
 * 
nfs3_ª«me_3
(
RENAME3¨gs
 *, *);

1508 
RENAME3ªs
 * 
nfs3_ª«me_3_svc
(
RENAME3¨gs
 *, 
svc_ªq
 *);

1509 
	#NFS3_LINK
 15

	)

1510 
LINK3ªs
 * 
nfs3_lök_3
(
LINK3¨gs
 *, *);

1511 
LINK3ªs
 * 
nfs3_lök_3_svc
(
LINK3¨gs
 *, 
svc_ªq
 *);

1512 
	#NFS3_READDIR
 16

	)

1513 
READDIR3ªs
 * 
nfs3_ªaddú_3
(
READDIR3¨gs
 *, *);

1514 
READDIR3ªs
 * 
nfs3_ªaddú_3_svc
(
READDIR3¨gs
 *, 
svc_ªq
 *);

1515 
	#NFS3_READDIRPLUS
 17

	)

1516 
READDIRPLUS3ªs
 * 
nfs3_ªaddú∂us_3
(
READDIRPLUS3¨gs
 *, *);

1517 
READDIRPLUS3ªs
 * 
nfs3_ªaddú∂us_3_svc
(
READDIRPLUS3¨gs
 *, 
svc_ªq
 *);

1518 
	#NFS3_FSSTAT
 18

	)

1519 
FSSTAT3ªs
 * 
nfs3_fs°©_3
(
FSSTAT3¨gs
 *, *);

1520 
FSSTAT3ªs
 * 
nfs3_fs°©_3_svc
(
FSSTAT3¨gs
 *, 
svc_ªq
 *);

1521 
	#NFS3_FSINFO
 19

	)

1522 
FSINFO3ªs
 * 
nfs3_fsöfo_3
(
FSINFO3¨gs
 *, *);

1523 
FSINFO3ªs
 * 
nfs3_fsöfo_3_svc
(
FSINFO3¨gs
 *, 
svc_ªq
 *);

1524 
	#NFS3_PATHCONF
 20

	)

1525 
PATHCONF3ªs
 * 
nfs3_∑thc⁄f_3
(
PATHCONF3¨gs
 *, *);

1526 
PATHCONF3ªs
 * 
nfs3_∑thc⁄f_3_svc
(
PATHCONF3¨gs
 *, 
svc_ªq
 *);

1527 
	#NFS3_COMMIT
 21

	)

1528 
COMMIT3ªs
 * 
nfs3_commô_3
(
COMMIT3¨gs
 *, *);

1529 
COMMIT3ªs
 * 
nfs3_commô_3_svc
(
COMMIT3¨gs
 *, 
svc_ªq
 *);

1530 
nfs_¥ogøm_3_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

1533 
	#NFS3_NULL
 0

	)

1534 * 
nfs3_nuŒ_3
();

1535 * 
nfs3_nuŒ_3_svc
();

1536 
	#NFS3_GETATTR
 1

	)

1537 
GETATTR3ªs
 * 
nfs3_gë©å_3
();

1538 
GETATTR3ªs
 * 
nfs3_gë©å_3_svc
();

1539 
	#NFS3_SETATTR
 2

	)

1540 
SETATTR3ªs
 * 
nfs3_£èâr_3
();

1541 
SETATTR3ªs
 * 
nfs3_£èâr_3_svc
();

1542 
	#NFS3_LOOKUP
 3

	)

1543 
LOOKUP3ªs
 * 
nfs3_lookup_3
();

1544 
LOOKUP3ªs
 * 
nfs3_lookup_3_svc
();

1545 
	#NFS3_ACCESS
 4

	)

1546 
ACCESS3ªs
 * 
nfs3_ac˚ss_3
();

1547 
ACCESS3ªs
 * 
nfs3_ac˚ss_3_svc
();

1548 
	#NFS3_READLINK
 5

	)

1549 
READLINK3ªs
 * 
nfs3_ªadlök_3
();

1550 
READLINK3ªs
 * 
nfs3_ªadlök_3_svc
();

1551 
	#NFS3_READ
 6

	)

1552 
READ3ªs
 * 
nfs3_ªad_3
();

1553 
READ3ªs
 * 
nfs3_ªad_3_svc
();

1554 
	#NFS3_WRITE
 7

	)

1555 
WRITE3ªs
 * 
nfs3_wrôe_3
();

1556 
WRITE3ªs
 * 
nfs3_wrôe_3_svc
();

1557 
	#NFS3_CREATE
 8

	)

1558 
CREATE3ªs
 * 
nfs3_¸óã_3
();

1559 
CREATE3ªs
 * 
nfs3_¸óã_3_svc
();

1560 
	#NFS3_MKDIR
 9

	)

1561 
MKDIR3ªs
 * 
nfs3_mkdú_3
();

1562 
MKDIR3ªs
 * 
nfs3_mkdú_3_svc
();

1563 
	#NFS3_SYMLINK
 10

	)

1564 
SYMLINK3ªs
 * 
nfs3_symlök_3
();

1565 
SYMLINK3ªs
 * 
nfs3_symlök_3_svc
();

1566 
	#NFS3_MKNOD
 11

	)

1567 
MKNOD3ªs
 * 
nfs3_mknod_3
();

1568 
MKNOD3ªs
 * 
nfs3_mknod_3_svc
();

1569 
	#NFS3_REMOVE
 12

	)

1570 
REMOVE3ªs
 * 
nfs3_ªmove_3
();

1571 
REMOVE3ªs
 * 
nfs3_ªmove_3_svc
();

1572 
	#NFS3_RMDIR
 13

	)

1573 
RMDIR3ªs
 * 
nfs3_rmdú_3
();

1574 
RMDIR3ªs
 * 
nfs3_rmdú_3_svc
();

1575 
	#NFS3_RENAME
 14

	)

1576 
RENAME3ªs
 * 
nfs3_ª«me_3
();

1577 
RENAME3ªs
 * 
nfs3_ª«me_3_svc
();

1578 
	#NFS3_LINK
 15

	)

1579 
LINK3ªs
 * 
nfs3_lök_3
();

1580 
LINK3ªs
 * 
nfs3_lök_3_svc
();

1581 
	#NFS3_READDIR
 16

	)

1582 
READDIR3ªs
 * 
nfs3_ªaddú_3
();

1583 
READDIR3ªs
 * 
nfs3_ªaddú_3_svc
();

1584 
	#NFS3_READDIRPLUS
 17

	)

1585 
READDIRPLUS3ªs
 * 
nfs3_ªaddú∂us_3
();

1586 
READDIRPLUS3ªs
 * 
nfs3_ªaddú∂us_3_svc
();

1587 
	#NFS3_FSSTAT
 18

	)

1588 
FSSTAT3ªs
 * 
nfs3_fs°©_3
();

1589 
FSSTAT3ªs
 * 
nfs3_fs°©_3_svc
();

1590 
	#NFS3_FSINFO
 19

	)

1591 
FSINFO3ªs
 * 
nfs3_fsöfo_3
();

1592 
FSINFO3ªs
 * 
nfs3_fsöfo_3_svc
();

1593 
	#NFS3_PATHCONF
 20

	)

1594 
PATHCONF3ªs
 * 
nfs3_∑thc⁄f_3
();

1595 
PATHCONF3ªs
 * 
nfs3_∑thc⁄f_3_svc
();

1596 
	#NFS3_COMMIT
 21

	)

1597 
COMMIT3ªs
 * 
nfs3_commô_3
();

1598 
COMMIT3ªs
 * 
nfs3_commô_3_svc
();

1599 
nfs_¥ogøm_3_‰ìªsu…
 ();

1602 
	#NFSACL_PROGRAM
 100227

	)

1603 
	#NFSACL_V3
 3

	)

1605 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

1606 
	#NFSACL3_NULL
 0

	)

1607 * 
nfß˛3_nuŒ_3
(*, *);

1608 * 
nfß˛3_nuŒ_3_svc
(*, 
svc_ªq
 *);

1609 
	#NFSACL3_GETACL
 1

	)

1610 
GETACL3ªs
 * 
nfß˛3_gëa˛_3
(
GETACL3¨gs
 *, *);

1611 
GETACL3ªs
 * 
nfß˛3_gëa˛_3_svc
(
GETACL3¨gs
 *, 
svc_ªq
 *);

1612 
	#NFSACL3_SETACL
 2

	)

1613 
SETACL3ªs
 * 
nfß˛3_£è˛_3
(
SETACL3¨gs
 *, *);

1614 
SETACL3ªs
 * 
nfß˛3_£è˛_3_svc
(
SETACL3¨gs
 *, 
svc_ªq
 *);

1615 
nfß˛_¥ogøm_3_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

1618 
	#NFSACL3_NULL
 0

	)

1619 * 
nfß˛3_nuŒ_3
();

1620 * 
nfß˛3_nuŒ_3_svc
();

1621 
	#NFSACL3_GETACL
 1

	)

1622 
GETACL3ªs
 * 
nfß˛3_gëa˛_3
();

1623 
GETACL3ªs
 * 
nfß˛3_gëa˛_3_svc
();

1624 
	#NFSACL3_SETACL
 2

	)

1625 
SETACL3ªs
 * 
nfß˛3_£è˛_3
();

1626 
SETACL3ªs
 * 
nfß˛3_£è˛_3_svc
();

1627 
nfß˛_¥ogøm_3_‰ìªsu…
 ();

1632 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

1633 
uöt32_t
 
zdr_cookõvîf3
 (
ZDR
 *, 
cookõvîf3
);

1634 
uöt32_t
 
zdr_cookõ3
 (
ZDR
 *, 
cookõ3
*);

1635 
uöt32_t
 
zdr_nfs_fh3
 (
ZDR
 *, 
nfs_fh3
*);

1636 
uöt32_t
 
zdr_fûíame3
 (
ZDR
 *, 
fûíame3
*);

1637 
uöt32_t
 
zdr_dú›¨gs3
 (
ZDR
 *, 
dú›¨gs3
*);

1638 
uöt32_t
 
zdr_·y≥3
 (
ZDR
 *, 
·y≥3
*);

1639 
uöt32_t
 
zdr_mode3
 (
ZDR
 *, 
mode3
*);

1640 
uöt32_t
 
zdr_uid3
 (
ZDR
 *, 
uid3
*);

1641 
uöt32_t
 
zdr_gid3
 (
ZDR
 *, 
gid3
*);

1642 
uöt32_t
 
zdr_size3
 (
ZDR
 *, 
size3
*);

1643 
uöt32_t
 
zdr_fûeid3
 (
ZDR
 *, 
fûeid3
*);

1644 
uöt32_t
 
zdr_•ecd©a3
 (
ZDR
 *, 
•ecd©a3
*);

1645 
uöt32_t
 
zdr_nf°ime3
 (
ZDR
 *, 
nf°ime3
*);

1646 
uöt32_t
 
zdr_Áâr3
 (
ZDR
 *, 
Áâr3
*);

1647 
uöt32_t
 
zdr_po°_›_©å
 (
ZDR
 *, 
po°_›_©å
*);

1648 
uöt32_t
 
zdr_nfs°©3
 (
ZDR
 *, 
nfs°©3
*);

1649 
uöt32_t
 
zdr_°abÀ_how
 (
ZDR
 *, 
°abÀ_how
*);

1650 
uöt32_t
 
zdr_off£t3
 (
ZDR
 *, 
off£t3
*);

1651 
uöt32_t
 
zdr_cou¡3
 (
ZDR
 *, 
cou¡3
*);

1652 
uöt32_t
 
zdr_wcc_©å
 (
ZDR
 *, 
wcc_©å
*);

1653 
uöt32_t
 
zdr_¥e_›_©å
 (
ZDR
 *, 
¥e_›_©å
*);

1654 
uöt32_t
 
zdr_wcc_d©a
 (
ZDR
 *, 
wcc_d©a
*);

1655 
uöt32_t
 
zdr_WRITE3¨gs
 (
ZDR
 *, 
WRITE3¨gs
*);

1656 
uöt32_t
 
zdr_wrôevîf3
 (
ZDR
 *, 
wrôevîf3
);

1657 
uöt32_t
 
zdr_WRITE3ªsok
 (
ZDR
 *, 
WRITE3ªsok
*);

1658 
uöt32_t
 
zdr_WRITE3ªsÁû
 (
ZDR
 *, 
WRITE3ªsÁû
*);

1659 
uöt32_t
 
zdr_WRITE3ªs
 (
ZDR
 *, 
WRITE3ªs
*);

1660 
uöt32_t
 
zdr_LOOKUP3¨gs
 (
ZDR
 *, 
LOOKUP3¨gs
*);

1661 
uöt32_t
 
zdr_LOOKUP3ªsok
 (
ZDR
 *, 
LOOKUP3ªsok
*);

1662 
uöt32_t
 
zdr_LOOKUP3ªsÁû
 (
ZDR
 *, 
LOOKUP3ªsÁû
*);

1663 
uöt32_t
 
zdr_LOOKUP3ªs
 (
ZDR
 *, 
LOOKUP3ªs
*);

1664 
uöt32_t
 
zdr_COMMIT3¨gs
 (
ZDR
 *, 
COMMIT3¨gs
*);

1665 
uöt32_t
 
zdr_COMMIT3ªsok
 (
ZDR
 *, 
COMMIT3ªsok
*);

1666 
uöt32_t
 
zdr_COMMIT3ªsÁû
 (
ZDR
 *, 
COMMIT3ªsÁû
*);

1667 
uöt32_t
 
zdr_COMMIT3ªs
 (
ZDR
 *, 
COMMIT3ªs
*);

1668 
uöt32_t
 
zdr_ACCESS3¨gs
 (
ZDR
 *, 
ACCESS3¨gs
*);

1669 
uöt32_t
 
zdr_ACCESS3ªsok
 (
ZDR
 *, 
ACCESS3ªsok
*);

1670 
uöt32_t
 
zdr_ACCESS3ªsÁû
 (
ZDR
 *, 
ACCESS3ªsÁû
*);

1671 
uöt32_t
 
zdr_ACCESS3ªs
 (
ZDR
 *, 
ACCESS3ªs
*);

1672 
uöt32_t
 
zdr_GETATTR3¨gs
 (
ZDR
 *, 
GETATTR3¨gs
*);

1673 
uöt32_t
 
zdr_GETATTR3ªsok
 (
ZDR
 *, 
GETATTR3ªsok
*);

1674 
uöt32_t
 
zdr_GETATTR3ªs
 (
ZDR
 *, 
GETATTR3ªs
*);

1675 
uöt32_t
 
zdr_time_how
 (
ZDR
 *, 
time_how
*);

1676 
uöt32_t
 
zdr_£t_mode3
 (
ZDR
 *, 
£t_mode3
*);

1677 
uöt32_t
 
zdr_£t_uid3
 (
ZDR
 *, 
£t_uid3
*);

1678 
uöt32_t
 
zdr_£t_gid3
 (
ZDR
 *, 
£t_gid3
*);

1679 
uöt32_t
 
zdr_£t_size3
 (
ZDR
 *, 
£t_size3
*);

1680 
uöt32_t
 
zdr_£t_©ime
 (
ZDR
 *, 
£t_©ime
*);

1681 
uöt32_t
 
zdr_£t_mtime
 (
ZDR
 *, 
£t_mtime
*);

1682 
uöt32_t
 
zdr_ßâr3
 (
ZDR
 *, 
ßâr3
*);

1683 
uöt32_t
 
zdr_¸óãmode3
 (
ZDR
 *, 
¸óãmode3
*);

1684 
uöt32_t
 
zdr_¸óãvîf3
 (
ZDR
 *, 
¸óãvîf3
);

1685 
uöt32_t
 
zdr_¸óãhow3
 (
ZDR
 *, 
¸óãhow3
*);

1686 
uöt32_t
 
zdr_CREATE3¨gs
 (
ZDR
 *, 
CREATE3¨gs
*);

1687 
uöt32_t
 
zdr_po°_›_fh3
 (
ZDR
 *, 
po°_›_fh3
*);

1688 
uöt32_t
 
zdr_CREATE3ªsok
 (
ZDR
 *, 
CREATE3ªsok
*);

1689 
uöt32_t
 
zdr_CREATE3ªsÁû
 (
ZDR
 *, 
CREATE3ªsÁû
*);

1690 
uöt32_t
 
zdr_CREATE3ªs
 (
ZDR
 *, 
CREATE3ªs
*);

1691 
uöt32_t
 
zdr_REMOVE3¨gs
 (
ZDR
 *, 
REMOVE3¨gs
*);

1692 
uöt32_t
 
zdr_REMOVE3ªsok
 (
ZDR
 *, 
REMOVE3ªsok
*);

1693 
uöt32_t
 
zdr_REMOVE3ªsÁû
 (
ZDR
 *, 
REMOVE3ªsÁû
*);

1694 
uöt32_t
 
zdr_REMOVE3ªs
 (
ZDR
 *, 
REMOVE3ªs
*);

1695 
uöt32_t
 
zdr_READ3¨gs
 (
ZDR
 *, 
READ3¨gs
*);

1696 
uöt32_t
 
zdr_READ3ªsok
 (
ZDR
 *, 
READ3ªsok
*);

1697 
uöt32_t
 
zdr_READ3ªsÁû
 (
ZDR
 *, 
READ3ªsÁû
*);

1698 
uöt32_t
 
zdr_READ3ªs
 (
ZDR
 *, 
READ3ªs
*);

1699 
uöt32_t
 
zdr_FSINFO3¨gs
 (
ZDR
 *, 
FSINFO3¨gs
*);

1700 
uöt32_t
 
zdr_FSINFO3ªsok
 (
ZDR
 *, 
FSINFO3ªsok
*);

1701 
uöt32_t
 
zdr_FSINFO3ªsÁû
 (
ZDR
 *, 
FSINFO3ªsÁû
*);

1702 
uöt32_t
 
zdr_FSINFO3ªs
 (
ZDR
 *, 
FSINFO3ªs
*);

1703 
uöt32_t
 
zdr_FSSTAT3¨gs
 (
ZDR
 *, 
FSSTAT3¨gs
*);

1704 
uöt32_t
 
zdr_FSSTAT3ªsok
 (
ZDR
 *, 
FSSTAT3ªsok
*);

1705 
uöt32_t
 
zdr_FSSTAT3ªsÁû
 (
ZDR
 *, 
FSSTAT3ªsÁû
*);

1706 
uöt32_t
 
zdr_FSSTAT3ªs
 (
ZDR
 *, 
FSSTAT3ªs
*);

1707 
uöt32_t
 
zdr_PATHCONF3¨gs
 (
ZDR
 *, 
PATHCONF3¨gs
*);

1708 
uöt32_t
 
zdr_PATHCONF3ªsok
 (
ZDR
 *, 
PATHCONF3ªsok
*);

1709 
uöt32_t
 
zdr_PATHCONF3ªsÁû
 (
ZDR
 *, 
PATHCONF3ªsÁû
*);

1710 
uöt32_t
 
zdr_PATHCONF3ªs
 (
ZDR
 *, 
PATHCONF3ªs
*);

1711 
uöt32_t
 
zdr_nf•©h3
 (
ZDR
 *, 
nf•©h3
*);

1712 
uöt32_t
 
zdr_symlökd©a3
 (
ZDR
 *, 
symlökd©a3
*);

1713 
uöt32_t
 
zdr_SYMLINK3¨gs
 (
ZDR
 *, 
SYMLINK3¨gs
*);

1714 
uöt32_t
 
zdr_SYMLINK3ªsok
 (
ZDR
 *, 
SYMLINK3ªsok
*);

1715 
uöt32_t
 
zdr_SYMLINK3ªsÁû
 (
ZDR
 *, 
SYMLINK3ªsÁû
*);

1716 
uöt32_t
 
zdr_SYMLINK3ªs
 (
ZDR
 *, 
SYMLINK3ªs
*);

1717 
uöt32_t
 
zdr_READLINK3¨gs
 (
ZDR
 *, 
READLINK3¨gs
*);

1718 
uöt32_t
 
zdr_READLINK3ªsok
 (
ZDR
 *, 
READLINK3ªsok
*);

1719 
uöt32_t
 
zdr_READLINK3ªsÁû
 (
ZDR
 *, 
READLINK3ªsÁû
*);

1720 
uöt32_t
 
zdr_READLINK3ªs
 (
ZDR
 *, 
READLINK3ªs
*);

1721 
uöt32_t
 
zdr_devi˚d©a3
 (
ZDR
 *, 
devi˚d©a3
*);

1722 
uöt32_t
 
zdr_mknodd©a3
 (
ZDR
 *, 
mknodd©a3
*);

1723 
uöt32_t
 
zdr_MKNOD3¨gs
 (
ZDR
 *, 
MKNOD3¨gs
*);

1724 
uöt32_t
 
zdr_MKNOD3ªsok
 (
ZDR
 *, 
MKNOD3ªsok
*);

1725 
uöt32_t
 
zdr_MKNOD3ªsÁû
 (
ZDR
 *, 
MKNOD3ªsÁû
*);

1726 
uöt32_t
 
zdr_MKNOD3ªs
 (
ZDR
 *, 
MKNOD3ªs
*);

1727 
uöt32_t
 
zdr_MKDIR3¨gs
 (
ZDR
 *, 
MKDIR3¨gs
*);

1728 
uöt32_t
 
zdr_MKDIR3ªsok
 (
ZDR
 *, 
MKDIR3ªsok
*);

1729 
uöt32_t
 
zdr_MKDIR3ªsÁû
 (
ZDR
 *, 
MKDIR3ªsÁû
*);

1730 
uöt32_t
 
zdr_MKDIR3ªs
 (
ZDR
 *, 
MKDIR3ªs
*);

1731 
uöt32_t
 
zdr_RMDIR3¨gs
 (
ZDR
 *, 
RMDIR3¨gs
*);

1732 
uöt32_t
 
zdr_RMDIR3ªsok
 (
ZDR
 *, 
RMDIR3ªsok
*);

1733 
uöt32_t
 
zdr_RMDIR3ªsÁû
 (
ZDR
 *, 
RMDIR3ªsÁû
*);

1734 
uöt32_t
 
zdr_RMDIR3ªs
 (
ZDR
 *, 
RMDIR3ªs
*);

1735 
uöt32_t
 
zdr_RENAME3¨gs
 (
ZDR
 *, 
RENAME3¨gs
*);

1736 
uöt32_t
 
zdr_RENAME3ªsok
 (
ZDR
 *, 
RENAME3ªsok
*);

1737 
uöt32_t
 
zdr_RENAME3ªsÁû
 (
ZDR
 *, 
RENAME3ªsÁû
*);

1738 
uöt32_t
 
zdr_RENAME3ªs
 (
ZDR
 *, 
RENAME3ªs
*);

1739 
uöt32_t
 
zdr_READDIRPLUS3¨gs
 (
ZDR
 *, 
READDIRPLUS3¨gs
*);

1740 
uöt32_t
 
zdr_íåy∂us3
 (
ZDR
 *, 
íåy∂us3
*);

1741 
uöt32_t
 
zdr_dúli°∂us3
 (
ZDR
 *, 
dúli°∂us3
*);

1742 
uöt32_t
 
zdr_READDIRPLUS3ªsok
 (
ZDR
 *, 
READDIRPLUS3ªsok
*);

1743 
uöt32_t
 
zdr_READDIRPLUS3ªsÁû
 (
ZDR
 *, 
READDIRPLUS3ªsÁû
*);

1744 
uöt32_t
 
zdr_READDIRPLUS3ªs
 (
ZDR
 *, 
READDIRPLUS3ªs
*);

1745 
uöt32_t
 
zdr_READDIR3¨gs
 (
ZDR
 *, 
READDIR3¨gs
*);

1746 
uöt32_t
 
zdr_íåy3
 (
ZDR
 *, 
íåy3
*);

1747 
uöt32_t
 
zdr_dúli°3
 (
ZDR
 *, 
dúli°3
*);

1748 
uöt32_t
 
zdr_READDIR3ªsok
 (
ZDR
 *, 
READDIR3ªsok
*);

1749 
uöt32_t
 
zdr_READDIR3ªsÁû
 (
ZDR
 *, 
READDIR3ªsÁû
*);

1750 
uöt32_t
 
zdr_READDIR3ªs
 (
ZDR
 *, 
READDIR3ªs
*);

1751 
uöt32_t
 
zdr_LINK3¨gs
 (
ZDR
 *, 
LINK3¨gs
*);

1752 
uöt32_t
 
zdr_LINK3ªsok
 (
ZDR
 *, 
LINK3ªsok
*);

1753 
uöt32_t
 
zdr_LINK3ªsÁû
 (
ZDR
 *, 
LINK3ªsÁû
*);

1754 
uöt32_t
 
zdr_LINK3ªs
 (
ZDR
 *, 
LINK3ªs
*);

1755 
uöt32_t
 
zdr_ßârgu¨d3
 (
ZDR
 *, 
ßârgu¨d3
*);

1756 
uöt32_t
 
zdr_SETATTR3¨gs
 (
ZDR
 *, 
SETATTR3¨gs
*);

1757 
uöt32_t
 
zdr_SETATTR3ªsok
 (
ZDR
 *, 
SETATTR3ªsok
*);

1758 
uöt32_t
 
zdr_SETATTR3ªsÁû
 (
ZDR
 *, 
SETATTR3ªsÁû
*);

1759 
uöt32_t
 
zdr_SETATTR3ªs
 (
ZDR
 *, 
SETATTR3ªs
*);

1760 
uöt32_t
 
zdr_fh™dÀ2
 (
ZDR
 *, 
fh™dÀ2
);

1761 
uöt32_t
 
zdr_·y≥2
 (
ZDR
 *, 
·y≥2
*);

1762 
uöt32_t
 
zdr_Áâr2
 (
ZDR
 *, 
Áâr2
*);

1763 
uöt32_t
 
zdr_ßâr2
 (
ZDR
 *, 
ßâr2
*);

1764 
uöt32_t
 
zdr_fûíame2
 (
ZDR
 *, 
fûíame2
*);

1765 
uöt32_t
 
zdr_∑th2
 (
ZDR
 *, 
∑th2
*);

1766 
uöt32_t
 
zdr_nfsd©a2
 (
ZDR
 *, 
nfsd©a2
*);

1767 
uöt32_t
 
zdr_nfscookõ2
 (
ZDR
 *, 
nfscookõ2
);

1768 
uöt32_t
 
zdr_íåy2
 (
ZDR
 *, 
íåy2
*);

1769 
uöt32_t
 
zdr_dú›¨gs2
 (
ZDR
 *, 
dú›¨gs2
*);

1770 
uöt32_t
 
zdr_GETATTR2¨gs
 (
ZDR
 *, 
GETATTR2¨gs
*);

1771 
uöt32_t
 
zdr_GETATTR2ªsok
 (
ZDR
 *, 
GETATTR2ªsok
*);

1772 
uöt32_t
 
zdr_GETATTR2ªs
 (
ZDR
 *, 
GETATTR2ªs
*);

1773 
uöt32_t
 
zdr_SETATTR2¨gs
 (
ZDR
 *, 
SETATTR2¨gs
*);

1774 
uöt32_t
 
zdr_SETATTR2ªsok
 (
ZDR
 *, 
SETATTR2ªsok
*);

1775 
uöt32_t
 
zdr_SETATTR2ªs
 (
ZDR
 *, 
SETATTR2ªs
*);

1776 
uöt32_t
 
zdr_LOOKUP2¨gs
 (
ZDR
 *, 
LOOKUP2¨gs
*);

1777 
uöt32_t
 
zdr_LOOKUP2ªsok
 (
ZDR
 *, 
LOOKUP2ªsok
*);

1778 
uöt32_t
 
zdr_LOOKUP2ªs
 (
ZDR
 *, 
LOOKUP2ªs
*);

1779 
uöt32_t
 
zdr_READLINK2¨gs
 (
ZDR
 *, 
READLINK2¨gs
*);

1780 
uöt32_t
 
zdr_READLINK2ªsok
 (
ZDR
 *, 
READLINK2ªsok
*);

1781 
uöt32_t
 
zdr_READLINK2ªs
 (
ZDR
 *, 
READLINK2ªs
*);

1782 
uöt32_t
 
zdr_READ2¨gs
 (
ZDR
 *, 
READ2¨gs
*);

1783 
uöt32_t
 
zdr_READ2ªsok
 (
ZDR
 *, 
READ2ªsok
*);

1784 
uöt32_t
 
zdr_READ2ªs
 (
ZDR
 *, 
READ2ªs
*);

1785 
uöt32_t
 
zdr_WRITE2¨gs
 (
ZDR
 *, 
WRITE2¨gs
*);

1786 
uöt32_t
 
zdr_WRITE2ªsok
 (
ZDR
 *, 
WRITE2ªsok
*);

1787 
uöt32_t
 
zdr_WRITE2ªs
 (
ZDR
 *, 
WRITE2ªs
*);

1788 
uöt32_t
 
zdr_CREATE2¨gs
 (
ZDR
 *, 
CREATE2¨gs
*);

1789 
uöt32_t
 
zdr_CREATE2ªsok
 (
ZDR
 *, 
CREATE2ªsok
*);

1790 
uöt32_t
 
zdr_CREATE2ªs
 (
ZDR
 *, 
CREATE2ªs
*);

1791 
uöt32_t
 
zdr_REMOVE2¨gs
 (
ZDR
 *, 
REMOVE2¨gs
*);

1792 
uöt32_t
 
zdr_REMOVE2ªs
 (
ZDR
 *, 
REMOVE2ªs
*);

1793 
uöt32_t
 
zdr_RENAME2¨gs
 (
ZDR
 *, 
RENAME2¨gs
*);

1794 
uöt32_t
 
zdr_RENAME2ªs
 (
ZDR
 *, 
RENAME2ªs
*);

1795 
uöt32_t
 
zdr_LINK2¨gs
 (
ZDR
 *, 
LINK2¨gs
*);

1796 
uöt32_t
 
zdr_LINK2ªs
 (
ZDR
 *, 
LINK2ªs
*);

1797 
uöt32_t
 
zdr_SYMLINK2¨gs
 (
ZDR
 *, 
SYMLINK2¨gs
*);

1798 
uöt32_t
 
zdr_SYMLINK2ªs
 (
ZDR
 *, 
SYMLINK2ªs
*);

1799 
uöt32_t
 
zdr_MKDIR2¨gs
 (
ZDR
 *, 
MKDIR2¨gs
*);

1800 
uöt32_t
 
zdr_MKDIR2ªsok
 (
ZDR
 *, 
MKDIR2ªsok
*);

1801 
uöt32_t
 
zdr_MKDIR2ªs
 (
ZDR
 *, 
MKDIR2ªs
*);

1802 
uöt32_t
 
zdr_RMDIR2¨gs
 (
ZDR
 *, 
RMDIR2¨gs
*);

1803 
uöt32_t
 
zdr_RMDIR2ªs
 (
ZDR
 *, 
RMDIR2ªs
*);

1804 
uöt32_t
 
zdr_READDIR2¨gs
 (
ZDR
 *, 
READDIR2¨gs
*);

1805 
uöt32_t
 
zdr_READDIR2ªsok
 (
ZDR
 *, 
READDIR2ªsok
*);

1806 
uöt32_t
 
zdr_READDIR2ªs
 (
ZDR
 *, 
READDIR2ªs
*);

1807 
uöt32_t
 
zdr_STATFS2¨gs
 (
ZDR
 *, 
STATFS2¨gs
*);

1808 
uöt32_t
 
zdr_STATFS2ªsok
 (
ZDR
 *, 
STATFS2ªsok
*);

1809 
uöt32_t
 
zdr_STATFS2ªs
 (
ZDR
 *, 
STATFS2ªs
*);

1810 
uöt32_t
 
zdr_nfß˛_ty≥
 (
ZDR
 *, 
nfß˛_ty≥
*);

1811 
uöt32_t
 
zdr_nfß˛_a˚
 (
ZDR
 *, 
nfß˛_a˚
*);

1812 
uöt32_t
 
zdr_GETACL3¨gs
 (
ZDR
 *, 
GETACL3¨gs
*);

1813 
uöt32_t
 
zdr_GETACL3ªsok
 (
ZDR
 *, 
GETACL3ªsok
*);

1814 
uöt32_t
 
zdr_GETACL3ªs
 (
ZDR
 *, 
GETACL3ªs
*);

1815 
uöt32_t
 
zdr_SETACL3¨gs
 (
ZDR
 *, 
SETACL3¨gs
*);

1816 
uöt32_t
 
zdr_SETACL3ªsok
 (
ZDR
 *, 
SETACL3ªsok
*);

1817 
uöt32_t
 
zdr_SETACL3ªs
 (
ZDR
 *, 
SETACL3ªs
*);

1820 
uöt32_t
 
zdr_cookõvîf3
 ();

1821 
uöt32_t
 
zdr_cookõ3
 ();

1822 
uöt32_t
 
zdr_nfs_fh3
 ();

1823 
uöt32_t
 
zdr_fûíame3
 ();

1824 
uöt32_t
 
zdr_dú›¨gs3
 ();

1825 
uöt32_t
 
zdr_·y≥3
 ();

1826 
uöt32_t
 
zdr_mode3
 ();

1827 
uöt32_t
 
zdr_uid3
 ();

1828 
uöt32_t
 
zdr_gid3
 ();

1829 
uöt32_t
 
zdr_size3
 ();

1830 
uöt32_t
 
zdr_fûeid3
 ();

1831 
uöt32_t
 
zdr_•ecd©a3
 ();

1832 
uöt32_t
 
zdr_nf°ime3
 ();

1833 
uöt32_t
 
zdr_Áâr3
 ();

1834 
uöt32_t
 
zdr_po°_›_©å
 ();

1835 
uöt32_t
 
zdr_nfs°©3
 ();

1836 
uöt32_t
 
zdr_°abÀ_how
 ();

1837 
uöt32_t
 
zdr_off£t3
 ();

1838 
uöt32_t
 
zdr_cou¡3
 ();

1839 
uöt32_t
 
zdr_wcc_©å
 ();

1840 
uöt32_t
 
zdr_¥e_›_©å
 ();

1841 
uöt32_t
 
zdr_wcc_d©a
 ();

1842 
uöt32_t
 
zdr_WRITE3¨gs
 ();

1843 
uöt32_t
 
zdr_wrôevîf3
 ();

1844 
uöt32_t
 
zdr_WRITE3ªsok
 ();

1845 
uöt32_t
 
zdr_WRITE3ªsÁû
 ();

1846 
uöt32_t
 
zdr_WRITE3ªs
 ();

1847 
uöt32_t
 
zdr_LOOKUP3¨gs
 ();

1848 
uöt32_t
 
zdr_LOOKUP3ªsok
 ();

1849 
uöt32_t
 
zdr_LOOKUP3ªsÁû
 ();

1850 
uöt32_t
 
zdr_LOOKUP3ªs
 ();

1851 
uöt32_t
 
zdr_COMMIT3¨gs
 ();

1852 
uöt32_t
 
zdr_COMMIT3ªsok
 ();

1853 
uöt32_t
 
zdr_COMMIT3ªsÁû
 ();

1854 
uöt32_t
 
zdr_COMMIT3ªs
 ();

1855 
uöt32_t
 
zdr_ACCESS3¨gs
 ();

1856 
uöt32_t
 
zdr_ACCESS3ªsok
 ();

1857 
uöt32_t
 
zdr_ACCESS3ªsÁû
 ();

1858 
uöt32_t
 
zdr_ACCESS3ªs
 ();

1859 
uöt32_t
 
zdr_GETATTR3¨gs
 ();

1860 
uöt32_t
 
zdr_GETATTR3ªsok
 ();

1861 
uöt32_t
 
zdr_GETATTR3ªs
 ();

1862 
uöt32_t
 
zdr_time_how
 ();

1863 
uöt32_t
 
zdr_£t_mode3
 ();

1864 
uöt32_t
 
zdr_£t_uid3
 ();

1865 
uöt32_t
 
zdr_£t_gid3
 ();

1866 
uöt32_t
 
zdr_£t_size3
 ();

1867 
uöt32_t
 
zdr_£t_©ime
 ();

1868 
uöt32_t
 
zdr_£t_mtime
 ();

1869 
uöt32_t
 
zdr_ßâr3
 ();

1870 
uöt32_t
 
zdr_¸óãmode3
 ();

1871 
uöt32_t
 
zdr_¸óãvîf3
 ();

1872 
uöt32_t
 
zdr_¸óãhow3
 ();

1873 
uöt32_t
 
zdr_CREATE3¨gs
 ();

1874 
uöt32_t
 
zdr_po°_›_fh3
 ();

1875 
uöt32_t
 
zdr_CREATE3ªsok
 ();

1876 
uöt32_t
 
zdr_CREATE3ªsÁû
 ();

1877 
uöt32_t
 
zdr_CREATE3ªs
 ();

1878 
uöt32_t
 
zdr_REMOVE3¨gs
 ();

1879 
uöt32_t
 
zdr_REMOVE3ªsok
 ();

1880 
uöt32_t
 
zdr_REMOVE3ªsÁû
 ();

1881 
uöt32_t
 
zdr_REMOVE3ªs
 ();

1882 
uöt32_t
 
zdr_READ3¨gs
 ();

1883 
uöt32_t
 
zdr_READ3ªsok
 ();

1884 
uöt32_t
 
zdr_READ3ªsÁû
 ();

1885 
uöt32_t
 
zdr_READ3ªs
 ();

1886 
uöt32_t
 
zdr_FSINFO3¨gs
 ();

1887 
uöt32_t
 
zdr_FSINFO3ªsok
 ();

1888 
uöt32_t
 
zdr_FSINFO3ªsÁû
 ();

1889 
uöt32_t
 
zdr_FSINFO3ªs
 ();

1890 
uöt32_t
 
zdr_FSSTAT3¨gs
 ();

1891 
uöt32_t
 
zdr_FSSTAT3ªsok
 ();

1892 
uöt32_t
 
zdr_FSSTAT3ªsÁû
 ();

1893 
uöt32_t
 
zdr_FSSTAT3ªs
 ();

1894 
uöt32_t
 
zdr_PATHCONF3¨gs
 ();

1895 
uöt32_t
 
zdr_PATHCONF3ªsok
 ();

1896 
uöt32_t
 
zdr_PATHCONF3ªsÁû
 ();

1897 
uöt32_t
 
zdr_PATHCONF3ªs
 ();

1898 
uöt32_t
 
zdr_nf•©h3
 ();

1899 
uöt32_t
 
zdr_symlökd©a3
 ();

1900 
uöt32_t
 
zdr_SYMLINK3¨gs
 ();

1901 
uöt32_t
 
zdr_SYMLINK3ªsok
 ();

1902 
uöt32_t
 
zdr_SYMLINK3ªsÁû
 ();

1903 
uöt32_t
 
zdr_SYMLINK3ªs
 ();

1904 
uöt32_t
 
zdr_READLINK3¨gs
 ();

1905 
uöt32_t
 
zdr_READLINK3ªsok
 ();

1906 
uöt32_t
 
zdr_READLINK3ªsÁû
 ();

1907 
uöt32_t
 
zdr_READLINK3ªs
 ();

1908 
uöt32_t
 
zdr_devi˚d©a3
 ();

1909 
uöt32_t
 
zdr_mknodd©a3
 ();

1910 
uöt32_t
 
zdr_MKNOD3¨gs
 ();

1911 
uöt32_t
 
zdr_MKNOD3ªsok
 ();

1912 
uöt32_t
 
zdr_MKNOD3ªsÁû
 ();

1913 
uöt32_t
 
zdr_MKNOD3ªs
 ();

1914 
uöt32_t
 
zdr_MKDIR3¨gs
 ();

1915 
uöt32_t
 
zdr_MKDIR3ªsok
 ();

1916 
uöt32_t
 
zdr_MKDIR3ªsÁû
 ();

1917 
uöt32_t
 
zdr_MKDIR3ªs
 ();

1918 
uöt32_t
 
zdr_RMDIR3¨gs
 ();

1919 
uöt32_t
 
zdr_RMDIR3ªsok
 ();

1920 
uöt32_t
 
zdr_RMDIR3ªsÁû
 ();

1921 
uöt32_t
 
zdr_RMDIR3ªs
 ();

1922 
uöt32_t
 
zdr_RENAME3¨gs
 ();

1923 
uöt32_t
 
zdr_RENAME3ªsok
 ();

1924 
uöt32_t
 
zdr_RENAME3ªsÁû
 ();

1925 
uöt32_t
 
zdr_RENAME3ªs
 ();

1926 
uöt32_t
 
zdr_READDIRPLUS3¨gs
 ();

1927 
uöt32_t
 
zdr_íåy∂us3
 ();

1928 
uöt32_t
 
zdr_dúli°∂us3
 ();

1929 
uöt32_t
 
zdr_READDIRPLUS3ªsok
 ();

1930 
uöt32_t
 
zdr_READDIRPLUS3ªsÁû
 ();

1931 
uöt32_t
 
zdr_READDIRPLUS3ªs
 ();

1932 
uöt32_t
 
zdr_READDIR3¨gs
 ();

1933 
uöt32_t
 
zdr_íåy3
 ();

1934 
uöt32_t
 
zdr_dúli°3
 ();

1935 
uöt32_t
 
zdr_READDIR3ªsok
 ();

1936 
uöt32_t
 
zdr_READDIR3ªsÁû
 ();

1937 
uöt32_t
 
zdr_READDIR3ªs
 ();

1938 
uöt32_t
 
zdr_LINK3¨gs
 ();

1939 
uöt32_t
 
zdr_LINK3ªsok
 ();

1940 
uöt32_t
 
zdr_LINK3ªsÁû
 ();

1941 
uöt32_t
 
zdr_LINK3ªs
 ();

1942 
uöt32_t
 
zdr_ßârgu¨d3
 ();

1943 
uöt32_t
 
zdr_SETATTR3¨gs
 ();

1944 
uöt32_t
 
zdr_SETATTR3ªsok
 ();

1945 
uöt32_t
 
zdr_SETATTR3ªsÁû
 ();

1946 
uöt32_t
 
zdr_SETATTR3ªs
 ();

1947 
uöt32_t
 
zdr_fh™dÀ2
 ();

1948 
uöt32_t
 
zdr_·y≥2
 ();

1949 
uöt32_t
 
zdr_Áâr2
 ();

1950 
uöt32_t
 
zdr_ßâr2
 ();

1951 
uöt32_t
 
zdr_fûíame2
 ();

1952 
uöt32_t
 
zdr_∑th2
 ();

1953 
uöt32_t
 
zdr_nfsd©a2
 ();

1954 
uöt32_t
 
zdr_nfscookõ2
 ();

1955 
uöt32_t
 
zdr_íåy2
 ();

1956 
uöt32_t
 
zdr_dú›¨gs2
 ();

1957 
uöt32_t
 
zdr_GETATTR2¨gs
 ();

1958 
uöt32_t
 
zdr_GETATTR2ªsok
 ();

1959 
uöt32_t
 
zdr_GETATTR2ªs
 ();

1960 
uöt32_t
 
zdr_SETATTR2¨gs
 ();

1961 
uöt32_t
 
zdr_SETATTR2ªsok
 ();

1962 
uöt32_t
 
zdr_SETATTR2ªs
 ();

1963 
uöt32_t
 
zdr_LOOKUP2¨gs
 ();

1964 
uöt32_t
 
zdr_LOOKUP2ªsok
 ();

1965 
uöt32_t
 
zdr_LOOKUP2ªs
 ();

1966 
uöt32_t
 
zdr_READLINK2¨gs
 ();

1967 
uöt32_t
 
zdr_READLINK2ªsok
 ();

1968 
uöt32_t
 
zdr_READLINK2ªs
 ();

1969 
uöt32_t
 
zdr_READ2¨gs
 ();

1970 
uöt32_t
 
zdr_READ2ªsok
 ();

1971 
uöt32_t
 
zdr_READ2ªs
 ();

1972 
uöt32_t
 
zdr_WRITE2¨gs
 ();

1973 
uöt32_t
 
zdr_WRITE2ªsok
 ();

1974 
uöt32_t
 
zdr_WRITE2ªs
 ();

1975 
uöt32_t
 
zdr_CREATE2¨gs
 ();

1976 
uöt32_t
 
zdr_CREATE2ªsok
 ();

1977 
uöt32_t
 
zdr_CREATE2ªs
 ();

1978 
uöt32_t
 
zdr_REMOVE2¨gs
 ();

1979 
uöt32_t
 
zdr_REMOVE2ªs
 ();

1980 
uöt32_t
 
zdr_RENAME2¨gs
 ();

1981 
uöt32_t
 
zdr_RENAME2ªs
 ();

1982 
uöt32_t
 
zdr_LINK2¨gs
 ();

1983 
uöt32_t
 
zdr_LINK2ªs
 ();

1984 
uöt32_t
 
zdr_SYMLINK2¨gs
 ();

1985 
uöt32_t
 
zdr_SYMLINK2ªs
 ();

1986 
uöt32_t
 
zdr_MKDIR2¨gs
 ();

1987 
uöt32_t
 
zdr_MKDIR2ªsok
 ();

1988 
uöt32_t
 
zdr_MKDIR2ªs
 ();

1989 
uöt32_t
 
zdr_RMDIR2¨gs
 ();

1990 
uöt32_t
 
zdr_RMDIR2ªs
 ();

1991 
uöt32_t
 
zdr_READDIR2¨gs
 ();

1992 
uöt32_t
 
zdr_READDIR2ªsok
 ();

1993 
uöt32_t
 
zdr_READDIR2ªs
 ();

1994 
uöt32_t
 
zdr_STATFS2¨gs
 ();

1995 
uöt32_t
 
zdr_STATFS2ªsok
 ();

1996 
uöt32_t
 
zdr_STATFS2ªs
 ();

1997 
uöt32_t
 
zdr_nfß˛_ty≥
 ();

1998 
uöt32_t
 
zdr_nfß˛_a˚
 ();

1999 
uöt32_t
 
zdr_GETACL3¨gs
 ();

2000 
uöt32_t
 
zdr_GETACL3ªsok
 ();

2001 
uöt32_t
 
zdr_GETACL3ªs
 ();

2002 
uöt32_t
 
zdr_SETACL3¨gs
 ();

2003 
uöt32_t
 
zdr_SETACL3ªsok
 ();

2004 
uöt32_t
 
zdr_SETACL3ªs
 ();

2008 
	~<nfsc/libnfs.h
>

2010 #i‡
deföed
(
WIN32
Ë&& deföed(
libnfs_EXPORTS
)

2011 
	#EXTERN
 
	`__de˛•ec
–
dŒexp‹t
 )

	)

2013 #i‚de‡
EXTERN


2014 
	#EXTERN


	)

2019 
u_öt
 
	ga˚_cou¡
;

2020 
nfß˛_a˚
 *
	ga˚
;

2021 
u_öt
 
	gdeÁu…_a˚_cou¡
;

2022 
nfß˛_a˚
 *
	gdeÁu…_a˚
;

2023 } 
	tÁâr3_a˛
;

2042 
EXTERN
 
nfs3_gëa˛_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

2043 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

2054 
EXTERN
 
nfs3_gëa˛
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

2055 
Áâr3_a˛
 *
nfs3a˛
);

2057 
EXTERN
 
nfs3_a˛_‰ì
(
Áâr3_a˛
 *
nfs3a˛
);

2059 #ifde‡
__˝lu•lus


	@nfs/nfs.c

19 #ifde‡
PS2_EE


20 
	~"ps2_com∑t.h
"

23 #ifde‡
WIN32


24 
	~<wö32/wö32_com∑t.h
>

26 
	~<sys/°©.h
>

29 
	~<°dio.h
>

30 
	~<î∫o.h
>

31 
	~<°rög.h
>

32 
	~"libnfs-zdr.h
"

33 
	~"libnfs.h
"

34 
	~"libnfs-øw.h
"

35 
	~"libnfs-¥iv©e.h
"

36 
	~"libnfs-øw-nfs.h
"

38 *
	$nfs°©3_to_°r
(
îr‹
)

40 
îr‹
) {

41 
NFS3_OK
:  "NFS3_OK"; ;

42 
NFS3ERR_PERM
:  "NFS3ERR_PERM"; ;

43 
NFS3ERR_NOENT
:  "NFS3ERR_NOENT"; ;

44 
NFS3ERR_IO
:  "NFS3ERR_IO"; ;

45 
NFS3ERR_NXIO
:  "NFS3ERR_NXIO"; ;

46 
NFS3ERR_ACCES
:  "NFS3ERR_ACCES"; ;

47 
NFS3ERR_EXIST
:  "NFS3ERR_EXIST"; ;

48 
NFS3ERR_XDEV
:  "NFS3ERR_XDEV"; ;

49 
NFS3ERR_NODEV
:  "NFS3ERR_NODEV"; ;

50 
NFS3ERR_NOTDIR
:  "NFS3ERR_NOTDIR"; ;

51 
NFS3ERR_ISDIR
:  "NFS3ERR_ISDIR"; ;

52 
NFS3ERR_INVAL
:  "NFS3ERR_INVAL"; ;

53 
NFS3ERR_FBIG
:  "NFS3ERR_FBIG"; ;

54 
NFS3ERR_NOSPC
:  "NFS3ERR_NOSPC"; ;

55 
NFS3ERR_ROFS
:  "NFS3ERR_ROFS"; ;

56 
NFS3ERR_MLINK
:  "NFS3ERR_MLINK"; ;

57 
NFS3ERR_NAMETOOLONG
:  "NFS3ERR_NAMETOOLONG"; ;

58 
NFS3ERR_NOTEMPTY
:  "NFS3ERR_NOTEMPTY"; ;

59 
NFS3ERR_DQUOT
:  "NFS3ERR_DQUOT"; ;

60 
NFS3ERR_STALE
:  "NFS3ERR_STALE"; ;

61 
NFS3ERR_REMOTE
:  "NFS3ERR_REMOTE"; ;

62 
NFS3ERR_BADHANDLE
:  "NFS3ERR_BADHANDLE"; ;

63 
NFS3ERR_NOT_SYNC
:  "NFS3ERR_NOT_SYNC"; ;

64 
NFS3ERR_BAD_COOKIE
:  "NFS3ERR_BAD_COOKIE"; ;

65 
NFS3ERR_NOTSUPP
:  "NFS3ERR_NOTSUPP"; ;

66 
NFS3ERR_TOOSMALL
:  "NFS3ERR_TOOSMALL"; ;

67 
NFS3ERR_SERVERFAULT
:  "NFS3ERR_SERVERFAULT"; ;

68 
NFS3ERR_BADTYPE
:  "NFS3ERR_BADTYPE"; ;

69 
NFS3ERR_JUKEBOX
:  "NFS3ERR_JUKEBOX"; ;

72 
	}
}

74 
	$nfs°©3_to_î∫o
(
îr‹
)

76 
îr‹
) {

77 
NFS3_OK
:  0; ;

78 
NFS3ERR_PERM
:  -
EPERM
; ;

79 
NFS3ERR_NOENT
:  -
ENOENT
; ;

80 
NFS3ERR_IO
:  -
EIO
; ;

81 
NFS3ERR_NXIO
:  -
ENXIO
; ;

82 
NFS3ERR_ACCES
:  -
EACCES
; ;

83 
NFS3ERR_EXIST
:  -
EEXIST
; ;

84 
NFS3ERR_XDEV
:  -
EXDEV
; ;

85 
NFS3ERR_NODEV
:  -
ENODEV
; ;

86 
NFS3ERR_NOTDIR
:  -
ENOTDIR
; ;

87 
NFS3ERR_ISDIR
:  -
EISDIR
; ;

88 
NFS3ERR_INVAL
:  -
EINVAL
; ;

89 
NFS3ERR_FBIG
:  -
EFBIG
; ;

90 
NFS3ERR_NOSPC
:  -
ENOSPC
; ;

91 
NFS3ERR_ROFS
:  -
EROFS
; ;

92 
NFS3ERR_MLINK
:  -
EMLINK
; ;

93 
NFS3ERR_NAMETOOLONG
:  -
ENAMETOOLONG
; ;

94 
NFS3ERR_NOTEMPTY
:  -
ENOTEMPTY
; ;

95 
NFS3ERR_DQUOT
:  -
ERANGE
; ;

96 
NFS3ERR_STALE
:  -
ESTALE
; ;

97 
NFS3ERR_REMOTE
:  -
EIO
; ;

98 
NFS3ERR_BADHANDLE
:  -
EIO
; ;

99 
NFS3ERR_NOT_SYNC
:  -
EIO
; ;

100 
NFS3ERR_BAD_COOKIE
:  -
EIO
; ;

101 
NFS3ERR_NOTSUPP
:  -
EINVAL
; ;

102 
NFS3ERR_TOOSMALL
:  -
EIO
; ;

103 
NFS3ERR_SERVERFAULT
:  -
EIO
; ;

104 
NFS3ERR_BADTYPE
:  -
EINVAL
; ;

105 
NFS3ERR_JUKEBOX
:  -
EAGAIN
; ;

107  -
ERANGE
;

108 
	}
}

114 
Ωc_pdu
 *
	$Ωc_nfs3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

115 *
¥iv©e_d©a
)

117 
Ωc_pdu
 *
pdu
;

119 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

120 i‡(
pdu
 =
NULL
) {

121 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/NULL call");

122  
NULL
;

125 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

126 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/NULL call");

127  
NULL
;

130  
pdu
;

131 
	}
}

133 
Ωc_pdu
 *
	$Ωc_nfs3_gë©å_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

134 
GETATTR3¨gs
 *
¨gs
,

135 *
¥iv©e_d©a
)

137 
Ωc_pdu
 *
pdu
;

139 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_GETATTR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETATTR3ªs
, (
GETATTR3ªs
));

140 i‡(
pdu
 =
NULL
) {

141 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/GETATTR call");

142  
NULL
;

145 i‡(
	`zdr_GETATTR3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

146 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETATTR3args");

147 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

148  
NULL
;

151 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

152 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/GETATTR call");

153  
NULL
;

156  
pdu
;

157 
	}
}

159 
Ωc_pdu
 *
	$Ωc_nfs3_∑thc⁄f_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

160 
PATHCONF3¨gs
 *
¨gs
,

161 *
¥iv©e_d©a
)

163 
Ωc_pdu
 *
pdu
;

165 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_PATHCONF
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_PATHCONF3ªs
, (
PATHCONF3ªs
));

166 i‡(
pdu
 =
NULL
) {

167 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/PATHCONF call");

168  
NULL
;

171 i‡(
	`zdr_PATHCONF3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

172 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode PATHCONF3args");

173 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

174  
NULL
;

177 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

178 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/PATHCONF call");

179  
NULL
;

182  
pdu
;

183 
	}
}

185 
Ωc_pdu
 *
	$Ωc_nfs3_lookup_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

186 
LOOKUP3¨gs
 *
¨gs
,

187 *
¥iv©e_d©a
)

189 
Ωc_pdu
 *
pdu
;

191 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_LOOKUP
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_LOOKUP3ªs
, (
LOOKUP3ªs
));

192 i‡(
pdu
 =
NULL
) {

193 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/LOOKUP call");

194  
NULL
;

197 i‡(
	`zdr_LOOKUP3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

198 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode LOOKUP3args");

199 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

200  
NULL
;

203 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

204 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/LOOKUP call");

205  
NULL
;

208  
pdu
;

209 
	}
}

211 
Ωc_pdu
 *
	$Ωc_nfs3_ac˚ss_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

212 
ACCESS3¨gs
 *
¨gs
,

213 *
¥iv©e_d©a
)

215 
Ωc_pdu
 *
pdu
;

217 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_ACCESS
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_ACCESS3ªs
, (
ACCESS3ªs
));

218 i‡(
pdu
 =
NULL
) {

219 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/ACCESS call");

220  
NULL
;

223 i‡(
	`zdr_ACCESS3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

224 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode ACCESS3args");

225 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

226  
NULL
;

229 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

230 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/ACCESS call");

231  
NULL
;

234  
pdu
;

235 
	}
}

237 
uöt32_t


238 
	$zdr_READ3ªsok_zîo_c›y
 (
ZDR
 *
zdrs
, 
READ3ªsok
 *
objp
)

240 i‡(!
	`zdr_po°_›_©å
 (
zdrs
, &
objp
->
fûe_©åibuãs
))

241  
FALSE
;

242 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

243  
FALSE
;

244 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

245  
FALSE
;

246  
TRUE
;

247 
	}
}

249 
uöt32_t


250 
	$zdr_READ3ªs_zîo_c›y
 (
ZDR
 *
zdrs
, 
READ3ªs
 *
objp
)

252 i‡(!
	`zdr_nfs°©3
 (
zdrs
, &
objp
->
°©us
))

253  
FALSE
;

254 
objp
->
°©us
) {

255 
NFS3_OK
:

256 i‡(!
	`zdr_READ3ªsok_zîo_c›y
 (
zdrs
, &
objp
->
READ3ªs_u
.
ªsok
))

257  
FALSE
;

260 i‡(!
	`zdr_READ3ªsÁû
 (
zdrs
, &
objp
->
READ3ªs_u
.
ªsÁû
))

261  
FALSE
;

264  
TRUE
;

265 
	}
}

267 
Ωc_pdu
 *

268 
	$Ωc_nfs3_ªad_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

269 *
buf
, 
size_t
 
cou¡
,

270 
READ3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

272 
Ωc_pdu
 *
pdu
;

274 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_READ
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READ3ªs_zîo_c›y
, (
READ3ªs
));

275 i‡(
pdu
 =
NULL
) {

276 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/READ call");

277  
NULL
;

279 i‡(
	`zdr_READ3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

280 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READ3args");

281 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

282  
NULL
;

285 
pdu
->
ö
.
buf
 = buf;

286 
pdu
->
ö
.
Àn
 = 
cou¡
;

287 
pdu
->
ªque°ed_ªad_cou¡
 = 
cou¡
;

289 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

290 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/READ call");

291  
NULL
;

294  
pdu
;

295 
	}
}

303 
uöt32_t


304 
	$zdr_WRITE3¨gs_zîoc›y
(
ZDR
 *
zdrs
, 
WRITE3¨gs
 *
objp
)

306 i‡(!
	`zdr_nfs_fh3
 (
zdrs
, &
objp
->
fûe
))

307  
FALSE
;

308 i‡(!
	`zdr_off£t3
 (
zdrs
, &
objp
->
off£t
))

309  
FALSE
;

310 i‡(!
	`zdr_cou¡3
 (
zdrs
, &
objp
->
cou¡
))

311  
FALSE
;

312 i‡(!
	`zdr_°abÀ_how
 (
zdrs
, &
objp
->
°abÀ
))

313  
FALSE
;

314  
TRUE
;

315 
	}
}

317 
Ωc_pdu
 *
	$Ωc_nfs3_wrôe_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

318 
WRITE3¨gs
 *
¨gs
,

319 *
¥iv©e_d©a
)

321 
Ωc_pdu
 *
pdu
;

322 
°¨t
;

323 
uöt32_t
 
zîo_∑ddög
;

325 
pdu
 = 
	`Ωc_Æloˇã_pdu2
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_WRITE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_WRITE3ªs
, (
WRITE3ªs
), 0);

326 i‡(
pdu
 =
NULL
) {

327 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/WRITE call");

328  
NULL
;

331 
°¨t
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

333 i‡(
	`zdr_WRITE3¨gs_zîoc›y
(&
pdu
->
zdr
, 
¨gs
) == 0) {

334 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode WRITE3args");

335 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

336  
NULL
;

340 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, &pdu->
outd©a
.
d©a
[
°¨t
 + 4],

341 
	`zdr_gëpos
(&
pdu
->
zdr
Ë- 
°¨t
, 
NULL
) < 0) {

342 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

343  
NULL
;

347 
°¨t
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

348 
	`zdr_u_öt
(&
pdu
->
zdr
, &
¨gs
->
d©a
.
d©a_Àn
);

349 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, &pdu->
outd©a
.
d©a
[
°¨t
 + 4],

350 4, 
NULL
) < 0) {

351 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

352  
NULL
;

356 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, 
¨gs
->
d©a
.
d©a_vÆ
,

357 
¨gs
->
d©a
.
d©a_Àn
, 
NULL
) < 0) {

358 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

359  
NULL
;

363 i‡(
¨gs
->
d©a
.
d©a_Àn
 & 0x03) {

364 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, (*)&
zîo_∑ddög
,

365 4 - (
¨gs
->
d©a
.
d©a_Àn
 & 0x03),

366 
NULL
) < 0) {

367 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

368  
NULL
;

372 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

373 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/WRITE call");

374  
NULL
;

377  
pdu
;

378 
	}
}

380 
Ωc_pdu
 *
	$Ωc_nfs3_commô_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

381 
COMMIT3¨gs
 *
¨gs
,

382 *
¥iv©e_d©a
)

384 
Ωc_pdu
 *
pdu
;

386 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_COMMIT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_COMMIT3ªs
, (
COMMIT3ªs
));

387 i‡(
pdu
 =
NULL
) {

388 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/COMMIT call");

389  
NULL
;

392 i‡(
	`zdr_COMMIT3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

393 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode COMMIT3args");

394 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

395  
NULL
;

398 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

399 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/COMMIT call");

400  
NULL
;

403  
pdu
;

404 
	}
}

406 
Ωc_pdu
 *

407 
	$Ωc_nfs3_£èâr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
SETATTR3¨gs
 *
¨gs
,

408 *
¥iv©e_d©a
)

410 
Ωc_pdu
 *
pdu
;

412 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_SETATTR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_SETATTR3ªs
, (
SETATTR3ªs
));

413 i‡(
pdu
 =
NULL
) {

414 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/SETATTR call");

415  
NULL
;

418 i‡(
	`zdr_SETATTR3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

419 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode SETATTR3args");

420 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

421  
NULL
;

424 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

425 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/SETATTR call");

426  
NULL
;

429  
pdu
;

430 
	}
}

432 
Ωc_pdu
 *
	$Ωc_nfs3_mkdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

433 
MKDIR3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

435 
Ωc_pdu
 *
pdu
;

437 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_MKDIR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_MKDIR3ªs
, (
MKDIR3ªs
));

438 i‡(
pdu
 =
NULL
) {

439 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/MKDIR call");

440  
NULL
;

443 i‡(
	`zdr_MKDIR3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

444 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode MKDIR3args");

445 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

446  
NULL
;

449 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

450 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/MKDIR call");

451  
NULL
;

454  
pdu
;

455 
	}
}

457 
Ωc_pdu
 *
	$Ωc_nfs3_rmdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

458 
RMDIR3¨gs
 *
¨gs
,

459 *
¥iv©e_d©a
)

461 
Ωc_pdu
 *
pdu
;

463 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_RMDIR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_RMDIR3ªs
, (
RMDIR3ªs
));

464 i‡(
pdu
 =
NULL
) {

465 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/RMDIR call");

466  
NULL
;

469 i‡(
	`zdr_RMDIR3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

470 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode RMDIR3args");

471 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

472  
NULL
;

475 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

476 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/RMDIR call");

477  
NULL
;

480  
pdu
;

481 
	}
}

483 
Ωc_pdu
 *
	$Ωc_nfs3_¸óã_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

484 
CREATE3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

486 
Ωc_pdu
 *
pdu
;

488 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_CREATE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_CREATE3ªs
, (
CREATE3ªs
));

489 i‡(
pdu
 =
NULL
) {

490 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/CREATE call");

491  
NULL
;

494 i‡(
	`zdr_CREATE3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

495 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode CREATE3args");

496 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

497  
NULL
;

500 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

501 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/CREATE call");

502  
NULL
;

505  
pdu
;

506 
	}
}

508 
Ωc_pdu
 *
	$Ωc_nfs3_mknod_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

509 
MKNOD3¨gs
 *
¨gs
,

510 *
¥iv©e_d©a
)

512 
Ωc_pdu
 *
pdu
;

514 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_MKNOD
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_MKNOD3ªs
, (
MKNOD3ªs
));

515 i‡(
pdu
 =
NULL
) {

516 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/MKNOD call");

517  
NULL
;

520 i‡(
	`zdr_MKNOD3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

521 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode MKNOD3args");

522 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

523  
NULL
;

526 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

527 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/MKNOD call");

528  
NULL
;

531  
pdu
;

532 
	}
}

534 
Ωc_pdu
 *
	$Ωc_nfs3_ªmove_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

535 
REMOVE3¨gs
 *
¨gs
,

536 *
¥iv©e_d©a
)

538 
Ωc_pdu
 *
pdu
;

540 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_REMOVE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_REMOVE3ªs
, (
REMOVE3ªs
));

541 i‡(
pdu
 =
NULL
) {

542 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/REMOVE call");

543  
NULL
;

546 i‡(
	`zdr_REMOVE3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

547 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode REMOVE3args");

548 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

549  
NULL
;

552 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

553 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/REMOVE call");

554  
NULL
;

557  
pdu
;

558 
	}
}

560 
Ωc_pdu
 *
	$Ωc_nfs3_ªaddú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

561 
READDIR3¨gs
 *
¨gs
,

562 *
¥iv©e_d©a
)

564 
Ωc_pdu
 *
pdu
;

566 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_READDIR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READDIR3ªs
, (
READDIR3ªs
));

567 i‡(
pdu
 =
NULL
) {

568 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/READDIR call");

569  
NULL
;

572 i‡(
	`zdr_READDIR3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

573 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READDIR3args");

574 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

575  
NULL
;

578 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

579 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/READDIR call");

580  
NULL
;

583  
pdu
;

584 
	}
}

586 
Ωc_pdu
 *
	$Ωc_nfs3_ªaddú∂us_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

587 
READDIRPLUS3¨gs
 *
¨gs
,

588 *
¥iv©e_d©a
)

590 
Ωc_pdu
 *
pdu
;

592 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_READDIRPLUS
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READDIRPLUS3ªs
, (
READDIRPLUS3ªs
));

593 i‡(
pdu
 =
NULL
) {

594 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/READDIRPLUS call");

595  
NULL
;

598 i‡(
	`zdr_READDIRPLUS3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

599 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READDIRPLUS3args");

600 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

601  
NULL
;

604 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

605 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/READDIRPLUS call");

606  
NULL
;

609  
pdu
;

610 
	}
}

612 
Ωc_pdu
 *
	$Ωc_nfs3_fs°©_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

613 
FSSTAT3¨gs
 *
¨gs
,

614 *
¥iv©e_d©a
)

616 
Ωc_pdu
 *
pdu
;

618 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_FSSTAT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_FSSTAT3ªs
, (
FSSTAT3ªs
));

619 i‡(
pdu
 =
NULL
) {

620 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/FSSTAT call");

621  
NULL
;

624 i‡(
	`zdr_FSSTAT3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

625 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode FSSTAT3args");

626 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

627  
NULL
;

630 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

631 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/FSSTAT call");

632  
NULL
;

635  
pdu
;

636 
	}
}

638 
Ωc_pdu
 *
	$Ωc_nfs3_fsöfo_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

639 
FSINFO3¨gs
 *
¨gs
,

640 *
¥iv©e_d©a
)

642 
Ωc_pdu
 *
pdu
;

644 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_FSINFO
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_FSINFO3ªs
, (
FSINFO3ªs
));

645 i‡(
pdu
 =
NULL
) {

646 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/FSINFO call");

647  
NULL
;

650 i‡(
	`zdr_FSINFO3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

651 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode FSINFO3args");

652 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

653  
NULL
;

656 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

657 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/FSINFO call");

658  
NULL
;

661  
pdu
;

662 
	}
}

664 
Ωc_pdu
 *

665 
	$Ωc_nfs3_ªadlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

666 
READLINK3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

668 
Ωc_pdu
 *
pdu
;

670 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_READLINK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READLINK3ªs
, (
READLINK3ªs
));

671 i‡(
pdu
 =
NULL
) {

672 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/READLINK call");

673  
NULL
;

676 i‡(
	`zdr_READLINK3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

677 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READLINK3args");

678 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

679  
NULL
;

682 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

683 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/READLINK call");

684  
NULL
;

687  
pdu
;

688 
	}
}

690 
Ωc_pdu
 *
	$Ωc_nfs3_symlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

691 
SYMLINK3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

693 
Ωc_pdu
 *
pdu
;

695 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_SYMLINK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_SYMLINK3ªs
, (
SYMLINK3ªs
));

696 i‡(
pdu
 =
NULL
) {

697 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/SYMLINK call");

698  
NULL
;

701 i‡(
	`zdr_SYMLINK3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

702 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode SYMLINK3args");

703 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

704  
NULL
;

707 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

708 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/SYMLINK call");

709  
NULL
;

712  
pdu
;

713 
	}
}

715 
Ωc_pdu
 *
	$Ωc_nfs3_ª«me_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

716 
RENAME3¨gs
 *
¨gs
,

717 *
¥iv©e_d©a
)

719 
Ωc_pdu
 *
pdu
;

721 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_RENAME
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_RENAME3ªs
, (
RENAME3ªs
));

722 i‡(
pdu
 =
NULL
) {

723 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/RENAME call");

724  
NULL
;

727 i‡(
	`zdr_RENAME3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

728 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode RENAME3args");

729 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

730  
NULL
;

733 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

734 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/RENAME call");

735  
NULL
;

738  
pdu
;

739 
	}
}

741 
Ωc_pdu
 *
	$Ωc_nfs3_lök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

742 
LINK3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

744 
Ωc_pdu
 *
pdu
;

746 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V3
, 
NFS3_LINK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_LINK3ªs
, (
LINK3ªs
));

747 i‡(
pdu
 =
NULL
) {

748 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/LINK call");

749  
NULL
;

752 i‡(
	`zdr_LINK3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

753 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode LINK3args");

754 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

755  
NULL
;

758 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

759 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS3/LINK call");

760  
NULL
;

763  
pdu
;

764 
	}
}

769 
Ωc_pdu
 *
	$Ωc_nfs2_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

770 *
¥iv©e_d©a
)

772 
Ωc_pdu
 *
pdu
;

774 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

775 i‡(
pdu
 =
NULL
) {

776 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/NULL call");

777  
NULL
;

780 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

781 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/NULL call");

782  
NULL
;

785  
pdu
;

786 
	}
}

788 
Ωc_pdu
 *
	$Ωc_nfs2_gë©å_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

789 
GETATTR2¨gs
 *
¨gs
,

790 *
¥iv©e_d©a
)

792 
Ωc_pdu
 *
pdu
;

794 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_GETATTR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETATTR2ªs
, (
GETATTR2ªs
));

795 i‡(
pdu
 =
NULL
) {

796 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/GETATTR call");

797  
NULL
;

800 i‡(
	`zdr_GETATTR2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

801 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETATTR2args");

802 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

803  
NULL
;

806 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

807 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/GETATTR call");

808  
NULL
;

811  
pdu
;

812 
	}
}

814 
Ωc_pdu
 *
	$Ωc_nfs2_£èâr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

815 
SETATTR2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

817 
Ωc_pdu
 *
pdu
;

819 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_SETATTR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_SETATTR2ªs
, (
SETATTR2ªs
));

820 i‡(
pdu
 =
NULL
) {

821 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/SETATTR call");

822  
NULL
;

825 i‡(
	`zdr_SETATTR2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

826 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode SETATTR2args");

827 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

828  
NULL
;

831 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

832 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/SETATTR call");

833  
NULL
;

836  
pdu
;

837 
	}
}

839 
Ωc_pdu
 *
	$Ωc_nfs2_lookup_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

840 
LOOKUP2¨gs
 *
¨gs
,

841 *
¥iv©e_d©a
)

843 
Ωc_pdu
 *
pdu
;

845 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_LOOKUP
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_LOOKUP2ªs
, (
LOOKUP2ªs
));

846 i‡(
pdu
 =
NULL
) {

847 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/LOOKUP call");

848  
NULL
;

851 i‡(
	`zdr_LOOKUP2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

852 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode LOOKUP2args");

853 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

854  
NULL
;

857 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

858 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/LOOKUP call");

859  
NULL
;

862  
pdu
;

863 
	}
}

865 
Ωc_pdu
 *
	$Ωc_nfs2_ªadlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

866 
READLINK2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

868 
Ωc_pdu
 *
pdu
;

870 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_READLINK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READLINK2ªs
, (
READLINK2ªs
));

871 i‡(
pdu
 =
NULL
) {

872 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/READLINK call");

873  
NULL
;

876 i‡(
	`zdr_READLINK2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

877 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READLINK2args");

878 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

879  
NULL
;

882 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

883 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/READLINK call");

884  
NULL
;

887  
pdu
;

888 
	}
}

890 
Ωc_pdu
 *
	$Ωc_nfs2_ªad_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

891 
READ2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

893 
Ωc_pdu
 *
pdu
;

895 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_READ
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READ2ªs
, (
READ2ªs
));

896 i‡(
pdu
 =
NULL
) {

897 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/READ call");

898  
NULL
;

901 i‡(
	`zdr_READ2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

902 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READ2args");

903 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

904  
NULL
;

907 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

908 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/READ call");

909  
NULL
;

912  
pdu
;

913 
	}
}

915 
Ωc_pdu
 *
	$Ωc_nfs2_wrôe_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

916 
WRITE2¨gs
 *
¨gs
,

917 *
¥iv©e_d©a
)

919 
Ωc_pdu
 *
pdu
;

921 
pdu
 = 
	`Ωc_Æloˇã_pdu2
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_WRITE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_WRITE2ªs
, (
WRITE2ªs
), 
¨gs
->
tŸÆcou¡
);

922 i‡(
pdu
 =
NULL
) {

923 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/WRITE call");

924  
NULL
;

927 i‡(
	`zdr_WRITE2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

928 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode WRITE2args");

929 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

930  
NULL
;

933 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

934 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/WRITE call");

935  
NULL
;

938  
pdu
;

939 
	}
}

941 
Ωc_pdu
 *
	$Ωc_nfs2_¸óã_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

942 
CREATE2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

944 
Ωc_pdu
 *
pdu
;

946 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_CREATE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_CREATE2ªs
, (
CREATE2ªs
));

947 i‡(
pdu
 =
NULL
) {

948 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/CREATE call");

949  
NULL
;

952 i‡(
	`zdr_CREATE2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

953 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode CREATE2args");

954 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

955  
NULL
;

958 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

959 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/CREATE call");

960  
NULL
;

963  
pdu
;

964 
	}
}

966 
Ωc_pdu
 *
	$Ωc_nfs2_ªmove_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

967 
REMOVE2¨gs
 *
¨gs
,

968 *
¥iv©e_d©a
)

970 
Ωc_pdu
 *
pdu
;

972 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_REMOVE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_REMOVE2ªs
, (
REMOVE2ªs
));

973 i‡(
pdu
 =
NULL
) {

974 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS3/REMOVE call");

975  
NULL
;

978 i‡(
	`zdr_REMOVE2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

979 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode REMOVE2args");

980 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

981  
NULL
;

984 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

985 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/REMOVE call");

986  
NULL
;

989  
pdu
;

990 
	}
}

992 
Ωc_pdu
 *
	$Ωc_nfs2_ª«me_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

993 
RENAME2¨gs
 *
¨gs
,

994 *
¥iv©e_d©a
)

996 
Ωc_pdu
 *
pdu
;

998 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_RENAME
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_RENAME2ªs
, (
RENAME2ªs
));

999 i‡(
pdu
 =
NULL
) {

1000 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/RENAME call");

1001  
NULL
;

1004 i‡(
	`zdr_RENAME2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1005 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode RENAME2args");

1006 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1007  
NULL
;

1010 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1011 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/RENAME call");

1012  
NULL
;

1015  
pdu
;

1016 
	}
}

1018 
Ωc_pdu
 *
	$Ωc_nfs2_lök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1019 
LINK2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

1021 
Ωc_pdu
 *
pdu
;

1023 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_LINK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_LINK2ªs
, (
LINK2ªs
));

1024 i‡(
pdu
 =
NULL
) {

1025 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/LINK call");

1026  
NULL
;

1029 i‡(
	`zdr_LINK2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1030 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode LINK2args");

1031 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1032  
NULL
;

1035 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1036 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/LINK call");

1037  
NULL
;

1040  
pdu
;

1041 
	}
}

1043 
Ωc_pdu
 *
	$Ωc_nfs2_symlök_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1044 
SYMLINK2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

1046 
Ωc_pdu
 *
pdu
;

1048 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_SYMLINK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_SYMLINK2ªs
, (
SYMLINK2ªs
));

1049 i‡(
pdu
 =
NULL
) {

1050 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/SYMLINK call");

1051  
NULL
;

1054 i‡(
	`zdr_SYMLINK2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1055 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode SYMLINK2args");

1056 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1057  
NULL
;

1060 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1061 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/SYMLINK call");

1062  
NULL
;

1065  
pdu
;

1066 
	}
}

1068 
Ωc_pdu
 *
	$Ωc_nfs2_mkdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1069 
MKDIR2¨gs
 *
¨gs
, *
¥iv©e_d©a
)

1071 
Ωc_pdu
 *
pdu
;

1073 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_MKDIR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_MKDIR2ªs
, (
MKDIR2ªs
));

1074 i‡(
pdu
 =
NULL
) {

1075 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/MKDIR call");

1076  
NULL
;

1079 i‡(
	`zdr_MKDIR2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1080 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode MKDIR2args");

1081 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1082  
NULL
;

1085 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1086 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/MKDIR call");

1087  
NULL
;

1090  
pdu
;

1091 
	}
}

1093 
Ωc_pdu
 *
	$Ωc_nfs2_rmdú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1094 
RMDIR2¨gs
 *
¨gs
,

1095 *
¥iv©e_d©a
)

1097 
Ωc_pdu
 *
pdu
;

1099 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_RMDIR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_RMDIR2ªs
, (
RMDIR2ªs
));

1100 i‡(
pdu
 =
NULL
) {

1101 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/RMDIR call");

1102  
NULL
;

1105 i‡(
	`zdr_RMDIR2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1106 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode RMDIR2args");

1107 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1108  
NULL
;

1111 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1112 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/RMDIR call");

1113  
NULL
;

1116  
pdu
;

1117 
	}
}

1119 
Ωc_pdu
 *
	$Ωc_nfs2_ªaddú_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1120 
READDIR2¨gs
 *
¨gs
,

1121 *
¥iv©e_d©a
)

1123 
Ωc_pdu
 *
pdu
;

1125 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_READDIR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_READDIR2ªs
, (
READDIR2ªs
));

1126 i‡(
pdu
 =
NULL
) {

1127 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/READDIR call");

1128  
NULL
;

1131 i‡(
	`zdr_READDIR2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1132 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode READDIR2args");

1133 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1134  
NULL
;

1137 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1138 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/READDIR call");

1139  
NULL
;

1142  
pdu
;

1143 
	}
}

1145 
Ωc_pdu
 *
	$Ωc_nfs2_°©fs_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

1146 
STATFS2¨gs
 *
¨gs
,

1147 *
¥iv©e_d©a
)

1149 
Ωc_pdu
 *
pdu
;

1151 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS_PROGRAM
, 
NFS_V2
, 
NFS2_STATFS
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_STATFS2ªs
, (
STATFS2ªs
));

1152 i‡(
pdu
 =
NULL
) {

1153 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for NFS2/STATFS call");

1154  
NULL
;

1157 i‡(
	`zdr_STATFS2¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

1158 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode STATFS2args");

1159 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

1160  
NULL
;

1163 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

1164 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for NFS2/STATFS call");

1165  
NULL
;

1168  
pdu
;

1169 
	}
}

	@nfs/nfsacl.c

17 #ifde‡
WIN32


18 
	~<wö32/wö32_com∑t.h
>

20 
	~<sys/°©.h
>

23 
	~<°dio.h
>

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

26 
	~"libnfs-zdr.h
"

27 
	~"libnfs.h
"

28 
	~"libnfs-øw.h
"

29 
	~"libnfs-¥iv©e.h
"

30 
	~"libnfs-øw-nfs.h
"

33 
Ωc_pdu
 *

34 
	$Ωc_nfß˛3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

36 
Ωc_pdu
 *
pdu
;

38 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFSACL_PROGRAM
, 
NFSACL_V3
, 
NFSACL3_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

39 i‡(
pdu
 =
NULL
) {

40 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇfsacl/null call");

41  
NULL
;

44 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

45 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇfsacl/null call");

46  
NULL
;

49  
pdu
;

50 
	}
}

53 
Ωc_pdu
 *

54 
	$Ωc_nfß˛3_gëa˛_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
GETACL3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

56 
Ωc_pdu
 *
pdu
;

58 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFSACL_PROGRAM
, 
NFSACL_V3
, 
NFSACL3_GETACL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETACL3ªs
, (
GETACL3ªs
));

59 i‡(
pdu
 =
NULL
) {

60 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇfsacl/getacl call");

61  
NULL
;

64 i‡(
	`zdr_GETACL3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

65 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETACL3args");

66 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

67  
NULL
;

70 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

71 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇfsacl/getacl call");

72  
NULL
;

75  
pdu
;

76 
	}
}

78 
Ωc_pdu
 *

79 
	$Ωc_nfß˛3_£è˛_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
SETACL3¨gs
 *
¨gs
, *
¥iv©e_d©a
)

81 
Ωc_pdu
 *
pdu
;

83 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFSACL_PROGRAM
, 
NFSACL_V3
, 
NFSACL3_SETACL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_SETACL3ªs
, (
SETACL3ªs
));

84 i‡(
pdu
 =
NULL
) {

85 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇfsacl/setacl call");

86  
NULL
;

89 i‡(
	`zdr_SETACL3¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

90 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode SETACL3args");

91 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

92  
NULL
;

95 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

96 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇfsacl/setacl call");

97  
NULL
;

100  
pdu
;

101 
	}
}

	@nfs4/libnfs-raw-nfs4.c

22 
	~"libnfs-zdr.h
"

23 
	~"libnfs-øw-nfs4.h
"

25 
uöt32_t


26 
	$zdr_nfs_·y≥4
 (
ZDR
 *
zdrs
, 
nfs_·y≥4
 *
objp
)

28 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

29  
FALSE
;

30  
TRUE
;

31 
	}
}

33 
uöt32_t


34 
	$zdr_nfs°©4
 (
ZDR
 *
zdrs
, 
nfs°©4
 *
objp
)

36 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

37  
FALSE
;

38  
TRUE
;

39 
	}
}

41 
uöt32_t


42 
	$zdr_bôm≠4
 (
ZDR
 *
zdrs
, 
bôm≠4
 *
objp
)

44 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
bôm≠4_vÆ
, (
u_öt
 *Ë&objp->
bôm≠4_Àn
, ~0,

45  (
uöt32_t
), (
zdΩroc_t
Ë
zdr_uöt32_t
))

46  
FALSE
;

47  
TRUE
;

48 
	}
}

50 
uöt32_t


51 
	$zdr_off£t4
 (
ZDR
 *
zdrs
, 
off£t4
 *
objp
)

53 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

54  
FALSE
;

55  
TRUE
;

56 
	}
}

58 
uöt32_t


59 
	$zdr_cou¡4
 (
ZDR
 *
zdrs
, 
cou¡4
 *
objp
)

61 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

62  
FALSE
;

63  
TRUE
;

64 
	}
}

66 
uöt32_t


67 
	$zdr_Àngth4
 (
ZDR
 *
zdrs
, 
Àngth4
 *
objp
)

69 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

70  
FALSE
;

71  
TRUE
;

72 
	}
}

74 
uöt32_t


75 
	$zdr_˛õ¡id4
 (
ZDR
 *
zdrs
, 
˛õ¡id4
 *
objp
)

77 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

78  
FALSE
;

79  
TRUE
;

80 
	}
}

82 
uöt32_t


83 
	$zdr_£quí˚id4
 (
ZDR
 *
zdrs
, 
£quí˚id4
 *
objp
)

85 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

86  
FALSE
;

87  
TRUE
;

88 
	}
}

90 
uöt32_t


91 
	$zdr_£qid4
 (
ZDR
 *
zdrs
, 
£qid4
 *
objp
)

93 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

94  
FALSE
;

95  
TRUE
;

96 
	}
}

98 
uöt32_t


99 
	$zdr_¶Ÿid4
 (
ZDR
 *
zdrs
, 
¶Ÿid4
 *
objp
)

101 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

102  
FALSE
;

103  
TRUE
;

104 
	}
}

106 
uöt32_t


107 
	$zdr_utf8°rög
 (
ZDR
 *
zdrs
, 
utf8°rög
 *
objp
)

109 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
utf8°rög_vÆ
, (
u_öt
 *Ë&objp->
utf8°rög_Àn
, ~0))

110  
FALSE
;

111  
TRUE
;

112 
	}
}

114 
uöt32_t


115 
	$zdr_utf8°r_cis
 (
ZDR
 *
zdrs
, 
utf8°r_cis
 *
objp
)

117 i‡(!
	`zdr_utf8°rög
 (
zdrs
, 
objp
))

118  
FALSE
;

119  
TRUE
;

120 
	}
}

122 
uöt32_t


123 
	$zdr_utf8°r_cs
 (
ZDR
 *
zdrs
, 
utf8°r_cs
 *
objp
)

125 i‡(!
	`zdr_utf8°rög
 (
zdrs
, 
objp
))

126  
FALSE
;

127  
TRUE
;

128 
	}
}

130 
uöt32_t


131 
	$zdr_utf8°r_mixed
 (
ZDR
 *
zdrs
, 
utf8°r_mixed
 *
objp
)

133 i‡(!
	`zdr_utf8°rög
 (
zdrs
, 
objp
))

134  
FALSE
;

135  
TRUE
;

136 
	}
}

138 
uöt32_t


139 
	$zdr_comp⁄ít4
 (
ZDR
 *
zdrs
, 
comp⁄ít4
 *
objp
)

141 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, 
objp
))

142  
FALSE
;

143  
TRUE
;

144 
	}
}

146 
uöt32_t


147 
	$zdr_∑th«me4
 (
ZDR
 *
zdrs
, 
∑th«me4
 *
objp
)

149 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
∑th«me4_vÆ
, (
u_öt
 *Ë&objp->
∑th«me4_Àn
, ~0,

150  (
comp⁄ít4
), (
zdΩroc_t
Ë
zdr_comp⁄ít4
))

151  
FALSE
;

152  
TRUE
;

153 
	}
}

155 
uöt32_t


156 
	$zdr_nfs_lockid4
 (
ZDR
 *
zdrs
, 
nfs_lockid4
 *
objp
)

158 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

159  
FALSE
;

160  
TRUE
;

161 
	}
}

163 
uöt32_t


164 
	$zdr_nfs_cookõ4
 (
ZDR
 *
zdrs
, 
nfs_cookõ4
 *
objp
)

166 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

167  
FALSE
;

168  
TRUE
;

169 
	}
}

171 
uöt32_t


172 
	$zdr_lökãxt4
 (
ZDR
 *
zdrs
, 
lökãxt4
 *
objp
)

174 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, 
objp
))

175  
FALSE
;

176  
TRUE
;

177 
	}
}

179 
uöt32_t


180 
	$zdr_£c_oid4
 (
ZDR
 *
zdrs
, 
£c_oid4
 *
objp
)

182 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
£c_oid4_vÆ
, (
u_öt
 *Ë&objp->
£c_oid4_Àn
, ~0))

183  
FALSE
;

184  
TRUE
;

185 
	}
}

187 
uöt32_t


188 
	$zdr_q›4
 (
ZDR
 *
zdrs
, 
q›4
 *
objp
)

190 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

191  
FALSE
;

192  
TRUE
;

193 
	}
}

195 
uöt32_t


196 
	$zdr_mode4
 (
ZDR
 *
zdrs
, 
mode4
 *
objp
)

198 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

199  
FALSE
;

200  
TRUE
;

201 
	}
}

203 
uöt32_t


204 
	$zdr_ch™geid4
 (
ZDR
 *
zdrs
, 
ch™geid4
 *
objp
)

206 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

207  
FALSE
;

208  
TRUE
;

209 
	}
}

211 
uöt32_t


212 
	$zdr_vîifõr4
 (
ZDR
 *
zdrs
, 
vîifõr4
 
objp
)

214 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFS4_VERIFIER_SIZE
))

215  
FALSE
;

216  
TRUE
;

217 
	}
}

219 
uöt32_t


220 
	$zdr_£ssi⁄id4
 (
ZDR
 *
zdrs
, 
£ssi⁄id4
 
objp
)

222 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFS4_SESSIONID_SIZE
))

223  
FALSE
;

224  
TRUE
;

225 
	}
}

227 
uöt32_t


228 
	$zdr_authsys_∑rms
 (
ZDR
 *
zdrs
, 
authsys_∑rms
 *
objp
)

230 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
°amp
))

231  
FALSE
;

232 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
machöíame
, 255))

233  
FALSE
;

234 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
uid
))

235  
FALSE
;

236 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gid
))

237  
FALSE
;

238 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
gids
.
gids_vÆ
, (
u_öt
 *Ë&objp->gids.
gids_Àn
, 16,

239  (
u_öt
), (
zdΩroc_t
Ë
zdr_u_öt
))

240  
FALSE
;

241  
TRUE
;

242 
	}
}

244 
uöt32_t


245 
	$zdr_devi˚id4
 (
ZDR
 *
zdrs
, 
devi˚id4
 
objp
)

247 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
, 
NFS4_DEVICEID4_SIZE
))

248  
FALSE
;

249  
TRUE
;

250 
	}
}

252 
uöt32_t


253 
	$zdr_œyouây≥4
 (
ZDR
 *
zdrs
, 
œyouây≥4
 *
objp
)

255 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

256  
FALSE
;

257  
TRUE
;

258 
	}
}

260 
uöt32_t


261 
	$zdr_œyoutupd©e4
 (
ZDR
 *
zdrs
, 
œyoutupd©e4
 *
objp
)

263 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
lou_ty≥
))

264  
FALSE
;

265 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
lou_body
.
lou_body_vÆ
, (
u_öt
 *Ë&objp->lou_body.
lou_body_Àn
, ~0))

266  
FALSE
;

267  
TRUE
;

268 
	}
}

270 
uöt32_t


271 
	$zdr_devi˚_addr4
 (
ZDR
 *
zdrs
, 
devi˚_addr4
 *
objp
)

273 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
da_œyout_ty≥
))

274  
FALSE
;

275 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
da_addr_body
.
da_addr_body_vÆ
, (
u_öt
 *Ë&objp->da_addr_body.
da_addr_body_Àn
, ~0))

276  
FALSE
;

277  
TRUE
;

278 
	}
}

280 
uöt32_t


281 
	$zdr_nf°ime4
 (
ZDR
 *
zdrs
, 
nf°ime4
 *
objp
)

283 i‡(!
	`zdr_öt64_t
 (
zdrs
, &
objp
->
£c⁄ds
))

284  
FALSE
;

285 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
n£c⁄ds
))

286  
FALSE
;

287  
TRUE
;

288 
	}
}

290 
uöt32_t


291 
	$zdr_time_how4
 (
ZDR
 *
zdrs
, 
time_how4
 *
objp
)

293 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

294  
FALSE
;

295  
TRUE
;

296 
	}
}

298 
uöt32_t


299 
	$zdr_œyoutiomode4
 (
ZDR
 *
zdrs
, 
œyoutiomode4
 *
objp
)

301 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

302  
FALSE
;

303  
TRUE
;

304 
	}
}

306 
uöt32_t


307 
	$zdr_œyout_c⁄ã¡4
 (
ZDR
 *
zdrs
, 
œyout_c⁄ã¡4
 *
objp
)

309 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
loc_ty≥
))

310  
FALSE
;

311 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
loc_body
.
loc_body_vÆ
, (
u_öt
 *Ë&objp->loc_body.
loc_body_Àn
, ~0))

312  
FALSE
;

313  
TRUE
;

314 
	}
}

316 
uöt32_t


317 
	$zdr_œyout4
 (
ZDR
 *
zdrs
, 
œyout4
 *
objp
)

319 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
lo_off£t
))

320  
FALSE
;

321 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
lo_Àngth
))

322  
FALSE
;

323 i‡(!
	`zdr_œyoutiomode4
 (
zdrs
, &
objp
->
lo_iomode
))

324  
FALSE
;

325 i‡(!
	`zdr_œyout_c⁄ã¡4
 (
zdrs
, &
objp
->
lo_c⁄ã¡
))

326  
FALSE
;

327  
TRUE
;

328 
	}
}

330 
uöt32_t


331 
	$zdr_£âime4
 (
ZDR
 *
zdrs
, 
£âime4
 *
objp
)

333 i‡(!
	`zdr_time_how4
 (
zdrs
, &
objp
->
£t_ô
))

334  
FALSE
;

335 
objp
->
£t_ô
) {

336 
SET_TO_CLIENT_TIME4
:

337 i‡(!
	`zdr_nf°ime4
 (
zdrs
, &
objp
->
£âime4_u
.
time
))

338  
FALSE
;

343  
TRUE
;

344 
	}
}

346 
uöt32_t


347 
	$zdr_nfs_fh4
 (
ZDR
 *
zdrs
, 
nfs_fh4
 *
objp
)

349 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
nfs_fh4_vÆ
, (
u_öt
 *Ë&objp->
nfs_fh4_Àn
, 
NFS4_FHSIZE
))

350  
FALSE
;

351  
TRUE
;

352 
	}
}

354 
uöt32_t


355 
	$zdr_fsid4
 (
ZDR
 *
zdrs
, 
fsid4
 *
objp
)

357 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
maj‹
))

358  
FALSE
;

359 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
mö‹
))

360  
FALSE
;

361  
TRUE
;

362 
	}
}

364 
uöt32_t


365 
	$zdr_fs_loˇti⁄4
 (
ZDR
 *
zdrs
, 
fs_loˇti⁄4
 *
objp
)

367 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
£rvî
.
£rvî_vÆ
, (
u_öt
 *Ë&objp->£rvî.
£rvî_Àn
, ~0,

368  (
utf8°r_cis
), (
zdΩroc_t
Ë
zdr_utf8°r_cis
))

369  
FALSE
;

370 i‡(!
	`zdr_∑th«me4
 (
zdrs
, &
objp
->
roŸ∑th
))

371  
FALSE
;

372  
TRUE
;

373 
	}
}

375 
uöt32_t


376 
	$zdr_fs_loˇti⁄s4
 (
ZDR
 *
zdrs
, 
fs_loˇti⁄s4
 *
objp
)

378 i‡(!
	`zdr_∑th«me4
 (
zdrs
, &
objp
->
fs_roŸ
))

379  
FALSE
;

380 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
loˇti⁄s
.
loˇti⁄s_vÆ
, (
u_öt
 *Ë&objp->loˇti⁄s.
loˇti⁄s_Àn
, ~0,

381  (
fs_loˇti⁄4
), (
zdΩroc_t
Ë
zdr_fs_loˇti⁄4
))

382  
FALSE
;

383  
TRUE
;

384 
	}
}

386 
uöt32_t


387 
	$zdr_a˚ty≥4
 (
ZDR
 *
zdrs
, 
a˚ty≥4
 *
objp
)

389 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

390  
FALSE
;

391  
TRUE
;

392 
	}
}

394 
uöt32_t


395 
	$zdr_a˚Êag4
 (
ZDR
 *
zdrs
, 
a˚Êag4
 *
objp
)

397 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

398  
FALSE
;

399  
TRUE
;

400 
	}
}

402 
uöt32_t


403 
	$zdr_a˚mask4
 (
ZDR
 *
zdrs
, 
a˚mask4
 *
objp
)

405 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

406  
FALSE
;

407  
TRUE
;

408 
	}
}

410 
uöt32_t


411 
	$zdr_nfß˚4
 (
ZDR
 *
zdrs
, 
nfß˚4
 *
objp
)

413 i‡(!
	`zdr_a˚ty≥4
 (
zdrs
, &
objp
->
ty≥
))

414  
FALSE
;

415 i‡(!
	`zdr_a˚Êag4
 (
zdrs
, &
objp
->
Êag
))

416  
FALSE
;

417 i‡(!
	`zdr_a˚mask4
 (
zdrs
, &
objp
->
ac˚ss_mask
))

418  
FALSE
;

419 i‡(!
	`zdr_utf8°r_mixed
 (
zdrs
, &
objp
->
who
))

420  
FALSE
;

421  
TRUE
;

422 
	}
}

424 
uöt32_t


425 
	$zdr_•ecd©a4
 (
ZDR
 *
zdrs
, 
•ecd©a4
 *
objp
)

427 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
•ecd©a1
))

428  
FALSE
;

429 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
•ecd©a2
))

430  
FALSE
;

431  
TRUE
;

432 
	}
}

434 
uöt32_t


435 
	$zdr_Áâr4_suµ‹ãd_©ås
 (
ZDR
 *
zdrs
, 
Áâr4_suµ‹ãd_©ås
 *
objp
)

437 i‡(!
	`zdr_bôm≠4
 (
zdrs
, 
objp
))

438  
FALSE
;

439  
TRUE
;

440 
	}
}

442 
uöt32_t


443 
	$zdr_Áâr4_ty≥
 (
ZDR
 *
zdrs
, 
Áâr4_ty≥
 *
objp
)

445 i‡(!
	`zdr_nfs_·y≥4
 (
zdrs
, 
objp
))

446  
FALSE
;

447  
TRUE
;

448 
	}
}

450 
uöt32_t


451 
	$zdr_Áâr4_fh_expúe_ty≥
 (
ZDR
 *
zdrs
, 
Áâr4_fh_expúe_ty≥
 *
objp
)

453 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

454  
FALSE
;

455  
TRUE
;

456 
	}
}

458 
uöt32_t


459 
	$zdr_Áâr4_ch™ge
 (
ZDR
 *
zdrs
, 
Áâr4_ch™ge
 *
objp
)

461 i‡(!
	`zdr_ch™geid4
 (
zdrs
, 
objp
))

462  
FALSE
;

463  
TRUE
;

464 
	}
}

466 
uöt32_t


467 
	$zdr_Áâr4_size
 (
ZDR
 *
zdrs
, 
Áâr4_size
 *
objp
)

469 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

470  
FALSE
;

471  
TRUE
;

472 
	}
}

474 
uöt32_t


475 
	$zdr_Áâr4_lök_suµ‹t
 (
ZDR
 *
zdrs
, 
Áâr4_lök_suµ‹t
 *
objp
)

477 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

478  
FALSE
;

479  
TRUE
;

480 
	}
}

482 
uöt32_t


483 
	$zdr_Áâr4_symlök_suµ‹t
 (
ZDR
 *
zdrs
, 
Áâr4_symlök_suµ‹t
 *
objp
)

485 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

486  
FALSE
;

487  
TRUE
;

488 
	}
}

490 
uöt32_t


491 
	$zdr_Áâr4_«med_©å
 (
ZDR
 *
zdrs
, 
Áâr4_«med_©å
 *
objp
)

493 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

494  
FALSE
;

495  
TRUE
;

496 
	}
}

498 
uöt32_t


499 
	$zdr_Áâr4_fsid
 (
ZDR
 *
zdrs
, 
Áâr4_fsid
 *
objp
)

501 i‡(!
	`zdr_fsid4
 (
zdrs
, 
objp
))

502  
FALSE
;

503  
TRUE
;

504 
	}
}

506 
uöt32_t


507 
	$zdr_Áâr4_unique_h™dÀs
 (
ZDR
 *
zdrs
, 
Áâr4_unique_h™dÀs
 *
objp
)

509 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

510  
FALSE
;

511  
TRUE
;

512 
	}
}

514 
uöt32_t


515 
	$zdr_Áâr4_Àa£_time
 (
ZDR
 *
zdrs
, 
Áâr4_Àa£_time
 *
objp
)

517 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

518  
FALSE
;

519  
TRUE
;

520 
	}
}

522 
uöt32_t


523 
	$zdr_Áâr4_rd©å_îr‹
 (
ZDR
 *
zdrs
, 
Áâr4_rd©å_îr‹
 *
objp
)

525 i‡(!
	`zdr_nfs°©4
 (
zdrs
, 
objp
))

526  
FALSE
;

527  
TRUE
;

528 
	}
}

530 
uöt32_t


531 
	$zdr_Áâr4_a˛
 (
ZDR
 *
zdrs
, 
Áâr4_a˛
 *
objp
)

533 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
Áâr4_a˛_vÆ
, (
u_öt
 *Ë&objp->
Áâr4_a˛_Àn
, ~0,

534  (
nfß˚4
), (
zdΩroc_t
Ë
zdr_nfß˚4
))

535  
FALSE
;

536  
TRUE
;

537 
	}
}

539 
uöt32_t


540 
	$zdr_Áâr4_a˛suµ‹t
 (
ZDR
 *
zdrs
, 
Áâr4_a˛suµ‹t
 *
objp
)

542 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

543  
FALSE
;

544  
TRUE
;

545 
	}
}

547 
uöt32_t


548 
	$zdr_Áâr4_¨chive
 (
ZDR
 *
zdrs
, 
Áâr4_¨chive
 *
objp
)

550 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

551  
FALSE
;

552  
TRUE
;

553 
	}
}

555 
uöt32_t


556 
	$zdr_Áâr4_ˇn£âime
 (
ZDR
 *
zdrs
, 
Áâr4_ˇn£âime
 *
objp
)

558 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

559  
FALSE
;

560  
TRUE
;

561 
	}
}

563 
uöt32_t


564 
	$zdr_Áâr4_ˇ£_ö£nsôive
 (
ZDR
 *
zdrs
, 
Áâr4_ˇ£_ö£nsôive
 *
objp
)

566 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

567  
FALSE
;

568  
TRUE
;

569 
	}
}

571 
uöt32_t


572 
	$zdr_Áâr4_ˇ£_¥e£rvög
 (
ZDR
 *
zdrs
, 
Áâr4_ˇ£_¥e£rvög
 *
objp
)

574 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

575  
FALSE
;

576  
TRUE
;

577 
	}
}

579 
uöt32_t


580 
	$zdr_Áâr4_chown_ª°ri˘ed
 (
ZDR
 *
zdrs
, 
Áâr4_chown_ª°ri˘ed
 *
objp
)

582 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

583  
FALSE
;

584  
TRUE
;

585 
	}
}

587 
uöt32_t


588 
	$zdr_Áâr4_fûeid
 (
ZDR
 *
zdrs
, 
Áâr4_fûeid
 *
objp
)

590 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

591  
FALSE
;

592  
TRUE
;

593 
	}
}

595 
uöt32_t


596 
	$zdr_Áâr4_fûes_avaû
 (
ZDR
 *
zdrs
, 
Áâr4_fûes_avaû
 *
objp
)

598 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

599  
FALSE
;

600  
TRUE
;

601 
	}
}

603 
uöt32_t


604 
	$zdr_Áâr4_fûeh™dÀ
 (
ZDR
 *
zdrs
, 
Áâr4_fûeh™dÀ
 *
objp
)

606 i‡(!
	`zdr_nfs_fh4
 (
zdrs
, 
objp
))

607  
FALSE
;

608  
TRUE
;

609 
	}
}

611 
uöt32_t


612 
	$zdr_Áâr4_fûes_‰ì
 (
ZDR
 *
zdrs
, 
Áâr4_fûes_‰ì
 *
objp
)

614 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

615  
FALSE
;

616  
TRUE
;

617 
	}
}

619 
uöt32_t


620 
	$zdr_Áâr4_fûes_tŸÆ
 (
ZDR
 *
zdrs
, 
Áâr4_fûes_tŸÆ
 *
objp
)

622 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

623  
FALSE
;

624  
TRUE
;

625 
	}
}

627 
uöt32_t


628 
	$zdr_Áâr4_fs_loˇti⁄s
 (
ZDR
 *
zdrs
, 
Áâr4_fs_loˇti⁄s
 *
objp
)

630 i‡(!
	`zdr_fs_loˇti⁄s4
 (
zdrs
, 
objp
))

631  
FALSE
;

632  
TRUE
;

633 
	}
}

635 
uöt32_t


636 
	$zdr_Áâr4_hiddí
 (
ZDR
 *
zdrs
, 
Áâr4_hiddí
 *
objp
)

638 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

639  
FALSE
;

640  
TRUE
;

641 
	}
}

643 
uöt32_t


644 
	$zdr_Áâr4_homogíeous
 (
ZDR
 *
zdrs
, 
Áâr4_homogíeous
 *
objp
)

646 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

647  
FALSE
;

648  
TRUE
;

649 
	}
}

651 
uöt32_t


652 
	$zdr_Áâr4_maxfûesize
 (
ZDR
 *
zdrs
, 
Áâr4_maxfûesize
 *
objp
)

654 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

655  
FALSE
;

656  
TRUE
;

657 
	}
}

659 
uöt32_t


660 
	$zdr_Áâr4_maxlök
 (
ZDR
 *
zdrs
, 
Áâr4_maxlök
 *
objp
)

662 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

663  
FALSE
;

664  
TRUE
;

665 
	}
}

667 
uöt32_t


668 
	$zdr_Áâr4_max«me
 (
ZDR
 *
zdrs
, 
Áâr4_max«me
 *
objp
)

670 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

671  
FALSE
;

672  
TRUE
;

673 
	}
}

675 
uöt32_t


676 
	$zdr_Áâr4_maxªad
 (
ZDR
 *
zdrs
, 
Áâr4_maxªad
 *
objp
)

678 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

679  
FALSE
;

680  
TRUE
;

681 
	}
}

683 
uöt32_t


684 
	$zdr_Áâr4_maxwrôe
 (
ZDR
 *
zdrs
, 
Áâr4_maxwrôe
 *
objp
)

686 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

687  
FALSE
;

688  
TRUE
;

689 
	}
}

691 
uöt32_t


692 
	$zdr_Áâr4_mimëy≥
 (
ZDR
 *
zdrs
, 
Áâr4_mimëy≥
 *
objp
)

694 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, 
objp
))

695  
FALSE
;

696  
TRUE
;

697 
	}
}

699 
uöt32_t


700 
	$zdr_Áâr4_mode
 (
ZDR
 *
zdrs
, 
Áâr4_mode
 *
objp
)

702 i‡(!
	`zdr_mode4
 (
zdrs
, 
objp
))

703  
FALSE
;

704  
TRUE
;

705 
	}
}

707 
uöt32_t


708 
	$zdr_Áâr4_mou¡ed_⁄_fûeid
 (
ZDR
 *
zdrs
, 
Áâr4_mou¡ed_⁄_fûeid
 *
objp
)

710 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

711  
FALSE
;

712  
TRUE
;

713 
	}
}

715 
uöt32_t


716 
	$zdr_Áâr4_no_åunc
 (
ZDR
 *
zdrs
, 
Áâr4_no_åunc
 *
objp
)

718 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

719  
FALSE
;

720  
TRUE
;

721 
	}
}

723 
uöt32_t


724 
	$zdr_Áâr4_numlöks
 (
ZDR
 *
zdrs
, 
Áâr4_numlöks
 *
objp
)

726 i‡(!
	`zdr_uöt32_t
 (
zdrs
, 
objp
))

727  
FALSE
;

728  
TRUE
;

729 
	}
}

731 
uöt32_t


732 
	$zdr_Áâr4_ow√r
 (
ZDR
 *
zdrs
, 
Áâr4_ow√r
 *
objp
)

734 i‡(!
	`zdr_utf8°r_mixed
 (
zdrs
, 
objp
))

735  
FALSE
;

736  
TRUE
;

737 
	}
}

739 
uöt32_t


740 
	$zdr_Áâr4_ow√r_group
 (
ZDR
 *
zdrs
, 
Áâr4_ow√r_group
 *
objp
)

742 i‡(!
	`zdr_utf8°r_mixed
 (
zdrs
, 
objp
))

743  
FALSE
;

744  
TRUE
;

745 
	}
}

747 
uöt32_t


748 
	$zdr_Áâr4_quŸa_avaû_h¨d
 (
ZDR
 *
zdrs
, 
Áâr4_quŸa_avaû_h¨d
 *
objp
)

750 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

751  
FALSE
;

752  
TRUE
;

753 
	}
}

755 
uöt32_t


756 
	$zdr_Áâr4_quŸa_avaû_so·
 (
ZDR
 *
zdrs
, 
Áâr4_quŸa_avaû_so·
 *
objp
)

758 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

759  
FALSE
;

760  
TRUE
;

761 
	}
}

763 
uöt32_t


764 
	$zdr_Áâr4_quŸa_u£d
 (
ZDR
 *
zdrs
, 
Áâr4_quŸa_u£d
 *
objp
)

766 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

767  
FALSE
;

768  
TRUE
;

769 
	}
}

771 
uöt32_t


772 
	$zdr_Áâr4_øwdev
 (
ZDR
 *
zdrs
, 
Áâr4_øwdev
 *
objp
)

774 i‡(!
	`zdr_•ecd©a4
 (
zdrs
, 
objp
))

775  
FALSE
;

776  
TRUE
;

777 
	}
}

779 
uöt32_t


780 
	$zdr_Áâr4_•a˚_avaû
 (
ZDR
 *
zdrs
, 
Áâr4_•a˚_avaû
 *
objp
)

782 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

783  
FALSE
;

784  
TRUE
;

785 
	}
}

787 
uöt32_t


788 
	$zdr_Áâr4_•a˚_‰ì
 (
ZDR
 *
zdrs
, 
Áâr4_•a˚_‰ì
 *
objp
)

790 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

791  
FALSE
;

792  
TRUE
;

793 
	}
}

795 
uöt32_t


796 
	$zdr_Áâr4_•a˚_tŸÆ
 (
ZDR
 *
zdrs
, 
Áâr4_•a˚_tŸÆ
 *
objp
)

798 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

799  
FALSE
;

800  
TRUE
;

801 
	}
}

803 
uöt32_t


804 
	$zdr_Áâr4_•a˚_u£d
 (
ZDR
 *
zdrs
, 
Áâr4_•a˚_u£d
 *
objp
)

806 i‡(!
	`zdr_uöt64_t
 (
zdrs
, 
objp
))

807  
FALSE
;

808  
TRUE
;

809 
	}
}

811 
uöt32_t


812 
	$zdr_Áâr4_sy°em
 (
ZDR
 *
zdrs
, 
Áâr4_sy°em
 *
objp
)

814 i‡(!
	`zdr_boﬁ
 (
zdrs
, 
objp
))

815  
FALSE
;

816  
TRUE
;

817 
	}
}

819 
uöt32_t


820 
	$zdr_Áâr4_time_ac˚ss
 (
ZDR
 *
zdrs
, 
Áâr4_time_ac˚ss
 *
objp
)

822 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

823  
FALSE
;

824  
TRUE
;

825 
	}
}

827 
uöt32_t


828 
	$zdr_Áâr4_time_ac˚ss_£t
 (
ZDR
 *
zdrs
, 
Áâr4_time_ac˚ss_£t
 *
objp
)

830 i‡(!
	`zdr_£âime4
 (
zdrs
, 
objp
))

831  
FALSE
;

832  
TRUE
;

833 
	}
}

835 
uöt32_t


836 
	$zdr_Áâr4_time_backup
 (
ZDR
 *
zdrs
, 
Áâr4_time_backup
 *
objp
)

838 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

839  
FALSE
;

840  
TRUE
;

841 
	}
}

843 
uöt32_t


844 
	$zdr_Áâr4_time_¸óã
 (
ZDR
 *
zdrs
, 
Áâr4_time_¸óã
 *
objp
)

846 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

847  
FALSE
;

848  
TRUE
;

849 
	}
}

851 
uöt32_t


852 
	$zdr_Áâr4_time_dñè
 (
ZDR
 *
zdrs
, 
Áâr4_time_dñè
 *
objp
)

854 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

855  
FALSE
;

856  
TRUE
;

857 
	}
}

859 
uöt32_t


860 
	$zdr_Áâr4_time_mëad©a
 (
ZDR
 *
zdrs
, 
Áâr4_time_mëad©a
 *
objp
)

862 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

863  
FALSE
;

864  
TRUE
;

865 
	}
}

867 
uöt32_t


868 
	$zdr_Áâr4_time_modify
 (
ZDR
 *
zdrs
, 
Áâr4_time_modify
 *
objp
)

870 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

871  
FALSE
;

872  
TRUE
;

873 
	}
}

875 
uöt32_t


876 
	$zdr_Áâr4_time_modify_£t
 (
ZDR
 *
zdrs
, 
Áâr4_time_modify_£t
 *
objp
)

878 i‡(!
	`zdr_£âime4
 (
zdrs
, 
objp
))

879  
FALSE
;

880  
TRUE
;

881 
	}
}

883 
uöt32_t


884 
	$zdr_©åli°4
 (
ZDR
 *
zdrs
, 
©åli°4
 *
objp
)

886 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
©åli°4_vÆ
, (
u_öt
 *Ë&objp->
©åli°4_Àn
, ~0))

887  
FALSE
;

888  
TRUE
;

889 
	}
}

891 
uöt32_t


892 
	$zdr_Áâr4
 (
ZDR
 *
zdrs
, 
Áâr4
 *
objp
)

894 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©åmask
))

895  
FALSE
;

896 i‡(!
	`zdr_©åli°4
 (
zdrs
, &
objp
->
©å_vÆs
))

897  
FALSE
;

898  
TRUE
;

899 
	}
}

901 
uöt32_t


902 
	$zdr_ch™ge_öfo4
 (
ZDR
 *
zdrs
, 
ch™ge_öfo4
 *
objp
)

904 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
©omic
))

905  
FALSE
;

906 i‡(!
	`zdr_ch™geid4
 (
zdrs
, &
objp
->
bef‹e
))

907  
FALSE
;

908 i‡(!
	`zdr_ch™geid4
 (
zdrs
, &
objp
->
a·î
))

909  
FALSE
;

910  
TRUE
;

911 
	}
}

913 
uöt32_t


914 
	$zdr_˛õ¡addr4
 (
ZDR
 *
zdrs
, 
˛õ¡addr4
 *
objp
)

916 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
r_√tid
, ~0))

917  
FALSE
;

918 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
r_addr
, ~0))

919  
FALSE
;

920  
TRUE
;

921 
	}
}

923 
uöt32_t


924 
	$zdr_cb_˛õ¡4
 (
ZDR
 *
zdrs
, 
cb_˛õ¡4
 *
objp
)

926 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
cb_¥ogøm
))

927  
FALSE
;

928 i‡(!
	`zdr_˛õ¡addr4
 (
zdrs
, &
objp
->
cb_loˇti⁄
))

929  
FALSE
;

930  
TRUE
;

931 
	}
}

933 
uöt32_t


934 
	$zdr_°©eid4
 (
ZDR
 *
zdrs
, 
°©eid4
 *
objp
)

937 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
£qid
))

938  
FALSE
;

939 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
->
Ÿhî
, 12))

940  
FALSE
;

941  
TRUE
;

942 
	}
}

944 
uöt32_t


945 
	$zdr_nfs_˛õ¡_id4
 (
ZDR
 *
zdrs
, 
nfs_˛õ¡_id4
 *
objp
)

947 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
vîifõr
))

948  
FALSE
;

949 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
id
.
id_vÆ
, (
u_öt
 *Ë&objp->id.
id_Àn
, 
NFS4_OPAQUE_LIMIT
))

950  
FALSE
;

951  
TRUE
;

952 
	}
}

954 
uöt32_t


955 
	$zdr_›í_ow√r4
 (
ZDR
 *
zdrs
, 
›í_ow√r4
 *
objp
)

957 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
˛õ¡id
))

958  
FALSE
;

959 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
ow√r
.
ow√r_vÆ
, (
u_öt
 *Ë&objp->ow√r.
ow√r_Àn
, 
NFS4_OPAQUE_LIMIT
))

960  
FALSE
;

961  
TRUE
;

962 
	}
}

964 
uöt32_t


965 
	$zdr_lock_ow√r4
 (
ZDR
 *
zdrs
, 
lock_ow√r4
 *
objp
)

967 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
˛õ¡id
))

968  
FALSE
;

969 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
ow√r
.
ow√r_vÆ
, (
u_öt
 *Ë&objp->ow√r.
ow√r_Àn
, 
NFS4_OPAQUE_LIMIT
))

970  
FALSE
;

971  
TRUE
;

972 
	}
}

974 
uöt32_t


975 
	$zdr_nfs_lock_ty≥4
 (
ZDR
 *
zdrs
, 
nfs_lock_ty≥4
 *
objp
)

977 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

978  
FALSE
;

979  
TRUE
;

980 
	}
}

982 
uöt32_t


983 
	$zdr_˛õ¡_ow√r4
 (
ZDR
 *
zdrs
, 
˛õ¡_ow√r4
 *
objp
)

985 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
co_vîifõr
))

986  
FALSE
;

987 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
co_ow√rid
.
co_ow√rid_vÆ
, (
u_öt
 *Ë&objp->co_ow√rid.
co_ow√rid_Àn
, 
NFS4_OPAQUE_LIMIT
))

988  
FALSE
;

989  
TRUE
;

990 
	}
}

992 
uöt32_t


993 
	$zdr_£rvî_ow√r4
 (
ZDR
 *
zdrs
, 
£rvî_ow√r4
 *
objp
)

995 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
so_mö‹_id
))

996  
FALSE
;

997 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
so_maj‹_id
.
so_maj‹_id_vÆ
, (
u_öt
 *Ë&objp->so_maj‹_id.
so_maj‹_id_Àn
, 
NFS4_OPAQUE_LIMIT
))

998  
FALSE
;

999  
TRUE
;

1000 
	}
}

1002 
uöt32_t


1003 
	$zdr_nfs_im∂_id4
 (
ZDR
 *
zdrs
, 
nfs_im∂_id4
 *
objp
)

1005 i‡(!
	`zdr_utf8°r_cis
 (
zdrs
, &
objp
->
nii_domaö
))

1006  
FALSE
;

1007 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, &
objp
->
nii_«me
))

1008  
FALSE
;

1009 i‡(!
	`zdr_nf°ime4
 (
zdrs
, &
objp
->
nii_d©e
))

1010  
FALSE
;

1011  
TRUE
;

1012 
	}
}

1014 
uöt32_t


1015 
	$zdr_ACCESS4¨gs
 (
ZDR
 *
zdrs
, 
ACCESS4¨gs
 *
objp
)

1017 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
ac˚ss
))

1018  
FALSE
;

1019  
TRUE
;

1020 
	}
}

1022 
uöt32_t


1023 
	$zdr_ACCESS4ªsok
 (
ZDR
 *
zdrs
, 
ACCESS4ªsok
 *
objp
)

1025 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
suµ‹ãd
))

1026  
FALSE
;

1027 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
ac˚ss
))

1028  
FALSE
;

1029  
TRUE
;

1030 
	}
}

1032 
uöt32_t


1033 
	$zdr_ACCESS4ªs
 (
ZDR
 *
zdrs
, 
ACCESS4ªs
 *
objp
)

1035 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1036  
FALSE
;

1037 
objp
->
°©us
) {

1038 
NFS4_OK
:

1039 i‡(!
	`zdr_ACCESS4ªsok
 (
zdrs
, &
objp
->
ACCESS4ªs_u
.
ªsok4
))

1040  
FALSE
;

1045  
TRUE
;

1046 
	}
}

1048 
uöt32_t


1049 
	$zdr_CLOSE4¨gs
 (
ZDR
 *
zdrs
, 
CLOSE4¨gs
 *
objp
)

1051 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
£qid
))

1052  
FALSE
;

1053 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_°©eid
))

1054  
FALSE
;

1055  
TRUE
;

1056 
	}
}

1058 
uöt32_t


1059 
	$zdr_CLOSE4ªs
 (
ZDR
 *
zdrs
, 
CLOSE4ªs
 *
objp
)

1061 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1062  
FALSE
;

1063 
objp
->
°©us
) {

1064 
NFS4_OK
:

1065 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
CLOSE4ªs_u
.
›í_°©eid
))

1066  
FALSE
;

1071  
TRUE
;

1072 
	}
}

1074 
uöt32_t


1075 
	$zdr_COMMIT4¨gs
 (
ZDR
 *
zdrs
, 
COMMIT4¨gs
 *
objp
)

1077 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

1078  
FALSE
;

1079 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
cou¡
))

1080  
FALSE
;

1081  
TRUE
;

1082 
	}
}

1084 
uöt32_t


1085 
	$zdr_COMMIT4ªsok
 (
ZDR
 *
zdrs
, 
COMMIT4ªsok
 *
objp
)

1087 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
wrôevîf
))

1088  
FALSE
;

1089  
TRUE
;

1090 
	}
}

1092 
uöt32_t


1093 
	$zdr_COMMIT4ªs
 (
ZDR
 *
zdrs
, 
COMMIT4ªs
 *
objp
)

1095 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1096  
FALSE
;

1097 
objp
->
°©us
) {

1098 
NFS4_OK
:

1099 i‡(!
	`zdr_COMMIT4ªsok
 (
zdrs
, &
objp
->
COMMIT4ªs_u
.
ªsok4
))

1100  
FALSE
;

1105  
TRUE
;

1106 
	}
}

1108 
uöt32_t


1109 
	$zdr_¸óãty≥4
 (
ZDR
 *
zdrs
, 
¸óãty≥4
 *
objp
)

1111 i‡(!
	`zdr_nfs_·y≥4
 (
zdrs
, &
objp
->
ty≥
))

1112  
FALSE
;

1113 
objp
->
ty≥
) {

1114 
NF4LNK
:

1115 i‡(!
	`zdr_lökãxt4
 (
zdrs
, &
objp
->
¸óãty≥4_u
.
lökd©a
))

1116  
FALSE
;

1118 
NF4BLK
:

1119 
NF4CHR
:

1120 i‡(!
	`zdr_•ecd©a4
 (
zdrs
, &
objp
->
¸óãty≥4_u
.
devd©a
))

1121  
FALSE
;

1123 
NF4SOCK
:

1124 
NF4FIFO
:

1125 
NF4DIR
:

1130  
TRUE
;

1131 
	}
}

1133 
uöt32_t


1134 
	$zdr_CREATE4¨gs
 (
ZDR
 *
zdrs
, 
CREATE4¨gs
 *
objp
)

1136 i‡(!
	`zdr_¸óãty≥4
 (
zdrs
, &
objp
->
objty≥
))

1137  
FALSE
;

1138 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
obj«me
))

1139  
FALSE
;

1140 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
¸óã©ås
))

1141  
FALSE
;

1142  
TRUE
;

1143 
	}
}

1145 
uöt32_t


1146 
	$zdr_CREATE4ªsok
 (
ZDR
 *
zdrs
, 
CREATE4ªsok
 *
objp
)

1148 i‡(!
	`zdr_ch™ge_öfo4
 (
zdrs
, &
objp
->
cöfo
))

1149  
FALSE
;

1150 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©å£t
))

1151  
FALSE
;

1152  
TRUE
;

1153 
	}
}

1155 
uöt32_t


1156 
	$zdr_CREATE4ªs
 (
ZDR
 *
zdrs
, 
CREATE4ªs
 *
objp
)

1158 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1159  
FALSE
;

1160 
objp
->
°©us
) {

1161 
NFS4_OK
:

1162 i‡(!
	`zdr_CREATE4ªsok
 (
zdrs
, &
objp
->
CREATE4ªs_u
.
ªsok4
))

1163  
FALSE
;

1168  
TRUE
;

1169 
	}
}

1171 
uöt32_t


1172 
	$zdr_DELEGPURGE4¨gs
 (
ZDR
 *
zdrs
, 
DELEGPURGE4¨gs
 *
objp
)

1174 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
˛õ¡id
))

1175  
FALSE
;

1176  
TRUE
;

1177 
	}
}

1179 
uöt32_t


1180 
	$zdr_DELEGPURGE4ªs
 (
ZDR
 *
zdrs
, 
DELEGPURGE4ªs
 *
objp
)

1182 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1183  
FALSE
;

1184  
TRUE
;

1185 
	}
}

1187 
uöt32_t


1188 
	$zdr_DELEGRETURN4¨gs
 (
ZDR
 *
zdrs
, 
DELEGRETURN4¨gs
 *
objp
)

1190 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
dñeg_°©eid
))

1191  
FALSE
;

1192  
TRUE
;

1193 
	}
}

1195 
uöt32_t


1196 
	$zdr_DELEGRETURN4ªs
 (
ZDR
 *
zdrs
, 
DELEGRETURN4ªs
 *
objp
)

1198 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1199  
FALSE
;

1200  
TRUE
;

1201 
	}
}

1203 
uöt32_t


1204 
	$zdr_GETATTR4¨gs
 (
ZDR
 *
zdrs
, 
GETATTR4¨gs
 *
objp
)

1206 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©å_ªque°
))

1207  
FALSE
;

1208  
TRUE
;

1209 
	}
}

1211 
uöt32_t


1212 
	$zdr_GETATTR4ªsok
 (
ZDR
 *
zdrs
, 
GETATTR4ªsok
 *
objp
)

1214 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1215  
FALSE
;

1216  
TRUE
;

1217 
	}
}

1219 
uöt32_t


1220 
	$zdr_GETATTR4ªs
 (
ZDR
 *
zdrs
, 
GETATTR4ªs
 *
objp
)

1222 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1223  
FALSE
;

1224 
objp
->
°©us
) {

1225 
NFS4_OK
:

1226 i‡(!
	`zdr_GETATTR4ªsok
 (
zdrs
, &
objp
->
GETATTR4ªs_u
.
ªsok4
))

1227  
FALSE
;

1232  
TRUE
;

1233 
	}
}

1235 
uöt32_t


1236 
	$zdr_GETFH4ªsok
 (
ZDR
 *
zdrs
, 
GETFH4ªsok
 *
objp
)

1238 i‡(!
	`zdr_nfs_fh4
 (
zdrs
, &
objp
->
obje˘
))

1239  
FALSE
;

1240  
TRUE
;

1241 
	}
}

1243 
uöt32_t


1244 
	$zdr_GETFH4ªs
 (
ZDR
 *
zdrs
, 
GETFH4ªs
 *
objp
)

1246 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1247  
FALSE
;

1248 
objp
->
°©us
) {

1249 
NFS4_OK
:

1250 i‡(!
	`zdr_GETFH4ªsok
 (
zdrs
, &
objp
->
GETFH4ªs_u
.
ªsok4
))

1251  
FALSE
;

1256  
TRUE
;

1257 
	}
}

1259 
uöt32_t


1260 
	$zdr_LINK4¨gs
 (
ZDR
 *
zdrs
, 
LINK4¨gs
 *
objp
)

1262 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
√w«me
))

1263  
FALSE
;

1264  
TRUE
;

1265 
	}
}

1267 
uöt32_t


1268 
	$zdr_LINK4ªsok
 (
ZDR
 *
zdrs
, 
LINK4ªsok
 *
objp
)

1270 i‡(!
	`zdr_ch™ge_öfo4
 (
zdrs
, &
objp
->
cöfo
))

1271  
FALSE
;

1272  
TRUE
;

1273 
	}
}

1275 
uöt32_t


1276 
	$zdr_LINK4ªs
 (
ZDR
 *
zdrs
, 
LINK4ªs
 *
objp
)

1278 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1279  
FALSE
;

1280 
objp
->
°©us
) {

1281 
NFS4_OK
:

1282 i‡(!
	`zdr_LINK4ªsok
 (
zdrs
, &
objp
->
LINK4ªs_u
.
ªsok4
))

1283  
FALSE
;

1288  
TRUE
;

1289 
	}
}

1291 
uöt32_t


1292 
	$zdr_›í_to_lock_ow√r4
 (
ZDR
 *
zdrs
, 
›í_to_lock_ow√r4
 *
objp
)

1294 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
›í_£qid
))

1295  
FALSE
;

1296 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_°©eid
))

1297  
FALSE
;

1298 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
lock_£qid
))

1299  
FALSE
;

1300 i‡(!
	`zdr_lock_ow√r4
 (
zdrs
, &
objp
->
lock_ow√r
))

1301  
FALSE
;

1302  
TRUE
;

1303 
	}
}

1305 
uöt32_t


1306 
	$zdr_exi°_lock_ow√r4
 (
ZDR
 *
zdrs
, 
exi°_lock_ow√r4
 *
objp
)

1308 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
lock_°©eid
))

1309  
FALSE
;

1310 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
lock_£qid
))

1311  
FALSE
;

1312  
TRUE
;

1313 
	}
}

1315 
uöt32_t


1316 
	$zdr_lockî4
 (
ZDR
 *
zdrs
, 
lockî4
 *
objp
)

1318 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
√w_lock_ow√r
))

1319  
FALSE
;

1320 
objp
->
√w_lock_ow√r
) {

1321 
TRUE
:

1322 i‡(!
	`zdr_›í_to_lock_ow√r4
 (
zdrs
, &
objp
->
lockî4_u
.
›í_ow√r
))

1323  
FALSE
;

1325 
FALSE
:

1326 i‡(!
	`zdr_exi°_lock_ow√r4
 (
zdrs
, &
objp
->
lockî4_u
.
lock_ow√r
))

1327  
FALSE
;

1330  
FALSE
;

1332  
TRUE
;

1333 
	}
}

1335 
uöt32_t


1336 
	$zdr_LOCK4¨gs
 (
ZDR
 *
zdrs
, 
LOCK4¨gs
 *
objp
)

1338 i‡(!
	`zdr_nfs_lock_ty≥4
 (
zdrs
, &
objp
->
lockty≥
))

1339  
FALSE
;

1340 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ª˛aim
))

1341  
FALSE
;

1342 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

1343  
FALSE
;

1344 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
Àngth
))

1345  
FALSE
;

1346 i‡(!
	`zdr_lockî4
 (
zdrs
, &
objp
->
lockî
))

1347  
FALSE
;

1348  
TRUE
;

1349 
	}
}

1351 
uöt32_t


1352 
	$zdr_LOCK4díõd
 (
ZDR
 *
zdrs
, 
LOCK4díõd
 *
objp
)

1354 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

1355  
FALSE
;

1356 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
Àngth
))

1357  
FALSE
;

1358 i‡(!
	`zdr_nfs_lock_ty≥4
 (
zdrs
, &
objp
->
lockty≥
))

1359  
FALSE
;

1360 i‡(!
	`zdr_lock_ow√r4
 (
zdrs
, &
objp
->
ow√r
))

1361  
FALSE
;

1362  
TRUE
;

1363 
	}
}

1365 
uöt32_t


1366 
	$zdr_LOCK4ªsok
 (
ZDR
 *
zdrs
, 
LOCK4ªsok
 *
objp
)

1368 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
lock_°©eid
))

1369  
FALSE
;

1370  
TRUE
;

1371 
	}
}

1373 
uöt32_t


1374 
	$zdr_LOCK4ªs
 (
ZDR
 *
zdrs
, 
LOCK4ªs
 *
objp
)

1376 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1377  
FALSE
;

1378 
objp
->
°©us
) {

1379 
NFS4_OK
:

1380 i‡(!
	`zdr_LOCK4ªsok
 (
zdrs
, &
objp
->
LOCK4ªs_u
.
ªsok4
))

1381  
FALSE
;

1383 
NFS4ERR_DENIED
:

1384 i‡(!
	`zdr_LOCK4díõd
 (
zdrs
, &
objp
->
LOCK4ªs_u
.
díõd
))

1385  
FALSE
;

1390  
TRUE
;

1391 
	}
}

1393 
uöt32_t


1394 
	$zdr_LOCKT4¨gs
 (
ZDR
 *
zdrs
, 
LOCKT4¨gs
 *
objp
)

1396 i‡(!
	`zdr_nfs_lock_ty≥4
 (
zdrs
, &
objp
->
lockty≥
))

1397  
FALSE
;

1398 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

1399  
FALSE
;

1400 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
Àngth
))

1401  
FALSE
;

1402 i‡(!
	`zdr_lock_ow√r4
 (
zdrs
, &
objp
->
ow√r
))

1403  
FALSE
;

1404  
TRUE
;

1405 
	}
}

1407 
uöt32_t


1408 
	$zdr_LOCKT4ªs
 (
ZDR
 *
zdrs
, 
LOCKT4ªs
 *
objp
)

1410 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1411  
FALSE
;

1412 
objp
->
°©us
) {

1413 
NFS4ERR_DENIED
:

1414 i‡(!
	`zdr_LOCK4díõd
 (
zdrs
, &
objp
->
LOCKT4ªs_u
.
díõd
))

1415  
FALSE
;

1417 
NFS4_OK
:

1422  
TRUE
;

1423 
	}
}

1425 
uöt32_t


1426 
	$zdr_LOCKU4¨gs
 (
ZDR
 *
zdrs
, 
LOCKU4¨gs
 *
objp
)

1428 i‡(!
	`zdr_nfs_lock_ty≥4
 (
zdrs
, &
objp
->
lockty≥
))

1429  
FALSE
;

1430 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
£qid
))

1431  
FALSE
;

1432 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
lock_°©eid
))

1433  
FALSE
;

1434 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

1435  
FALSE
;

1436 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
Àngth
))

1437  
FALSE
;

1438  
TRUE
;

1439 
	}
}

1441 
uöt32_t


1442 
	$zdr_LOCKU4ªs
 (
ZDR
 *
zdrs
, 
LOCKU4ªs
 *
objp
)

1444 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1445  
FALSE
;

1446 
objp
->
°©us
) {

1447 
NFS4_OK
:

1448 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
LOCKU4ªs_u
.
lock_°©eid
))

1449  
FALSE
;

1454  
TRUE
;

1455 
	}
}

1457 
uöt32_t


1458 
	$zdr_LOOKUP4¨gs
 (
ZDR
 *
zdrs
, 
LOOKUP4¨gs
 *
objp
)

1460 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
obj«me
))

1461  
FALSE
;

1462  
TRUE
;

1463 
	}
}

1465 
uöt32_t


1466 
	$zdr_LOOKUP4ªs
 (
ZDR
 *
zdrs
, 
LOOKUP4ªs
 *
objp
)

1468 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1469  
FALSE
;

1470  
TRUE
;

1471 
	}
}

1473 
uöt32_t


1474 
	$zdr_LOOKUPP4ªs
 (
ZDR
 *
zdrs
, 
LOOKUPP4ªs
 *
objp
)

1476 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1477  
FALSE
;

1478  
TRUE
;

1479 
	}
}

1481 
uöt32_t


1482 
	$zdr_NVERIFY4¨gs
 (
ZDR
 *
zdrs
, 
NVERIFY4¨gs
 *
objp
)

1484 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
obj_©åibuãs
))

1485  
FALSE
;

1486  
TRUE
;

1487 
	}
}

1489 
uöt32_t


1490 
	$zdr_NVERIFY4ªs
 (
ZDR
 *
zdrs
, 
NVERIFY4ªs
 *
objp
)

1492 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1493  
FALSE
;

1494  
TRUE
;

1495 
	}
}

1497 
uöt32_t


1498 
	$zdr_¸óãmode4
 (
ZDR
 *
zdrs
, 
¸óãmode4
 *
objp
)

1500 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

1501  
FALSE
;

1502  
TRUE
;

1503 
	}
}

1505 
uöt32_t


1506 
	$zdr_¸óãhow4
 (
ZDR
 *
zdrs
, 
¸óãhow4
 *
objp
)

1508 i‡(!
	`zdr_¸óãmode4
 (
zdrs
, &
objp
->
mode
))

1509  
FALSE
;

1510 
objp
->
mode
) {

1511 
UNCHECKED4
:

1512 
GUARDED4
:

1513 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
¸óãhow4_u
.
¸óã©ås
))

1514  
FALSE
;

1516 
EXCLUSIVE4
:

1517 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
¸óãhow4_u
.
¸óãvîf
))

1518  
FALSE
;

1521  
FALSE
;

1523  
TRUE
;

1524 
	}
}

1526 
uöt32_t


1527 
	$zdr_›íty≥4
 (
ZDR
 *
zdrs
, 
›íty≥4
 *
objp
)

1529 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

1530  
FALSE
;

1531  
TRUE
;

1532 
	}
}

1534 
uöt32_t


1535 
	$zdr_›íÊag4
 (
ZDR
 *
zdrs
, 
›íÊag4
 *
objp
)

1537 i‡(!
	`zdr_›íty≥4
 (
zdrs
, &
objp
->
›íty≥
))

1538  
FALSE
;

1539 
objp
->
›íty≥
) {

1540 
OPEN4_CREATE
:

1541 i‡(!
	`zdr_¸óãhow4
 (
zdrs
, &
objp
->
›íÊag4_u
.
how
))

1542  
FALSE
;

1547  
TRUE
;

1548 
	}
}

1550 
uöt32_t


1551 
	$zdr_limô_by4
 (
ZDR
 *
zdrs
, 
limô_by4
 *
objp
)

1553 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

1554  
FALSE
;

1555  
TRUE
;

1556 
	}
}

1558 
uöt32_t


1559 
	$zdr_nfs_modifõd_limô4
 (
ZDR
 *
zdrs
, 
nfs_modifõd_limô4
 *
objp
)

1561 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
num_blocks
))

1562  
FALSE
;

1563 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
byãs_≥r_block
))

1564  
FALSE
;

1565  
TRUE
;

1566 
	}
}

1568 
uöt32_t


1569 
	$zdr_nfs_•a˚_limô4
 (
ZDR
 *
zdrs
, 
nfs_•a˚_limô4
 *
objp
)

1571 i‡(!
	`zdr_limô_by4
 (
zdrs
, &
objp
->
limôby
))

1572  
FALSE
;

1573 
objp
->
limôby
) {

1574 
NFS_LIMIT_SIZE
:

1575 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
nfs_•a˚_limô4_u
.
fûesize
))

1576  
FALSE
;

1578 
NFS_LIMIT_BLOCKS
:

1579 i‡(!
	`zdr_nfs_modifõd_limô4
 (
zdrs
, &
objp
->
nfs_•a˚_limô4_u
.
mod_blocks
))

1580  
FALSE
;

1583  
FALSE
;

1585  
TRUE
;

1586 
	}
}

1588 
uöt32_t


1589 
	$zdr_›í_dñeg©i⁄_ty≥4
 (
ZDR
 *
zdrs
, 
›í_dñeg©i⁄_ty≥4
 *
objp
)

1591 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

1592  
FALSE
;

1593  
TRUE
;

1594 
	}
}

1596 
uöt32_t


1597 
	$zdr_›í_˛aim_ty≥4
 (
ZDR
 *
zdrs
, 
›í_˛aim_ty≥4
 *
objp
)

1599 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

1600  
FALSE
;

1601  
TRUE
;

1602 
	}
}

1604 
uöt32_t


1605 
	$zdr_›í_˛aim_dñeg©e_cur4
 (
ZDR
 *
zdrs
, 
›í_˛aim_dñeg©e_cur4
 *
objp
)

1607 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
dñeg©e_°©eid
))

1608  
FALSE
;

1609 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
fûe
))

1610  
FALSE
;

1611  
TRUE
;

1612 
	}
}

1614 
uöt32_t


1615 
	$zdr_›í_˛aim4
 (
ZDR
 *
zdrs
, 
›í_˛aim4
 *
objp
)

1617 i‡(!
	`zdr_›í_˛aim_ty≥4
 (
zdrs
, &
objp
->
˛aim
))

1618  
FALSE
;

1619 
objp
->
˛aim
) {

1620 
CLAIM_NULL
:

1621 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
›í_˛aim4_u
.
fûe
))

1622  
FALSE
;

1624 
CLAIM_PREVIOUS
:

1625 i‡(!
	`zdr_›í_dñeg©i⁄_ty≥4
 (
zdrs
, &
objp
->
›í_˛aim4_u
.
dñeg©e_ty≥
))

1626  
FALSE
;

1628 
CLAIM_DELEGATE_CUR
:

1629 i‡(!
	`zdr_›í_˛aim_dñeg©e_cur4
 (
zdrs
, &
objp
->
›í_˛aim4_u
.
dñeg©e_cur_öfo
))

1630  
FALSE
;

1632 
CLAIM_DELEGATE_PREV
:

1633 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
›í_˛aim4_u
.
fûe_dñeg©e_¥ev
))

1634  
FALSE
;

1636 
CLAIM_FH
:

1638 
CLAIM_DELEG_PREV_FH
:

1640 
CLAIM_DELEG_CUR_FH
:

1641 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_˛aim4_u
.
oc_dñeg©e_°©eid
))

1642  
FALSE
;

1645  
FALSE
;

1647  
TRUE
;

1648 
	}
}

1650 
uöt32_t


1651 
	$zdr_OPEN4¨gs
 (
ZDR
 *
zdrs
, 
OPEN4¨gs
 *
objp
)

1653 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
£qid
))

1654  
FALSE
;

1655 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
sh¨e_ac˚ss
))

1656  
FALSE
;

1657 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
sh¨e_díy
))

1658  
FALSE
;

1659 i‡(!
	`zdr_›í_ow√r4
 (
zdrs
, &
objp
->
ow√r
))

1660  
FALSE
;

1661 i‡(!
	`zdr_›íÊag4
 (
zdrs
, &
objp
->
›íhow
))

1662  
FALSE
;

1663 i‡(!
	`zdr_›í_˛aim4
 (
zdrs
, &
objp
->
˛aim
))

1664  
FALSE
;

1665  
TRUE
;

1666 
	}
}

1668 
uöt32_t


1669 
	$zdr_›í_ªad_dñeg©i⁄4
 (
ZDR
 *
zdrs
, 
›í_ªad_dñeg©i⁄4
 *
objp
)

1671 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

1672  
FALSE
;

1673 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ªˇŒ
))

1674  
FALSE
;

1675 i‡(!
	`zdr_nfß˚4
 (
zdrs
, &
objp
->
≥rmissi⁄s
))

1676  
FALSE
;

1677  
TRUE
;

1678 
	}
}

1680 
uöt32_t


1681 
	$zdr_›í_wrôe_dñeg©i⁄4
 (
ZDR
 *
zdrs
, 
›í_wrôe_dñeg©i⁄4
 *
objp
)

1683 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

1684  
FALSE
;

1685 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ªˇŒ
))

1686  
FALSE
;

1687 i‡(!
	`zdr_nfs_•a˚_limô4
 (
zdrs
, &
objp
->
•a˚_limô
))

1688  
FALSE
;

1689 i‡(!
	`zdr_nfß˚4
 (
zdrs
, &
objp
->
≥rmissi⁄s
))

1690  
FALSE
;

1691  
TRUE
;

1692 
	}
}

1694 
uöt32_t


1695 
	$zdr_›í_dñeg©i⁄4
 (
ZDR
 *
zdrs
, 
›í_dñeg©i⁄4
 *
objp
)

1697 i‡(!
	`zdr_›í_dñeg©i⁄_ty≥4
 (
zdrs
, &
objp
->
dñeg©i⁄_ty≥
))

1698  
FALSE
;

1699 
objp
->
dñeg©i⁄_ty≥
) {

1700 
OPEN_DELEGATE_NONE
:

1702 
OPEN_DELEGATE_READ
:

1703 i‡(!
	`zdr_›í_ªad_dñeg©i⁄4
 (
zdrs
, &
objp
->
›í_dñeg©i⁄4_u
.
ªad
))

1704  
FALSE
;

1706 
OPEN_DELEGATE_WRITE
:

1707 i‡(!
	`zdr_›í_wrôe_dñeg©i⁄4
 (
zdrs
, &
objp
->
›í_dñeg©i⁄4_u
.
wrôe
))

1708  
FALSE
;

1711  
FALSE
;

1713  
TRUE
;

1714 
	}
}

1716 
uöt32_t


1717 
	$zdr_OPEN4ªsok
 (
ZDR
 *
zdrs
, 
OPEN4ªsok
 *
objp
)

1719 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

1720  
FALSE
;

1721 i‡(!
	`zdr_ch™ge_öfo4
 (
zdrs
, &
objp
->
cöfo
))

1722  
FALSE
;

1723 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
rÊags
))

1724  
FALSE
;

1725 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©å£t
))

1726  
FALSE
;

1727 i‡(!
	`zdr_›í_dñeg©i⁄4
 (
zdrs
, &
objp
->
dñeg©i⁄
))

1728  
FALSE
;

1729  
TRUE
;

1730 
	}
}

1732 
uöt32_t


1733 
	$zdr_OPEN4ªs
 (
ZDR
 *
zdrs
, 
OPEN4ªs
 *
objp
)

1735 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1736  
FALSE
;

1737 
objp
->
°©us
) {

1738 
NFS4_OK
:

1739 i‡(!
	`zdr_OPEN4ªsok
 (
zdrs
, &
objp
->
OPEN4ªs_u
.
ªsok4
))

1740  
FALSE
;

1745  
TRUE
;

1746 
	}
}

1748 
uöt32_t


1749 
	$zdr_OPENATTR4¨gs
 (
ZDR
 *
zdrs
, 
OPENATTR4¨gs
 *
objp
)

1751 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
¸óãdú
))

1752  
FALSE
;

1753  
TRUE
;

1754 
	}
}

1756 
uöt32_t


1757 
	$zdr_OPENATTR4ªs
 (
ZDR
 *
zdrs
, 
OPENATTR4ªs
 *
objp
)

1759 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1760  
FALSE
;

1761  
TRUE
;

1762 
	}
}

1764 
uöt32_t


1765 
	$zdr_OPEN_CONFIRM4¨gs
 (
ZDR
 *
zdrs
, 
OPEN_CONFIRM4¨gs
 *
objp
)

1767 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_°©eid
))

1768  
FALSE
;

1769 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
£qid
))

1770  
FALSE
;

1771  
TRUE
;

1772 
	}
}

1774 
uöt32_t


1775 
	$zdr_OPEN_CONFIRM4ªsok
 (
ZDR
 *
zdrs
, 
OPEN_CONFIRM4ªsok
 *
objp
)

1777 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_°©eid
))

1778  
FALSE
;

1779  
TRUE
;

1780 
	}
}

1782 
uöt32_t


1783 
	$zdr_OPEN_CONFIRM4ªs
 (
ZDR
 *
zdrs
, 
OPEN_CONFIRM4ªs
 *
objp
)

1785 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1786  
FALSE
;

1787 
objp
->
°©us
) {

1788 
NFS4_OK
:

1789 i‡(!
	`zdr_OPEN_CONFIRM4ªsok
 (
zdrs
, &
objp
->
OPEN_CONFIRM4ªs_u
.
ªsok4
))

1790  
FALSE
;

1795  
TRUE
;

1796 
	}
}

1798 
uöt32_t


1799 
	$zdr_OPEN_DOWNGRADE4¨gs
 (
ZDR
 *
zdrs
, 
OPEN_DOWNGRADE4¨gs
 *
objp
)

1801 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_°©eid
))

1802  
FALSE
;

1803 i‡(!
	`zdr_£qid4
 (
zdrs
, &
objp
->
£qid
))

1804  
FALSE
;

1805 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
sh¨e_ac˚ss
))

1806  
FALSE
;

1807 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
sh¨e_díy
))

1808  
FALSE
;

1809  
TRUE
;

1810 
	}
}

1812 
uöt32_t


1813 
	$zdr_OPEN_DOWNGRADE4ªsok
 (
ZDR
 *
zdrs
, 
OPEN_DOWNGRADE4ªsok
 *
objp
)

1815 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
›í_°©eid
))

1816  
FALSE
;

1817  
TRUE
;

1818 
	}
}

1820 
uöt32_t


1821 
	$zdr_OPEN_DOWNGRADE4ªs
 (
ZDR
 *
zdrs
, 
OPEN_DOWNGRADE4ªs
 *
objp
)

1823 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1824  
FALSE
;

1825 
objp
->
°©us
) {

1826 
NFS4_OK
:

1827 i‡(!
	`zdr_OPEN_DOWNGRADE4ªsok
 (
zdrs
, &
objp
->
OPEN_DOWNGRADE4ªs_u
.
ªsok4
))

1828  
FALSE
;

1833  
TRUE
;

1834 
	}
}

1836 
uöt32_t


1837 
	$zdr_PUTFH4¨gs
 (
ZDR
 *
zdrs
, 
PUTFH4¨gs
 *
objp
)

1839 i‡(!
	`zdr_nfs_fh4
 (
zdrs
, &
objp
->
obje˘
))

1840  
FALSE
;

1841  
TRUE
;

1842 
	}
}

1844 
uöt32_t


1845 
	$zdr_PUTFH4ªs
 (
ZDR
 *
zdrs
, 
PUTFH4ªs
 *
objp
)

1847 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1848  
FALSE
;

1849  
TRUE
;

1850 
	}
}

1852 
uöt32_t


1853 
	$zdr_PUTPUBFH4ªs
 (
ZDR
 *
zdrs
, 
PUTPUBFH4ªs
 *
objp
)

1855 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1856  
FALSE
;

1857  
TRUE
;

1858 
	}
}

1860 
uöt32_t


1861 
	$zdr_PUTROOTFH4ªs
 (
ZDR
 *
zdrs
, 
PUTROOTFH4ªs
 *
objp
)

1863 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1864  
FALSE
;

1865  
TRUE
;

1866 
	}
}

1868 
uöt32_t


1869 
	$zdr_READ4¨gs
 (
ZDR
 *
zdrs
, 
READ4¨gs
 *
objp
)

1871 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

1872  
FALSE
;

1873 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

1874  
FALSE
;

1875 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
cou¡
))

1876  
FALSE
;

1877  
TRUE
;

1878 
	}
}

1880 
uöt32_t


1881 
	$zzdr_READ4ªsok
 (
ZDR
 *
zdrs
, 
READ4ªsok
 *
objp
)

1883 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

1884  
FALSE
;

1885 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, ~0))

1886  
FALSE
;

1887  
TRUE
;

1888 
	}
}

1890 
uöt32_t


1891 
	$zdr_READ4ªs
 (
ZDR
 *
zdrs
, 
READ4ªs
 *
objp
)

1893 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1894  
FALSE
;

1895 
objp
->
°©us
) {

1896 
NFS4_OK
:

1897 i‡(!
	`zdr_READ4ªsok
 (
zdrs
, &
objp
->
READ4ªs_u
.
ªsok4
))

1898  
FALSE
;

1903  
TRUE
;

1904 
	}
}

1906 
uöt32_t


1907 
	$zdr_READDIR4¨gs
 (
ZDR
 *
zdrs
, 
READDIR4¨gs
 *
objp
)

1909 i‡(!
	`zdr_nfs_cookõ4
 (
zdrs
, &
objp
->
cookõ
))

1910  
FALSE
;

1911 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
cookõvîf
))

1912  
FALSE
;

1913 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
dúcou¡
))

1914  
FALSE
;

1915 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
maxcou¡
))

1916  
FALSE
;

1917 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©å_ªque°
))

1918  
FALSE
;

1919  
TRUE
;

1920 
	}
}

1922 
uöt32_t


1923 
	$zdr_íåy4
 (
ZDR
 *
zdrs
, 
íåy4
 *
objp
)

1925 i‡(!
	`zdr_nfs_cookõ4
 (
zdrs
, &
objp
->
cookõ
))

1926  
FALSE
;

1927 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
«me
))

1928  
FALSE
;

1929 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
©ås
))

1930  
FALSE
;

1931 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
√xã¡ry
,  (
íåy4
), (
zdΩroc_t
Ë
zdr_íåy4
))

1932  
FALSE
;

1933  
TRUE
;

1934 
	}
}

1936 
uöt32_t


1937 
	$zdr_dúli°4
 (
ZDR
 *
zdrs
, 
dúli°4
 *
objp
)

1939 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
íåõs
,  (
íåy4
), (
zdΩroc_t
Ë
zdr_íåy4
))

1940  
FALSE
;

1941 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

1942  
FALSE
;

1943  
TRUE
;

1944 
	}
}

1946 
uöt32_t


1947 
	$zdr_READDIR4ªsok
 (
ZDR
 *
zdrs
, 
READDIR4ªsok
 *
objp
)

1949 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
cookõvîf
))

1950  
FALSE
;

1951 i‡(!
	`zdr_dúli°4
 (
zdrs
, &
objp
->
ª∂y
))

1952  
FALSE
;

1953  
TRUE
;

1954 
	}
}

1956 
uöt32_t


1957 
	$zdr_READDIR4ªs
 (
ZDR
 *
zdrs
, 
READDIR4ªs
 *
objp
)

1959 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1960  
FALSE
;

1961 
objp
->
°©us
) {

1962 
NFS4_OK
:

1963 i‡(!
	`zdr_READDIR4ªsok
 (
zdrs
, &
objp
->
READDIR4ªs_u
.
ªsok4
))

1964  
FALSE
;

1969  
TRUE
;

1970 
	}
}

1972 
uöt32_t


1973 
	$zdr_READLINK4ªsok
 (
ZDR
 *
zdrs
, 
READLINK4ªsok
 *
objp
)

1975 i‡(!
	`zdr_lökãxt4
 (
zdrs
, &
objp
->
lök
))

1976  
FALSE
;

1977  
TRUE
;

1978 
	}
}

1980 
uöt32_t


1981 
	$zdr_READLINK4ªs
 (
ZDR
 *
zdrs
, 
READLINK4ªs
 *
objp
)

1983 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

1984  
FALSE
;

1985 
objp
->
°©us
) {

1986 
NFS4_OK
:

1987 i‡(!
	`zdr_READLINK4ªsok
 (
zdrs
, &
objp
->
READLINK4ªs_u
.
ªsok4
))

1988  
FALSE
;

1993  
TRUE
;

1994 
	}
}

1996 
uöt32_t


1997 
	$zdr_REMOVE4¨gs
 (
ZDR
 *
zdrs
, 
REMOVE4¨gs
 *
objp
)

1999 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
èrgë
))

2000  
FALSE
;

2001  
TRUE
;

2002 
	}
}

2004 
uöt32_t


2005 
	$zdr_REMOVE4ªsok
 (
ZDR
 *
zdrs
, 
REMOVE4ªsok
 *
objp
)

2007 i‡(!
	`zdr_ch™ge_öfo4
 (
zdrs
, &
objp
->
cöfo
))

2008  
FALSE
;

2009  
TRUE
;

2010 
	}
}

2012 
uöt32_t


2013 
	$zdr_REMOVE4ªs
 (
ZDR
 *
zdrs
, 
REMOVE4ªs
 *
objp
)

2015 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2016  
FALSE
;

2017 
objp
->
°©us
) {

2018 
NFS4_OK
:

2019 i‡(!
	`zdr_REMOVE4ªsok
 (
zdrs
, &
objp
->
REMOVE4ªs_u
.
ªsok4
))

2020  
FALSE
;

2025  
TRUE
;

2026 
	}
}

2028 
uöt32_t


2029 
	$zdr_RENAME4¨gs
 (
ZDR
 *
zdrs
, 
RENAME4¨gs
 *
objp
)

2031 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
ﬁd«me
))

2032  
FALSE
;

2033 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
√w«me
))

2034  
FALSE
;

2035  
TRUE
;

2036 
	}
}

2038 
uöt32_t


2039 
	$zdr_RENAME4ªsok
 (
ZDR
 *
zdrs
, 
RENAME4ªsok
 *
objp
)

2041 i‡(!
	`zdr_ch™ge_öfo4
 (
zdrs
, &
objp
->
sour˚_cöfo
))

2042  
FALSE
;

2043 i‡(!
	`zdr_ch™ge_öfo4
 (
zdrs
, &
objp
->
èrgë_cöfo
))

2044  
FALSE
;

2045  
TRUE
;

2046 
	}
}

2048 
uöt32_t


2049 
	$zdr_RENAME4ªs
 (
ZDR
 *
zdrs
, 
RENAME4ªs
 *
objp
)

2051 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2052  
FALSE
;

2053 
objp
->
°©us
) {

2054 
NFS4_OK
:

2055 i‡(!
	`zdr_RENAME4ªsok
 (
zdrs
, &
objp
->
RENAME4ªs_u
.
ªsok4
))

2056  
FALSE
;

2061  
TRUE
;

2062 
	}
}

2064 
uöt32_t


2065 
	$zdr_RENEW4¨gs
 (
ZDR
 *
zdrs
, 
RENEW4¨gs
 *
objp
)

2067 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
˛õ¡id
))

2068  
FALSE
;

2069  
TRUE
;

2070 
	}
}

2072 
uöt32_t


2073 
	$zdr_RENEW4ªs
 (
ZDR
 *
zdrs
, 
RENEW4ªs
 *
objp
)

2075 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2076  
FALSE
;

2077  
TRUE
;

2078 
	}
}

2080 
uöt32_t


2081 
	$zdr_RESTOREFH4ªs
 (
ZDR
 *
zdrs
, 
RESTOREFH4ªs
 *
objp
)

2083 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2084  
FALSE
;

2085  
TRUE
;

2086 
	}
}

2088 
uöt32_t


2089 
	$zdr_SAVEFH4ªs
 (
ZDR
 *
zdrs
, 
SAVEFH4ªs
 *
objp
)

2091 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2092  
FALSE
;

2093  
TRUE
;

2094 
	}
}

2096 
uöt32_t


2097 
	$zdr_SECINFO4¨gs
 (
ZDR
 *
zdrs
, 
SECINFO4¨gs
 *
objp
)

2099 i‡(!
	`zdr_comp⁄ít4
 (
zdrs
, &
objp
->
«me
))

2100  
FALSE
;

2101  
TRUE
;

2102 
	}
}

2104 
uöt32_t


2105 
	$zdr_Ωc_gss_svc_t
 (
ZDR
 *
zdrs
, 
Ωc_gss_svc_t
 *
objp
)

2107 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2108  
FALSE
;

2109  
TRUE
;

2110 
	}
}

2112 
uöt32_t


2113 
	$zdr_Ωc£c_gss_öfo
 (
ZDR
 *
zdrs
, 
Ωc£c_gss_öfo
 *
objp
)

2115 i‡(!
	`zdr_£c_oid4
 (
zdrs
, &
objp
->
oid
))

2116  
FALSE
;

2117 i‡(!
	`zdr_q›4
 (
zdrs
, &
objp
->
q›
))

2118  
FALSE
;

2119 i‡(!
	`zdr_Ωc_gss_svc_t
 (
zdrs
, &
objp
->
£rvi˚
))

2120  
FALSE
;

2121  
TRUE
;

2122 
	}
}

2124 
uöt32_t


2125 
	$zdr_£cöfo4
 (
ZDR
 *
zdrs
, 
£cöfo4
 *
objp
)

2127 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
Êav‹
))

2128  
FALSE
;

2129 
objp
->
Êav‹
) {

2130 
RPCSEC_GSS
:

2131 i‡(!
	`zdr_Ωc£c_gss_öfo
 (
zdrs
, &
objp
->
£cöfo4_u
.
Êav‹_öfo
))

2132  
FALSE
;

2137  
TRUE
;

2138 
	}
}

2140 
uöt32_t


2141 
	$zdr_SECINFO4ªsok
 (
ZDR
 *
zdrs
, 
SECINFO4ªsok
 *
objp
)

2143 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
SECINFO4ªsok_vÆ
, (
u_öt
 *Ë&objp->
SECINFO4ªsok_Àn
, ~0,

2144  (
£cöfo4
), (
zdΩroc_t
Ë
zdr_£cöfo4
))

2145  
FALSE
;

2146  
TRUE
;

2147 
	}
}

2149 
uöt32_t


2150 
	$zdr_SECINFO4ªs
 (
ZDR
 *
zdrs
, 
SECINFO4ªs
 *
objp
)

2152 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2153  
FALSE
;

2154 
objp
->
°©us
) {

2155 
NFS4_OK
:

2156 i‡(!
	`zdr_SECINFO4ªsok
 (
zdrs
, &
objp
->
SECINFO4ªs_u
.
ªsok4
))

2157  
FALSE
;

2162  
TRUE
;

2163 
	}
}

2165 
uöt32_t


2166 
	$zdr_SETATTR4¨gs
 (
ZDR
 *
zdrs
, 
SETATTR4¨gs
 *
objp
)

2168 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

2169  
FALSE
;

2170 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
obj_©åibuãs
))

2171  
FALSE
;

2172  
TRUE
;

2173 
	}
}

2175 
uöt32_t


2176 
	$zdr_SETATTR4ªs
 (
ZDR
 *
zdrs
, 
SETATTR4ªs
 *
objp
)

2178 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2179  
FALSE
;

2180 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©ås£t
))

2181  
FALSE
;

2182  
TRUE
;

2183 
	}
}

2185 
uöt32_t


2186 
	$zdr_SETCLIENTID4¨gs
 (
ZDR
 *
zdrs
, 
SETCLIENTID4¨gs
 *
objp
)

2188 i‡(!
	`zdr_nfs_˛õ¡_id4
 (
zdrs
, &
objp
->
˛õ¡
))

2189  
FALSE
;

2190 i‡(!
	`zdr_cb_˛õ¡4
 (
zdrs
, &
objp
->
ˇŒback
))

2191  
FALSE
;

2192 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
ˇŒback_idít
))

2193  
FALSE
;

2194  
TRUE
;

2195 
	}
}

2197 
uöt32_t


2198 
	$zdr_SETCLIENTID4ªsok
 (
ZDR
 *
zdrs
, 
SETCLIENTID4ªsok
 *
objp
)

2200 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
˛õ¡id
))

2201  
FALSE
;

2202 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
£t˛õ¡id_c⁄fúm
))

2203  
FALSE
;

2204  
TRUE
;

2205 
	}
}

2207 
uöt32_t


2208 
	$zdr_SETCLIENTID4ªs
 (
ZDR
 *
zdrs
, 
SETCLIENTID4ªs
 *
objp
)

2210 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2211  
FALSE
;

2212 
objp
->
°©us
) {

2213 
NFS4_OK
:

2214 i‡(!
	`zdr_SETCLIENTID4ªsok
 (
zdrs
, &
objp
->
SETCLIENTID4ªs_u
.
ªsok4
))

2215  
FALSE
;

2217 
NFS4ERR_CLID_INUSE
:

2218 i‡(!
	`zdr_˛õ¡addr4
 (
zdrs
, &
objp
->
SETCLIENTID4ªs_u
.
˛õ¡_usög
))

2219  
FALSE
;

2224  
TRUE
;

2225 
	}
}

2227 
uöt32_t


2228 
	$zdr_SETCLIENTID_CONFIRM4¨gs
 (
ZDR
 *
zdrs
, 
SETCLIENTID_CONFIRM4¨gs
 *
objp
)

2230 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
˛õ¡id
))

2231  
FALSE
;

2232 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
£t˛õ¡id_c⁄fúm
))

2233  
FALSE
;

2234  
TRUE
;

2235 
	}
}

2237 
uöt32_t


2238 
	$zdr_SETCLIENTID_CONFIRM4ªs
 (
ZDR
 *
zdrs
, 
SETCLIENTID_CONFIRM4ªs
 *
objp
)

2240 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2241  
FALSE
;

2242  
TRUE
;

2243 
	}
}

2245 
uöt32_t


2246 
	$zdr_VERIFY4¨gs
 (
ZDR
 *
zdrs
, 
VERIFY4¨gs
 *
objp
)

2248 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
obj_©åibuãs
))

2249  
FALSE
;

2250  
TRUE
;

2251 
	}
}

2253 
uöt32_t


2254 
	$zdr_VERIFY4ªs
 (
ZDR
 *
zdrs
, 
VERIFY4ªs
 *
objp
)

2256 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2257  
FALSE
;

2258  
TRUE
;

2259 
	}
}

2261 
uöt32_t


2262 
	$zdr_°abÀ_how4
 (
ZDR
 *
zdrs
, 
°abÀ_how4
 *
objp
)

2264 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2265  
FALSE
;

2266  
TRUE
;

2267 
	}
}

2269 
uöt32_t


2270 
	$zzdr_WRITE4¨gs
 (
ZDR
 *
zdrs
, 
WRITE4¨gs
 *
objp
)

2272 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

2273  
FALSE
;

2274 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

2275  
FALSE
;

2276 i‡(!
	`zdr_°abÀ_how4
 (
zdrs
, &
objp
->
°abÀ
))

2277  
FALSE
;

2278 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, ~0))

2279  
FALSE
;

2280  
TRUE
;

2281 
	}
}

2283 
uöt32_t


2284 
	$zdr_WRITE4ªsok
 (
ZDR
 *
zdrs
, 
WRITE4ªsok
 *
objp
)

2286 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
cou¡
))

2287  
FALSE
;

2288 i‡(!
	`zdr_°abÀ_how4
 (
zdrs
, &
objp
->
commôãd
))

2289  
FALSE
;

2290 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
wrôevîf
))

2291  
FALSE
;

2292  
TRUE
;

2293 
	}
}

2295 
uöt32_t


2296 
	$zdr_WRITE4ªs
 (
ZDR
 *
zdrs
, 
WRITE4ªs
 *
objp
)

2298 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2299  
FALSE
;

2300 
objp
->
°©us
) {

2301 
NFS4_OK
:

2302 i‡(!
	`zdr_WRITE4ªsok
 (
zdrs
, &
objp
->
WRITE4ªs_u
.
ªsok4
))

2303  
FALSE
;

2308  
TRUE
;

2309 
	}
}

2311 
uöt32_t


2312 
	$zdr_RELEASE_LOCKOWNER4¨gs
 (
ZDR
 *
zdrs
, 
RELEASE_LOCKOWNER4¨gs
 *
objp
)

2314 i‡(!
	`zdr_lock_ow√r4
 (
zdrs
, &
objp
->
lock_ow√r
))

2315  
FALSE
;

2316  
TRUE
;

2317 
	}
}

2319 
uöt32_t


2320 
	$zdr_RELEASE_LOCKOWNER4ªs
 (
ZDR
 *
zdrs
, 
RELEASE_LOCKOWNER4ªs
 *
objp
)

2322 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

2323  
FALSE
;

2324  
TRUE
;

2325 
	}
}

2327 
uöt32_t


2328 
	$zdr_gssh™dÀ4_t
 (
ZDR
 *
zdrs
, 
gssh™dÀ4_t
 *
objp
)

2330 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
gssh™dÀ4_t_vÆ
, (
u_öt
 *Ë&objp->
gssh™dÀ4_t_Àn
, ~0))

2331  
FALSE
;

2332  
TRUE
;

2333 
	}
}

2335 
uöt32_t


2336 
	$zdr_ˇŒback_£c_∑rms4
 (
ZDR
 *
zdrs
, 
ˇŒback_£c_∑rms4
 *
objp
)

2338 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
cb_£cÊav‹
))

2339  
FALSE
;

2340 
objp
->
cb_£cÊav‹
) {

2341 
AUTH_NONE
:

2343 
AUTH_SYS
:

2344 i‡(!
	`zdr_authsys_∑rms
 (
zdrs
, &
objp
->
ˇŒback_£c_∑rms4_u
.
cb•_sys_¸ed
))

2345  
FALSE
;

2348  
FALSE
;

2350  
TRUE
;

2351 
	}
}

2353 
uöt32_t


2354 
	$zdr_ch™√l_dú_‰om_˛õ¡4
 (
ZDR
 *
zdrs
, 
ch™√l_dú_‰om_˛õ¡4
 *
objp
)

2356 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2357  
FALSE
;

2358  
TRUE
;

2359 
	}
}

2361 
uöt32_t


2362 
	$zdr_BIND_CONN_TO_SESSION4¨gs
 (
ZDR
 *
zdrs
, 
BIND_CONN_TO_SESSION4¨gs
 *
objp
)

2364 i‡(!
	`zdr_£ssi⁄id4
 (
zdrs
, 
objp
->
b˘ß_£ssid
))

2365  
FALSE
;

2366 i‡(!
	`zdr_ch™√l_dú_‰om_˛õ¡4
 (
zdrs
, &
objp
->
b˘ß_dú
))

2367  
FALSE
;

2368 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
b˘ß_u£_c⁄n_ö_rdma_mode
))

2369  
FALSE
;

2370  
TRUE
;

2371 
	}
}

2373 
uöt32_t


2374 
	$zdr_ch™√l_dú_‰om_£rvî4
 (
ZDR
 *
zdrs
, 
ch™√l_dú_‰om_£rvî4
 *
objp
)

2376 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2377  
FALSE
;

2378  
TRUE
;

2379 
	}
}

2381 
uöt32_t


2382 
	$zdr_BIND_CONN_TO_SESSION4ªsok
 (
ZDR
 *
zdrs
, 
BIND_CONN_TO_SESSION4ªsok
 *
objp
)

2384 i‡(!
	`zdr_£ssi⁄id4
 (
zdrs
, 
objp
->
b˘§_£ssid
))

2385  
FALSE
;

2386 i‡(!
	`zdr_ch™√l_dú_‰om_£rvî4
 (
zdrs
, &
objp
->
b˘§_dú
))

2387  
FALSE
;

2388 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
b˘§_u£_c⁄n_ö_rdma_mode
))

2389  
FALSE
;

2390  
TRUE
;

2391 
	}
}

2393 
uöt32_t


2394 
	$zdr_BIND_CONN_TO_SESSION4ªs
 (
ZDR
 *
zdrs
, 
BIND_CONN_TO_SESSION4ªs
 *
objp
)

2396 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
b˘§_°©us
))

2397  
FALSE
;

2398 
objp
->
b˘§_°©us
) {

2399 
NFS4_OK
:

2400 i‡(!
	`zdr_BIND_CONN_TO_SESSION4ªsok
 (
zdrs
, &
objp
->
BIND_CONN_TO_SESSION4ªs_u
.
b˘§_ªsok4
))

2401  
FALSE
;

2406  
TRUE
;

2407 
	}
}

2409 
uöt32_t


2410 
	$zdr_°©e_¥Ÿe˘_›s4
 (
ZDR
 *
zdrs
, 
°©e_¥Ÿe˘_›s4
 *
objp
)

2412 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
•o_mu°_íf‹˚
))

2413  
FALSE
;

2414 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
•o_mu°_Ælow
))

2415  
FALSE
;

2416  
TRUE
;

2417 
	}
}

2419 
uöt32_t


2420 
	$zdr_ssv_•_∑rms4
 (
ZDR
 *
zdrs
, 
ssv_•_∑rms4
 *
objp
)

2422 i‡(!
	`zdr_°©e_¥Ÿe˘_›s4
 (
zdrs
, &
objp
->
s•_›s
))

2423  
FALSE
;

2424 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
s•_hash_Ægs
.
s•_hash_Ægs_vÆ
, (
u_öt
 *Ë&objp->s•_hash_Ægs.
s•_hash_Ægs_Àn
, ~0,

2425  (
£c_oid4
), (
zdΩroc_t
Ë
zdr_£c_oid4
))

2426  
FALSE
;

2427 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
s•_í¸_Ægs
.
s•_í¸_Ægs_vÆ
, (
u_öt
 *Ë&objp->s•_í¸_Ægs.
s•_í¸_Ægs_Àn
, ~0,

2428  (
£c_oid4
), (
zdΩroc_t
Ë
zdr_£c_oid4
))

2429  
FALSE
;

2430 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
s•_wödow
))

2431  
FALSE
;

2432 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
s•_num_gss_h™dÀs
))

2433  
FALSE
;

2434  
TRUE
;

2435 
	}
}

2437 
uöt32_t


2438 
	$zdr_°©e_¥Ÿe˘_how4
 (
ZDR
 *
zdrs
, 
°©e_¥Ÿe˘_how4
 *
objp
)

2440 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2441  
FALSE
;

2442  
TRUE
;

2443 
	}
}

2445 
uöt32_t


2446 
	$zdr_°©e_¥Ÿe˘4_a
 (
ZDR
 *
zdrs
, 
°©e_¥Ÿe˘4_a
 *
objp
)

2448 i‡(!
	`zdr_°©e_¥Ÿe˘_how4
 (
zdrs
, &
objp
->
•a_how
))

2449  
FALSE
;

2450 
objp
->
•a_how
) {

2451 
SP4_NONE
:

2453 
SP4_MACH_CRED
:

2454 i‡(!
	`zdr_°©e_¥Ÿe˘_›s4
 (
zdrs
, &
objp
->
°©e_¥Ÿe˘4_a_u
.
•a_mach_›s
))

2455  
FALSE
;

2457 
SP4_SSV
:

2458 i‡(!
	`zdr_ssv_•_∑rms4
 (
zdrs
, &
objp
->
°©e_¥Ÿe˘4_a_u
.
•a_ssv_∑rms
))

2459  
FALSE
;

2462  
FALSE
;

2464  
TRUE
;

2465 
	}
}

2467 
uöt32_t


2468 
	$zdr_EXCHANGE_ID4¨gs
 (
ZDR
 *
zdrs
, 
EXCHANGE_ID4¨gs
 *
objp
)

2470 i‡(!
	`zdr_˛õ¡_ow√r4
 (
zdrs
, &
objp
->
eü_˛õ¡ow√r
))

2471  
FALSE
;

2472 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
eü_Êags
))

2473  
FALSE
;

2474 i‡(!
	`zdr_°©e_¥Ÿe˘4_a
 (
zdrs
, &
objp
->
eü_°©e_¥Ÿe˘
))

2475  
FALSE
;

2476 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
eü_˛õ¡_im∂_id
.
eü_˛õ¡_im∂_id_vÆ
, (
u_öt
 *Ë&objp->eü_˛õ¡_im∂_id.
eü_˛õ¡_im∂_id_Àn
, 1,

2477  (
nfs_im∂_id4
), (
zdΩroc_t
Ë
zdr_nfs_im∂_id4
))

2478  
FALSE
;

2479  
TRUE
;

2480 
	}
}

2482 
uöt32_t


2483 
	$zdr_ssv_¥Ÿ_öfo4
 (
ZDR
 *
zdrs
, 
ssv_¥Ÿ_öfo4
 *
objp
)

2485 i‡(!
	`zdr_°©e_¥Ÿe˘_›s4
 (
zdrs
, &
objp
->
•i_›s
))

2486  
FALSE
;

2487 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
•i_hash_Æg
))

2488  
FALSE
;

2489 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
•i_í¸_Æg
))

2490  
FALSE
;

2491 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
•i_ssv_Àn
))

2492  
FALSE
;

2493 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
•i_wödow
))

2494  
FALSE
;

2495 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
•i_h™dÀs
.
•i_h™dÀs_vÆ
, (
u_öt
 *Ë&objp->•i_h™dÀs.
•i_h™dÀs_Àn
, ~0,

2496  (
gssh™dÀ4_t
), (
zdΩroc_t
Ë
zdr_gssh™dÀ4_t
))

2497  
FALSE
;

2498  
TRUE
;

2499 
	}
}

2501 
uöt32_t


2502 
	$zdr_°©e_¥Ÿe˘4_r
 (
ZDR
 *
zdrs
, 
°©e_¥Ÿe˘4_r
 *
objp
)

2504 i‡(!
	`zdr_°©e_¥Ÿe˘_how4
 (
zdrs
, &
objp
->
•r_how
))

2505  
FALSE
;

2506 
objp
->
•r_how
) {

2507 
SP4_NONE
:

2509 
SP4_MACH_CRED
:

2510 i‡(!
	`zdr_°©e_¥Ÿe˘_›s4
 (
zdrs
, &
objp
->
°©e_¥Ÿe˘4_r_u
.
•r_mach_›s
))

2511  
FALSE
;

2513 
SP4_SSV
:

2514 i‡(!
	`zdr_ssv_¥Ÿ_öfo4
 (
zdrs
, &
objp
->
°©e_¥Ÿe˘4_r_u
.
•r_ssv_öfo
))

2515  
FALSE
;

2518  
FALSE
;

2520  
TRUE
;

2521 
	}
}

2523 
uöt32_t


2524 
	$zdr_EXCHANGE_ID4ªsok
 (
ZDR
 *
zdrs
, 
EXCHANGE_ID4ªsok
 *
objp
)

2526 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
eú_˛õ¡id
))

2527  
FALSE
;

2528 i‡(!
	`zdr_£quí˚id4
 (
zdrs
, &
objp
->
eú_£quí˚id
))

2529  
FALSE
;

2530 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
eú_Êags
))

2531  
FALSE
;

2532 i‡(!
	`zdr_°©e_¥Ÿe˘4_r
 (
zdrs
, &
objp
->
eú_°©e_¥Ÿe˘
))

2533  
FALSE
;

2534 i‡(!
	`zdr_£rvî_ow√r4
 (
zdrs
, &
objp
->
eú_£rvî_ow√r
))

2535  
FALSE
;

2536 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
eú_£rvî_sc›e
.
eú_£rvî_sc›e_vÆ
, (
u_öt
 *Ë&objp->eú_£rvî_sc›e.
eú_£rvî_sc›e_Àn
, 
NFS4_OPAQUE_LIMIT
))

2537  
FALSE
;

2538 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
eú_£rvî_im∂_id
.
eú_£rvî_im∂_id_vÆ
, (
u_öt
 *Ë&objp->eú_£rvî_im∂_id.
eú_£rvî_im∂_id_Àn
, 1,

2539  (
nfs_im∂_id4
), (
zdΩroc_t
Ë
zdr_nfs_im∂_id4
))

2540  
FALSE
;

2541  
TRUE
;

2542 
	}
}

2544 
uöt32_t


2545 
	$zdr_EXCHANGE_ID4ªs
 (
ZDR
 *
zdrs
, 
EXCHANGE_ID4ªs
 *
objp
)

2547 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
eú_°©us
))

2548  
FALSE
;

2549 
objp
->
eú_°©us
) {

2550 
NFS4_OK
:

2551 i‡(!
	`zdr_EXCHANGE_ID4ªsok
 (
zdrs
, &
objp
->
EXCHANGE_ID4ªs_u
.
eú_ªsok4
))

2552  
FALSE
;

2557  
TRUE
;

2558 
	}
}

2560 
uöt32_t


2561 
	$zdr_ch™√l_©ås4
 (
ZDR
 *
zdrs
, 
ch™√l_©ås4
 *
objp
)

2563 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
ˇ_hódî∑dsize
))

2564  
FALSE
;

2565 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
ˇ_maxªque°size
))

2566  
FALSE
;

2567 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
ˇ_maxª•⁄£size
))

2568  
FALSE
;

2569 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
ˇ_maxª•⁄£size_ˇched
))

2570  
FALSE
;

2571 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
ˇ_max›î©i⁄s
))

2572  
FALSE
;

2573 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
ˇ_maxªque°s
))

2574  
FALSE
;

2575 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
ˇ_rdma_úd
.
ˇ_rdma_úd_vÆ
, (
u_öt
 *Ë&objp->ˇ_rdma_úd.
ˇ_rdma_úd_Àn
, 1,

2576  (
uöt32_t
), (
zdΩroc_t
Ë
zdr_uöt32_t
))

2577  
FALSE
;

2578  
TRUE
;

2579 
	}
}

2581 
uöt32_t


2582 
	$zdr_CREATE_SESSION4¨gs
 (
ZDR
 *
zdrs
, 
CREATE_SESSION4¨gs
 *
objp
)

2584 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
cß_˛õ¡id
))

2585  
FALSE
;

2586 i‡(!
	`zdr_£quí˚id4
 (
zdrs
, &
objp
->
cß_£quí˚
))

2587  
FALSE
;

2588 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
cß_Êags
))

2589  
FALSE
;

2590 i‡(!
	`zdr_ch™√l_©ås4
 (
zdrs
, &
objp
->
cß_f‹e_ch™_©ås
))

2591  
FALSE
;

2592 i‡(!
	`zdr_ch™√l_©ås4
 (
zdrs
, &
objp
->
cß_back_ch™_©ås
))

2593  
FALSE
;

2594 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
cß_cb_¥ogøm
))

2595  
FALSE
;

2596 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
cß_£c_∑rms
.
cß_£c_∑rms_vÆ
, (
u_öt
 *Ë&objp->cß_£c_∑rms.
cß_£c_∑rms_Àn
, ~0,

2597  (
ˇŒback_£c_∑rms4
), (
zdΩroc_t
Ë
zdr_ˇŒback_£c_∑rms4
))

2598  
FALSE
;

2599  
TRUE
;

2600 
	}
}

2602 
uöt32_t


2603 
	$zdr_CREATE_SESSION4ªsok
 (
ZDR
 *
zdrs
, 
CREATE_SESSION4ªsok
 *
objp
)

2605 i‡(!
	`zdr_£ssi⁄id4
 (
zdrs
, 
objp
->
c§_£ssi⁄id
))

2606  
FALSE
;

2607 i‡(!
	`zdr_£quí˚id4
 (
zdrs
, &
objp
->
c§_£quí˚
))

2608  
FALSE
;

2609 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
c§_Êags
))

2610  
FALSE
;

2611 i‡(!
	`zdr_ch™√l_©ås4
 (
zdrs
, &
objp
->
c§_f‹e_ch™_©ås
))

2612  
FALSE
;

2613 i‡(!
	`zdr_ch™√l_©ås4
 (
zdrs
, &
objp
->
c§_back_ch™_©ås
))

2614  
FALSE
;

2615  
TRUE
;

2616 
	}
}

2618 
uöt32_t


2619 
	$zdr_CREATE_SESSION4ªs
 (
ZDR
 *
zdrs
, 
CREATE_SESSION4ªs
 *
objp
)

2621 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
c§_°©us
))

2622  
FALSE
;

2623 
objp
->
c§_°©us
) {

2624 
NFS4_OK
:

2625 i‡(!
	`zdr_CREATE_SESSION4ªsok
 (
zdrs
, &
objp
->
CREATE_SESSION4ªs_u
.
c§_ªsok4
))

2626  
FALSE
;

2631  
TRUE
;

2632 
	}
}

2634 
uöt32_t


2635 
	$zdr_DESTROY_SESSION4¨gs
 (
ZDR
 *
zdrs
, 
DESTROY_SESSION4¨gs
 *
objp
)

2637 i‡(!
	`zdr_£ssi⁄id4
 (
zdrs
, 
objp
->
dß_£ssi⁄id
))

2638  
FALSE
;

2639  
TRUE
;

2640 
	}
}

2642 
uöt32_t


2643 
	$zdr_DESTROY_SESSION4ªs
 (
ZDR
 *
zdrs
, 
DESTROY_SESSION4ªs
 *
objp
)

2645 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
d§_°©us
))

2646  
FALSE
;

2647  
TRUE
;

2648 
	}
}

2650 
uöt32_t


2651 
	$zdr_FREE_STATEID4¨gs
 (
ZDR
 *
zdrs
, 
FREE_STATEID4¨gs
 *
objp
)

2653 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
fß_°©eid
))

2654  
FALSE
;

2655  
TRUE
;

2656 
	}
}

2658 
uöt32_t


2659 
	$zdr_FREE_STATEID4ªs
 (
ZDR
 *
zdrs
, 
FREE_STATEID4ªs
 *
objp
)

2661 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
f§_°©us
))

2662  
FALSE
;

2663  
TRUE
;

2664 
	}
}

2666 
uöt32_t


2667 
	$zdr_©å_nŸi˚4
 (
ZDR
 *
zdrs
, 
©å_nŸi˚4
 *
objp
)

2669 i‡(!
	`zdr_nf°ime4
 (
zdrs
, 
objp
))

2670  
FALSE
;

2671  
TRUE
;

2672 
	}
}

2674 
uöt32_t


2675 
	$zdr_GET_DIR_DELEGATION4¨gs
 (
ZDR
 *
zdrs
, 
GET_DIR_DELEGATION4¨gs
 *
objp
)

2677 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
gdda_sig«l_dñeg_avaû
))

2678  
FALSE
;

2679 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gdda_nŸifiˇti⁄_ty≥s
))

2680  
FALSE
;

2681 i‡(!
	`zdr_©å_nŸi˚4
 (
zdrs
, &
objp
->
gdda_chûd_©å_dñay
))

2682  
FALSE
;

2683 i‡(!
	`zdr_©å_nŸi˚4
 (
zdrs
, &
objp
->
gdda_dú_©å_dñay
))

2684  
FALSE
;

2685 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gdda_chûd_©åibuãs
))

2686  
FALSE
;

2687 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gdda_dú_©åibuãs
))

2688  
FALSE
;

2689  
TRUE
;

2690 
	}
}

2692 
uöt32_t


2693 
	$zdr_GET_DIR_DELEGATION4ªsok
 (
ZDR
 *
zdrs
, 
GET_DIR_DELEGATION4ªsok
 *
objp
)

2695 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
gddr_cookõvîf
))

2696  
FALSE
;

2697 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
gddr_°©eid
))

2698  
FALSE
;

2699 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gddr_nŸifiˇti⁄
))

2700  
FALSE
;

2701 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gddr_chûd_©åibuãs
))

2702  
FALSE
;

2703 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gddr_dú_©åibuãs
))

2704  
FALSE
;

2705  
TRUE
;

2706 
	}
}

2708 
uöt32_t


2709 
	$zdr_gdd∫f4_°©us
 (
ZDR
 *
zdrs
, 
gdd∫f4_°©us
 *
objp
)

2711 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2712  
FALSE
;

2713  
TRUE
;

2714 
	}
}

2716 
uöt32_t


2717 
	$zdr_GET_DIR_DELEGATION4ªs_n⁄_Áèl
 (
ZDR
 *
zdrs
, 
GET_DIR_DELEGATION4ªs_n⁄_Áèl
 *
objp
)

2719 i‡(!
	`zdr_gdd∫f4_°©us
 (
zdrs
, &
objp
->
gdd∫f_°©us
))

2720  
FALSE
;

2721 
objp
->
gdd∫f_°©us
) {

2722 
GDD4_OK
:

2723 i‡(!
	`zdr_GET_DIR_DELEGATION4ªsok
 (
zdrs
, &
objp
->
GET_DIR_DELEGATION4ªs_n⁄_Áèl_u
.
gdd∫f_ªsok4
))

2724  
FALSE
;

2726 
GDD4_UNAVAIL
:

2727 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
GET_DIR_DELEGATION4ªs_n⁄_Áèl_u
.
gdd∫f_wûl_sig«l_dñeg_avaû
))

2728  
FALSE
;

2731  
FALSE
;

2733  
TRUE
;

2734 
	}
}

2736 
uöt32_t


2737 
	$zdr_GET_DIR_DELEGATION4ªs
 (
ZDR
 *
zdrs
, 
GET_DIR_DELEGATION4ªs
 *
objp
)

2739 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
gddr_°©us
))

2740  
FALSE
;

2741 
objp
->
gddr_°©us
) {

2742 
NFS4_OK
:

2743 i‡(!
	`zdr_GET_DIR_DELEGATION4ªs_n⁄_Áèl
 (
zdrs
, &
objp
->
GET_DIR_DELEGATION4ªs_u
.
gddr_ªs_n⁄_Áèl4
))

2744  
FALSE
;

2749  
TRUE
;

2750 
	}
}

2752 
uöt32_t


2753 
	$zdr_GETDEVICEINFO4¨gs
 (
ZDR
 *
zdrs
, 
GETDEVICEINFO4¨gs
 *
objp
)

2755 i‡(!
	`zdr_devi˚id4
 (
zdrs
, 
objp
->
gdü_devi˚_id
))

2756  
FALSE
;

2757 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
gdü_œyout_ty≥
))

2758  
FALSE
;

2759 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
gdü_maxcou¡
))

2760  
FALSE
;

2761 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gdü_nŸify_ty≥s
))

2762  
FALSE
;

2763  
TRUE
;

2764 
	}
}

2766 
uöt32_t


2767 
	$zdr_GETDEVICEINFO4ªsok
 (
ZDR
 *
zdrs
, 
GETDEVICEINFO4ªsok
 *
objp
)

2769 i‡(!
	`zdr_devi˚_addr4
 (
zdrs
, &
objp
->
gdú_devi˚_addr
))

2770  
FALSE
;

2771 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
gdú_nŸifiˇti⁄
))

2772  
FALSE
;

2773  
TRUE
;

2774 
	}
}

2776 
uöt32_t


2777 
	$zdr_GETDEVICEINFO4ªs
 (
ZDR
 *
zdrs
, 
GETDEVICEINFO4ªs
 *
objp
)

2779 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
gdú_°©us
))

2780  
FALSE
;

2781 
objp
->
gdú_°©us
) {

2782 
NFS4_OK
:

2783 i‡(!
	`zdr_GETDEVICEINFO4ªsok
 (
zdrs
, &
objp
->
GETDEVICEINFO4ªs_u
.
gdú_ªsok4
))

2784  
FALSE
;

2786 
NFS4ERR_TOOSMALL
:

2787 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
GETDEVICEINFO4ªs_u
.
gdú_möcou¡
))

2788  
FALSE
;

2793  
TRUE
;

2794 
	}
}

2796 
uöt32_t


2797 
	$zdr_GETDEVICELIST4¨gs
 (
ZDR
 *
zdrs
, 
GETDEVICELIST4¨gs
 *
objp
)

2799 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
gdœ_œyout_ty≥
))

2800  
FALSE
;

2801 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
gdœ_maxdevi˚s
))

2802  
FALSE
;

2803 i‡(!
	`zdr_nfs_cookõ4
 (
zdrs
, &
objp
->
gdœ_cookõ
))

2804  
FALSE
;

2805 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
gdœ_cookõvîf
))

2806  
FALSE
;

2807  
TRUE
;

2808 
	}
}

2810 
uöt32_t


2811 
	$zdr_GETDEVICELIST4ªsok
 (
ZDR
 *
zdrs
, 
GETDEVICELIST4ªsok
 *
objp
)

2813 i‡(!
	`zdr_nfs_cookõ4
 (
zdrs
, &
objp
->
gdÃ_cookõ
))

2814  
FALSE
;

2815 i‡(!
	`zdr_vîifõr4
 (
zdrs
, 
objp
->
gdÃ_cookõvîf
))

2816  
FALSE
;

2817 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
gdÃ_devi˚id_li°
.
gdÃ_devi˚id_li°_vÆ
, (
u_öt
 *Ë&objp->gdÃ_devi˚id_li°.
gdÃ_devi˚id_li°_Àn
, ~0,

2818  (
devi˚id4
), (
zdΩroc_t
Ë
zdr_devi˚id4
))

2819  
FALSE
;

2820 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
gdÃ_eof
))

2821  
FALSE
;

2822  
TRUE
;

2823 
	}
}

2825 
uöt32_t


2826 
	$zdr_GETDEVICELIST4ªs
 (
ZDR
 *
zdrs
, 
GETDEVICELIST4ªs
 *
objp
)

2828 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
gdÃ_°©us
))

2829  
FALSE
;

2830 
objp
->
gdÃ_°©us
) {

2831 
NFS4_OK
:

2832 i‡(!
	`zdr_GETDEVICELIST4ªsok
 (
zdrs
, &
objp
->
GETDEVICELIST4ªs_u
.
gdÃ_ªsok4
))

2833  
FALSE
;

2838  
TRUE
;

2839 
	}
}

2841 
uöt32_t


2842 
	$zdr_√wtime4
 (
ZDR
 *
zdrs
, 
√wtime4
 *
objp
)

2844 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
¡_timech™ged
))

2845  
FALSE
;

2846 
objp
->
¡_timech™ged
) {

2847 
TRUE
:

2848 i‡(!
	`zdr_nf°ime4
 (
zdrs
, &
objp
->
√wtime4_u
.
¡_time
))

2849  
FALSE
;

2851 
FALSE
:

2854  
FALSE
;

2856  
TRUE
;

2857 
	}
}

2859 
uöt32_t


2860 
	$zdr_√woff£t4
 (
ZDR
 *
zdrs
, 
√woff£t4
 *
objp
)

2862 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
no_√woff£t
))

2863  
FALSE
;

2864 
objp
->
no_√woff£t
) {

2865 
TRUE
:

2866 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
√woff£t4_u
.
no_off£t
))

2867  
FALSE
;

2869 
FALSE
:

2872  
FALSE
;

2874  
TRUE
;

2875 
	}
}

2877 
uöt32_t


2878 
	$zdr_LAYOUTCOMMIT4¨gs
 (
ZDR
 *
zdrs
, 
LAYOUTCOMMIT4¨gs
 *
objp
)

2880 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
loˇ_off£t
))

2881  
FALSE
;

2882 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
loˇ_Àngth
))

2883  
FALSE
;

2884 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
loˇ_ª˛aim
))

2885  
FALSE
;

2886 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
loˇ_°©eid
))

2887  
FALSE
;

2888 i‡(!
	`zdr_√woff£t4
 (
zdrs
, &
objp
->
loˇ_œ°_wrôe_off£t
))

2889  
FALSE
;

2890 i‡(!
	`zdr_√wtime4
 (
zdrs
, &
objp
->
loˇ_time_modify
))

2891  
FALSE
;

2892 i‡(!
	`zdr_œyoutupd©e4
 (
zdrs
, &
objp
->
loˇ_œyoutupd©e
))

2893  
FALSE
;

2894  
TRUE
;

2895 
	}
}

2897 
uöt32_t


2898 
	$zdr_√wsize4
 (
ZDR
 *
zdrs
, 
√wsize4
 *
objp
)

2900 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ns_sizech™ged
))

2901  
FALSE
;

2902 
objp
->
ns_sizech™ged
) {

2903 
TRUE
:

2904 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
√wsize4_u
.
ns_size
))

2905  
FALSE
;

2907 
FALSE
:

2910  
FALSE
;

2912  
TRUE
;

2913 
	}
}

2915 
uöt32_t


2916 
	$zdr_LAYOUTCOMMIT4ªsok
 (
ZDR
 *
zdrs
, 
LAYOUTCOMMIT4ªsok
 *
objp
)

2918 i‡(!
	`zdr_√wsize4
 (
zdrs
, &
objp
->
lo¸_√wsize
))

2919  
FALSE
;

2920  
TRUE
;

2921 
	}
}

2923 
uöt32_t


2924 
	$zdr_LAYOUTCOMMIT4ªs
 (
ZDR
 *
zdrs
, 
LAYOUTCOMMIT4ªs
 *
objp
)

2926 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
lo¸_°©us
))

2927  
FALSE
;

2928 
objp
->
lo¸_°©us
) {

2929 
NFS4_OK
:

2930 i‡(!
	`zdr_LAYOUTCOMMIT4ªsok
 (
zdrs
, &
objp
->
LAYOUTCOMMIT4ªs_u
.
lo¸_ªsok4
))

2931  
FALSE
;

2936  
TRUE
;

2937 
	}
}

2939 
uöt32_t


2940 
	$zdr_LAYOUTGET4¨gs
 (
ZDR
 *
zdrs
, 
LAYOUTGET4¨gs
 *
objp
)

2942 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
loga_sig«l_œyout_avaû
))

2943  
FALSE
;

2944 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
loga_œyout_ty≥
))

2945  
FALSE
;

2946 i‡(!
	`zdr_œyoutiomode4
 (
zdrs
, &
objp
->
loga_iomode
))

2947  
FALSE
;

2948 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
loga_off£t
))

2949  
FALSE
;

2950 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
loga_Àngth
))

2951  
FALSE
;

2952 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
loga_möÀngth
))

2953  
FALSE
;

2954 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
loga_°©eid
))

2955  
FALSE
;

2956 i‡(!
	`zdr_cou¡4
 (
zdrs
, &
objp
->
loga_maxcou¡
))

2957  
FALSE
;

2958  
TRUE
;

2959 
	}
}

2961 
uöt32_t


2962 
	$zdr_LAYOUTGET4ªsok
 (
ZDR
 *
zdrs
, 
LAYOUTGET4ªsok
 *
objp
)

2964 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
logr_ªtu∫_⁄_˛o£
))

2965  
FALSE
;

2966 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
logr_°©eid
))

2967  
FALSE
;

2968 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
logr_œyout
.
logr_œyout_vÆ
, (
u_öt
 *Ë&objp->logr_œyout.
logr_œyout_Àn
, ~0,

2969  (
œyout4
), (
zdΩroc_t
Ë
zdr_œyout4
))

2970  
FALSE
;

2971  
TRUE
;

2972 
	}
}

2974 
uöt32_t


2975 
	$zdr_LAYOUTGET4ªs
 (
ZDR
 *
zdrs
, 
LAYOUTGET4ªs
 *
objp
)

2977 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
logr_°©us
))

2978  
FALSE
;

2979 
objp
->
logr_°©us
) {

2980 
NFS4_OK
:

2981 i‡(!
	`zdr_LAYOUTGET4ªsok
 (
zdrs
, &
objp
->
LAYOUTGET4ªs_u
.
logr_ªsok4
))

2982  
FALSE
;

2984 
NFS4ERR_LAYOUTTRYLATER
:

2985 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
LAYOUTGET4ªs_u
.
logr_wûl_sig«l_œyout_avaû
))

2986  
FALSE
;

2991  
TRUE
;

2992 
	}
}

2994 
uöt32_t


2995 
	$zdr_œyouåëu∫_ty≥4
 (
ZDR
 *
zdrs
, 
œyouåëu∫_ty≥4
 *
objp
)

2997 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

2998  
FALSE
;

2999  
TRUE
;

3000 
	}
}

3002 
uöt32_t


3003 
	$zdr_œyouåëu∫_fûe4
 (
ZDR
 *
zdrs
, 
œyouåëu∫_fûe4
 *
objp
)

3005 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
Ãf_off£t
))

3006  
FALSE
;

3007 i‡(!
	`zdr_Àngth4
 (
zdrs
, &
objp
->
Ãf_Àngth
))

3008  
FALSE
;

3009 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
Ãf_°©eid
))

3010  
FALSE
;

3011 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
Ãf_body
.
Ãf_body_vÆ
, (
u_öt
 *Ë&objp->Ãf_body.
Ãf_body_Àn
, ~0))

3012  
FALSE
;

3013  
TRUE
;

3014 
	}
}

3016 
uöt32_t


3017 
	$zdr_œyouåëu∫4
 (
ZDR
 *
zdrs
, 
œyouåëu∫4
 *
objp
)

3019 i‡(!
	`zdr_œyouåëu∫_ty≥4
 (
zdrs
, &
objp
->
Ã_ªtu∫ty≥
))

3020  
FALSE
;

3021 
objp
->
Ã_ªtu∫ty≥
) {

3022 
LAYOUTRETURN4_FILE
:

3023 i‡(!
	`zdr_œyouåëu∫_fûe4
 (
zdrs
, &
objp
->
œyouåëu∫4_u
.
Ã_œyout
))

3024  
FALSE
;

3029  
TRUE
;

3030 
	}
}

3032 
uöt32_t


3033 
	$zdr_LAYOUTRETURN4¨gs
 (
ZDR
 *
zdrs
, 
LAYOUTRETURN4¨gs
 *
objp
)

3035 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
l‹a_ª˛aim
))

3036  
FALSE
;

3037 i‡(!
	`zdr_œyouây≥4
 (
zdrs
, &
objp
->
l‹a_œyout_ty≥
))

3038  
FALSE
;

3039 i‡(!
	`zdr_œyoutiomode4
 (
zdrs
, &
objp
->
l‹a_iomode
))

3040  
FALSE
;

3041 i‡(!
	`zdr_œyouåëu∫4
 (
zdrs
, &
objp
->
l‹a_œyouåëu∫
))

3042  
FALSE
;

3043  
TRUE
;

3044 
	}
}

3046 
uöt32_t


3047 
	$zdr_œyouåëu∫_°©eid
 (
ZDR
 *
zdrs
, 
œyouåëu∫_°©eid
 *
objp
)

3049 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
Ãs_¥e£¡
))

3050  
FALSE
;

3051 
objp
->
Ãs_¥e£¡
) {

3052 
TRUE
:

3053 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
œyouåëu∫_°©eid_u
.
Ãs_°©eid
))

3054  
FALSE
;

3056 
FALSE
:

3059  
FALSE
;

3061  
TRUE
;

3062 
	}
}

3064 
uöt32_t


3065 
	$zdr_LAYOUTRETURN4ªs
 (
ZDR
 *
zdrs
, 
LAYOUTRETURN4ªs
 *
objp
)

3067 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
l‹r_°©us
))

3068  
FALSE
;

3069 
objp
->
l‹r_°©us
) {

3070 
NFS4_OK
:

3071 i‡(!
	`zdr_œyouåëu∫_°©eid
 (
zdrs
, &
objp
->
LAYOUTRETURN4ªs_u
.
l‹r_°©eid
))

3072  
FALSE
;

3077  
TRUE
;

3078 
	}
}

3080 
uöt32_t


3081 
	$zdr_£cöfo_°yÀ4
 (
ZDR
 *
zdrs
, 
£cöfo_°yÀ4
 *
objp
)

3083 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

3084  
FALSE
;

3085  
TRUE
;

3086 
	}
}

3088 
uöt32_t


3089 
	$zdr_SECINFO_NO_NAME4¨gs
 (
ZDR
 *
zdrs
, 
SECINFO_NO_NAME4¨gs
 *
objp
)

3091 i‡(!
	`zdr_£cöfo_°yÀ4
 (
zdrs
, 
objp
))

3092  
FALSE
;

3093  
TRUE
;

3094 
	}
}

3096 
uöt32_t


3097 
	$zdr_SECINFO_NO_NAME4ªs
 (
ZDR
 *
zdrs
, 
SECINFO_NO_NAME4ªs
 *
objp
)

3099 i‡(!
	`zdr_SECINFO4ªs
 (
zdrs
, 
objp
))

3100  
FALSE
;

3101  
TRUE
;

3102 
	}
}

3104 
uöt32_t


3105 
	$zdr_SEQUENCE4¨gs
 (
ZDR
 *
zdrs
, 
SEQUENCE4¨gs
 *
objp
)

3107 i‡(!
	`zdr_£ssi⁄id4
 (
zdrs
, 
objp
->
ß_£ssi⁄id
))

3108  
FALSE
;

3109 i‡(!
	`zdr_£quí˚id4
 (
zdrs
, &
objp
->
ß_£quí˚id
))

3110  
FALSE
;

3111 i‡(!
	`zdr_¶Ÿid4
 (
zdrs
, &
objp
->
ß_¶Ÿid
))

3112  
FALSE
;

3113 i‡(!
	`zdr_¶Ÿid4
 (
zdrs
, &
objp
->
ß_highe°_¶Ÿid
))

3114  
FALSE
;

3115 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ß_ˇchëhis
))

3116  
FALSE
;

3117  
TRUE
;

3118 
	}
}

3120 
uöt32_t


3121 
	$zdr_SEQUENCE4ªsok
 (
ZDR
 *
zdrs
, 
SEQUENCE4ªsok
 *
objp
)

3123 i‡(!
	`zdr_£ssi⁄id4
 (
zdrs
, 
objp
->
§_£ssi⁄id
))

3124  
FALSE
;

3125 i‡(!
	`zdr_£quí˚id4
 (
zdrs
, &
objp
->
§_£quí˚id
))

3126  
FALSE
;

3127 i‡(!
	`zdr_¶Ÿid4
 (
zdrs
, &
objp
->
§_¶Ÿid
))

3128  
FALSE
;

3129 i‡(!
	`zdr_¶Ÿid4
 (
zdrs
, &
objp
->
§_highe°_¶Ÿid
))

3130  
FALSE
;

3131 i‡(!
	`zdr_¶Ÿid4
 (
zdrs
, &
objp
->
§_èrgë_highe°_¶Ÿid
))

3132  
FALSE
;

3133 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
§_°©us_Êags
))

3134  
FALSE
;

3135  
TRUE
;

3136 
	}
}

3138 
uöt32_t


3139 
	$zdr_SEQUENCE4ªs
 (
ZDR
 *
zdrs
, 
SEQUENCE4ªs
 *
objp
)

3141 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
§_°©us
))

3142  
FALSE
;

3143 
objp
->
§_°©us
) {

3144 
NFS4_OK
:

3145 i‡(!
	`zdr_SEQUENCE4ªsok
 (
zdrs
, &
objp
->
SEQUENCE4ªs_u
.
§_ªsok4
))

3146  
FALSE
;

3151  
TRUE
;

3152 
	}
}

3154 
uöt32_t


3155 
	$zdr_sß_dige°_öput4
 (
ZDR
 *
zdrs
, 
sß_dige°_öput4
 *
objp
)

3157 i‡(!
	`zdr_SEQUENCE4¨gs
 (
zdrs
, &
objp
->
sdi_£q¨gs
))

3158  
FALSE
;

3159  
TRUE
;

3160 
	}
}

3162 
uöt32_t


3163 
	$zdr_SET_SSV4¨gs
 (
ZDR
 *
zdrs
, 
SET_SSV4¨gs
 *
objp
)

3165 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
sß_ssv
.
sß_ssv_vÆ
, (
u_öt
 *Ë&objp->sß_ssv.
sß_ssv_Àn
, ~0))

3166  
FALSE
;

3167 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
sß_dige°
.
sß_dige°_vÆ
, (
u_öt
 *Ë&objp->sß_dige°.
sß_dige°_Àn
, ~0))

3168  
FALSE
;

3169  
TRUE
;

3170 
	}
}

3172 
uöt32_t


3173 
	$zdr_s§_dige°_öput4
 (
ZDR
 *
zdrs
, 
s§_dige°_öput4
 *
objp
)

3175 i‡(!
	`zdr_SEQUENCE4ªs
 (
zdrs
, &
objp
->
sdi_£qªs
))

3176  
FALSE
;

3177  
TRUE
;

3178 
	}
}

3180 
uöt32_t


3181 
	$zdr_SET_SSV4ªsok
 (
ZDR
 *
zdrs
, 
SET_SSV4ªsok
 *
objp
)

3183 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
s§_dige°
.
s§_dige°_vÆ
, (
u_öt
 *Ë&objp->s§_dige°.
s§_dige°_Àn
, ~0))

3184  
FALSE
;

3185  
TRUE
;

3186 
	}
}

3188 
uöt32_t


3189 
	$zdr_SET_SSV4ªs
 (
ZDR
 *
zdrs
, 
SET_SSV4ªs
 *
objp
)

3191 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
s§_°©us
))

3192  
FALSE
;

3193 
objp
->
s§_°©us
) {

3194 
NFS4_OK
:

3195 i‡(!
	`zdr_SET_SSV4ªsok
 (
zdrs
, &
objp
->
SET_SSV4ªs_u
.
s§_ªsok4
))

3196  
FALSE
;

3201  
TRUE
;

3202 
	}
}

3204 
uöt32_t


3205 
	$zdr_TEST_STATEID4¨gs
 (
ZDR
 *
zdrs
, 
TEST_STATEID4¨gs
 *
objp
)

3207 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
ts_°©eids
.
ts_°©eids_vÆ
, (
u_öt
 *Ë&objp->ts_°©eids.
ts_°©eids_Àn
, ~0,

3208  (
°©eid4
), (
zdΩroc_t
Ë
zdr_°©eid4
))

3209  
FALSE
;

3210  
TRUE
;

3211 
	}
}

3213 
uöt32_t


3214 
	$zdr_TEST_STATEID4ªsok
 (
ZDR
 *
zdrs
, 
TEST_STATEID4ªsok
 *
objp
)

3216 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
t§_°©us_codes
.
t§_°©us_codes_vÆ
, (
u_öt
 *Ë&objp->t§_°©us_codes.
t§_°©us_codes_Àn
, ~0,

3217  (
nfs°©4
), (
zdΩroc_t
Ë
zdr_nfs°©4
))

3218  
FALSE
;

3219  
TRUE
;

3220 
	}
}

3222 
uöt32_t


3223 
	$zdr_TEST_STATEID4ªs
 (
ZDR
 *
zdrs
, 
TEST_STATEID4ªs
 *
objp
)

3225 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
t§_°©us
))

3226  
FALSE
;

3227 
objp
->
t§_°©us
) {

3228 
NFS4_OK
:

3229 i‡(!
	`zdr_TEST_STATEID4ªsok
 (
zdrs
, &
objp
->
TEST_STATEID4ªs_u
.
t§_ªsok4
))

3230  
FALSE
;

3235  
TRUE
;

3236 
	}
}

3238 
uöt32_t


3239 
	$zdr_dñeg_˛aim4
 (
ZDR
 *
zdrs
, 
dñeg_˛aim4
 *
objp
)

3241 i‡(!
	`zdr_›í_˛aim_ty≥4
 (
zdrs
, &
objp
->
dc_˛aim
))

3242  
FALSE
;

3243 
objp
->
dc_˛aim
) {

3244 
CLAIM_FH
:

3246 
CLAIM_DELEG_PREV_FH
:

3248 
CLAIM_PREVIOUS
:

3249 i‡(!
	`zdr_›í_dñeg©i⁄_ty≥4
 (
zdrs
, &
objp
->
dñeg_˛aim4_u
.
dc_dñeg©e_ty≥
))

3250  
FALSE
;

3253  
FALSE
;

3255  
TRUE
;

3256 
	}
}

3258 
uöt32_t


3259 
	$zdr_WANT_DELEGATION4¨gs
 (
ZDR
 *
zdrs
, 
WANT_DELEGATION4¨gs
 *
objp
)

3261 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
wda_w™t
))

3262  
FALSE
;

3263 i‡(!
	`zdr_dñeg_˛aim4
 (
zdrs
, &
objp
->
wda_˛aim
))

3264  
FALSE
;

3265  
TRUE
;

3266 
	}
}

3268 
uöt32_t


3269 
	$zdr_WANT_DELEGATION4ªs
 (
ZDR
 *
zdrs
, 
WANT_DELEGATION4ªs
 *
objp
)

3271 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
wdr_°©us
))

3272  
FALSE
;

3273 
objp
->
wdr_°©us
) {

3274 
NFS4_OK
:

3275 i‡(!
	`zdr_›í_dñeg©i⁄4
 (
zdrs
, &
objp
->
WANT_DELEGATION4ªs_u
.
wdr_ªsok4
))

3276  
FALSE
;

3281  
TRUE
;

3282 
	}
}

3284 
uöt32_t


3285 
	$zdr_DESTROY_CLIENTID4¨gs
 (
ZDR
 *
zdrs
, 
DESTROY_CLIENTID4¨gs
 *
objp
)

3287 i‡(!
	`zdr_˛õ¡id4
 (
zdrs
, &
objp
->
dˇ_˛õ¡id
))

3288  
FALSE
;

3289  
TRUE
;

3290 
	}
}

3292 
uöt32_t


3293 
	$zdr_DESTROY_CLIENTID4ªs
 (
ZDR
 *
zdrs
, 
DESTROY_CLIENTID4ªs
 *
objp
)

3295 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
d¸_°©us
))

3296  
FALSE
;

3297  
TRUE
;

3298 
	}
}

3300 
uöt32_t


3301 
	$zdr_RECLAIM_COMPLETE4¨gs
 (
ZDR
 *
zdrs
, 
RECLAIM_COMPLETE4¨gs
 *
objp
)

3303 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
rˇ_⁄e_fs
))

3304  
FALSE
;

3305  
TRUE
;

3306 
	}
}

3308 
uöt32_t


3309 
	$zdr_RECLAIM_COMPLETE4ªs
 (
ZDR
 *
zdrs
, 
RECLAIM_COMPLETE4ªs
 *
objp
)

3311 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
r¸_°©us
))

3312  
FALSE
;

3313  
TRUE
;

3314 
	}
}

3316 
uöt32_t


3317 
	$zdr_ILLEGAL4ªs
 (
ZDR
 *
zdrs
, 
ILLEGAL4ªs
 *
objp
)

3319 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

3320  
FALSE
;

3321  
TRUE
;

3322 
	}
}

3324 
uöt32_t


3325 
	$zdr_nfs_›num4
 (
ZDR
 *
zdrs
, 
nfs_›num4
 *
objp
)

3327 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

3328  
FALSE
;

3329  
TRUE
;

3330 
	}
}

3332 
uöt32_t


3333 
	$zdr_nfs_¨g›4
 (
ZDR
 *
zdrs
, 
nfs_¨g›4
 *
objp
)

3335 i‡(!
	`zdr_nfs_›num4
 (
zdrs
, &
objp
->
¨g›
))

3336  
FALSE
;

3337 
objp
->
¨g›
) {

3338 
OP_ACCESS
:

3339 i‡(!
	`zdr_ACCESS4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ac˚ss
))

3340  
FALSE
;

3342 
OP_CLOSE
:

3343 i‡(!
	`zdr_CLOSE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›˛o£
))

3344  
FALSE
;

3346 
OP_COMMIT
:

3347 i‡(!
	`zdr_COMMIT4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›commô
))

3348  
FALSE
;

3350 
OP_CREATE
:

3351 i‡(!
	`zdr_CREATE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›¸óã
))

3352  
FALSE
;

3354 
OP_DELEGPURGE
:

3355 i‡(!
	`zdr_DELEGPURGE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›dñegpurge
))

3356  
FALSE
;

3358 
OP_DELEGRETURN
:

3359 i‡(!
	`zdr_DELEGRETURN4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›dñegªtu∫
))

3360  
FALSE
;

3362 
OP_GETATTR
:

3363 i‡(!
	`zdr_GETATTR4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›gë©å
))

3364  
FALSE
;

3366 
OP_GETFH
:

3368 
OP_LINK
:

3369 i‡(!
	`zdr_LINK4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›lök
))

3370  
FALSE
;

3372 
OP_LOCK
:

3373 i‡(!
	`zdr_LOCK4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›lock
))

3374  
FALSE
;

3376 
OP_LOCKT
:

3377 i‡(!
	`zdr_LOCKT4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›lockt
))

3378  
FALSE
;

3380 
OP_LOCKU
:

3381 i‡(!
	`zdr_LOCKU4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›locku
))

3382  
FALSE
;

3384 
OP_LOOKUP
:

3385 i‡(!
	`zdr_LOOKUP4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›lookup
))

3386  
FALSE
;

3388 
OP_LOOKUPP
:

3390 
OP_NVERIFY
:

3391 i‡(!
	`zdr_NVERIFY4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›nvîify
))

3392  
FALSE
;

3394 
OP_OPEN
:

3395 i‡(!
	`zdr_OPEN4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
››í
))

3396  
FALSE
;

3398 
OP_OPENATTR
:

3399 i‡(!
	`zdr_OPENATTR4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
››í©å
))

3400  
FALSE
;

3402 
OP_OPEN_CONFIRM
:

3403 i‡(!
	`zdr_OPEN_CONFIRM4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
››í_c⁄fúm
))

3404  
FALSE
;

3406 
OP_OPEN_DOWNGRADE
:

3407 i‡(!
	`zdr_OPEN_DOWNGRADE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
››í_downgøde
))

3408  
FALSE
;

3410 
OP_PUTFH
:

3411 i‡(!
	`zdr_PUTFH4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›putfh
))

3412  
FALSE
;

3414 
OP_PUTPUBFH
:

3416 
OP_PUTROOTFH
:

3418 
OP_READ
:

3419 i‡(!
	`zdr_READ4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ªad
))

3420  
FALSE
;

3422 
OP_READDIR
:

3423 i‡(!
	`zdr_READDIR4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ªaddú
))

3424  
FALSE
;

3426 
OP_READLINK
:

3428 
OP_REMOVE
:

3429 i‡(!
	`zdr_REMOVE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ªmove
))

3430  
FALSE
;

3432 
OP_RENAME
:

3433 i‡(!
	`zdr_RENAME4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ª«me
))

3434  
FALSE
;

3436 
OP_RENEW
:

3437 i‡(!
	`zdr_RENEW4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ª√w
))

3438  
FALSE
;

3440 
OP_RESTOREFH
:

3442 
OP_SAVEFH
:

3444 
OP_SECINFO
:

3445 i‡(!
	`zdr_SECINFO4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£cöfo
))

3446  
FALSE
;

3448 
OP_SETATTR
:

3449 i‡(!
	`zdr_SETATTR4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£èâr
))

3450  
FALSE
;

3452 
OP_SETCLIENTID
:

3453 i‡(!
	`zdr_SETCLIENTID4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£t˛õ¡id
))

3454  
FALSE
;

3456 
OP_SETCLIENTID_CONFIRM
:

3457 i‡(!
	`zdr_SETCLIENTID_CONFIRM4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£t˛õ¡id_c⁄fúm
))

3458  
FALSE
;

3460 
OP_VERIFY
:

3461 i‡(!
	`zdr_VERIFY4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›vîify
))

3462  
FALSE
;

3464 
OP_WRITE
:

3465 i‡(!
	`zdr_WRITE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›wrôe
))

3466  
FALSE
;

3468 
OP_RELEASE_LOCKOWNER
:

3469 i‡(!
	`zdr_RELEASE_LOCKOWNER4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ªÀa£_lockow√r
))

3470  
FALSE
;

3472 
OP_BIND_CONN_TO_SESSION
:

3473 i‡(!
	`zdr_BIND_CONN_TO_SESSION4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›bödc⁄¡o£ssi⁄
))

3474  
FALSE
;

3476 
OP_EXCHANGE_ID
:

3477 i‡(!
	`zdr_EXCHANGE_ID4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›exch™geid
))

3478  
FALSE
;

3480 
OP_CREATE_SESSION
:

3481 i‡(!
	`zdr_CREATE_SESSION4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›¸óã£ssi⁄
))

3482  
FALSE
;

3484 
OP_DESTROY_SESSION
:

3485 i‡(!
	`zdr_DESTROY_SESSION4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›de°roy£ssi⁄
))

3486  
FALSE
;

3488 
OP_FREE_STATEID
:

3489 i‡(!
	`zdr_FREE_STATEID4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›‰ì°©eid
))

3490  
FALSE
;

3492 
OP_GET_DIR_DELEGATION
:

3493 i‡(!
	`zdr_GET_DIR_DELEGATION4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›gëdúdñeg©i⁄
))

3494  
FALSE
;

3496 
OP_GETDEVICEINFO
:

3497 i‡(!
	`zdr_GETDEVICEINFO4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›gëdevi˚öfo
))

3498  
FALSE
;

3500 
OP_GETDEVICELIST
:

3501 i‡(!
	`zdr_GETDEVICELIST4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›gëdevi˚li°
))

3502  
FALSE
;

3504 
OP_LAYOUTCOMMIT
:

3505 i‡(!
	`zdr_LAYOUTCOMMIT4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›œyoutcommô
))

3506  
FALSE
;

3508 
OP_LAYOUTGET
:

3509 i‡(!
	`zdr_LAYOUTGET4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›œyoutgë
))

3510  
FALSE
;

3512 
OP_LAYOUTRETURN
:

3513 i‡(!
	`zdr_LAYOUTRETURN4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›œyouåëu∫
))

3514  
FALSE
;

3516 
OP_SECINFO_NO_NAME
:

3517 i‡(!
	`zdr_SECINFO_NO_NAME4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£cöf⁄⁄ame
))

3518  
FALSE
;

3520 
OP_SEQUENCE
:

3521 i‡(!
	`zdr_SEQUENCE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£quí˚
))

3522  
FALSE
;

3524 
OP_SET_SSV
:

3525 i‡(!
	`zdr_SET_SSV4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›£tssv
))

3526  
FALSE
;

3528 
OP_TEST_STATEID
:

3529 i‡(!
	`zdr_TEST_STATEID4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ã°°©eid
))

3530  
FALSE
;

3532 
OP_WANT_DELEGATION
:

3533 i‡(!
	`zdr_WANT_DELEGATION4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›w™tdñeg©i⁄
))

3534  
FALSE
;

3536 
OP_DESTROY_CLIENTID
:

3537 i‡(!
	`zdr_DESTROY_CLIENTID4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›de°roy˛õ¡id
))

3538  
FALSE
;

3540 
OP_RECLAIM_COMPLETE
:

3541 i‡(!
	`zdr_RECLAIM_COMPLETE4¨gs
 (
zdrs
, &
objp
->
nfs_¨g›4_u
.
›ª˛aimcom∂ëe
))

3542  
FALSE
;

3544 
OP_ILLEGAL
:

3547  
FALSE
;

3549  
TRUE
;

3550 
	}
}

3552 
uöt32_t


3553 
	$zdr_nfs_ªs›4
 (
ZDR
 *
zdrs
, 
nfs_ªs›4
 *
objp
)

3555 i‡(!
	`zdr_nfs_›num4
 (
zdrs
, &
objp
->
ªs›
))

3556  
FALSE
;

3557 
objp
->
ªs›
) {

3558 
OP_ACCESS
:

3559 i‡(!
	`zdr_ACCESS4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ac˚ss
))

3560  
FALSE
;

3562 
OP_CLOSE
:

3563 i‡(!
	`zdr_CLOSE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›˛o£
))

3564  
FALSE
;

3566 
OP_COMMIT
:

3567 i‡(!
	`zdr_COMMIT4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›commô
))

3568  
FALSE
;

3570 
OP_CREATE
:

3571 i‡(!
	`zdr_CREATE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›¸óã
))

3572  
FALSE
;

3574 
OP_DELEGPURGE
:

3575 i‡(!
	`zdr_DELEGPURGE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›dñegpurge
))

3576  
FALSE
;

3578 
OP_DELEGRETURN
:

3579 i‡(!
	`zdr_DELEGRETURN4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›dñegªtu∫
))

3580  
FALSE
;

3582 
OP_GETATTR
:

3583 i‡(!
	`zdr_GETATTR4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›gë©å
))

3584  
FALSE
;

3586 
OP_GETFH
:

3587 i‡(!
	`zdr_GETFH4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›gëfh
))

3588  
FALSE
;

3590 
OP_LINK
:

3591 i‡(!
	`zdr_LINK4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›lök
))

3592  
FALSE
;

3594 
OP_LOCK
:

3595 i‡(!
	`zdr_LOCK4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›lock
))

3596  
FALSE
;

3598 
OP_LOCKT
:

3599 i‡(!
	`zdr_LOCKT4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›lockt
))

3600  
FALSE
;

3602 
OP_LOCKU
:

3603 i‡(!
	`zdr_LOCKU4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›locku
))

3604  
FALSE
;

3606 
OP_LOOKUP
:

3607 i‡(!
	`zdr_LOOKUP4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›lookup
))

3608  
FALSE
;

3610 
OP_LOOKUPP
:

3611 i‡(!
	`zdr_LOOKUPP4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›lookuµ
))

3612  
FALSE
;

3614 
OP_NVERIFY
:

3615 i‡(!
	`zdr_NVERIFY4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›nvîify
))

3616  
FALSE
;

3618 
OP_OPEN
:

3619 i‡(!
	`zdr_OPEN4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
››í
))

3620  
FALSE
;

3622 
OP_OPENATTR
:

3623 i‡(!
	`zdr_OPENATTR4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
››í©å
))

3624  
FALSE
;

3626 
OP_OPEN_CONFIRM
:

3627 i‡(!
	`zdr_OPEN_CONFIRM4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
››í_c⁄fúm
))

3628  
FALSE
;

3630 
OP_OPEN_DOWNGRADE
:

3631 i‡(!
	`zdr_OPEN_DOWNGRADE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
››í_downgøde
))

3632  
FALSE
;

3634 
OP_PUTFH
:

3635 i‡(!
	`zdr_PUTFH4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›putfh
))

3636  
FALSE
;

3638 
OP_PUTPUBFH
:

3639 i‡(!
	`zdr_PUTPUBFH4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›puçubfh
))

3640  
FALSE
;

3642 
OP_PUTROOTFH
:

3643 i‡(!
	`zdr_PUTROOTFH4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›puåoŸfh
))

3644  
FALSE
;

3646 
OP_READ
:

3647 i‡(!
	`zdr_READ4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ªad
))

3648  
FALSE
;

3650 
OP_READDIR
:

3651 i‡(!
	`zdr_READDIR4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ªaddú
))

3652  
FALSE
;

3654 
OP_READLINK
:

3655 i‡(!
	`zdr_READLINK4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ªadlök
))

3656  
FALSE
;

3658 
OP_REMOVE
:

3659 i‡(!
	`zdr_REMOVE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ªmove
))

3660  
FALSE
;

3662 
OP_RENAME
:

3663 i‡(!
	`zdr_RENAME4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ª«me
))

3664  
FALSE
;

3666 
OP_RENEW
:

3667 i‡(!
	`zdr_RENEW4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ª√w
))

3668  
FALSE
;

3670 
OP_RESTOREFH
:

3671 i‡(!
	`zdr_RESTOREFH4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ª°‹efh
))

3672  
FALSE
;

3674 
OP_SAVEFH
:

3675 i‡(!
	`zdr_SAVEFH4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ßvefh
))

3676  
FALSE
;

3678 
OP_SECINFO
:

3679 i‡(!
	`zdr_SECINFO4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£cöfo
))

3680  
FALSE
;

3682 
OP_SETATTR
:

3683 i‡(!
	`zdr_SETATTR4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£èâr
))

3684  
FALSE
;

3686 
OP_SETCLIENTID
:

3687 i‡(!
	`zdr_SETCLIENTID4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£t˛õ¡id
))

3688  
FALSE
;

3690 
OP_SETCLIENTID_CONFIRM
:

3691 i‡(!
	`zdr_SETCLIENTID_CONFIRM4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£t˛õ¡id_c⁄fúm
))

3692  
FALSE
;

3694 
OP_VERIFY
:

3695 i‡(!
	`zdr_VERIFY4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›vîify
))

3696  
FALSE
;

3698 
OP_WRITE
:

3699 i‡(!
	`zdr_WRITE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›wrôe
))

3700  
FALSE
;

3702 
OP_RELEASE_LOCKOWNER
:

3703 i‡(!
	`zdr_RELEASE_LOCKOWNER4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ªÀa£_lockow√r
))

3704  
FALSE
;

3706 
OP_BIND_CONN_TO_SESSION
:

3707 i‡(!
	`zdr_BIND_CONN_TO_SESSION4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›bödc⁄¡o£ssi⁄
))

3708  
FALSE
;

3710 
OP_EXCHANGE_ID
:

3711 i‡(!
	`zdr_EXCHANGE_ID4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›exch™geid
))

3712  
FALSE
;

3714 
OP_CREATE_SESSION
:

3715 i‡(!
	`zdr_CREATE_SESSION4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›¸óã£ssi⁄
))

3716  
FALSE
;

3718 
OP_DESTROY_SESSION
:

3719 i‡(!
	`zdr_DESTROY_SESSION4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›de°roy£ssi⁄
))

3720  
FALSE
;

3722 
OP_FREE_STATEID
:

3723 i‡(!
	`zdr_FREE_STATEID4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›‰ì°©eid
))

3724  
FALSE
;

3726 
OP_GET_DIR_DELEGATION
:

3727 i‡(!
	`zdr_GET_DIR_DELEGATION4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›gëdúdñeg©i⁄
))

3728  
FALSE
;

3730 
OP_GETDEVICEINFO
:

3731 i‡(!
	`zdr_GETDEVICEINFO4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›gëdevi˚öfo
))

3732  
FALSE
;

3734 
OP_GETDEVICELIST
:

3735 i‡(!
	`zdr_GETDEVICELIST4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›gëdevi˚li°
))

3736  
FALSE
;

3738 
OP_LAYOUTCOMMIT
:

3739 i‡(!
	`zdr_LAYOUTCOMMIT4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›œyoutcommô
))

3740  
FALSE
;

3742 
OP_LAYOUTGET
:

3743 i‡(!
	`zdr_LAYOUTGET4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›œyoutgë
))

3744  
FALSE
;

3746 
OP_LAYOUTRETURN
:

3747 i‡(!
	`zdr_LAYOUTRETURN4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›œyouåëu∫
))

3748  
FALSE
;

3750 
OP_SECINFO_NO_NAME
:

3751 i‡(!
	`zdr_SECINFO_NO_NAME4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£cöf⁄⁄ame
))

3752  
FALSE
;

3754 
OP_SEQUENCE
:

3755 i‡(!
	`zdr_SEQUENCE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£quí˚
))

3756  
FALSE
;

3758 
OP_SET_SSV
:

3759 i‡(!
	`zdr_SET_SSV4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›£tssv
))

3760  
FALSE
;

3762 
OP_TEST_STATEID
:

3763 i‡(!
	`zdr_TEST_STATEID4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ã°°©eid
))

3764  
FALSE
;

3766 
OP_WANT_DELEGATION
:

3767 i‡(!
	`zdr_WANT_DELEGATION4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›w™tdñeg©i⁄
))

3768  
FALSE
;

3770 
OP_DESTROY_CLIENTID
:

3771 i‡(!
	`zdr_DESTROY_CLIENTID4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›de°roy˛õ¡id
))

3772  
FALSE
;

3774 
OP_RECLAIM_COMPLETE
:

3775 i‡(!
	`zdr_RECLAIM_COMPLETE4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ª˛aimcom∂ëe
))

3776  
FALSE
;

3778 
OP_ILLEGAL
:

3779 i‡(!
	`zdr_ILLEGAL4ªs
 (
zdrs
, &
objp
->
nfs_ªs›4_u
.
›ûÀgÆ
))

3780  
FALSE
;

3783  
FALSE
;

3785  
TRUE
;

3786 
	}
}

3788 
uöt32_t


3789 
	$zdr_COMPOUND4¨gs
 (
ZDR
 *
zdrs
, 
COMPOUND4¨gs
 *
objp
)

3791 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, &
objp
->
èg
))

3792  
FALSE
;

3793 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
mö‹vîsi⁄
))

3794  
FALSE
;

3795 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
¨g¨øy
.
¨g¨øy_vÆ
, (
u_öt
 *Ë&objp->¨g¨øy.
¨g¨øy_Àn
, ~0,

3796  (
nfs_¨g›4
), (
zdΩroc_t
Ë
zdr_nfs_¨g›4
))

3797  
FALSE
;

3798  
TRUE
;

3799 
	}
}

3801 
uöt32_t


3802 
	$zdr_COMPOUND4ªs
 (
ZDR
 *
zdrs
, 
COMPOUND4ªs
 *
objp
)

3804 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

3805  
FALSE
;

3806 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, &
objp
->
èg
))

3807  
FALSE
;

3808 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
ªßºay
.
ªßºay_vÆ
, (
u_öt
 *Ë&objp->ªßºay.
ªßºay_Àn
, ~0,

3809  (
nfs_ªs›4
), (
zdΩroc_t
Ë
zdr_nfs_ªs›4
))

3810  
FALSE
;

3811  
TRUE
;

3812 
	}
}

3814 
uöt32_t


3815 
	$zdr_CB_GETATTR4¨gs
 (
ZDR
 *
zdrs
, 
CB_GETATTR4¨gs
 *
objp
)

3817 i‡(!
	`zdr_nfs_fh4
 (
zdrs
, &
objp
->
fh
))

3818  
FALSE
;

3819 i‡(!
	`zdr_bôm≠4
 (
zdrs
, &
objp
->
©å_ªque°
))

3820  
FALSE
;

3821  
TRUE
;

3822 
	}
}

3824 
uöt32_t


3825 
	$zdr_CB_GETATTR4ªsok
 (
ZDR
 *
zdrs
, 
CB_GETATTR4ªsok
 *
objp
)

3827 i‡(!
	`zdr_Áâr4
 (
zdrs
, &
objp
->
obj_©åibuãs
))

3828  
FALSE
;

3829  
TRUE
;

3830 
	}
}

3832 
uöt32_t


3833 
	$zdr_CB_GETATTR4ªs
 (
ZDR
 *
zdrs
, 
CB_GETATTR4ªs
 *
objp
)

3835 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

3836  
FALSE
;

3837 
objp
->
°©us
) {

3838 
NFS4_OK
:

3839 i‡(!
	`zdr_CB_GETATTR4ªsok
 (
zdrs
, &
objp
->
CB_GETATTR4ªs_u
.
ªsok4
))

3840  
FALSE
;

3845  
TRUE
;

3846 
	}
}

3848 
uöt32_t


3849 
	$zdr_CB_RECALL4¨gs
 (
ZDR
 *
zdrs
, 
CB_RECALL4¨gs
 *
objp
)

3851 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

3852  
FALSE
;

3853 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
åunˇã
))

3854  
FALSE
;

3855 i‡(!
	`zdr_nfs_fh4
 (
zdrs
, &
objp
->
fh
))

3856  
FALSE
;

3857  
TRUE
;

3858 
	}
}

3860 
uöt32_t


3861 
	$zdr_CB_RECALL4ªs
 (
ZDR
 *
zdrs
, 
CB_RECALL4ªs
 *
objp
)

3863 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

3864  
FALSE
;

3865  
TRUE
;

3866 
	}
}

3868 
uöt32_t


3869 
	$zdr_CB_ILLEGAL4ªs
 (
ZDR
 *
zdrs
, 
CB_ILLEGAL4ªs
 *
objp
)

3871 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

3872  
FALSE
;

3873  
TRUE
;

3874 
	}
}

3876 
uöt32_t


3877 
	$zdr_nfs_cb_›num4
 (
ZDR
 *
zdrs
, 
nfs_cb_›num4
 *
objp
)

3879 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

3880  
FALSE
;

3881  
TRUE
;

3882 
	}
}

3884 
uöt32_t


3885 
	$zdr_nfs_cb_¨g›4
 (
ZDR
 *
zdrs
, 
nfs_cb_¨g›4
 *
objp
)

3887 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¨g›
))

3888  
FALSE
;

3889 
objp
->
¨g›
) {

3890 
OP_CB_GETATTR
:

3891 i‡(!
	`zdr_CB_GETATTR4¨gs
 (
zdrs
, &
objp
->
nfs_cb_¨g›4_u
.
›cbgë©å
))

3892  
FALSE
;

3894 
OP_CB_RECALL
:

3895 i‡(!
	`zdr_CB_RECALL4¨gs
 (
zdrs
, &
objp
->
nfs_cb_¨g›4_u
.
›cbªˇŒ
))

3896  
FALSE
;

3898 
OP_CB_ILLEGAL
:

3901  
FALSE
;

3903  
TRUE
;

3904 
	}
}

3906 
uöt32_t


3907 
	$zdr_nfs_cb_ªs›4
 (
ZDR
 *
zdrs
, 
nfs_cb_ªs›4
 *
objp
)

3909 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
ªs›
))

3910  
FALSE
;

3911 
objp
->
ªs›
) {

3912 
OP_CB_GETATTR
:

3913 i‡(!
	`zdr_CB_GETATTR4ªs
 (
zdrs
, &
objp
->
nfs_cb_ªs›4_u
.
›cbgë©å
))

3914  
FALSE
;

3916 
OP_CB_RECALL
:

3917 i‡(!
	`zdr_CB_RECALL4ªs
 (
zdrs
, &
objp
->
nfs_cb_ªs›4_u
.
›cbªˇŒ
))

3918  
FALSE
;

3920 
OP_CB_ILLEGAL
:

3921 i‡(!
	`zdr_CB_ILLEGAL4ªs
 (
zdrs
, &
objp
->
nfs_cb_ªs›4_u
.
›cbûÀgÆ
))

3922  
FALSE
;

3925  
FALSE
;

3927  
TRUE
;

3928 
	}
}

3930 
uöt32_t


3931 
	$zdr_CB_COMPOUND4¨gs
 (
ZDR
 *
zdrs
, 
CB_COMPOUND4¨gs
 *
objp
)

3933 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, &
objp
->
èg
))

3934  
FALSE
;

3935 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
mö‹vîsi⁄
))

3936  
FALSE
;

3937 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
ˇŒback_idít
))

3938  
FALSE
;

3939 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
¨g¨øy
.
¨g¨øy_vÆ
, (
u_öt
 *Ë&objp->¨g¨øy.
¨g¨øy_Àn
, ~0,

3940  (
nfs_cb_¨g›4
), (
zdΩroc_t
Ë
zdr_nfs_cb_¨g›4
))

3941  
FALSE
;

3942  
TRUE
;

3943 
	}
}

3945 
uöt32_t


3946 
	$zdr_CB_COMPOUND4ªs
 (
ZDR
 *
zdrs
, 
CB_COMPOUND4ªs
 *
objp
)

3948 i‡(!
	`zdr_nfs°©4
 (
zdrs
, &
objp
->
°©us
))

3949  
FALSE
;

3950 i‡(!
	`zdr_utf8°r_cs
 (
zdrs
, &
objp
->
èg
))

3951  
FALSE
;

3952 i‡(!
	`zdr_¨øy
 (
zdrs
, (**)&
objp
->
ªßºay
.
ªßºay_vÆ
, (
u_öt
 *Ë&objp->ªßºay.
ªßºay_Àn
, ~0,

3953  (
nfs_cb_ªs›4
), (
zdΩroc_t
Ë
zdr_nfs_cb_ªs›4
))

3954  
FALSE
;

3955  
TRUE
;

3956 
	}
}

3958 
uöt32_t


3959 
	$zdr_Ωc_gss_¥oc_t
 (
ZDR
 *
zdrs
, 
Ωc_gss_¥oc_t
 *
objp
)

3961 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

3962  
FALSE
;

3963  
TRUE
;

3964 
	}
}

3966 
uöt32_t


3967 
	$zdr_Ωc_gss_¸ed_vîs_1_t
 (
ZDR
 *
zdrs
, 
Ωc_gss_¸ed_vîs_1_t
 *
objp
)

3969 i‡(!
	`zdr_Ωc_gss_¥oc_t
 (
zdrs
, &
objp
->
gss_¥oc
))

3970  
FALSE
;

3971 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
£q_num
))

3972  
FALSE
;

3973 i‡(!
	`zdr_Ωc_gss_svc_t
 (
zdrs
, &
objp
->
£rvi˚
))

3974  
FALSE
;

3975 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
h™dÀ
.
h™dÀ_vÆ
, (
u_öt
 *Ë&objp->h™dÀ.
h™dÀ_Àn
, ~0))

3976  
FALSE
;

3977  
TRUE
;

3978 
	}
}

3980 
uöt32_t


3981 
	$zdr_Ωc_gss_¸ed_t
 (
ZDR
 *
zdrs
, 
Ωc_gss_¸ed_t
 *
objp
)

3983 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

3984  
FALSE
;

3985 
objp
->
vîs
) {

3986 
RPCSEC_GSS_VERS_1
:

3987 i‡(!
	`zdr_Ωc_gss_¸ed_vîs_1_t
 (
zdrs
, &
objp
->
Ωc_gss_¸ed_t_u
.
Ωc_gss_¸ed_vîs_1_t
))

3988  
FALSE
;

3991  
FALSE
;

3993  
TRUE
;

3994 
	}
}

3996 
uöt32_t


3997 
	$zdr_Ωc_gss_öô_¨g
 (
ZDR
 *
zdrs
, 
Ωc_gss_öô_¨g
 *
objp
)

3999 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
gss_tokí
.
gss_tokí_vÆ
, (
u_öt
 *Ë&objp->gss_tokí.
gss_tokí_Àn
, ~0))

4000  
FALSE
;

4001  
TRUE
;

4002 
	}
}

4004 
uöt32_t


4005 
	$zdr_Ωc_gss_öô_ªs
 (
ZDR
 *
zdrs
, 
Ωc_gss_öô_ªs
 *
objp
)

4007 
öt32_t
 *
buf
;

4009 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

4010 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
h™dÀ
.
h™dÀ_vÆ
, (
u_öt
 *Ë&objp->h™dÀ.
h™dÀ_Àn
, ~0))

4011  
FALSE
;

4012 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

4013 i‡(
buf
 =
NULL
) {

4014 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gss_maj‹
))

4015  
FALSE
;

4016 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gss_mö‹
))

4017  
FALSE
;

4018 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
£q_wödow
))

4019  
FALSE
;

4022 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
gss_maj‹
);

4023 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
gss_mö‹
);

4024 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
£q_wödow
);

4026 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
gss_tokí
.
gss_tokí_vÆ
, (
u_öt
 *Ë&objp->gss_tokí.
gss_tokí_Àn
, ~0))

4027  
FALSE
;

4028  
TRUE
;

4029 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

4030 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
h™dÀ
.
h™dÀ_vÆ
, (
u_öt
 *Ë&objp->h™dÀ.
h™dÀ_Àn
, ~0))

4031  
FALSE
;

4032 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

4033 i‡(
buf
 =
NULL
) {

4034 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gss_maj‹
))

4035  
FALSE
;

4036 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gss_mö‹
))

4037  
FALSE
;

4038 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
£q_wödow
))

4039  
FALSE
;

4042 
objp
->
gss_maj‹
 = 
	`IZDR_GET_U_LONG
(
buf
);

4043 
objp
->
gss_mö‹
 = 
	`IZDR_GET_U_LONG
(
buf
);

4044 
objp
->
£q_wödow
 = 
	`IZDR_GET_U_LONG
(
buf
);

4046 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
gss_tokí
.
gss_tokí_vÆ
, (
u_öt
 *Ë&objp->gss_tokí.
gss_tokí_Àn
, ~0))

4047  
FALSE
;

4048  
TRUE
;

4051 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
h™dÀ
.
h™dÀ_vÆ
, (
u_öt
 *Ë&objp->h™dÀ.
h™dÀ_Àn
, ~0))

4052  
FALSE
;

4053 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gss_maj‹
))

4054  
FALSE
;

4055 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
gss_mö‹
))

4056  
FALSE
;

4057 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
£q_wödow
))

4058  
FALSE
;

4059 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
gss_tokí
.
gss_tokí_vÆ
, (
u_öt
 *Ë&objp->gss_tokí.
gss_tokí_Àn
, ~0))

4060  
FALSE
;

4061  
TRUE
;

4062 
	}
}

4064 
uöt32_t


4065 
	$zdr_Ωc_gss_öãg_d©a
 (
ZDR
 *
zdrs
, 
Ωc_gss_öãg_d©a
 *
objp
)

4067 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©abody_öãg
.
d©abody_öãg_vÆ
, (
u_öt
 *Ë&objp->d©abody_öãg.
d©abody_öãg_Àn
, ~0))

4068  
FALSE
;

4069 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
checksum
.
checksum_vÆ
, (
u_öt
 *Ë&objp->checksum.
checksum_Àn
, ~0))

4070  
FALSE
;

4071  
TRUE
;

4072 
	}
}

4073 
uöt32_t


4074 
	$zdr_READ4ªsok
 (
ZDR
 *
zdrs
, 
READ4ªsok
 *
objp
)

4076 
uöt32_t
 
pos
;

4078 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
eof
))

4079  
FALSE
;

4080 
pos
 = 
	`zdr_gëpos
(
zdrs
);

4081 i‡(!
	`zdr_uöt32_t
 (
zdrs
, &
objp
->
d©a
.
d©a_Àn
))

4082  
FALSE
;

4083 
	`zdr_£ços
(
zdrs
, 
pos
);

4085  
TRUE
;

4086 
	}
}

4088 
uöt32_t


4089 
	$zdr_WRITE4¨gs
 (
ZDR
 *
zdrs
, 
WRITE4¨gs
 *
objp
)

4091 i‡(!
	`zdr_°©eid4
 (
zdrs
, &
objp
->
°©eid
))

4092  
FALSE
;

4093 i‡(!
	`zdr_off£t4
 (
zdrs
, &
objp
->
off£t
))

4094  
FALSE
;

4095 i‡(!
	`zdr_°abÀ_how4
 (
zdrs
, &
objp
->
°abÀ
))

4096  
FALSE
;

4097  
TRUE
;

4098 
	}
}

	@nfs4/libnfs-raw-nfs4.h

22 #i‚de‡
_NFS4_H_RPCGEN


23 
	#_NFS4_H_RPCGEN


	)

25 
	~<nfsc/libnfs-zdr.h
>

28 #ifde‡
__˝lu•lus


32 
	#NFS4_FHSIZE
 128

	)

33 
	#NFS4_VERIFIER_SIZE
 8

	)

34 
	#NFS4_OPAQUE_LIMIT
 1024

	)

35 
	#NFS4_SESSIONID_SIZE
 16

	)

37 
	enfs_·y≥4
 {

38 
NF4REG
 = 1,

39 
NF4DIR
 = 2,

40 
NF4BLK
 = 3,

41 
NF4CHR
 = 4,

42 
NF4LNK
 = 5,

43 
NF4SOCK
 = 6,

44 
NF4FIFO
 = 7,

45 
NF4ATTRDIR
 = 8,

46 
NF4NAMEDATTR
 = 9,

48 
nfs_·y≥4
 
	tnfs_·y≥4
;

50 
	enfs°©4
 {

51 
NFS4_OK
 = 0,

52 
NFS4ERR_PERM
 = 1,

53 
NFS4ERR_NOENT
 = 2,

54 
NFS4ERR_IO
 = 5,

55 
NFS4ERR_NXIO
 = 6,

56 
NFS4ERR_ACCESS
 = 13,

57 
NFS4ERR_EXIST
 = 17,

58 
NFS4ERR_XDEV
 = 18,

59 
NFS4ERR_NOTDIR
 = 20,

60 
NFS4ERR_ISDIR
 = 21,

61 
NFS4ERR_INVAL
 = 22,

62 
NFS4ERR_FBIG
 = 27,

63 
NFS4ERR_NOSPC
 = 28,

64 
NFS4ERR_ROFS
 = 30,

65 
NFS4ERR_MLINK
 = 31,

66 
NFS4ERR_NAMETOOLONG
 = 63,

67 
NFS4ERR_NOTEMPTY
 = 66,

68 
NFS4ERR_DQUOT
 = 69,

69 
NFS4ERR_STALE
 = 70,

70 
NFS4ERR_BADHANDLE
 = 10001,

71 
NFS4ERR_BAD_COOKIE
 = 10003,

72 
NFS4ERR_NOTSUPP
 = 10004,

73 
NFS4ERR_TOOSMALL
 = 10005,

74 
NFS4ERR_SERVERFAULT
 = 10006,

75 
NFS4ERR_BADTYPE
 = 10007,

76 
NFS4ERR_DELAY
 = 10008,

77 
NFS4ERR_SAME
 = 10009,

78 
NFS4ERR_DENIED
 = 10010,

79 
NFS4ERR_EXPIRED
 = 10011,

80 
NFS4ERR_LOCKED
 = 10012,

81 
NFS4ERR_GRACE
 = 10013,

82 
NFS4ERR_FHEXPIRED
 = 10014,

83 
NFS4ERR_SHARE_DENIED
 = 10015,

84 
NFS4ERR_WRONGSEC
 = 10016,

85 
NFS4ERR_CLID_INUSE
 = 10017,

86 
NFS4ERR_RESOURCE
 = 10018,

87 
NFS4ERR_MOVED
 = 10019,

88 
NFS4ERR_NOFILEHANDLE
 = 10020,

89 
NFS4ERR_MINOR_VERS_MISMATCH
 = 10021,

90 
NFS4ERR_STALE_CLIENTID
 = 10022,

91 
NFS4ERR_STALE_STATEID
 = 10023,

92 
NFS4ERR_OLD_STATEID
 = 10024,

93 
NFS4ERR_BAD_STATEID
 = 10025,

94 
NFS4ERR_BAD_SEQID
 = 10026,

95 
NFS4ERR_NOT_SAME
 = 10027,

96 
NFS4ERR_LOCK_RANGE
 = 10028,

97 
NFS4ERR_SYMLINK
 = 10029,

98 
NFS4ERR_RESTOREFH
 = 10030,

99 
NFS4ERR_LEASE_MOVED
 = 10031,

100 
NFS4ERR_ATTRNOTSUPP
 = 10032,

101 
NFS4ERR_NO_GRACE
 = 10033,

102 
NFS4ERR_RECLAIM_BAD
 = 10034,

103 
NFS4ERR_RECLAIM_CONFLICT
 = 10035,

104 
NFS4ERR_BADZDR
 = 10036,

105 
NFS4ERR_LOCKS_HELD
 = 10037,

106 
NFS4ERR_OPENMODE
 = 10038,

107 
NFS4ERR_BADOWNER
 = 10039,

108 
NFS4ERR_BADCHAR
 = 10040,

109 
NFS4ERR_BADNAME
 = 10041,

110 
NFS4ERR_BAD_RANGE
 = 10042,

111 
NFS4ERR_LOCK_NOTSUPP
 = 10043,

112 
NFS4ERR_OP_ILLEGAL
 = 10044,

113 
NFS4ERR_DEADLOCK
 = 10045,

114 
NFS4ERR_FILE_OPEN
 = 10046,

115 
NFS4ERR_ADMIN_REVOKED
 = 10047,

116 
NFS4ERR_CB_PATH_DOWN
 = 10048,

117 
NFS4ERR_BADIOMODE
 = 10049,

118 
NFS4ERR_BADLAYOUT
 = 10050,

119 
NFS4ERR_BAD_SESSION_DIGEST
 = 10051,

120 
NFS4ERR_BADSESSION
 = 10052,

121 
NFS4ERR_BADSLOT
 = 10053,

122 
NFS4ERR_COMPLETE_ALREADY
 = 10054,

123 
NFS4ERR_CONN_NOT_BOUND_TO_SESSION
 = 10055,

124 
NFS4ERR_DELEG_ALREADY_WANTED
 = 10056,

125 
NFS4ERR_BACK_CHAN_BUSY
 = 10057,

126 
NFS4ERR_LAYOUTTRYLATER
 = 10058,

127 
NFS4ERR_LAYOUTUNAVAILABLE
 = 10059,

128 
NFS4ERR_NOMATCHING_LAYOUT
 = 10060,

129 
NFS4ERR_RECALLCONFLICT
 = 10061,

131 
nfs°©4
 
	tnfs°©4
;

134 
u_öt
 
bôm≠4_Àn
;

135 
uöt32_t
 *
bôm≠4_vÆ
;

136 } 
	tbôm≠4
;

138 
uöt64_t
 
	toff£t4
;

140 
uöt32_t
 
	tcou¡4
;

142 
uöt64_t
 
	tÀngth4
;

144 
uöt64_t
 
	t˛õ¡id4
;

146 
uöt32_t
 
	t£quí˚id4
;

148 
uöt32_t
 
	t£qid4
;

150 
uöt32_t
 
	t¶Ÿid4
;

153 
u_öt
 
utf8°rög_Àn
;

154 *
utf8°rög_vÆ
;

155 } 
	tutf8°rög
;

157 
utf8°rög
 
	tutf8°r_cis
;

159 
utf8°rög
 
	tutf8°r_cs
;

161 
utf8°rög
 
	tutf8°r_mixed
;

163 
utf8°r_cs
 
	tcomp⁄ít4
;

166 
u_öt
 
∑th«me4_Àn
;

167 
comp⁄ít4
 *
∑th«me4_vÆ
;

168 } 
	t∑th«me4
;

170 
uöt64_t
 
	tnfs_lockid4
;

172 
uöt64_t
 
	tnfs_cookõ4
;

174 
utf8°r_cs
 
	tlökãxt4
;

177 
u_öt
 
£c_oid4_Àn
;

178 *
£c_oid4_vÆ
;

179 } 
	t£c_oid4
;

181 
uöt32_t
 
	tq›4
;

183 
uöt32_t
 
	tmode4
;

185 
uöt64_t
 
	tch™geid4
;

187 
	tvîifõr4
[
NFS4_VERIFIER_SIZE
];

189 
	t£ssi⁄id4
[
NFS4_SESSIONID_SIZE
];

191 
	sauthsys_∑rms
 {

192 
u_öt
 
°amp
;

193 *
machöíame
;

194 
u_öt
 
uid
;

195 
u_öt
 
gid
;

197 
u_öt
 
gids_Àn
;

198 
u_öt
 *
gids_vÆ
;

199 } 
gids
;

201 
authsys_∑rms
 
	tauthsys_∑rms
;

202 
	#NFS4_DEVICEID4_SIZE
 16

	)

204 
	tdevi˚id4
[
NFS4_DEVICEID4_SIZE
];

206 
	eœyouây≥4
 {

207 
LAYOUT4_NFSV4_1_FILES
 = 0x1,

208 
LAYOUT4_OSD2_OBJECTS
 = 0x2,

209 
LAYOUT4_BLOCK_VOLUME
 = 0x3,

211 
œyouây≥4
 
	tœyouây≥4
;

213 
	sœyoutupd©e4
 {

214 
œyouây≥4
 
lou_ty≥
;

216 
u_öt
 
lou_body_Àn
;

217 *
lou_body_vÆ
;

218 } 
lou_body
;

220 
œyoutupd©e4
 
	tœyoutupd©e4
;

222 
	sdevi˚_addr4
 {

223 
œyouây≥4
 
da_œyout_ty≥
;

225 
u_öt
 
da_addr_body_Àn
;

226 *
da_addr_body_vÆ
;

227 } 
da_addr_body
;

229 
devi˚_addr4
 
	tdevi˚_addr4
;

231 
	snf°ime4
 {

232 
öt64_t
 
£c⁄ds
;

233 
uöt32_t
 
n£c⁄ds
;

235 
nf°ime4
 
	tnf°ime4
;

237 
	etime_how4
 {

238 
SET_TO_SERVER_TIME4
 = 0,

239 
SET_TO_CLIENT_TIME4
 = 1,

241 
time_how4
 
	ttime_how4
;

243 
	eœyoutiomode4
 {

244 
LAYOUTIOMODE4_READ
 = 1,

245 
LAYOUTIOMODE4_RW
 = 2,

246 
LAYOUTIOMODE4_ANY
 = 3,

248 
œyoutiomode4
 
	tœyoutiomode4
;

250 
	sœyout_c⁄ã¡4
 {

251 
œyouây≥4
 
loc_ty≥
;

253 
u_öt
 
loc_body_Àn
;

254 *
loc_body_vÆ
;

255 } 
loc_body
;

257 
œyout_c⁄ã¡4
 
	tœyout_c⁄ã¡4
;

259 
	sœyout4
 {

260 
off£t4
 
lo_off£t
;

261 
Àngth4
 
lo_Àngth
;

262 
œyoutiomode4
 
lo_iomode
;

263 
œyout_c⁄ã¡4
 
lo_c⁄ã¡
;

265 
œyout4
 
	tœyout4
;

267 
	s£âime4
 {

268 
time_how4
 
£t_ô
;

270 
nf°ime4
 
time
;

271 } 
£âime4_u
;

273 
£âime4
 
	t£âime4
;

276 
u_öt
 
nfs_fh4_Àn
;

277 *
nfs_fh4_vÆ
;

278 } 
	tnfs_fh4
;

280 
	sfsid4
 {

281 
uöt64_t
 
maj‹
;

282 
uöt64_t
 
mö‹
;

284 
fsid4
 
	tfsid4
;

286 
	sfs_loˇti⁄4
 {

288 
u_öt
 
£rvî_Àn
;

289 
utf8°r_cis
 *
£rvî_vÆ
;

290 } 
£rvî
;

291 
∑th«me4
 
roŸ∑th
;

293 
fs_loˇti⁄4
 
	tfs_loˇti⁄4
;

295 
	sfs_loˇti⁄s4
 {

296 
∑th«me4
 
fs_roŸ
;

298 
u_öt
 
loˇti⁄s_Àn
;

299 
fs_loˇti⁄4
 *
loˇti⁄s_vÆ
;

300 } 
loˇti⁄s
;

302 
fs_loˇti⁄s4
 
	tfs_loˇti⁄s4
;

303 
	#ACL4_SUPPORT_ALLOW_ACL
 0x00000001

	)

304 
	#ACL4_SUPPORT_DENY_ACL
 0x00000002

	)

305 
	#ACL4_SUPPORT_AUDIT_ACL
 0x00000004

	)

306 
	#ACL4_SUPPORT_ALARM_ACL
 0x00000008

	)

308 
uöt32_t
 
	ta˚ty≥4
;

309 
	#ACE4_ACCESS_ALLOWED_ACE_TYPE
 0x00000000

	)

310 
	#ACE4_ACCESS_DENIED_ACE_TYPE
 0x00000001

	)

311 
	#ACE4_SYSTEM_AUDIT_ACE_TYPE
 0x00000002

	)

312 
	#ACE4_SYSTEM_ALARM_ACE_TYPE
 0x00000003

	)

314 
uöt32_t
 
	ta˚Êag4
;

315 
	#ACE4_FILE_INHERIT_ACE
 0x00000001

	)

316 
	#ACE4_DIRECTORY_INHERIT_ACE
 0x00000002

	)

317 
	#ACE4_NO_PROPAGATE_INHERIT_ACE
 0x00000004

	)

318 
	#ACE4_INHERIT_ONLY_ACE
 0x00000008

	)

319 
	#ACE4_SUCCESSFUL_ACCESS_ACE_FLAG
 0x00000010

	)

320 
	#ACE4_FAILED_ACCESS_ACE_FLAG
 0x00000020

	)

321 
	#ACE4_IDENTIFIER_GROUP
 0x00000040

	)

323 
uöt32_t
 
	ta˚mask4
;

324 
	#ACE4_READ_DATA
 0x00000001

	)

325 
	#ACE4_LIST_DIRECTORY
 0x00000001

	)

326 
	#ACE4_WRITE_DATA
 0x00000002

	)

327 
	#ACE4_ADD_FILE
 0x00000002

	)

328 
	#ACE4_APPEND_DATA
 0x00000004

	)

329 
	#ACE4_ADD_SUBDIRECTORY
 0x00000004

	)

330 
	#ACE4_READ_NAMED_ATTRS
 0x00000008

	)

331 
	#ACE4_WRITE_NAMED_ATTRS
 0x00000010

	)

332 
	#ACE4_EXECUTE
 0x00000020

	)

333 
	#ACE4_DELETE_CHILD
 0x00000040

	)

334 
	#ACE4_READ_ATTRIBUTES
 0x00000080

	)

335 
	#ACE4_WRITE_ATTRIBUTES
 0x00000100

	)

336 
	#ACE4_DELETE
 0x00010000

	)

337 
	#ACE4_READ_ACL
 0x00020000

	)

338 
	#ACE4_WRITE_ACL
 0x00040000

	)

339 
	#ACE4_WRITE_OWNER
 0x00080000

	)

340 
	#ACE4_SYNCHRONIZE
 0x00100000

	)

341 
	#ACE4_GENERIC_READ
 0x00120081

	)

342 
	#ACE4_GENERIC_WRITE
 0x00160106

	)

343 
	#ACE4_GENERIC_EXECUTE
 0x001200A0

	)

345 
	snfß˚4
 {

346 
a˚ty≥4
 
ty≥
;

347 
a˚Êag4
 
Êag
;

348 
a˚mask4
 
ac˚ss_mask
;

349 
utf8°r_mixed
 
who
;

351 
nfß˚4
 
	tnfß˚4
;

352 
	#MODE4_SUID
 0x800

	)

353 
	#MODE4_SGID
 0x400

	)

354 
	#MODE4_SVTX
 0x200

	)

355 
	#MODE4_RUSR
 0x100

	)

356 
	#MODE4_WUSR
 0x080

	)

357 
	#MODE4_XUSR
 0x040

	)

358 
	#MODE4_RGRP
 0x020

	)

359 
	#MODE4_WGRP
 0x010

	)

360 
	#MODE4_XGRP
 0x008

	)

361 
	#MODE4_ROTH
 0x004

	)

362 
	#MODE4_WOTH
 0x002

	)

363 
	#MODE4_XOTH
 0x001

	)

365 
	s•ecd©a4
 {

366 
uöt32_t
 
•ecd©a1
;

367 
uöt32_t
 
•ecd©a2
;

369 
•ecd©a4
 
	t•ecd©a4
;

370 
	#FH4_PERSISTENT
 0x00000000

	)

371 
	#FH4_NOEXPIRE_WITH_OPEN
 0x00000001

	)

372 
	#FH4_VOLATILE_ANY
 0x00000002

	)

373 
	#FH4_VOL_MIGRATION
 0x00000004

	)

374 
	#FH4_VOL_RENAME
 0x00000008

	)

376 
bôm≠4
 
	tÁâr4_suµ‹ãd_©ås
;

378 
nfs_·y≥4
 
	tÁâr4_ty≥
;

380 
uöt32_t
 
	tÁâr4_fh_expúe_ty≥
;

382 
ch™geid4
 
	tÁâr4_ch™ge
;

384 
uöt64_t
 
	tÁâr4_size
;

386 
uöt32_t
 
	tÁâr4_lök_suµ‹t
;

388 
uöt32_t
 
	tÁâr4_symlök_suµ‹t
;

390 
uöt32_t
 
	tÁâr4_«med_©å
;

392 
fsid4
 
	tÁâr4_fsid
;

394 
uöt32_t
 
	tÁâr4_unique_h™dÀs
;

396 
uöt32_t
 
	tÁâr4_Àa£_time
;

398 
nfs°©4
 
	tÁâr4_rd©å_îr‹
;

401 
u_öt
 
Áâr4_a˛_Àn
;

402 
nfß˚4
 *
Áâr4_a˛_vÆ
;

403 } 
	tÁâr4_a˛
;

405 
uöt32_t
 
	tÁâr4_a˛suµ‹t
;

407 
uöt32_t
 
	tÁâr4_¨chive
;

409 
uöt32_t
 
	tÁâr4_ˇn£âime
;

411 
uöt32_t
 
	tÁâr4_ˇ£_ö£nsôive
;

413 
uöt32_t
 
	tÁâr4_ˇ£_¥e£rvög
;

415 
uöt32_t
 
	tÁâr4_chown_ª°ri˘ed
;

417 
uöt64_t
 
	tÁâr4_fûeid
;

419 
uöt64_t
 
	tÁâr4_fûes_avaû
;

421 
nfs_fh4
 
	tÁâr4_fûeh™dÀ
;

423 
uöt64_t
 
	tÁâr4_fûes_‰ì
;

425 
uöt64_t
 
	tÁâr4_fûes_tŸÆ
;

427 
fs_loˇti⁄s4
 
	tÁâr4_fs_loˇti⁄s
;

429 
uöt32_t
 
	tÁâr4_hiddí
;

431 
uöt32_t
 
	tÁâr4_homogíeous
;

433 
uöt64_t
 
	tÁâr4_maxfûesize
;

435 
uöt32_t
 
	tÁâr4_maxlök
;

437 
uöt32_t
 
	tÁâr4_max«me
;

439 
uöt64_t
 
	tÁâr4_maxªad
;

441 
uöt64_t
 
	tÁâr4_maxwrôe
;

443 
utf8°r_cs
 
	tÁâr4_mimëy≥
;

445 
mode4
 
	tÁâr4_mode
;

447 
uöt64_t
 
	tÁâr4_mou¡ed_⁄_fûeid
;

449 
uöt32_t
 
	tÁâr4_no_åunc
;

451 
uöt32_t
 
	tÁâr4_numlöks
;

453 
utf8°r_mixed
 
	tÁâr4_ow√r
;

455 
utf8°r_mixed
 
	tÁâr4_ow√r_group
;

457 
uöt64_t
 
	tÁâr4_quŸa_avaû_h¨d
;

459 
uöt64_t
 
	tÁâr4_quŸa_avaû_so·
;

461 
uöt64_t
 
	tÁâr4_quŸa_u£d
;

463 
•ecd©a4
 
	tÁâr4_øwdev
;

465 
uöt64_t
 
	tÁâr4_•a˚_avaû
;

467 
uöt64_t
 
	tÁâr4_•a˚_‰ì
;

469 
uöt64_t
 
	tÁâr4_•a˚_tŸÆ
;

471 
uöt64_t
 
	tÁâr4_•a˚_u£d
;

473 
uöt32_t
 
	tÁâr4_sy°em
;

475 
nf°ime4
 
	tÁâr4_time_ac˚ss
;

477 
£âime4
 
	tÁâr4_time_ac˚ss_£t
;

479 
nf°ime4
 
	tÁâr4_time_backup
;

481 
nf°ime4
 
	tÁâr4_time_¸óã
;

483 
nf°ime4
 
	tÁâr4_time_dñè
;

485 
nf°ime4
 
	tÁâr4_time_mëad©a
;

487 
nf°ime4
 
	tÁâr4_time_modify
;

489 
£âime4
 
	tÁâr4_time_modify_£t
;

490 
	#FATTR4_SUPPORTED_ATTRS
 0

	)

491 
	#FATTR4_TYPE
 1

	)

492 
	#FATTR4_FH_EXPIRE_TYPE
 2

	)

493 
	#FATTR4_CHANGE
 3

	)

494 
	#FATTR4_SIZE
 4

	)

495 
	#FATTR4_LINK_SUPPORT
 5

	)

496 
	#FATTR4_SYMLINK_SUPPORT
 6

	)

497 
	#FATTR4_NAMED_ATTR
 7

	)

498 
	#FATTR4_FSID
 8

	)

499 
	#FATTR4_UNIQUE_HANDLES
 9

	)

500 
	#FATTR4_LEASE_TIME
 10

	)

501 
	#FATTR4_RDATTR_ERROR
 11

	)

502 
	#FATTR4_FILEHANDLE
 19

	)

503 
	#FATTR4_ACL
 12

	)

504 
	#FATTR4_ACLSUPPORT
 13

	)

505 
	#FATTR4_ARCHIVE
 14

	)

506 
	#FATTR4_CANSETTIME
 15

	)

507 
	#FATTR4_CASE_INSENSITIVE
 16

	)

508 
	#FATTR4_CASE_PRESERVING
 17

	)

509 
	#FATTR4_CHOWN_RESTRICTED
 18

	)

510 
	#FATTR4_FILEID
 20

	)

511 
	#FATTR4_FILES_AVAIL
 21

	)

512 
	#FATTR4_FILES_FREE
 22

	)

513 
	#FATTR4_FILES_TOTAL
 23

	)

514 
	#FATTR4_FS_LOCATIONS
 24

	)

515 
	#FATTR4_HIDDEN
 25

	)

516 
	#FATTR4_HOMOGENEOUS
 26

	)

517 
	#FATTR4_MAXFILESIZE
 27

	)

518 
	#FATTR4_MAXLINK
 28

	)

519 
	#FATTR4_MAXNAME
 29

	)

520 
	#FATTR4_MAXREAD
 30

	)

521 
	#FATTR4_MAXWRITE
 31

	)

522 
	#FATTR4_MIMETYPE
 32

	)

523 
	#FATTR4_MODE
 33

	)

524 
	#FATTR4_NO_TRUNC
 34

	)

525 
	#FATTR4_NUMLINKS
 35

	)

526 
	#FATTR4_OWNER
 36

	)

527 
	#FATTR4_OWNER_GROUP
 37

	)

528 
	#FATTR4_QUOTA_AVAIL_HARD
 38

	)

529 
	#FATTR4_QUOTA_AVAIL_SOFT
 39

	)

530 
	#FATTR4_QUOTA_USED
 40

	)

531 
	#FATTR4_RAWDEV
 41

	)

532 
	#FATTR4_SPACE_AVAIL
 42

	)

533 
	#FATTR4_SPACE_FREE
 43

	)

534 
	#FATTR4_SPACE_TOTAL
 44

	)

535 
	#FATTR4_SPACE_USED
 45

	)

536 
	#FATTR4_SYSTEM
 46

	)

537 
	#FATTR4_TIME_ACCESS
 47

	)

538 
	#FATTR4_TIME_ACCESS_SET
 48

	)

539 
	#FATTR4_TIME_BACKUP
 49

	)

540 
	#FATTR4_TIME_CREATE
 50

	)

541 
	#FATTR4_TIME_DELTA
 51

	)

542 
	#FATTR4_TIME_METADATA
 52

	)

543 
	#FATTR4_TIME_MODIFY
 53

	)

544 
	#FATTR4_TIME_MODIFY_SET
 54

	)

545 
	#FATTR4_MOUNTED_ON_FILEID
 55

	)

548 
u_öt
 
©åli°4_Àn
;

549 *
©åli°4_vÆ
;

550 } 
	t©åli°4
;

552 
	sÁâr4
 {

553 
bôm≠4
 
©åmask
;

554 
©åli°4
 
©å_vÆs
;

556 
Áâr4
 
	tÁâr4
;

558 
	sch™ge_öfo4
 {

559 
uöt32_t
 
©omic
;

560 
ch™geid4
 
bef‹e
;

561 
ch™geid4
 
a·î
;

563 
ch™ge_öfo4
 
	tch™ge_öfo4
;

565 
	s˛õ¡addr4
 {

566 *
r_√tid
;

567 *
r_addr
;

569 
˛õ¡addr4
 
	t˛õ¡addr4
;

571 
	scb_˛õ¡4
 {

572 
uöt32_t
 
cb_¥ogøm
;

573 
˛õ¡addr4
 
cb_loˇti⁄
;

575 
cb_˛õ¡4
 
	tcb_˛õ¡4
;

577 
	s°©eid4
 {

578 
uöt32_t
 
£qid
;

579 
Ÿhî
[12];

581 
°©eid4
 
	t°©eid4
;

583 
	snfs_˛õ¡_id4
 {

584 
vîifõr4
 
vîifõr
;

586 
u_öt
 
id_Àn
;

587 *
id_vÆ
;

588 } 
id
;

590 
nfs_˛õ¡_id4
 
	tnfs_˛õ¡_id4
;

592 
	s›í_ow√r4
 {

593 
˛õ¡id4
 
˛õ¡id
;

595 
u_öt
 
ow√r_Àn
;

596 *
ow√r_vÆ
;

597 } 
ow√r
;

599 
›í_ow√r4
 
	t›í_ow√r4
;

601 
	slock_ow√r4
 {

602 
˛õ¡id4
 
˛õ¡id
;

604 
u_öt
 
ow√r_Àn
;

605 *
ow√r_vÆ
;

606 } 
ow√r
;

608 
lock_ow√r4
 
	tlock_ow√r4
;

610 
	enfs_lock_ty≥4
 {

611 
READ_LT
 = 1,

612 
WRITE_LT
 = 2,

613 
READW_LT
 = 3,

614 
WRITEW_LT
 = 4,

616 
nfs_lock_ty≥4
 
	tnfs_lock_ty≥4
;

618 
	s˛õ¡_ow√r4
 {

619 
vîifõr4
 
co_vîifõr
;

621 
u_öt
 
co_ow√rid_Àn
;

622 *
co_ow√rid_vÆ
;

623 } 
co_ow√rid
;

625 
˛õ¡_ow√r4
 
	t˛õ¡_ow√r4
;

627 
	s£rvî_ow√r4
 {

628 
uöt64_t
 
so_mö‹_id
;

630 
u_öt
 
so_maj‹_id_Àn
;

631 *
so_maj‹_id_vÆ
;

632 } 
so_maj‹_id
;

634 
£rvî_ow√r4
 
	t£rvî_ow√r4
;

636 
	snfs_im∂_id4
 {

637 
utf8°r_cis
 
nii_domaö
;

638 
utf8°r_cs
 
nii_«me
;

639 
nf°ime4
 
nii_d©e
;

641 
nfs_im∂_id4
 
	tnfs_im∂_id4
;

642 
	#ACCESS4_READ
 0x00000001

	)

643 
	#ACCESS4_LOOKUP
 0x00000002

	)

644 
	#ACCESS4_MODIFY
 0x00000004

	)

645 
	#ACCESS4_EXTEND
 0x00000008

	)

646 
	#ACCESS4_DELETE
 0x00000010

	)

647 
	#ACCESS4_EXECUTE
 0x00000020

	)

649 
	sACCESS4¨gs
 {

650 
uöt32_t
 
ac˚ss
;

652 
ACCESS4¨gs
 
	tACCESS4¨gs
;

654 
	sACCESS4ªsok
 {

655 
uöt32_t
 
suµ‹ãd
;

656 
uöt32_t
 
ac˚ss
;

658 
ACCESS4ªsok
 
	tACCESS4ªsok
;

660 
	sACCESS4ªs
 {

661 
nfs°©4
 
°©us
;

663 
ACCESS4ªsok
 
ªsok4
;

664 } 
ACCESS4ªs_u
;

666 
ACCESS4ªs
 
	tACCESS4ªs
;

668 
	sCLOSE4¨gs
 {

669 
£qid4
 
£qid
;

670 
°©eid4
 
›í_°©eid
;

672 
CLOSE4¨gs
 
	tCLOSE4¨gs
;

674 
	sCLOSE4ªs
 {

675 
nfs°©4
 
°©us
;

677 
°©eid4
 
›í_°©eid
;

678 } 
CLOSE4ªs_u
;

680 
CLOSE4ªs
 
	tCLOSE4ªs
;

682 
	sCOMMIT4¨gs
 {

683 
off£t4
 
off£t
;

684 
cou¡4
 
cou¡
;

686 
COMMIT4¨gs
 
	tCOMMIT4¨gs
;

688 
	sCOMMIT4ªsok
 {

689 
vîifõr4
 
wrôevîf
;

691 
COMMIT4ªsok
 
	tCOMMIT4ªsok
;

693 
	sCOMMIT4ªs
 {

694 
nfs°©4
 
°©us
;

696 
COMMIT4ªsok
 
ªsok4
;

697 } 
COMMIT4ªs_u
;

699 
COMMIT4ªs
 
	tCOMMIT4ªs
;

701 
	s¸óãty≥4
 {

702 
nfs_·y≥4
 
ty≥
;

704 
lökãxt4
 
lökd©a
;

705 
•ecd©a4
 
devd©a
;

706 } 
¸óãty≥4_u
;

708 
¸óãty≥4
 
	t¸óãty≥4
;

710 
	sCREATE4¨gs
 {

711 
¸óãty≥4
 
objty≥
;

712 
comp⁄ít4
 
obj«me
;

713 
Áâr4
 
¸óã©ås
;

715 
CREATE4¨gs
 
	tCREATE4¨gs
;

717 
	sCREATE4ªsok
 {

718 
ch™ge_öfo4
 
cöfo
;

719 
bôm≠4
 
©å£t
;

721 
CREATE4ªsok
 
	tCREATE4ªsok
;

723 
	sCREATE4ªs
 {

724 
nfs°©4
 
°©us
;

726 
CREATE4ªsok
 
ªsok4
;

727 } 
CREATE4ªs_u
;

729 
CREATE4ªs
 
	tCREATE4ªs
;

731 
	sDELEGPURGE4¨gs
 {

732 
˛õ¡id4
 
˛õ¡id
;

734 
DELEGPURGE4¨gs
 
	tDELEGPURGE4¨gs
;

736 
	sDELEGPURGE4ªs
 {

737 
nfs°©4
 
°©us
;

739 
DELEGPURGE4ªs
 
	tDELEGPURGE4ªs
;

741 
	sDELEGRETURN4¨gs
 {

742 
°©eid4
 
dñeg_°©eid
;

744 
DELEGRETURN4¨gs
 
	tDELEGRETURN4¨gs
;

746 
	sDELEGRETURN4ªs
 {

747 
nfs°©4
 
°©us
;

749 
DELEGRETURN4ªs
 
	tDELEGRETURN4ªs
;

751 
	sGETATTR4¨gs
 {

752 
bôm≠4
 
©å_ªque°
;

754 
GETATTR4¨gs
 
	tGETATTR4¨gs
;

756 
	sGETATTR4ªsok
 {

757 
Áâr4
 
obj_©åibuãs
;

759 
GETATTR4ªsok
 
	tGETATTR4ªsok
;

761 
	sGETATTR4ªs
 {

762 
nfs°©4
 
°©us
;

764 
GETATTR4ªsok
 
ªsok4
;

765 } 
GETATTR4ªs_u
;

767 
GETATTR4ªs
 
	tGETATTR4ªs
;

769 
	sGETFH4ªsok
 {

770 
nfs_fh4
 
obje˘
;

772 
GETFH4ªsok
 
	tGETFH4ªsok
;

774 
	sGETFH4ªs
 {

775 
nfs°©4
 
°©us
;

777 
GETFH4ªsok
 
ªsok4
;

778 } 
GETFH4ªs_u
;

780 
GETFH4ªs
 
	tGETFH4ªs
;

782 
	sLINK4¨gs
 {

783 
comp⁄ít4
 
√w«me
;

785 
LINK4¨gs
 
	tLINK4¨gs
;

787 
	sLINK4ªsok
 {

788 
ch™ge_öfo4
 
cöfo
;

790 
LINK4ªsok
 
	tLINK4ªsok
;

792 
	sLINK4ªs
 {

793 
nfs°©4
 
°©us
;

795 
LINK4ªsok
 
ªsok4
;

796 } 
LINK4ªs_u
;

798 
LINK4ªs
 
	tLINK4ªs
;

800 
	s›í_to_lock_ow√r4
 {

801 
£qid4
 
›í_£qid
;

802 
°©eid4
 
›í_°©eid
;

803 
£qid4
 
lock_£qid
;

804 
lock_ow√r4
 
lock_ow√r
;

806 
›í_to_lock_ow√r4
 
	t›í_to_lock_ow√r4
;

808 
	sexi°_lock_ow√r4
 {

809 
°©eid4
 
lock_°©eid
;

810 
£qid4
 
lock_£qid
;

812 
exi°_lock_ow√r4
 
	texi°_lock_ow√r4
;

814 
	slockî4
 {

815 
uöt32_t
 
√w_lock_ow√r
;

817 
›í_to_lock_ow√r4
 
›í_ow√r
;

818 
exi°_lock_ow√r4
 
lock_ow√r
;

819 } 
lockî4_u
;

821 
lockî4
 
	tlockî4
;

823 
	sLOCK4¨gs
 {

824 
nfs_lock_ty≥4
 
lockty≥
;

825 
uöt32_t
 
ª˛aim
;

826 
off£t4
 
off£t
;

827 
Àngth4
 
Àngth
;

828 
lockî4
 
lockî
;

830 
LOCK4¨gs
 
	tLOCK4¨gs
;

832 
	sLOCK4díõd
 {

833 
off£t4
 
off£t
;

834 
Àngth4
 
Àngth
;

835 
nfs_lock_ty≥4
 
lockty≥
;

836 
lock_ow√r4
 
ow√r
;

838 
LOCK4díõd
 
	tLOCK4díõd
;

840 
	sLOCK4ªsok
 {

841 
°©eid4
 
lock_°©eid
;

843 
LOCK4ªsok
 
	tLOCK4ªsok
;

845 
	sLOCK4ªs
 {

846 
nfs°©4
 
°©us
;

848 
LOCK4ªsok
 
ªsok4
;

849 
LOCK4díõd
 
díõd
;

850 } 
LOCK4ªs_u
;

852 
LOCK4ªs
 
	tLOCK4ªs
;

854 
	sLOCKT4¨gs
 {

855 
nfs_lock_ty≥4
 
lockty≥
;

856 
off£t4
 
off£t
;

857 
Àngth4
 
Àngth
;

858 
lock_ow√r4
 
ow√r
;

860 
LOCKT4¨gs
 
	tLOCKT4¨gs
;

862 
	sLOCKT4ªs
 {

863 
nfs°©4
 
°©us
;

865 
LOCK4díõd
 
díõd
;

866 } 
LOCKT4ªs_u
;

868 
LOCKT4ªs
 
	tLOCKT4ªs
;

870 
	sLOCKU4¨gs
 {

871 
nfs_lock_ty≥4
 
lockty≥
;

872 
£qid4
 
£qid
;

873 
°©eid4
 
lock_°©eid
;

874 
off£t4
 
off£t
;

875 
Àngth4
 
Àngth
;

877 
LOCKU4¨gs
 
	tLOCKU4¨gs
;

879 
	sLOCKU4ªs
 {

880 
nfs°©4
 
°©us
;

882 
°©eid4
 
lock_°©eid
;

883 } 
LOCKU4ªs_u
;

885 
LOCKU4ªs
 
	tLOCKU4ªs
;

887 
	sLOOKUP4¨gs
 {

888 
comp⁄ít4
 
obj«me
;

890 
LOOKUP4¨gs
 
	tLOOKUP4¨gs
;

892 
	sLOOKUP4ªs
 {

893 
nfs°©4
 
°©us
;

895 
LOOKUP4ªs
 
	tLOOKUP4ªs
;

897 
	sLOOKUPP4ªs
 {

898 
nfs°©4
 
°©us
;

900 
LOOKUPP4ªs
 
	tLOOKUPP4ªs
;

902 
	sNVERIFY4¨gs
 {

903 
Áâr4
 
obj_©åibuãs
;

905 
NVERIFY4¨gs
 
	tNVERIFY4¨gs
;

907 
	sNVERIFY4ªs
 {

908 
nfs°©4
 
°©us
;

910 
NVERIFY4ªs
 
	tNVERIFY4ªs
;

912 
	e¸óãmode4
 {

913 
UNCHECKED4
 = 0,

914 
GUARDED4
 = 1,

915 
EXCLUSIVE4
 = 2,

917 
¸óãmode4
 
	t¸óãmode4
;

919 
	s¸óãhow4
 {

920 
¸óãmode4
 
mode
;

922 
Áâr4
 
¸óã©ås
;

923 
vîifõr4
 
¸óãvîf
;

924 } 
¸óãhow4_u
;

926 
¸óãhow4
 
	t¸óãhow4
;

928 
	e›íty≥4
 {

929 
OPEN4_NOCREATE
 = 0,

930 
OPEN4_CREATE
 = 1,

932 
›íty≥4
 
	t›íty≥4
;

934 
	s›íÊag4
 {

935 
›íty≥4
 
›íty≥
;

937 
¸óãhow4
 
how
;

938 } 
›íÊag4_u
;

940 
›íÊag4
 
	t›íÊag4
;

942 
	elimô_by4
 {

943 
NFS_LIMIT_SIZE
 = 1,

944 
NFS_LIMIT_BLOCKS
 = 2,

946 
limô_by4
 
	tlimô_by4
;

948 
	snfs_modifõd_limô4
 {

949 
uöt32_t
 
num_blocks
;

950 
uöt32_t
 
byãs_≥r_block
;

952 
nfs_modifõd_limô4
 
	tnfs_modifõd_limô4
;

954 
	snfs_•a˚_limô4
 {

955 
limô_by4
 
limôby
;

957 
uöt64_t
 
fûesize
;

958 
nfs_modifõd_limô4
 
mod_blocks
;

959 } 
nfs_•a˚_limô4_u
;

961 
nfs_•a˚_limô4
 
	tnfs_•a˚_limô4
;

962 
	#OPEN4_SHARE_ACCESS_READ
 0x00000001

	)

963 
	#OPEN4_SHARE_ACCESS_WRITE
 0x00000002

	)

964 
	#OPEN4_SHARE_ACCESS_BOTH
 0x00000003

	)

965 
	#OPEN4_SHARE_DENY_NONE
 0x00000000

	)

966 
	#OPEN4_SHARE_DENY_READ
 0x00000001

	)

967 
	#OPEN4_SHARE_DENY_WRITE
 0x00000002

	)

968 
	#OPEN4_SHARE_DENY_BOTH
 0x00000003

	)

970 
	e›í_dñeg©i⁄_ty≥4
 {

971 
OPEN_DELEGATE_NONE
 = 0,

972 
OPEN_DELEGATE_READ
 = 1,

973 
OPEN_DELEGATE_WRITE
 = 2,

975 
›í_dñeg©i⁄_ty≥4
 
	t›í_dñeg©i⁄_ty≥4
;

977 
	e›í_˛aim_ty≥4
 {

978 
CLAIM_NULL
 = 0,

979 
CLAIM_PREVIOUS
 = 1,

980 
CLAIM_DELEGATE_CUR
 = 2,

981 
CLAIM_DELEGATE_PREV
 = 3,

982 
CLAIM_FH
 = 4,

983 
CLAIM_DELEG_CUR_FH
 = 5,

984 
CLAIM_DELEG_PREV_FH
 = 6,

986 
›í_˛aim_ty≥4
 
	t›í_˛aim_ty≥4
;

988 
	s›í_˛aim_dñeg©e_cur4
 {

989 
°©eid4
 
dñeg©e_°©eid
;

990 
comp⁄ít4
 
fûe
;

992 
›í_˛aim_dñeg©e_cur4
 
	t›í_˛aim_dñeg©e_cur4
;

994 
	s›í_˛aim4
 {

995 
›í_˛aim_ty≥4
 
˛aim
;

997 
comp⁄ít4
 
fûe
;

998 
›í_dñeg©i⁄_ty≥4
 
dñeg©e_ty≥
;

999 
›í_˛aim_dñeg©e_cur4
 
dñeg©e_cur_öfo
;

1000 
comp⁄ít4
 
fûe_dñeg©e_¥ev
;

1001 
°©eid4
 
oc_dñeg©e_°©eid
;

1002 } 
›í_˛aim4_u
;

1004 
›í_˛aim4
 
	t›í_˛aim4
;

1006 
	sOPEN4¨gs
 {

1007 
£qid4
 
£qid
;

1008 
uöt32_t
 
sh¨e_ac˚ss
;

1009 
uöt32_t
 
sh¨e_díy
;

1010 
›í_ow√r4
 
ow√r
;

1011 
›íÊag4
 
›íhow
;

1012 
›í_˛aim4
 
˛aim
;

1014 
OPEN4¨gs
 
	tOPEN4¨gs
;

1016 
	s›í_ªad_dñeg©i⁄4
 {

1017 
°©eid4
 
°©eid
;

1018 
uöt32_t
 
ªˇŒ
;

1019 
nfß˚4
 
≥rmissi⁄s
;

1021 
›í_ªad_dñeg©i⁄4
 
	t›í_ªad_dñeg©i⁄4
;

1023 
	s›í_wrôe_dñeg©i⁄4
 {

1024 
°©eid4
 
°©eid
;

1025 
uöt32_t
 
ªˇŒ
;

1026 
nfs_•a˚_limô4
 
•a˚_limô
;

1027 
nfß˚4
 
≥rmissi⁄s
;

1029 
›í_wrôe_dñeg©i⁄4
 
	t›í_wrôe_dñeg©i⁄4
;

1031 
	s›í_dñeg©i⁄4
 {

1032 
›í_dñeg©i⁄_ty≥4
 
dñeg©i⁄_ty≥
;

1034 
›í_ªad_dñeg©i⁄4
 
ªad
;

1035 
›í_wrôe_dñeg©i⁄4
 
wrôe
;

1036 } 
›í_dñeg©i⁄4_u
;

1038 
›í_dñeg©i⁄4
 
	t›í_dñeg©i⁄4
;

1039 
	#OPEN4_RESULT_CONFIRM
 0x00000002

	)

1040 
	#OPEN4_RESULT_LOCKTYPE_POSIX
 0x00000004

	)

1042 
	sOPEN4ªsok
 {

1043 
°©eid4
 
°©eid
;

1044 
ch™ge_öfo4
 
cöfo
;

1045 
uöt32_t
 
rÊags
;

1046 
bôm≠4
 
©å£t
;

1047 
›í_dñeg©i⁄4
 
dñeg©i⁄
;

1049 
OPEN4ªsok
 
	tOPEN4ªsok
;

1051 
	sOPEN4ªs
 {

1052 
nfs°©4
 
°©us
;

1054 
OPEN4ªsok
 
ªsok4
;

1055 } 
OPEN4ªs_u
;

1057 
OPEN4ªs
 
	tOPEN4ªs
;

1059 
	sOPENATTR4¨gs
 {

1060 
uöt32_t
 
¸óãdú
;

1062 
OPENATTR4¨gs
 
	tOPENATTR4¨gs
;

1064 
	sOPENATTR4ªs
 {

1065 
nfs°©4
 
°©us
;

1067 
OPENATTR4ªs
 
	tOPENATTR4ªs
;

1069 
	sOPEN_CONFIRM4¨gs
 {

1070 
°©eid4
 
›í_°©eid
;

1071 
£qid4
 
£qid
;

1073 
OPEN_CONFIRM4¨gs
 
	tOPEN_CONFIRM4¨gs
;

1075 
	sOPEN_CONFIRM4ªsok
 {

1076 
°©eid4
 
›í_°©eid
;

1078 
OPEN_CONFIRM4ªsok
 
	tOPEN_CONFIRM4ªsok
;

1080 
	sOPEN_CONFIRM4ªs
 {

1081 
nfs°©4
 
°©us
;

1083 
OPEN_CONFIRM4ªsok
 
ªsok4
;

1084 } 
OPEN_CONFIRM4ªs_u
;

1086 
OPEN_CONFIRM4ªs
 
	tOPEN_CONFIRM4ªs
;

1088 
	sOPEN_DOWNGRADE4¨gs
 {

1089 
°©eid4
 
›í_°©eid
;

1090 
£qid4
 
£qid
;

1091 
uöt32_t
 
sh¨e_ac˚ss
;

1092 
uöt32_t
 
sh¨e_díy
;

1094 
OPEN_DOWNGRADE4¨gs
 
	tOPEN_DOWNGRADE4¨gs
;

1096 
	sOPEN_DOWNGRADE4ªsok
 {

1097 
°©eid4
 
›í_°©eid
;

1099 
OPEN_DOWNGRADE4ªsok
 
	tOPEN_DOWNGRADE4ªsok
;

1101 
	sOPEN_DOWNGRADE4ªs
 {

1102 
nfs°©4
 
°©us
;

1104 
OPEN_DOWNGRADE4ªsok
 
ªsok4
;

1105 } 
OPEN_DOWNGRADE4ªs_u
;

1107 
OPEN_DOWNGRADE4ªs
 
	tOPEN_DOWNGRADE4ªs
;

1109 
	sPUTFH4¨gs
 {

1110 
nfs_fh4
 
obje˘
;

1112 
PUTFH4¨gs
 
	tPUTFH4¨gs
;

1114 
	sPUTFH4ªs
 {

1115 
nfs°©4
 
°©us
;

1117 
PUTFH4ªs
 
	tPUTFH4ªs
;

1119 
	sPUTPUBFH4ªs
 {

1120 
nfs°©4
 
°©us
;

1122 
PUTPUBFH4ªs
 
	tPUTPUBFH4ªs
;

1124 
	sPUTROOTFH4ªs
 {

1125 
nfs°©4
 
°©us
;

1127 
PUTROOTFH4ªs
 
	tPUTROOTFH4ªs
;

1129 
	sREAD4¨gs
 {

1130 
°©eid4
 
°©eid
;

1131 
off£t4
 
off£t
;

1132 
cou¡4
 
cou¡
;

1134 
READ4¨gs
 
	tREAD4¨gs
;

1136 
	sREAD4ªsok
 {

1137 
uöt32_t
 
eof
;

1139 
u_öt
 
d©a_Àn
;

1140 *
d©a_vÆ
;

1141 } 
d©a
;

1143 
READ4ªsok
 
	tREAD4ªsok
;

1145 
	sREAD4ªs
 {

1146 
nfs°©4
 
°©us
;

1148 
READ4ªsok
 
ªsok4
;

1149 } 
READ4ªs_u
;

1151 
READ4ªs
 
	tREAD4ªs
;

1153 
	sREADDIR4¨gs
 {

1154 
nfs_cookõ4
 
cookõ
;

1155 
vîifõr4
 
cookõvîf
;

1156 
cou¡4
 
dúcou¡
;

1157 
cou¡4
 
maxcou¡
;

1158 
bôm≠4
 
©å_ªque°
;

1160 
READDIR4¨gs
 
	tREADDIR4¨gs
;

1162 
	síåy4
 {

1163 
nfs_cookõ4
 
cookõ
;

1164 
comp⁄ít4
 
«me
;

1165 
Áâr4
 
©ås
;

1166 
íåy4
 *
√xã¡ry
;

1168 
íåy4
 
	tíåy4
;

1170 
	sdúli°4
 {

1171 
íåy4
 *
íåõs
;

1172 
uöt32_t
 
eof
;

1174 
dúli°4
 
	tdúli°4
;

1176 
	sREADDIR4ªsok
 {

1177 
vîifõr4
 
cookõvîf
;

1178 
dúli°4
 
ª∂y
;

1180 
READDIR4ªsok
 
	tREADDIR4ªsok
;

1182 
	sREADDIR4ªs
 {

1183 
nfs°©4
 
°©us
;

1185 
READDIR4ªsok
 
ªsok4
;

1186 } 
READDIR4ªs_u
;

1188 
READDIR4ªs
 
	tREADDIR4ªs
;

1190 
	sREADLINK4ªsok
 {

1191 
lökãxt4
 
lök
;

1193 
READLINK4ªsok
 
	tREADLINK4ªsok
;

1195 
	sREADLINK4ªs
 {

1196 
nfs°©4
 
°©us
;

1198 
READLINK4ªsok
 
ªsok4
;

1199 } 
READLINK4ªs_u
;

1201 
READLINK4ªs
 
	tREADLINK4ªs
;

1203 
	sREMOVE4¨gs
 {

1204 
comp⁄ít4
 
èrgë
;

1206 
REMOVE4¨gs
 
	tREMOVE4¨gs
;

1208 
	sREMOVE4ªsok
 {

1209 
ch™ge_öfo4
 
cöfo
;

1211 
REMOVE4ªsok
 
	tREMOVE4ªsok
;

1213 
	sREMOVE4ªs
 {

1214 
nfs°©4
 
°©us
;

1216 
REMOVE4ªsok
 
ªsok4
;

1217 } 
REMOVE4ªs_u
;

1219 
REMOVE4ªs
 
	tREMOVE4ªs
;

1221 
	sRENAME4¨gs
 {

1222 
comp⁄ít4
 
ﬁd«me
;

1223 
comp⁄ít4
 
√w«me
;

1225 
RENAME4¨gs
 
	tRENAME4¨gs
;

1227 
	sRENAME4ªsok
 {

1228 
ch™ge_öfo4
 
sour˚_cöfo
;

1229 
ch™ge_öfo4
 
èrgë_cöfo
;

1231 
RENAME4ªsok
 
	tRENAME4ªsok
;

1233 
	sRENAME4ªs
 {

1234 
nfs°©4
 
°©us
;

1236 
RENAME4ªsok
 
ªsok4
;

1237 } 
RENAME4ªs_u
;

1239 
RENAME4ªs
 
	tRENAME4ªs
;

1241 
	sRENEW4¨gs
 {

1242 
˛õ¡id4
 
˛õ¡id
;

1244 
RENEW4¨gs
 
	tRENEW4¨gs
;

1246 
	sRENEW4ªs
 {

1247 
nfs°©4
 
°©us
;

1249 
RENEW4ªs
 
	tRENEW4ªs
;

1251 
	sRESTOREFH4ªs
 {

1252 
nfs°©4
 
°©us
;

1254 
RESTOREFH4ªs
 
	tRESTOREFH4ªs
;

1256 
	sSAVEFH4ªs
 {

1257 
nfs°©4
 
°©us
;

1259 
SAVEFH4ªs
 
	tSAVEFH4ªs
;

1261 
	sSECINFO4¨gs
 {

1262 
comp⁄ít4
 
«me
;

1264 
SECINFO4¨gs
 
	tSECINFO4¨gs
;

1266 
	eΩc_gss_svc_t
 {

1267 
RPC_GSS_SVC_NONE
 = 1,

1268 
RPC_GSS_SVC_INTEGRITY
 = 2,

1269 
RPC_GSS_SVC_PRIVACY
 = 3,

1271 
Ωc_gss_svc_t
 
	tΩc_gss_svc_t
;

1273 
	sΩc£c_gss_öfo
 {

1274 
£c_oid4
 
oid
;

1275 
q›4
 
q›
;

1276 
Ωc_gss_svc_t
 
£rvi˚
;

1278 
Ωc£c_gss_öfo
 
	tΩc£c_gss_öfo
;

1279 
	#RPCSEC_GSS
 6

	)

1281 
	s£cöfo4
 {

1282 
uöt32_t
 
Êav‹
;

1284 
Ωc£c_gss_öfo
 
Êav‹_öfo
;

1285 } 
£cöfo4_u
;

1287 
£cöfo4
 
	t£cöfo4
;

1290 
u_öt
 
SECINFO4ªsok_Àn
;

1291 
£cöfo4
 *
SECINFO4ªsok_vÆ
;

1292 } 
	tSECINFO4ªsok
;

1294 
	sSECINFO4ªs
 {

1295 
nfs°©4
 
°©us
;

1297 
SECINFO4ªsok
 
ªsok4
;

1298 } 
SECINFO4ªs_u
;

1300 
SECINFO4ªs
 
	tSECINFO4ªs
;

1302 
	sSETATTR4¨gs
 {

1303 
°©eid4
 
°©eid
;

1304 
Áâr4
 
obj_©åibuãs
;

1306 
SETATTR4¨gs
 
	tSETATTR4¨gs
;

1308 
	sSETATTR4ªs
 {

1309 
nfs°©4
 
°©us
;

1310 
bôm≠4
 
©ås£t
;

1312 
SETATTR4ªs
 
	tSETATTR4ªs
;

1314 
	sSETCLIENTID4¨gs
 {

1315 
nfs_˛õ¡_id4
 
˛õ¡
;

1316 
cb_˛õ¡4
 
ˇŒback
;

1317 
uöt32_t
 
ˇŒback_idít
;

1319 
SETCLIENTID4¨gs
 
	tSETCLIENTID4¨gs
;

1321 
	sSETCLIENTID4ªsok
 {

1322 
˛õ¡id4
 
˛õ¡id
;

1323 
vîifõr4
 
£t˛õ¡id_c⁄fúm
;

1325 
SETCLIENTID4ªsok
 
	tSETCLIENTID4ªsok
;

1327 
	sSETCLIENTID4ªs
 {

1328 
nfs°©4
 
°©us
;

1330 
SETCLIENTID4ªsok
 
ªsok4
;

1331 
˛õ¡addr4
 
˛õ¡_usög
;

1332 } 
SETCLIENTID4ªs_u
;

1334 
SETCLIENTID4ªs
 
	tSETCLIENTID4ªs
;

1336 
	sSETCLIENTID_CONFIRM4¨gs
 {

1337 
˛õ¡id4
 
˛õ¡id
;

1338 
vîifõr4
 
£t˛õ¡id_c⁄fúm
;

1340 
SETCLIENTID_CONFIRM4¨gs
 
	tSETCLIENTID_CONFIRM4¨gs
;

1342 
	sSETCLIENTID_CONFIRM4ªs
 {

1343 
nfs°©4
 
°©us
;

1345 
SETCLIENTID_CONFIRM4ªs
 
	tSETCLIENTID_CONFIRM4ªs
;

1347 
	sVERIFY4¨gs
 {

1348 
Áâr4
 
obj_©åibuãs
;

1350 
VERIFY4¨gs
 
	tVERIFY4¨gs
;

1352 
	sVERIFY4ªs
 {

1353 
nfs°©4
 
°©us
;

1355 
VERIFY4ªs
 
	tVERIFY4ªs
;

1357 
	e°abÀ_how4
 {

1358 
UNSTABLE4
 = 0,

1359 
DATA_SYNC4
 = 1,

1360 
FILE_SYNC4
 = 2,

1362 
°abÀ_how4
 
	t°abÀ_how4
;

1364 
	sWRITE4¨gs
 {

1365 
°©eid4
 
°©eid
;

1366 
off£t4
 
off£t
;

1367 
°abÀ_how4
 
°abÀ
;

1369 
u_öt
 
d©a_Àn
;

1370 *
d©a_vÆ
;

1371 } 
d©a
;

1373 
WRITE4¨gs
 
	tWRITE4¨gs
;

1375 
	sWRITE4ªsok
 {

1376 
cou¡4
 
cou¡
;

1377 
°abÀ_how4
 
commôãd
;

1378 
vîifõr4
 
wrôevîf
;

1380 
WRITE4ªsok
 
	tWRITE4ªsok
;

1382 
	sWRITE4ªs
 {

1383 
nfs°©4
 
°©us
;

1385 
WRITE4ªsok
 
ªsok4
;

1386 } 
WRITE4ªs_u
;

1388 
WRITE4ªs
 
	tWRITE4ªs
;

1390 
	sRELEASE_LOCKOWNER4¨gs
 {

1391 
lock_ow√r4
 
lock_ow√r
;

1393 
RELEASE_LOCKOWNER4¨gs
 
	tRELEASE_LOCKOWNER4¨gs
;

1395 
	sRELEASE_LOCKOWNER4ªs
 {

1396 
nfs°©4
 
°©us
;

1398 
RELEASE_LOCKOWNER4ªs
 
	tRELEASE_LOCKOWNER4ªs
;

1401 
u_öt
 
gssh™dÀ4_t_Àn
;

1402 *
gssh™dÀ4_t_vÆ
;

1403 } 
	tgssh™dÀ4_t
;

1405 
	sˇŒback_£c_∑rms4
 {

1406 
uöt32_t
 
cb_£cÊav‹
;

1408 
authsys_∑rms
 
cb•_sys_¸ed
;

1409 } 
ˇŒback_£c_∑rms4_u
;

1411 
ˇŒback_£c_∑rms4
 
	tˇŒback_£c_∑rms4
;

1413 
	ech™√l_dú_‰om_˛õ¡4
 {

1414 
CDFC4_FORE
 = 0x1,

1415 
CDFC4_BACK
 = 0x2,

1416 
CDFC4_FORE_OR_BOTH
 = 0x3,

1417 
CDFC4_BACK_OR_BOTH
 = 0x7,

1419 
ch™√l_dú_‰om_˛õ¡4
 
	tch™√l_dú_‰om_˛õ¡4
;

1421 
	sBIND_CONN_TO_SESSION4¨gs
 {

1422 
£ssi⁄id4
 
b˘ß_£ssid
;

1423 
ch™√l_dú_‰om_˛õ¡4
 
b˘ß_dú
;

1424 
uöt32_t
 
b˘ß_u£_c⁄n_ö_rdma_mode
;

1426 
BIND_CONN_TO_SESSION4¨gs
 
	tBIND_CONN_TO_SESSION4¨gs
;

1428 
	ech™√l_dú_‰om_£rvî4
 {

1429 
CDFS4_FORE
 = 0x1,

1430 
CDFS4_BACK
 = 0x2,

1431 
CDFS4_BOTH
 = 0x3,

1433 
ch™√l_dú_‰om_£rvî4
 
	tch™√l_dú_‰om_£rvî4
;

1435 
	sBIND_CONN_TO_SESSION4ªsok
 {

1436 
£ssi⁄id4
 
b˘§_£ssid
;

1437 
ch™√l_dú_‰om_£rvî4
 
b˘§_dú
;

1438 
uöt32_t
 
b˘§_u£_c⁄n_ö_rdma_mode
;

1440 
BIND_CONN_TO_SESSION4ªsok
 
	tBIND_CONN_TO_SESSION4ªsok
;

1442 
	sBIND_CONN_TO_SESSION4ªs
 {

1443 
nfs°©4
 
b˘§_°©us
;

1445 
BIND_CONN_TO_SESSION4ªsok
 
b˘§_ªsok4
;

1446 } 
BIND_CONN_TO_SESSION4ªs_u
;

1448 
BIND_CONN_TO_SESSION4ªs
 
	tBIND_CONN_TO_SESSION4ªs
;

1449 
	#EXCHGID4_FLAG_SUPP_MOVED_REFER
 0x00000001

	)

1450 
	#EXCHGID4_FLAG_SUPP_MOVED_MIGR
 0x00000002

	)

1451 
	#EXCHGID4_FLAG_BIND_PRINC_STATEID
 0x00000100

	)

1452 
	#EXCHGID4_FLAG_USE_NON_PNFS
 0x00010000

	)

1453 
	#EXCHGID4_FLAG_USE_PNFS_MDS
 0x00020000

	)

1454 
	#EXCHGID4_FLAG_USE_PNFS_DS
 0x00040000

	)

1455 
	#EXCHGID4_FLAG_MASK_PNFS
 0x00070000

	)

1456 
	#EXCHGID4_FLAG_UPD_CONFIRMED_REC_A
 0x40000000

	)

1457 
	#EXCHGID4_FLAG_CONFIRMED_R
 0x80000000

	)

1459 
	s°©e_¥Ÿe˘_›s4
 {

1460 
bôm≠4
 
•o_mu°_íf‹˚
;

1461 
bôm≠4
 
•o_mu°_Ælow
;

1463 
°©e_¥Ÿe˘_›s4
 
	t°©e_¥Ÿe˘_›s4
;

1465 
	sssv_•_∑rms4
 {

1466 
°©e_¥Ÿe˘_›s4
 
s•_›s
;

1468 
u_öt
 
s•_hash_Ægs_Àn
;

1469 
£c_oid4
 *
s•_hash_Ægs_vÆ
;

1470 } 
s•_hash_Ægs
;

1472 
u_öt
 
s•_í¸_Ægs_Àn
;

1473 
£c_oid4
 *
s•_í¸_Ægs_vÆ
;

1474 } 
s•_í¸_Ægs
;

1475 
uöt32_t
 
s•_wödow
;

1476 
uöt32_t
 
s•_num_gss_h™dÀs
;

1478 
ssv_•_∑rms4
 
	tssv_•_∑rms4
;

1480 
	e°©e_¥Ÿe˘_how4
 {

1481 
SP4_NONE
 = 0,

1482 
SP4_MACH_CRED
 = 1,

1483 
SP4_SSV
 = 2,

1485 
°©e_¥Ÿe˘_how4
 
	t°©e_¥Ÿe˘_how4
;

1487 
	s°©e_¥Ÿe˘4_a
 {

1488 
°©e_¥Ÿe˘_how4
 
•a_how
;

1490 
°©e_¥Ÿe˘_›s4
 
•a_mach_›s
;

1491 
ssv_•_∑rms4
 
•a_ssv_∑rms
;

1492 } 
°©e_¥Ÿe˘4_a_u
;

1494 
°©e_¥Ÿe˘4_a
 
	t°©e_¥Ÿe˘4_a
;

1496 
	sEXCHANGE_ID4¨gs
 {

1497 
˛õ¡_ow√r4
 
eü_˛õ¡ow√r
;

1498 
uöt32_t
 
eü_Êags
;

1499 
°©e_¥Ÿe˘4_a
 
eü_°©e_¥Ÿe˘
;

1501 
u_öt
 
eü_˛õ¡_im∂_id_Àn
;

1502 
nfs_im∂_id4
 *
eü_˛õ¡_im∂_id_vÆ
;

1503 } 
eü_˛õ¡_im∂_id
;

1505 
EXCHANGE_ID4¨gs
 
	tEXCHANGE_ID4¨gs
;

1507 
	sssv_¥Ÿ_öfo4
 {

1508 
°©e_¥Ÿe˘_›s4
 
•i_›s
;

1509 
uöt32_t
 
•i_hash_Æg
;

1510 
uöt32_t
 
•i_í¸_Æg
;

1511 
uöt32_t
 
•i_ssv_Àn
;

1512 
uöt32_t
 
•i_wödow
;

1514 
u_öt
 
•i_h™dÀs_Àn
;

1515 
gssh™dÀ4_t
 *
•i_h™dÀs_vÆ
;

1516 } 
•i_h™dÀs
;

1518 
ssv_¥Ÿ_öfo4
 
	tssv_¥Ÿ_öfo4
;

1520 
	s°©e_¥Ÿe˘4_r
 {

1521 
°©e_¥Ÿe˘_how4
 
•r_how
;

1523 
°©e_¥Ÿe˘_›s4
 
•r_mach_›s
;

1524 
ssv_¥Ÿ_öfo4
 
•r_ssv_öfo
;

1525 } 
°©e_¥Ÿe˘4_r_u
;

1527 
°©e_¥Ÿe˘4_r
 
	t°©e_¥Ÿe˘4_r
;

1529 
	sEXCHANGE_ID4ªsok
 {

1530 
˛õ¡id4
 
eú_˛õ¡id
;

1531 
£quí˚id4
 
eú_£quí˚id
;

1532 
uöt32_t
 
eú_Êags
;

1533 
°©e_¥Ÿe˘4_r
 
eú_°©e_¥Ÿe˘
;

1534 
£rvî_ow√r4
 
eú_£rvî_ow√r
;

1536 
u_öt
 
eú_£rvî_sc›e_Àn
;

1537 *
eú_£rvî_sc›e_vÆ
;

1538 } 
eú_£rvî_sc›e
;

1540 
u_öt
 
eú_£rvî_im∂_id_Àn
;

1541 
nfs_im∂_id4
 *
eú_£rvî_im∂_id_vÆ
;

1542 } 
eú_£rvî_im∂_id
;

1544 
EXCHANGE_ID4ªsok
 
	tEXCHANGE_ID4ªsok
;

1546 
	sEXCHANGE_ID4ªs
 {

1547 
nfs°©4
 
eú_°©us
;

1549 
EXCHANGE_ID4ªsok
 
eú_ªsok4
;

1550 } 
EXCHANGE_ID4ªs_u
;

1552 
EXCHANGE_ID4ªs
 
	tEXCHANGE_ID4ªs
;

1554 
	sch™√l_©ås4
 {

1555 
cou¡4
 
ˇ_hódî∑dsize
;

1556 
cou¡4
 
ˇ_maxªque°size
;

1557 
cou¡4
 
ˇ_maxª•⁄£size
;

1558 
cou¡4
 
ˇ_maxª•⁄£size_ˇched
;

1559 
cou¡4
 
ˇ_max›î©i⁄s
;

1560 
cou¡4
 
ˇ_maxªque°s
;

1562 
u_öt
 
ˇ_rdma_úd_Àn
;

1563 
uöt32_t
 *
ˇ_rdma_úd_vÆ
;

1564 } 
ˇ_rdma_úd
;

1566 
ch™√l_©ås4
 
	tch™√l_©ås4
;

1567 
	#CREATE_SESSION4_FLAG_PERSIST
 0x00000001

	)

1568 
	#CREATE_SESSION4_FLAG_CONN_BACK_CHAN
 0x00000002

	)

1569 
	#CREATE_SESSION4_FLAG_CONN_RDMA
 0x00000004

	)

1571 
	sCREATE_SESSION4¨gs
 {

1572 
˛õ¡id4
 
cß_˛õ¡id
;

1573 
£quí˚id4
 
cß_£quí˚
;

1574 
uöt32_t
 
cß_Êags
;

1575 
ch™√l_©ås4
 
cß_f‹e_ch™_©ås
;

1576 
ch™√l_©ås4
 
cß_back_ch™_©ås
;

1577 
uöt32_t
 
cß_cb_¥ogøm
;

1579 
u_öt
 
cß_£c_∑rms_Àn
;

1580 
ˇŒback_£c_∑rms4
 *
cß_£c_∑rms_vÆ
;

1581 } 
cß_£c_∑rms
;

1583 
CREATE_SESSION4¨gs
 
	tCREATE_SESSION4¨gs
;

1585 
	sCREATE_SESSION4ªsok
 {

1586 
£ssi⁄id4
 
c§_£ssi⁄id
;

1587 
£quí˚id4
 
c§_£quí˚
;

1588 
uöt32_t
 
c§_Êags
;

1589 
ch™√l_©ås4
 
c§_f‹e_ch™_©ås
;

1590 
ch™√l_©ås4
 
c§_back_ch™_©ås
;

1592 
CREATE_SESSION4ªsok
 
	tCREATE_SESSION4ªsok
;

1594 
	sCREATE_SESSION4ªs
 {

1595 
nfs°©4
 
c§_°©us
;

1597 
CREATE_SESSION4ªsok
 
c§_ªsok4
;

1598 } 
CREATE_SESSION4ªs_u
;

1600 
CREATE_SESSION4ªs
 
	tCREATE_SESSION4ªs
;

1602 
	sDESTROY_SESSION4¨gs
 {

1603 
£ssi⁄id4
 
dß_£ssi⁄id
;

1605 
DESTROY_SESSION4¨gs
 
	tDESTROY_SESSION4¨gs
;

1607 
	sDESTROY_SESSION4ªs
 {

1608 
nfs°©4
 
d§_°©us
;

1610 
DESTROY_SESSION4ªs
 
	tDESTROY_SESSION4ªs
;

1612 
	sFREE_STATEID4¨gs
 {

1613 
°©eid4
 
fß_°©eid
;

1615 
FREE_STATEID4¨gs
 
	tFREE_STATEID4¨gs
;

1617 
	sFREE_STATEID4ªs
 {

1618 
nfs°©4
 
f§_°©us
;

1620 
FREE_STATEID4ªs
 
	tFREE_STATEID4ªs
;

1622 
nf°ime4
 
	t©å_nŸi˚4
;

1624 
	sGET_DIR_DELEGATION4¨gs
 {

1625 
uöt32_t
 
gdda_sig«l_dñeg_avaû
;

1626 
bôm≠4
 
gdda_nŸifiˇti⁄_ty≥s
;

1627 
©å_nŸi˚4
 
gdda_chûd_©å_dñay
;

1628 
©å_nŸi˚4
 
gdda_dú_©å_dñay
;

1629 
bôm≠4
 
gdda_chûd_©åibuãs
;

1630 
bôm≠4
 
gdda_dú_©åibuãs
;

1632 
GET_DIR_DELEGATION4¨gs
 
	tGET_DIR_DELEGATION4¨gs
;

1634 
	sGET_DIR_DELEGATION4ªsok
 {

1635 
vîifõr4
 
gddr_cookõvîf
;

1636 
°©eid4
 
gddr_°©eid
;

1637 
bôm≠4
 
gddr_nŸifiˇti⁄
;

1638 
bôm≠4
 
gddr_chûd_©åibuãs
;

1639 
bôm≠4
 
gddr_dú_©åibuãs
;

1641 
GET_DIR_DELEGATION4ªsok
 
	tGET_DIR_DELEGATION4ªsok
;

1643 
	egdd∫f4_°©us
 {

1644 
GDD4_OK
 = 0,

1645 
GDD4_UNAVAIL
 = 1,

1647 
gdd∫f4_°©us
 
	tgdd∫f4_°©us
;

1649 
	sGET_DIR_DELEGATION4ªs_n⁄_Áèl
 {

1650 
gdd∫f4_°©us
 
gdd∫f_°©us
;

1652 
GET_DIR_DELEGATION4ªsok
 
gdd∫f_ªsok4
;

1653 
uöt32_t
 
gdd∫f_wûl_sig«l_dñeg_avaû
;

1654 } 
GET_DIR_DELEGATION4ªs_n⁄_Áèl_u
;

1656 
GET_DIR_DELEGATION4ªs_n⁄_Áèl
 
	tGET_DIR_DELEGATION4ªs_n⁄_Áèl
;

1658 
	sGET_DIR_DELEGATION4ªs
 {

1659 
nfs°©4
 
gddr_°©us
;

1661 
GET_DIR_DELEGATION4ªs_n⁄_Áèl
 
gddr_ªs_n⁄_Áèl4
;

1662 } 
GET_DIR_DELEGATION4ªs_u
;

1664 
GET_DIR_DELEGATION4ªs
 
	tGET_DIR_DELEGATION4ªs
;

1666 
	sGETDEVICEINFO4¨gs
 {

1667 
devi˚id4
 
gdü_devi˚_id
;

1668 
œyouây≥4
 
gdü_œyout_ty≥
;

1669 
cou¡4
 
gdü_maxcou¡
;

1670 
bôm≠4
 
gdü_nŸify_ty≥s
;

1672 
GETDEVICEINFO4¨gs
 
	tGETDEVICEINFO4¨gs
;

1674 
	sGETDEVICEINFO4ªsok
 {

1675 
devi˚_addr4
 
gdú_devi˚_addr
;

1676 
bôm≠4
 
gdú_nŸifiˇti⁄
;

1678 
GETDEVICEINFO4ªsok
 
	tGETDEVICEINFO4ªsok
;

1680 
	sGETDEVICEINFO4ªs
 {

1681 
nfs°©4
 
gdú_°©us
;

1683 
GETDEVICEINFO4ªsok
 
gdú_ªsok4
;

1684 
cou¡4
 
gdú_möcou¡
;

1685 } 
GETDEVICEINFO4ªs_u
;

1687 
GETDEVICEINFO4ªs
 
	tGETDEVICEINFO4ªs
;

1689 
	sGETDEVICELIST4¨gs
 {

1690 
œyouây≥4
 
gdœ_œyout_ty≥
;

1691 
cou¡4
 
gdœ_maxdevi˚s
;

1692 
nfs_cookõ4
 
gdœ_cookõ
;

1693 
vîifõr4
 
gdœ_cookõvîf
;

1695 
GETDEVICELIST4¨gs
 
	tGETDEVICELIST4¨gs
;

1697 
	sGETDEVICELIST4ªsok
 {

1698 
nfs_cookõ4
 
gdÃ_cookõ
;

1699 
vîifõr4
 
gdÃ_cookõvîf
;

1701 
u_öt
 
gdÃ_devi˚id_li°_Àn
;

1702 
devi˚id4
 *
gdÃ_devi˚id_li°_vÆ
;

1703 } 
gdÃ_devi˚id_li°
;

1704 
uöt32_t
 
gdÃ_eof
;

1706 
GETDEVICELIST4ªsok
 
	tGETDEVICELIST4ªsok
;

1708 
	sGETDEVICELIST4ªs
 {

1709 
nfs°©4
 
gdÃ_°©us
;

1711 
GETDEVICELIST4ªsok
 
gdÃ_ªsok4
;

1712 } 
GETDEVICELIST4ªs_u
;

1714 
GETDEVICELIST4ªs
 
	tGETDEVICELIST4ªs
;

1716 
	s√wtime4
 {

1717 
uöt32_t
 
¡_timech™ged
;

1719 
nf°ime4
 
¡_time
;

1720 } 
√wtime4_u
;

1722 
√wtime4
 
	t√wtime4
;

1724 
	s√woff£t4
 {

1725 
uöt32_t
 
no_√woff£t
;

1727 
off£t4
 
no_off£t
;

1728 } 
√woff£t4_u
;

1730 
√woff£t4
 
	t√woff£t4
;

1732 
	sLAYOUTCOMMIT4¨gs
 {

1733 
off£t4
 
loˇ_off£t
;

1734 
Àngth4
 
loˇ_Àngth
;

1735 
uöt32_t
 
loˇ_ª˛aim
;

1736 
°©eid4
 
loˇ_°©eid
;

1737 
√woff£t4
 
loˇ_œ°_wrôe_off£t
;

1738 
√wtime4
 
loˇ_time_modify
;

1739 
œyoutupd©e4
 
loˇ_œyoutupd©e
;

1741 
LAYOUTCOMMIT4¨gs
 
	tLAYOUTCOMMIT4¨gs
;

1743 
	s√wsize4
 {

1744 
uöt32_t
 
ns_sizech™ged
;

1746 
Àngth4
 
ns_size
;

1747 } 
√wsize4_u
;

1749 
√wsize4
 
	t√wsize4
;

1751 
	sLAYOUTCOMMIT4ªsok
 {

1752 
√wsize4
 
lo¸_√wsize
;

1754 
LAYOUTCOMMIT4ªsok
 
	tLAYOUTCOMMIT4ªsok
;

1756 
	sLAYOUTCOMMIT4ªs
 {

1757 
nfs°©4
 
lo¸_°©us
;

1759 
LAYOUTCOMMIT4ªsok
 
lo¸_ªsok4
;

1760 } 
LAYOUTCOMMIT4ªs_u
;

1762 
LAYOUTCOMMIT4ªs
 
	tLAYOUTCOMMIT4ªs
;

1764 
	sLAYOUTGET4¨gs
 {

1765 
uöt32_t
 
loga_sig«l_œyout_avaû
;

1766 
œyouây≥4
 
loga_œyout_ty≥
;

1767 
œyoutiomode4
 
loga_iomode
;

1768 
off£t4
 
loga_off£t
;

1769 
Àngth4
 
loga_Àngth
;

1770 
Àngth4
 
loga_möÀngth
;

1771 
°©eid4
 
loga_°©eid
;

1772 
cou¡4
 
loga_maxcou¡
;

1774 
LAYOUTGET4¨gs
 
	tLAYOUTGET4¨gs
;

1776 
	sLAYOUTGET4ªsok
 {

1777 
uöt32_t
 
logr_ªtu∫_⁄_˛o£
;

1778 
°©eid4
 
logr_°©eid
;

1780 
u_öt
 
logr_œyout_Àn
;

1781 
œyout4
 *
logr_œyout_vÆ
;

1782 } 
logr_œyout
;

1784 
LAYOUTGET4ªsok
 
	tLAYOUTGET4ªsok
;

1786 
	sLAYOUTGET4ªs
 {

1787 
nfs°©4
 
logr_°©us
;

1789 
LAYOUTGET4ªsok
 
logr_ªsok4
;

1790 
uöt32_t
 
logr_wûl_sig«l_œyout_avaû
;

1791 } 
LAYOUTGET4ªs_u
;

1793 
LAYOUTGET4ªs
 
	tLAYOUTGET4ªs
;

1794 
	#LAYOUT4_RET_REC_FILE
 1

	)

1795 
	#LAYOUT4_RET_REC_FSID
 2

	)

1796 
	#LAYOUT4_RET_REC_ALL
 3

	)

1798 
	eœyouåëu∫_ty≥4
 {

1799 
LAYOUTRETURN4_FILE
 = 
LAYOUT4_RET_REC_FILE
,

1800 
LAYOUTRETURN4_FSID
 = 
LAYOUT4_RET_REC_FSID
,

1801 
LAYOUTRETURN4_ALL
 = 
LAYOUT4_RET_REC_ALL
,

1803 
œyouåëu∫_ty≥4
 
	tœyouåëu∫_ty≥4
;

1805 
	sœyouåëu∫_fûe4
 {

1806 
off£t4
 
Ãf_off£t
;

1807 
Àngth4
 
Ãf_Àngth
;

1808 
°©eid4
 
Ãf_°©eid
;

1810 
u_öt
 
Ãf_body_Àn
;

1811 *
Ãf_body_vÆ
;

1812 } 
Ãf_body
;

1814 
œyouåëu∫_fûe4
 
	tœyouåëu∫_fûe4
;

1816 
	sœyouåëu∫4
 {

1817 
œyouåëu∫_ty≥4
 
Ã_ªtu∫ty≥
;

1819 
œyouåëu∫_fûe4
 
Ã_œyout
;

1820 } 
œyouåëu∫4_u
;

1822 
œyouåëu∫4
 
	tœyouåëu∫4
;

1824 
	sLAYOUTRETURN4¨gs
 {

1825 
uöt32_t
 
l‹a_ª˛aim
;

1826 
œyouây≥4
 
l‹a_œyout_ty≥
;

1827 
œyoutiomode4
 
l‹a_iomode
;

1828 
œyouåëu∫4
 
l‹a_œyouåëu∫
;

1830 
LAYOUTRETURN4¨gs
 
	tLAYOUTRETURN4¨gs
;

1832 
	sœyouåëu∫_°©eid
 {

1833 
uöt32_t
 
Ãs_¥e£¡
;

1835 
°©eid4
 
Ãs_°©eid
;

1836 } 
œyouåëu∫_°©eid_u
;

1838 
œyouåëu∫_°©eid
 
	tœyouåëu∫_°©eid
;

1840 
	sLAYOUTRETURN4ªs
 {

1841 
nfs°©4
 
l‹r_°©us
;

1843 
œyouåëu∫_°©eid
 
l‹r_°©eid
;

1844 } 
LAYOUTRETURN4ªs_u
;

1846 
LAYOUTRETURN4ªs
 
	tLAYOUTRETURN4ªs
;

1848 
	e£cöfo_°yÀ4
 {

1849 
SECINFO_STYLE4_CURRENT_FH
 = 0,

1850 
SECINFO_STYLE4_PARENT
 = 1,

1852 
£cöfo_°yÀ4
 
	t£cöfo_°yÀ4
;

1854 
£cöfo_°yÀ4
 
	tSECINFO_NO_NAME4¨gs
;

1856 
SECINFO4ªs
 
	tSECINFO_NO_NAME4ªs
;

1858 
	sSEQUENCE4¨gs
 {

1859 
£ssi⁄id4
 
ß_£ssi⁄id
;

1860 
£quí˚id4
 
ß_£quí˚id
;

1861 
¶Ÿid4
 
ß_¶Ÿid
;

1862 
¶Ÿid4
 
ß_highe°_¶Ÿid
;

1863 
uöt32_t
 
ß_ˇchëhis
;

1865 
SEQUENCE4¨gs
 
	tSEQUENCE4¨gs
;

1866 
	#SEQ4_STATUS_CB_PATH_DOWN
 0x00000001

	)

1867 
	#SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRING
 0x00000002

	)

1868 
	#SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRED
 0x00000004

	)

1869 
	#SEQ4_STATUS_EXPIRED_ALL_STATE_REVOKED
 0x00000008

	)

1870 
	#SEQ4_STATUS_EXPIRED_SOME_STATE_REVOKED
 0x00000010

	)

1871 
	#SEQ4_STATUS_ADMIN_STATE_REVOKED
 0x00000020

	)

1872 
	#SEQ4_STATUS_RECALLABLE_STATE_REVOKED
 0x00000040

	)

1873 
	#SEQ4_STATUS_LEASE_MOVED
 0x00000080

	)

1874 
	#SEQ4_STATUS_RESTART_RECLAIM_NEEDED
 0x00000100

	)

1875 
	#SEQ4_STATUS_CB_PATH_DOWN_SESSION
 0x00000200

	)

1876 
	#SEQ4_STATUS_BACKCHANNEL_FAULT
 0x00000400

	)

1877 
	#SEQ4_STATUS_DEVID_CHANGED
 0x00000800

	)

1878 
	#SEQ4_STATUS_DEVID_DELETED
 0x00001000

	)

1880 
	sSEQUENCE4ªsok
 {

1881 
£ssi⁄id4
 
§_£ssi⁄id
;

1882 
£quí˚id4
 
§_£quí˚id
;

1883 
¶Ÿid4
 
§_¶Ÿid
;

1884 
¶Ÿid4
 
§_highe°_¶Ÿid
;

1885 
¶Ÿid4
 
§_èrgë_highe°_¶Ÿid
;

1886 
uöt32_t
 
§_°©us_Êags
;

1888 
SEQUENCE4ªsok
 
	tSEQUENCE4ªsok
;

1890 
	sSEQUENCE4ªs
 {

1891 
nfs°©4
 
§_°©us
;

1893 
SEQUENCE4ªsok
 
§_ªsok4
;

1894 } 
SEQUENCE4ªs_u
;

1896 
SEQUENCE4ªs
 
	tSEQUENCE4ªs
;

1898 
	ssß_dige°_öput4
 {

1899 
SEQUENCE4¨gs
 
sdi_£q¨gs
;

1901 
sß_dige°_öput4
 
	tsß_dige°_öput4
;

1903 
	sSET_SSV4¨gs
 {

1905 
u_öt
 
sß_ssv_Àn
;

1906 *
sß_ssv_vÆ
;

1907 } 
sß_ssv
;

1909 
u_öt
 
sß_dige°_Àn
;

1910 *
sß_dige°_vÆ
;

1911 } 
sß_dige°
;

1913 
SET_SSV4¨gs
 
	tSET_SSV4¨gs
;

1915 
	ss§_dige°_öput4
 {

1916 
SEQUENCE4ªs
 
sdi_£qªs
;

1918 
s§_dige°_öput4
 
	ts§_dige°_öput4
;

1920 
	sSET_SSV4ªsok
 {

1922 
u_öt
 
s§_dige°_Àn
;

1923 *
s§_dige°_vÆ
;

1924 } 
s§_dige°
;

1926 
SET_SSV4ªsok
 
	tSET_SSV4ªsok
;

1928 
	sSET_SSV4ªs
 {

1929 
nfs°©4
 
s§_°©us
;

1931 
SET_SSV4ªsok
 
s§_ªsok4
;

1932 } 
SET_SSV4ªs_u
;

1934 
SET_SSV4ªs
 
	tSET_SSV4ªs
;

1936 
	sTEST_STATEID4¨gs
 {

1938 
u_öt
 
ts_°©eids_Àn
;

1939 
°©eid4
 *
ts_°©eids_vÆ
;

1940 } 
ts_°©eids
;

1942 
TEST_STATEID4¨gs
 
	tTEST_STATEID4¨gs
;

1944 
	sTEST_STATEID4ªsok
 {

1946 
u_öt
 
t§_°©us_codes_Àn
;

1947 
nfs°©4
 *
t§_°©us_codes_vÆ
;

1948 } 
t§_°©us_codes
;

1950 
TEST_STATEID4ªsok
 
	tTEST_STATEID4ªsok
;

1952 
	sTEST_STATEID4ªs
 {

1953 
nfs°©4
 
t§_°©us
;

1955 
TEST_STATEID4ªsok
 
t§_ªsok4
;

1956 } 
TEST_STATEID4ªs_u
;

1958 
TEST_STATEID4ªs
 
	tTEST_STATEID4ªs
;

1960 
	sdñeg_˛aim4
 {

1961 
›í_˛aim_ty≥4
 
dc_˛aim
;

1963 
›í_dñeg©i⁄_ty≥4
 
dc_dñeg©e_ty≥
;

1964 } 
dñeg_˛aim4_u
;

1966 
dñeg_˛aim4
 
	tdñeg_˛aim4
;

1968 
	sWANT_DELEGATION4¨gs
 {

1969 
uöt32_t
 
wda_w™t
;

1970 
dñeg_˛aim4
 
wda_˛aim
;

1972 
WANT_DELEGATION4¨gs
 
	tWANT_DELEGATION4¨gs
;

1974 
	sWANT_DELEGATION4ªs
 {

1975 
nfs°©4
 
wdr_°©us
;

1977 
›í_dñeg©i⁄4
 
wdr_ªsok4
;

1978 } 
WANT_DELEGATION4ªs_u
;

1980 
WANT_DELEGATION4ªs
 
	tWANT_DELEGATION4ªs
;

1982 
	sDESTROY_CLIENTID4¨gs
 {

1983 
˛õ¡id4
 
dˇ_˛õ¡id
;

1985 
DESTROY_CLIENTID4¨gs
 
	tDESTROY_CLIENTID4¨gs
;

1987 
	sDESTROY_CLIENTID4ªs
 {

1988 
nfs°©4
 
d¸_°©us
;

1990 
DESTROY_CLIENTID4ªs
 
	tDESTROY_CLIENTID4ªs
;

1992 
	sRECLAIM_COMPLETE4¨gs
 {

1993 
uöt32_t
 
rˇ_⁄e_fs
;

1995 
RECLAIM_COMPLETE4¨gs
 
	tRECLAIM_COMPLETE4¨gs
;

1997 
	sRECLAIM_COMPLETE4ªs
 {

1998 
nfs°©4
 
r¸_°©us
;

2000 
RECLAIM_COMPLETE4ªs
 
	tRECLAIM_COMPLETE4ªs
;

2002 
	sILLEGAL4ªs
 {

2003 
nfs°©4
 
°©us
;

2005 
ILLEGAL4ªs
 
	tILLEGAL4ªs
;

2007 
	enfs_›num4
 {

2008 
OP_ACCESS
 = 3,

2009 
OP_CLOSE
 = 4,

2010 
OP_COMMIT
 = 5,

2011 
OP_CREATE
 = 6,

2012 
OP_DELEGPURGE
 = 7,

2013 
OP_DELEGRETURN
 = 8,

2014 
OP_GETATTR
 = 9,

2015 
OP_GETFH
 = 10,

2016 
OP_LINK
 = 11,

2017 
OP_LOCK
 = 12,

2018 
OP_LOCKT
 = 13,

2019 
OP_LOCKU
 = 14,

2020 
OP_LOOKUP
 = 15,

2021 
OP_LOOKUPP
 = 16,

2022 
OP_NVERIFY
 = 17,

2023 
OP_OPEN
 = 18,

2024 
OP_OPENATTR
 = 19,

2025 
OP_OPEN_CONFIRM
 = 20,

2026 
OP_OPEN_DOWNGRADE
 = 21,

2027 
OP_PUTFH
 = 22,

2028 
OP_PUTPUBFH
 = 23,

2029 
OP_PUTROOTFH
 = 24,

2030 
OP_READ
 = 25,

2031 
OP_READDIR
 = 26,

2032 
OP_READLINK
 = 27,

2033 
OP_REMOVE
 = 28,

2034 
OP_RENAME
 = 29,

2035 
OP_RENEW
 = 30,

2036 
OP_RESTOREFH
 = 31,

2037 
OP_SAVEFH
 = 32,

2038 
OP_SECINFO
 = 33,

2039 
OP_SETATTR
 = 34,

2040 
OP_SETCLIENTID
 = 35,

2041 
OP_SETCLIENTID_CONFIRM
 = 36,

2042 
OP_VERIFY
 = 37,

2043 
OP_WRITE
 = 38,

2044 
OP_RELEASE_LOCKOWNER
 = 39,

2045 
OP_BIND_CONN_TO_SESSION
 = 41,

2046 
OP_EXCHANGE_ID
 = 42,

2047 
OP_CREATE_SESSION
 = 43,

2048 
OP_DESTROY_SESSION
 = 44,

2049 
OP_FREE_STATEID
 = 45,

2050 
OP_GET_DIR_DELEGATION
 = 46,

2051 
OP_GETDEVICEINFO
 = 47,

2052 
OP_GETDEVICELIST
 = 48,

2053 
OP_LAYOUTCOMMIT
 = 49,

2054 
OP_LAYOUTGET
 = 50,

2055 
OP_LAYOUTRETURN
 = 51,

2056 
OP_SECINFO_NO_NAME
 = 52,

2057 
OP_SEQUENCE
 = 53,

2058 
OP_SET_SSV
 = 54,

2059 
OP_TEST_STATEID
 = 55,

2060 
OP_WANT_DELEGATION
 = 56,

2061 
OP_DESTROY_CLIENTID
 = 57,

2062 
OP_RECLAIM_COMPLETE
 = 58,

2063 
OP_ILLEGAL
 = 10044,

2065 
nfs_›num4
 
	tnfs_›num4
;

2067 
	snfs_¨g›4
 {

2068 
nfs_›num4
 
¨g›
;

2070 
ACCESS4¨gs
 
›ac˚ss
;

2071 
CLOSE4¨gs
 
›˛o£
;

2072 
COMMIT4¨gs
 
›commô
;

2073 
CREATE4¨gs
 
›¸óã
;

2074 
DELEGPURGE4¨gs
 
›dñegpurge
;

2075 
DELEGRETURN4¨gs
 
›dñegªtu∫
;

2076 
GETATTR4¨gs
 
›gë©å
;

2077 
LINK4¨gs
 
›lök
;

2078 
LOCK4¨gs
 
›lock
;

2079 
LOCKT4¨gs
 
›lockt
;

2080 
LOCKU4¨gs
 
›locku
;

2081 
LOOKUP4¨gs
 
›lookup
;

2082 
NVERIFY4¨gs
 
›nvîify
;

2083 
OPEN4¨gs
 
››í
;

2084 
OPENATTR4¨gs
 
››í©å
;

2085 
OPEN_CONFIRM4¨gs
 
››í_c⁄fúm
;

2086 
OPEN_DOWNGRADE4¨gs
 
››í_downgøde
;

2087 
PUTFH4¨gs
 
›putfh
;

2088 
READ4¨gs
 
›ªad
;

2089 
READDIR4¨gs
 
›ªaddú
;

2090 
REMOVE4¨gs
 
›ªmove
;

2091 
RENAME4¨gs
 
›ª«me
;

2092 
RENEW4¨gs
 
›ª√w
;

2093 
SECINFO4¨gs
 
›£cöfo
;

2094 
SETATTR4¨gs
 
›£èâr
;

2095 
SETCLIENTID4¨gs
 
›£t˛õ¡id
;

2096 
SETCLIENTID_CONFIRM4¨gs
 
›£t˛õ¡id_c⁄fúm
;

2097 
VERIFY4¨gs
 
›vîify
;

2098 
WRITE4¨gs
 
›wrôe
;

2099 
RELEASE_LOCKOWNER4¨gs
 
›ªÀa£_lockow√r
;

2100 
BIND_CONN_TO_SESSION4¨gs
 
›bödc⁄¡o£ssi⁄
;

2101 
EXCHANGE_ID4¨gs
 
›exch™geid
;

2102 
CREATE_SESSION4¨gs
 
›¸óã£ssi⁄
;

2103 
DESTROY_SESSION4¨gs
 
›de°roy£ssi⁄
;

2104 
FREE_STATEID4¨gs
 
›‰ì°©eid
;

2105 
GET_DIR_DELEGATION4¨gs
 
›gëdúdñeg©i⁄
;

2106 
GETDEVICEINFO4¨gs
 
›gëdevi˚öfo
;

2107 
GETDEVICELIST4¨gs
 
›gëdevi˚li°
;

2108 
LAYOUTCOMMIT4¨gs
 
›œyoutcommô
;

2109 
LAYOUTGET4¨gs
 
›œyoutgë
;

2110 
LAYOUTRETURN4¨gs
 
›œyouåëu∫
;

2111 
SECINFO_NO_NAME4¨gs
 
›£cöf⁄⁄ame
;

2112 
SEQUENCE4¨gs
 
›£quí˚
;

2113 
SET_SSV4¨gs
 
›£tssv
;

2114 
TEST_STATEID4¨gs
 
›ã°°©eid
;

2115 
WANT_DELEGATION4¨gs
 
›w™tdñeg©i⁄
;

2116 
DESTROY_CLIENTID4¨gs
 
›de°roy˛õ¡id
;

2117 
RECLAIM_COMPLETE4¨gs
 
›ª˛aimcom∂ëe
;

2118 } 
nfs_¨g›4_u
;

2120 
nfs_¨g›4
 
	tnfs_¨g›4
;

2122 
	snfs_ªs›4
 {

2123 
nfs_›num4
 
ªs›
;

2125 
ACCESS4ªs
 
›ac˚ss
;

2126 
CLOSE4ªs
 
›˛o£
;

2127 
COMMIT4ªs
 
›commô
;

2128 
CREATE4ªs
 
›¸óã
;

2129 
DELEGPURGE4ªs
 
›dñegpurge
;

2130 
DELEGRETURN4ªs
 
›dñegªtu∫
;

2131 
GETATTR4ªs
 
›gë©å
;

2132 
GETFH4ªs
 
›gëfh
;

2133 
LINK4ªs
 
›lök
;

2134 
LOCK4ªs
 
›lock
;

2135 
LOCKT4ªs
 
›lockt
;

2136 
LOCKU4ªs
 
›locku
;

2137 
LOOKUP4ªs
 
›lookup
;

2138 
LOOKUPP4ªs
 
›lookuµ
;

2139 
NVERIFY4ªs
 
›nvîify
;

2140 
OPEN4ªs
 
››í
;

2141 
OPENATTR4ªs
 
››í©å
;

2142 
OPEN_CONFIRM4ªs
 
››í_c⁄fúm
;

2143 
OPEN_DOWNGRADE4ªs
 
››í_downgøde
;

2144 
PUTFH4ªs
 
›putfh
;

2145 
PUTPUBFH4ªs
 
›puçubfh
;

2146 
PUTROOTFH4ªs
 
›puåoŸfh
;

2147 
READ4ªs
 
›ªad
;

2148 
READDIR4ªs
 
›ªaddú
;

2149 
READLINK4ªs
 
›ªadlök
;

2150 
REMOVE4ªs
 
›ªmove
;

2151 
RENAME4ªs
 
›ª«me
;

2152 
RENEW4ªs
 
›ª√w
;

2153 
RESTOREFH4ªs
 
›ª°‹efh
;

2154 
SAVEFH4ªs
 
›ßvefh
;

2155 
SECINFO4ªs
 
›£cöfo
;

2156 
SETATTR4ªs
 
›£èâr
;

2157 
SETCLIENTID4ªs
 
›£t˛õ¡id
;

2158 
SETCLIENTID_CONFIRM4ªs
 
›£t˛õ¡id_c⁄fúm
;

2159 
VERIFY4ªs
 
›vîify
;

2160 
WRITE4ªs
 
›wrôe
;

2161 
RELEASE_LOCKOWNER4ªs
 
›ªÀa£_lockow√r
;

2162 
BIND_CONN_TO_SESSION4ªs
 
›bödc⁄¡o£ssi⁄
;

2163 
EXCHANGE_ID4ªs
 
›exch™geid
;

2164 
CREATE_SESSION4ªs
 
›¸óã£ssi⁄
;

2165 
DESTROY_SESSION4ªs
 
›de°roy£ssi⁄
;

2166 
FREE_STATEID4ªs
 
›‰ì°©eid
;

2167 
GET_DIR_DELEGATION4ªs
 
›gëdúdñeg©i⁄
;

2168 
GETDEVICEINFO4ªs
 
›gëdevi˚öfo
;

2169 
GETDEVICELIST4ªs
 
›gëdevi˚li°
;

2170 
LAYOUTCOMMIT4ªs
 
›œyoutcommô
;

2171 
LAYOUTGET4ªs
 
›œyoutgë
;

2172 
LAYOUTRETURN4ªs
 
›œyouåëu∫
;

2173 
SECINFO_NO_NAME4ªs
 
›£cöf⁄⁄ame
;

2174 
SEQUENCE4ªs
 
›£quí˚
;

2175 
SET_SSV4ªs
 
›£tssv
;

2176 
TEST_STATEID4ªs
 
›ã°°©eid
;

2177 
WANT_DELEGATION4ªs
 
›w™tdñeg©i⁄
;

2178 
DESTROY_CLIENTID4ªs
 
›de°roy˛õ¡id
;

2179 
RECLAIM_COMPLETE4ªs
 
›ª˛aimcom∂ëe
;

2180 
ILLEGAL4ªs
 
›ûÀgÆ
;

2181 } 
nfs_ªs›4_u
;

2183 
nfs_ªs›4
 
	tnfs_ªs›4
;

2185 
	sCOMPOUND4¨gs
 {

2186 
utf8°r_cs
 
èg
;

2187 
uöt32_t
 
mö‹vîsi⁄
;

2189 
u_öt
 
¨g¨øy_Àn
;

2190 
nfs_¨g›4
 *
¨g¨øy_vÆ
;

2191 } 
¨g¨øy
;

2193 
COMPOUND4¨gs
 
	tCOMPOUND4¨gs
;

2195 
	sCOMPOUND4ªs
 {

2196 
nfs°©4
 
°©us
;

2197 
utf8°r_cs
 
èg
;

2199 
u_öt
 
ªßºay_Àn
;

2200 
nfs_ªs›4
 *
ªßºay_vÆ
;

2201 } 
ªßºay
;

2203 
COMPOUND4ªs
 
	tCOMPOUND4ªs
;

2205 
	sCB_GETATTR4¨gs
 {

2206 
nfs_fh4
 
fh
;

2207 
bôm≠4
 
©å_ªque°
;

2209 
CB_GETATTR4¨gs
 
	tCB_GETATTR4¨gs
;

2211 
	sCB_GETATTR4ªsok
 {

2212 
Áâr4
 
obj_©åibuãs
;

2214 
CB_GETATTR4ªsok
 
	tCB_GETATTR4ªsok
;

2216 
	sCB_GETATTR4ªs
 {

2217 
nfs°©4
 
°©us
;

2219 
CB_GETATTR4ªsok
 
ªsok4
;

2220 } 
CB_GETATTR4ªs_u
;

2222 
CB_GETATTR4ªs
 
	tCB_GETATTR4ªs
;

2224 
	sCB_RECALL4¨gs
 {

2225 
°©eid4
 
°©eid
;

2226 
uöt32_t
 
åunˇã
;

2227 
nfs_fh4
 
fh
;

2229 
CB_RECALL4¨gs
 
	tCB_RECALL4¨gs
;

2231 
	sCB_RECALL4ªs
 {

2232 
nfs°©4
 
°©us
;

2234 
CB_RECALL4ªs
 
	tCB_RECALL4ªs
;

2236 
	sCB_ILLEGAL4ªs
 {

2237 
nfs°©4
 
°©us
;

2239 
CB_ILLEGAL4ªs
 
	tCB_ILLEGAL4ªs
;

2241 
	enfs_cb_›num4
 {

2242 
OP_CB_GETATTR
 = 3,

2243 
OP_CB_RECALL
 = 4,

2244 
OP_CB_ILLEGAL
 = 10044,

2246 
nfs_cb_›num4
 
	tnfs_cb_›num4
;

2248 
	snfs_cb_¨g›4
 {

2249 
u_öt
 
¨g›
;

2251 
CB_GETATTR4¨gs
 
›cbgë©å
;

2252 
CB_RECALL4¨gs
 
›cbªˇŒ
;

2253 } 
nfs_cb_¨g›4_u
;

2255 
nfs_cb_¨g›4
 
	tnfs_cb_¨g›4
;

2257 
	snfs_cb_ªs›4
 {

2258 
u_öt
 
ªs›
;

2260 
CB_GETATTR4ªs
 
›cbgë©å
;

2261 
CB_RECALL4ªs
 
›cbªˇŒ
;

2262 
CB_ILLEGAL4ªs
 
›cbûÀgÆ
;

2263 } 
nfs_cb_ªs›4_u
;

2265 
nfs_cb_ªs›4
 
	tnfs_cb_ªs›4
;

2267 
	sCB_COMPOUND4¨gs
 {

2268 
utf8°r_cs
 
èg
;

2269 
uöt32_t
 
mö‹vîsi⁄
;

2270 
uöt32_t
 
ˇŒback_idít
;

2272 
u_öt
 
¨g¨øy_Àn
;

2273 
nfs_cb_¨g›4
 *
¨g¨øy_vÆ
;

2274 } 
¨g¨øy
;

2276 
CB_COMPOUND4¨gs
 
	tCB_COMPOUND4¨gs
;

2278 
	sCB_COMPOUND4ªs
 {

2279 
nfs°©4
 
°©us
;

2280 
utf8°r_cs
 
èg
;

2282 
u_öt
 
ªßºay_Àn
;

2283 
nfs_cb_ªs›4
 *
ªßºay_vÆ
;

2284 } 
ªßºay
;

2286 
CB_COMPOUND4ªs
 
	tCB_COMPOUND4ªs
;

2288 
	eΩc_gss_¥oc_t
 {

2289 
RPCSEC_GSS_DATA
 = 0,

2290 
RPCSEC_GSS_INIT
 = 1,

2291 
RPCSEC_GSS_CONTINUE_INIT
 = 2,

2292 
RPCSEC_GSS_DESTROY
 = 3,

2294 
Ωc_gss_¥oc_t
 
	tΩc_gss_¥oc_t
;

2296 
	sΩc_gss_¸ed_vîs_1_t
 {

2297 
Ωc_gss_¥oc_t
 
gss_¥oc
;

2298 
u_öt
 
£q_num
;

2299 
Ωc_gss_svc_t
 
£rvi˚
;

2301 
u_öt
 
h™dÀ_Àn
;

2302 *
h™dÀ_vÆ
;

2303 } 
h™dÀ
;

2305 
Ωc_gss_¸ed_vîs_1_t
 
	tΩc_gss_¸ed_vîs_1_t
;

2306 
	#RPCSEC_GSS_VERS_1
 1

	)

2308 
	sΩc_gss_¸ed_t
 {

2309 
u_öt
 
vîs
;

2311 
Ωc_gss_¸ed_vîs_1_t
Ñpc_gss_cred_vers_1_t;

2312 } 
Ωc_gss_¸ed_t_u
;

2314 
Ωc_gss_¸ed_t
 
	tΩc_gss_¸ed_t
;

2316 
	sΩc_gss_öô_¨g
 {

2318 
u_öt
 
gss_tokí_Àn
;

2319 *
gss_tokí_vÆ
;

2320 } 
gss_tokí
;

2322 
Ωc_gss_öô_¨g
 
	tΩc_gss_öô_¨g
;

2324 
	sΩc_gss_öô_ªs
 {

2326 
u_öt
 
h™dÀ_Àn
;

2327 *
h™dÀ_vÆ
;

2328 } 
h™dÀ
;

2329 
u_öt
 
gss_maj‹
;

2330 
u_öt
 
gss_mö‹
;

2331 
u_öt
 
£q_wödow
;

2333 
u_öt
 
gss_tokí_Àn
;

2334 *
gss_tokí_vÆ
;

2335 } 
gss_tokí
;

2337 
Ωc_gss_öô_ªs
 
	tΩc_gss_öô_ªs
;

2339 
	sΩc_gss_öãg_d©a
 {

2341 
u_öt
 
d©abody_öãg_Àn
;

2342 *
d©abody_öãg_vÆ
;

2343 } 
d©abody_öãg
;

2345 
u_öt
 
checksum_Àn
;

2346 *
checksum_vÆ
;

2347 } 
checksum
;

2349 
Ωc_gss_öãg_d©a
 
	tΩc_gss_öãg_d©a
;

2351 
	#NFS4_PROGRAM
 100003

	)

2352 
	#NFS_V4
 4

	)

2354 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

2355 
	#NFSPROC4_NULL
 0

	)

2356 * 
nf•roc4_nuŒ_4
(*, *);

2357 * 
nf•roc4_nuŒ_4_svc
(*, 
svc_ªq
 *);

2358 
	#NFSPROC4_COMPOUND
 1

	)

2359 
COMPOUND4ªs
 * 
nf•roc4_compound_4
(
COMPOUND4¨gs
 *, *);

2360 
COMPOUND4ªs
 * 
nf•roc4_compound_4_svc
(
COMPOUND4¨gs
 *, 
svc_ªq
 *);

2361 
nfs4_¥ogøm_4_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

2364 
	#NFSPROC4_NULL
 0

	)

2365 * 
nf•roc4_nuŒ_4
();

2366 * 
nf•roc4_nuŒ_4_svc
();

2367 
	#NFSPROC4_COMPOUND
 1

	)

2368 
COMPOUND4ªs
 * 
nf•roc4_compound_4
();

2369 
COMPOUND4ªs
 * 
nf•roc4_compound_4_svc
();

2370 
nfs4_¥ogøm_4_‰ìªsu…
 ();

2373 
	#NFS4_CALLBACK
 0x40000000

	)

2374 
	#NFS_CB
 1

	)

2376 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

2377 
	#CB_NULL
 0

	)

2378 * 
cb_nuŒ_1
(*, *);

2379 * 
cb_nuŒ_1_svc
(*, 
svc_ªq
 *);

2380 
	#CB_COMPOUND
 1

	)

2381 
CB_COMPOUND4ªs
 * 
cb_compound_1
(
CB_COMPOUND4¨gs
 *, *);

2382 
CB_COMPOUND4ªs
 * 
cb_compound_1_svc
(
CB_COMPOUND4¨gs
 *, 
svc_ªq
 *);

2383 
nfs4_ˇŒback_1_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

2386 
	#CB_NULL
 0

	)

2387 * 
cb_nuŒ_1
();

2388 * 
cb_nuŒ_1_svc
();

2389 
	#CB_COMPOUND
 1

	)

2390 
CB_COMPOUND4ªs
 * 
cb_compound_1
();

2391 
CB_COMPOUND4ªs
 * 
cb_compound_1_svc
();

2392 
nfs4_ˇŒback_1_‰ìªsu…
 ();

2397 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

2398 
uöt32_t
 
zdr_nfs_·y≥4
 (
ZDR
 *, 
nfs_·y≥4
*);

2399 
uöt32_t
 
zdr_nfs°©4
 (
ZDR
 *, 
nfs°©4
*);

2400 
uöt32_t
 
zdr_bôm≠4
 (
ZDR
 *, 
bôm≠4
*);

2401 
uöt32_t
 
zdr_off£t4
 (
ZDR
 *, 
off£t4
*);

2402 
uöt32_t
 
zdr_cou¡4
 (
ZDR
 *, 
cou¡4
*);

2403 
uöt32_t
 
zdr_Àngth4
 (
ZDR
 *, 
Àngth4
*);

2404 
uöt32_t
 
zdr_˛õ¡id4
 (
ZDR
 *, 
˛õ¡id4
*);

2405 
uöt32_t
 
zdr_£quí˚id4
 (
ZDR
 *, 
£quí˚id4
*);

2406 
uöt32_t
 
zdr_£qid4
 (
ZDR
 *, 
£qid4
*);

2407 
uöt32_t
 
zdr_¶Ÿid4
 (
ZDR
 *, 
¶Ÿid4
*);

2408 
uöt32_t
 
zdr_utf8°rög
 (
ZDR
 *, 
utf8°rög
*);

2409 
uöt32_t
 
zdr_utf8°r_cis
 (
ZDR
 *, 
utf8°r_cis
*);

2410 
uöt32_t
 
zdr_utf8°r_cs
 (
ZDR
 *, 
utf8°r_cs
*);

2411 
uöt32_t
 
zdr_utf8°r_mixed
 (
ZDR
 *, 
utf8°r_mixed
*);

2412 
uöt32_t
 
zdr_comp⁄ít4
 (
ZDR
 *, 
comp⁄ít4
*);

2413 
uöt32_t
 
zdr_∑th«me4
 (
ZDR
 *, 
∑th«me4
*);

2414 
uöt32_t
 
zdr_nfs_lockid4
 (
ZDR
 *, 
nfs_lockid4
*);

2415 
uöt32_t
 
zdr_nfs_cookõ4
 (
ZDR
 *, 
nfs_cookõ4
*);

2416 
uöt32_t
 
zdr_lökãxt4
 (
ZDR
 *, 
lökãxt4
*);

2417 
uöt32_t
 
zdr_£c_oid4
 (
ZDR
 *, 
£c_oid4
*);

2418 
uöt32_t
 
zdr_q›4
 (
ZDR
 *, 
q›4
*);

2419 
uöt32_t
 
zdr_mode4
 (
ZDR
 *, 
mode4
*);

2420 
uöt32_t
 
zdr_ch™geid4
 (
ZDR
 *, 
ch™geid4
*);

2421 
uöt32_t
 
zdr_vîifõr4
 (
ZDR
 *, 
vîifõr4
);

2422 
uöt32_t
 
zdr_£ssi⁄id4
 (
ZDR
 *, 
£ssi⁄id4
);

2423 
uöt32_t
 
zdr_authsys_∑rms
 (
ZDR
 *, 
authsys_∑rms
*);

2424 
uöt32_t
 
zdr_devi˚id4
 (
ZDR
 *, 
devi˚id4
);

2425 
uöt32_t
 
zdr_œyouây≥4
 (
ZDR
 *, 
œyouây≥4
*);

2426 
uöt32_t
 
zdr_œyoutupd©e4
 (
ZDR
 *, 
œyoutupd©e4
*);

2427 
uöt32_t
 
zdr_devi˚_addr4
 (
ZDR
 *, 
devi˚_addr4
*);

2428 
uöt32_t
 
zdr_nf°ime4
 (
ZDR
 *, 
nf°ime4
*);

2429 
uöt32_t
 
zdr_time_how4
 (
ZDR
 *, 
time_how4
*);

2430 
uöt32_t
 
zdr_œyoutiomode4
 (
ZDR
 *, 
œyoutiomode4
*);

2431 
uöt32_t
 
zdr_œyout_c⁄ã¡4
 (
ZDR
 *, 
œyout_c⁄ã¡4
*);

2432 
uöt32_t
 
zdr_œyout4
 (
ZDR
 *, 
œyout4
*);

2433 
uöt32_t
 
zdr_£âime4
 (
ZDR
 *, 
£âime4
*);

2434 
uöt32_t
 
zdr_nfs_fh4
 (
ZDR
 *, 
nfs_fh4
*);

2435 
uöt32_t
 
zdr_fsid4
 (
ZDR
 *, 
fsid4
*);

2436 
uöt32_t
 
zdr_fs_loˇti⁄4
 (
ZDR
 *, 
fs_loˇti⁄4
*);

2437 
uöt32_t
 
zdr_fs_loˇti⁄s4
 (
ZDR
 *, 
fs_loˇti⁄s4
*);

2438 
uöt32_t
 
zdr_a˚ty≥4
 (
ZDR
 *, 
a˚ty≥4
*);

2439 
uöt32_t
 
zdr_a˚Êag4
 (
ZDR
 *, 
a˚Êag4
*);

2440 
uöt32_t
 
zdr_a˚mask4
 (
ZDR
 *, 
a˚mask4
*);

2441 
uöt32_t
 
zdr_nfß˚4
 (
ZDR
 *, 
nfß˚4
*);

2442 
uöt32_t
 
zdr_•ecd©a4
 (
ZDR
 *, 
•ecd©a4
*);

2443 
uöt32_t
 
zdr_Áâr4_suµ‹ãd_©ås
 (
ZDR
 *, 
Áâr4_suµ‹ãd_©ås
*);

2444 
uöt32_t
 
zdr_Áâr4_ty≥
 (
ZDR
 *, 
Áâr4_ty≥
*);

2445 
uöt32_t
 
zdr_Áâr4_fh_expúe_ty≥
 (
ZDR
 *, 
Áâr4_fh_expúe_ty≥
*);

2446 
uöt32_t
 
zdr_Áâr4_ch™ge
 (
ZDR
 *, 
Áâr4_ch™ge
*);

2447 
uöt32_t
 
zdr_Áâr4_size
 (
ZDR
 *, 
Áâr4_size
*);

2448 
uöt32_t
 
zdr_Áâr4_lök_suµ‹t
 (
ZDR
 *, 
Áâr4_lök_suµ‹t
*);

2449 
uöt32_t
 
zdr_Áâr4_symlök_suµ‹t
 (
ZDR
 *, 
Áâr4_symlök_suµ‹t
*);

2450 
uöt32_t
 
zdr_Áâr4_«med_©å
 (
ZDR
 *, 
Áâr4_«med_©å
*);

2451 
uöt32_t
 
zdr_Áâr4_fsid
 (
ZDR
 *, 
Áâr4_fsid
*);

2452 
uöt32_t
 
zdr_Áâr4_unique_h™dÀs
 (
ZDR
 *, 
Áâr4_unique_h™dÀs
*);

2453 
uöt32_t
 
zdr_Áâr4_Àa£_time
 (
ZDR
 *, 
Áâr4_Àa£_time
*);

2454 
uöt32_t
 
zdr_Áâr4_rd©å_îr‹
 (
ZDR
 *, 
Áâr4_rd©å_îr‹
*);

2455 
uöt32_t
 
zdr_Áâr4_a˛
 (
ZDR
 *, 
Áâr4_a˛
*);

2456 
uöt32_t
 
zdr_Áâr4_a˛suµ‹t
 (
ZDR
 *, 
Áâr4_a˛suµ‹t
*);

2457 
uöt32_t
 
zdr_Áâr4_¨chive
 (
ZDR
 *, 
Áâr4_¨chive
*);

2458 
uöt32_t
 
zdr_Áâr4_ˇn£âime
 (
ZDR
 *, 
Áâr4_ˇn£âime
*);

2459 
uöt32_t
 
zdr_Áâr4_ˇ£_ö£nsôive
 (
ZDR
 *, 
Áâr4_ˇ£_ö£nsôive
*);

2460 
uöt32_t
 
zdr_Áâr4_ˇ£_¥e£rvög
 (
ZDR
 *, 
Áâr4_ˇ£_¥e£rvög
*);

2461 
uöt32_t
 
zdr_Áâr4_chown_ª°ri˘ed
 (
ZDR
 *, 
Áâr4_chown_ª°ri˘ed
*);

2462 
uöt32_t
 
zdr_Áâr4_fûeid
 (
ZDR
 *, 
Áâr4_fûeid
*);

2463 
uöt32_t
 
zdr_Áâr4_fûes_avaû
 (
ZDR
 *, 
Áâr4_fûes_avaû
*);

2464 
uöt32_t
 
zdr_Áâr4_fûeh™dÀ
 (
ZDR
 *, 
Áâr4_fûeh™dÀ
*);

2465 
uöt32_t
 
zdr_Áâr4_fûes_‰ì
 (
ZDR
 *, 
Áâr4_fûes_‰ì
*);

2466 
uöt32_t
 
zdr_Áâr4_fûes_tŸÆ
 (
ZDR
 *, 
Áâr4_fûes_tŸÆ
*);

2467 
uöt32_t
 
zdr_Áâr4_fs_loˇti⁄s
 (
ZDR
 *, 
Áâr4_fs_loˇti⁄s
*);

2468 
uöt32_t
 
zdr_Áâr4_hiddí
 (
ZDR
 *, 
Áâr4_hiddí
*);

2469 
uöt32_t
 
zdr_Áâr4_homogíeous
 (
ZDR
 *, 
Áâr4_homogíeous
*);

2470 
uöt32_t
 
zdr_Áâr4_maxfûesize
 (
ZDR
 *, 
Áâr4_maxfûesize
*);

2471 
uöt32_t
 
zdr_Áâr4_maxlök
 (
ZDR
 *, 
Áâr4_maxlök
*);

2472 
uöt32_t
 
zdr_Áâr4_max«me
 (
ZDR
 *, 
Áâr4_max«me
*);

2473 
uöt32_t
 
zdr_Áâr4_maxªad
 (
ZDR
 *, 
Áâr4_maxªad
*);

2474 
uöt32_t
 
zdr_Áâr4_maxwrôe
 (
ZDR
 *, 
Áâr4_maxwrôe
*);

2475 
uöt32_t
 
zdr_Áâr4_mimëy≥
 (
ZDR
 *, 
Áâr4_mimëy≥
*);

2476 
uöt32_t
 
zdr_Áâr4_mode
 (
ZDR
 *, 
Áâr4_mode
*);

2477 
uöt32_t
 
zdr_Áâr4_mou¡ed_⁄_fûeid
 (
ZDR
 *, 
Áâr4_mou¡ed_⁄_fûeid
*);

2478 
uöt32_t
 
zdr_Áâr4_no_åunc
 (
ZDR
 *, 
Áâr4_no_åunc
*);

2479 
uöt32_t
 
zdr_Áâr4_numlöks
 (
ZDR
 *, 
Áâr4_numlöks
*);

2480 
uöt32_t
 
zdr_Áâr4_ow√r
 (
ZDR
 *, 
Áâr4_ow√r
*);

2481 
uöt32_t
 
zdr_Áâr4_ow√r_group
 (
ZDR
 *, 
Áâr4_ow√r_group
*);

2482 
uöt32_t
 
zdr_Áâr4_quŸa_avaû_h¨d
 (
ZDR
 *, 
Áâr4_quŸa_avaû_h¨d
*);

2483 
uöt32_t
 
zdr_Áâr4_quŸa_avaû_so·
 (
ZDR
 *, 
Áâr4_quŸa_avaû_so·
*);

2484 
uöt32_t
 
zdr_Áâr4_quŸa_u£d
 (
ZDR
 *, 
Áâr4_quŸa_u£d
*);

2485 
uöt32_t
 
zdr_Áâr4_øwdev
 (
ZDR
 *, 
Áâr4_øwdev
*);

2486 
uöt32_t
 
zdr_Áâr4_•a˚_avaû
 (
ZDR
 *, 
Áâr4_•a˚_avaû
*);

2487 
uöt32_t
 
zdr_Áâr4_•a˚_‰ì
 (
ZDR
 *, 
Áâr4_•a˚_‰ì
*);

2488 
uöt32_t
 
zdr_Áâr4_•a˚_tŸÆ
 (
ZDR
 *, 
Áâr4_•a˚_tŸÆ
*);

2489 
uöt32_t
 
zdr_Áâr4_•a˚_u£d
 (
ZDR
 *, 
Áâr4_•a˚_u£d
*);

2490 
uöt32_t
 
zdr_Áâr4_sy°em
 (
ZDR
 *, 
Áâr4_sy°em
*);

2491 
uöt32_t
 
zdr_Áâr4_time_ac˚ss
 (
ZDR
 *, 
Áâr4_time_ac˚ss
*);

2492 
uöt32_t
 
zdr_Áâr4_time_ac˚ss_£t
 (
ZDR
 *, 
Áâr4_time_ac˚ss_£t
*);

2493 
uöt32_t
 
zdr_Áâr4_time_backup
 (
ZDR
 *, 
Áâr4_time_backup
*);

2494 
uöt32_t
 
zdr_Áâr4_time_¸óã
 (
ZDR
 *, 
Áâr4_time_¸óã
*);

2495 
uöt32_t
 
zdr_Áâr4_time_dñè
 (
ZDR
 *, 
Áâr4_time_dñè
*);

2496 
uöt32_t
 
zdr_Áâr4_time_mëad©a
 (
ZDR
 *, 
Áâr4_time_mëad©a
*);

2497 
uöt32_t
 
zdr_Áâr4_time_modify
 (
ZDR
 *, 
Áâr4_time_modify
*);

2498 
uöt32_t
 
zdr_Áâr4_time_modify_£t
 (
ZDR
 *, 
Áâr4_time_modify_£t
*);

2499 
uöt32_t
 
zdr_©åli°4
 (
ZDR
 *, 
©åli°4
*);

2500 
uöt32_t
 
zdr_Áâr4
 (
ZDR
 *, 
Áâr4
*);

2501 
uöt32_t
 
zdr_ch™ge_öfo4
 (
ZDR
 *, 
ch™ge_öfo4
*);

2502 
uöt32_t
 
zdr_˛õ¡addr4
 (
ZDR
 *, 
˛õ¡addr4
*);

2503 
uöt32_t
 
zdr_cb_˛õ¡4
 (
ZDR
 *, 
cb_˛õ¡4
*);

2504 
uöt32_t
 
zdr_°©eid4
 (
ZDR
 *, 
°©eid4
*);

2505 
uöt32_t
 
zdr_nfs_˛õ¡_id4
 (
ZDR
 *, 
nfs_˛õ¡_id4
*);

2506 
uöt32_t
 
zdr_›í_ow√r4
 (
ZDR
 *, 
›í_ow√r4
*);

2507 
uöt32_t
 
zdr_lock_ow√r4
 (
ZDR
 *, 
lock_ow√r4
*);

2508 
uöt32_t
 
zdr_nfs_lock_ty≥4
 (
ZDR
 *, 
nfs_lock_ty≥4
*);

2509 
uöt32_t
 
zdr_˛õ¡_ow√r4
 (
ZDR
 *, 
˛õ¡_ow√r4
*);

2510 
uöt32_t
 
zdr_£rvî_ow√r4
 (
ZDR
 *, 
£rvî_ow√r4
*);

2511 
uöt32_t
 
zdr_nfs_im∂_id4
 (
ZDR
 *, 
nfs_im∂_id4
*);

2512 
uöt32_t
 
zdr_ACCESS4¨gs
 (
ZDR
 *, 
ACCESS4¨gs
*);

2513 
uöt32_t
 
zdr_ACCESS4ªsok
 (
ZDR
 *, 
ACCESS4ªsok
*);

2514 
uöt32_t
 
zdr_ACCESS4ªs
 (
ZDR
 *, 
ACCESS4ªs
*);

2515 
uöt32_t
 
zdr_CLOSE4¨gs
 (
ZDR
 *, 
CLOSE4¨gs
*);

2516 
uöt32_t
 
zdr_CLOSE4ªs
 (
ZDR
 *, 
CLOSE4ªs
*);

2517 
uöt32_t
 
zdr_COMMIT4¨gs
 (
ZDR
 *, 
COMMIT4¨gs
*);

2518 
uöt32_t
 
zdr_COMMIT4ªsok
 (
ZDR
 *, 
COMMIT4ªsok
*);

2519 
uöt32_t
 
zdr_COMMIT4ªs
 (
ZDR
 *, 
COMMIT4ªs
*);

2520 
uöt32_t
 
zdr_¸óãty≥4
 (
ZDR
 *, 
¸óãty≥4
*);

2521 
uöt32_t
 
zdr_CREATE4¨gs
 (
ZDR
 *, 
CREATE4¨gs
*);

2522 
uöt32_t
 
zdr_CREATE4ªsok
 (
ZDR
 *, 
CREATE4ªsok
*);

2523 
uöt32_t
 
zdr_CREATE4ªs
 (
ZDR
 *, 
CREATE4ªs
*);

2524 
uöt32_t
 
zdr_DELEGPURGE4¨gs
 (
ZDR
 *, 
DELEGPURGE4¨gs
*);

2525 
uöt32_t
 
zdr_DELEGPURGE4ªs
 (
ZDR
 *, 
DELEGPURGE4ªs
*);

2526 
uöt32_t
 
zdr_DELEGRETURN4¨gs
 (
ZDR
 *, 
DELEGRETURN4¨gs
*);

2527 
uöt32_t
 
zdr_DELEGRETURN4ªs
 (
ZDR
 *, 
DELEGRETURN4ªs
*);

2528 
uöt32_t
 
zdr_GETATTR4¨gs
 (
ZDR
 *, 
GETATTR4¨gs
*);

2529 
uöt32_t
 
zdr_GETATTR4ªsok
 (
ZDR
 *, 
GETATTR4ªsok
*);

2530 
uöt32_t
 
zdr_GETATTR4ªs
 (
ZDR
 *, 
GETATTR4ªs
*);

2531 
uöt32_t
 
zdr_GETFH4ªsok
 (
ZDR
 *, 
GETFH4ªsok
*);

2532 
uöt32_t
 
zdr_GETFH4ªs
 (
ZDR
 *, 
GETFH4ªs
*);

2533 
uöt32_t
 
zdr_LINK4¨gs
 (
ZDR
 *, 
LINK4¨gs
*);

2534 
uöt32_t
 
zdr_LINK4ªsok
 (
ZDR
 *, 
LINK4ªsok
*);

2535 
uöt32_t
 
zdr_LINK4ªs
 (
ZDR
 *, 
LINK4ªs
*);

2536 
uöt32_t
 
zdr_›í_to_lock_ow√r4
 (
ZDR
 *, 
›í_to_lock_ow√r4
*);

2537 
uöt32_t
 
zdr_exi°_lock_ow√r4
 (
ZDR
 *, 
exi°_lock_ow√r4
*);

2538 
uöt32_t
 
zdr_lockî4
 (
ZDR
 *, 
lockî4
*);

2539 
uöt32_t
 
zdr_LOCK4¨gs
 (
ZDR
 *, 
LOCK4¨gs
*);

2540 
uöt32_t
 
zdr_LOCK4díõd
 (
ZDR
 *, 
LOCK4díõd
*);

2541 
uöt32_t
 
zdr_LOCK4ªsok
 (
ZDR
 *, 
LOCK4ªsok
*);

2542 
uöt32_t
 
zdr_LOCK4ªs
 (
ZDR
 *, 
LOCK4ªs
*);

2543 
uöt32_t
 
zdr_LOCKT4¨gs
 (
ZDR
 *, 
LOCKT4¨gs
*);

2544 
uöt32_t
 
zdr_LOCKT4ªs
 (
ZDR
 *, 
LOCKT4ªs
*);

2545 
uöt32_t
 
zdr_LOCKU4¨gs
 (
ZDR
 *, 
LOCKU4¨gs
*);

2546 
uöt32_t
 
zdr_LOCKU4ªs
 (
ZDR
 *, 
LOCKU4ªs
*);

2547 
uöt32_t
 
zdr_LOOKUP4¨gs
 (
ZDR
 *, 
LOOKUP4¨gs
*);

2548 
uöt32_t
 
zdr_LOOKUP4ªs
 (
ZDR
 *, 
LOOKUP4ªs
*);

2549 
uöt32_t
 
zdr_LOOKUPP4ªs
 (
ZDR
 *, 
LOOKUPP4ªs
*);

2550 
uöt32_t
 
zdr_NVERIFY4¨gs
 (
ZDR
 *, 
NVERIFY4¨gs
*);

2551 
uöt32_t
 
zdr_NVERIFY4ªs
 (
ZDR
 *, 
NVERIFY4ªs
*);

2552 
uöt32_t
 
zdr_¸óãmode4
 (
ZDR
 *, 
¸óãmode4
*);

2553 
uöt32_t
 
zdr_¸óãhow4
 (
ZDR
 *, 
¸óãhow4
*);

2554 
uöt32_t
 
zdr_›íty≥4
 (
ZDR
 *, 
›íty≥4
*);

2555 
uöt32_t
 
zdr_›íÊag4
 (
ZDR
 *, 
›íÊag4
*);

2556 
uöt32_t
 
zdr_limô_by4
 (
ZDR
 *, 
limô_by4
*);

2557 
uöt32_t
 
zdr_nfs_modifõd_limô4
 (
ZDR
 *, 
nfs_modifõd_limô4
*);

2558 
uöt32_t
 
zdr_nfs_•a˚_limô4
 (
ZDR
 *, 
nfs_•a˚_limô4
*);

2559 
uöt32_t
 
zdr_›í_dñeg©i⁄_ty≥4
 (
ZDR
 *, 
›í_dñeg©i⁄_ty≥4
*);

2560 
uöt32_t
 
zdr_›í_˛aim_ty≥4
 (
ZDR
 *, 
›í_˛aim_ty≥4
*);

2561 
uöt32_t
 
zdr_›í_˛aim_dñeg©e_cur4
 (
ZDR
 *, 
›í_˛aim_dñeg©e_cur4
*);

2562 
uöt32_t
 
zdr_›í_˛aim4
 (
ZDR
 *, 
›í_˛aim4
*);

2563 
uöt32_t
 
zdr_OPEN4¨gs
 (
ZDR
 *, 
OPEN4¨gs
*);

2564 
uöt32_t
 
zdr_›í_ªad_dñeg©i⁄4
 (
ZDR
 *, 
›í_ªad_dñeg©i⁄4
*);

2565 
uöt32_t
 
zdr_›í_wrôe_dñeg©i⁄4
 (
ZDR
 *, 
›í_wrôe_dñeg©i⁄4
*);

2566 
uöt32_t
 
zdr_›í_dñeg©i⁄4
 (
ZDR
 *, 
›í_dñeg©i⁄4
*);

2567 
uöt32_t
 
zdr_OPEN4ªsok
 (
ZDR
 *, 
OPEN4ªsok
*);

2568 
uöt32_t
 
zdr_OPEN4ªs
 (
ZDR
 *, 
OPEN4ªs
*);

2569 
uöt32_t
 
zdr_OPENATTR4¨gs
 (
ZDR
 *, 
OPENATTR4¨gs
*);

2570 
uöt32_t
 
zdr_OPENATTR4ªs
 (
ZDR
 *, 
OPENATTR4ªs
*);

2571 
uöt32_t
 
zdr_OPEN_CONFIRM4¨gs
 (
ZDR
 *, 
OPEN_CONFIRM4¨gs
*);

2572 
uöt32_t
 
zdr_OPEN_CONFIRM4ªsok
 (
ZDR
 *, 
OPEN_CONFIRM4ªsok
*);

2573 
uöt32_t
 
zdr_OPEN_CONFIRM4ªs
 (
ZDR
 *, 
OPEN_CONFIRM4ªs
*);

2574 
uöt32_t
 
zdr_OPEN_DOWNGRADE4¨gs
 (
ZDR
 *, 
OPEN_DOWNGRADE4¨gs
*);

2575 
uöt32_t
 
zdr_OPEN_DOWNGRADE4ªsok
 (
ZDR
 *, 
OPEN_DOWNGRADE4ªsok
*);

2576 
uöt32_t
 
zdr_OPEN_DOWNGRADE4ªs
 (
ZDR
 *, 
OPEN_DOWNGRADE4ªs
*);

2577 
uöt32_t
 
zdr_PUTFH4¨gs
 (
ZDR
 *, 
PUTFH4¨gs
*);

2578 
uöt32_t
 
zdr_PUTFH4ªs
 (
ZDR
 *, 
PUTFH4ªs
*);

2579 
uöt32_t
 
zdr_PUTPUBFH4ªs
 (
ZDR
 *, 
PUTPUBFH4ªs
*);

2580 
uöt32_t
 
zdr_PUTROOTFH4ªs
 (
ZDR
 *, 
PUTROOTFH4ªs
*);

2581 
uöt32_t
 
zdr_READ4¨gs
 (
ZDR
 *, 
READ4¨gs
*);

2582 
uöt32_t
 
zdr_READ4ªsok
 (
ZDR
 *, 
READ4ªsok
*);

2583 
uöt32_t
 
zdr_READ4ªs
 (
ZDR
 *, 
READ4ªs
*);

2584 
uöt32_t
 
zdr_READDIR4¨gs
 (
ZDR
 *, 
READDIR4¨gs
*);

2585 
uöt32_t
 
zdr_íåy4
 (
ZDR
 *, 
íåy4
*);

2586 
uöt32_t
 
zdr_dúli°4
 (
ZDR
 *, 
dúli°4
*);

2587 
uöt32_t
 
zdr_READDIR4ªsok
 (
ZDR
 *, 
READDIR4ªsok
*);

2588 
uöt32_t
 
zdr_READDIR4ªs
 (
ZDR
 *, 
READDIR4ªs
*);

2589 
uöt32_t
 
zdr_READLINK4ªsok
 (
ZDR
 *, 
READLINK4ªsok
*);

2590 
uöt32_t
 
zdr_READLINK4ªs
 (
ZDR
 *, 
READLINK4ªs
*);

2591 
uöt32_t
 
zdr_REMOVE4¨gs
 (
ZDR
 *, 
REMOVE4¨gs
*);

2592 
uöt32_t
 
zdr_REMOVE4ªsok
 (
ZDR
 *, 
REMOVE4ªsok
*);

2593 
uöt32_t
 
zdr_REMOVE4ªs
 (
ZDR
 *, 
REMOVE4ªs
*);

2594 
uöt32_t
 
zdr_RENAME4¨gs
 (
ZDR
 *, 
RENAME4¨gs
*);

2595 
uöt32_t
 
zdr_RENAME4ªsok
 (
ZDR
 *, 
RENAME4ªsok
*);

2596 
uöt32_t
 
zdr_RENAME4ªs
 (
ZDR
 *, 
RENAME4ªs
*);

2597 
uöt32_t
 
zdr_RENEW4¨gs
 (
ZDR
 *, 
RENEW4¨gs
*);

2598 
uöt32_t
 
zdr_RENEW4ªs
 (
ZDR
 *, 
RENEW4ªs
*);

2599 
uöt32_t
 
zdr_RESTOREFH4ªs
 (
ZDR
 *, 
RESTOREFH4ªs
*);

2600 
uöt32_t
 
zdr_SAVEFH4ªs
 (
ZDR
 *, 
SAVEFH4ªs
*);

2601 
uöt32_t
 
zdr_SECINFO4¨gs
 (
ZDR
 *, 
SECINFO4¨gs
*);

2602 
uöt32_t
 
zdr_Ωc_gss_svc_t
 (
ZDR
 *, 
Ωc_gss_svc_t
*);

2603 
uöt32_t
 
zdr_Ωc£c_gss_öfo
 (
ZDR
 *, 
Ωc£c_gss_öfo
*);

2604 
uöt32_t
 
zdr_£cöfo4
 (
ZDR
 *, 
£cöfo4
*);

2605 
uöt32_t
 
zdr_SECINFO4ªsok
 (
ZDR
 *, 
SECINFO4ªsok
*);

2606 
uöt32_t
 
zdr_SECINFO4ªs
 (
ZDR
 *, 
SECINFO4ªs
*);

2607 
uöt32_t
 
zdr_SETATTR4¨gs
 (
ZDR
 *, 
SETATTR4¨gs
*);

2608 
uöt32_t
 
zdr_SETATTR4ªs
 (
ZDR
 *, 
SETATTR4ªs
*);

2609 
uöt32_t
 
zdr_SETCLIENTID4¨gs
 (
ZDR
 *, 
SETCLIENTID4¨gs
*);

2610 
uöt32_t
 
zdr_SETCLIENTID4ªsok
 (
ZDR
 *, 
SETCLIENTID4ªsok
*);

2611 
uöt32_t
 
zdr_SETCLIENTID4ªs
 (
ZDR
 *, 
SETCLIENTID4ªs
*);

2612 
uöt32_t
 
zdr_SETCLIENTID_CONFIRM4¨gs
 (
ZDR
 *, 
SETCLIENTID_CONFIRM4¨gs
*);

2613 
uöt32_t
 
zdr_SETCLIENTID_CONFIRM4ªs
 (
ZDR
 *, 
SETCLIENTID_CONFIRM4ªs
*);

2614 
uöt32_t
 
zdr_VERIFY4¨gs
 (
ZDR
 *, 
VERIFY4¨gs
*);

2615 
uöt32_t
 
zdr_VERIFY4ªs
 (
ZDR
 *, 
VERIFY4ªs
*);

2616 
uöt32_t
 
zdr_°abÀ_how4
 (
ZDR
 *, 
°abÀ_how4
*);

2617 
uöt32_t
 
zdr_WRITE4¨gs
 (
ZDR
 *, 
WRITE4¨gs
*);

2618 
uöt32_t
 
zdr_WRITE4ªsok
 (
ZDR
 *, 
WRITE4ªsok
*);

2619 
uöt32_t
 
zdr_WRITE4ªs
 (
ZDR
 *, 
WRITE4ªs
*);

2620 
uöt32_t
 
zdr_RELEASE_LOCKOWNER4¨gs
 (
ZDR
 *, 
RELEASE_LOCKOWNER4¨gs
*);

2621 
uöt32_t
 
zdr_RELEASE_LOCKOWNER4ªs
 (
ZDR
 *, 
RELEASE_LOCKOWNER4ªs
*);

2622 
uöt32_t
 
zdr_gssh™dÀ4_t
 (
ZDR
 *, 
gssh™dÀ4_t
*);

2623 
uöt32_t
 
zdr_ˇŒback_£c_∑rms4
 (
ZDR
 *, 
ˇŒback_£c_∑rms4
*);

2624 
uöt32_t
 
zdr_ch™√l_dú_‰om_˛õ¡4
 (
ZDR
 *, 
ch™√l_dú_‰om_˛õ¡4
*);

2625 
uöt32_t
 
zdr_BIND_CONN_TO_SESSION4¨gs
 (
ZDR
 *, 
BIND_CONN_TO_SESSION4¨gs
*);

2626 
uöt32_t
 
zdr_ch™√l_dú_‰om_£rvî4
 (
ZDR
 *, 
ch™√l_dú_‰om_£rvî4
*);

2627 
uöt32_t
 
zdr_BIND_CONN_TO_SESSION4ªsok
 (
ZDR
 *, 
BIND_CONN_TO_SESSION4ªsok
*);

2628 
uöt32_t
 
zdr_BIND_CONN_TO_SESSION4ªs
 (
ZDR
 *, 
BIND_CONN_TO_SESSION4ªs
*);

2629 
uöt32_t
 
zdr_°©e_¥Ÿe˘_›s4
 (
ZDR
 *, 
°©e_¥Ÿe˘_›s4
*);

2630 
uöt32_t
 
zdr_ssv_•_∑rms4
 (
ZDR
 *, 
ssv_•_∑rms4
*);

2631 
uöt32_t
 
zdr_°©e_¥Ÿe˘_how4
 (
ZDR
 *, 
°©e_¥Ÿe˘_how4
*);

2632 
uöt32_t
 
zdr_°©e_¥Ÿe˘4_a
 (
ZDR
 *, 
°©e_¥Ÿe˘4_a
*);

2633 
uöt32_t
 
zdr_EXCHANGE_ID4¨gs
 (
ZDR
 *, 
EXCHANGE_ID4¨gs
*);

2634 
uöt32_t
 
zdr_ssv_¥Ÿ_öfo4
 (
ZDR
 *, 
ssv_¥Ÿ_öfo4
*);

2635 
uöt32_t
 
zdr_°©e_¥Ÿe˘4_r
 (
ZDR
 *, 
°©e_¥Ÿe˘4_r
*);

2636 
uöt32_t
 
zdr_EXCHANGE_ID4ªsok
 (
ZDR
 *, 
EXCHANGE_ID4ªsok
*);

2637 
uöt32_t
 
zdr_EXCHANGE_ID4ªs
 (
ZDR
 *, 
EXCHANGE_ID4ªs
*);

2638 
uöt32_t
 
zdr_ch™√l_©ås4
 (
ZDR
 *, 
ch™√l_©ås4
*);

2639 
uöt32_t
 
zdr_CREATE_SESSION4¨gs
 (
ZDR
 *, 
CREATE_SESSION4¨gs
*);

2640 
uöt32_t
 
zdr_CREATE_SESSION4ªsok
 (
ZDR
 *, 
CREATE_SESSION4ªsok
*);

2641 
uöt32_t
 
zdr_CREATE_SESSION4ªs
 (
ZDR
 *, 
CREATE_SESSION4ªs
*);

2642 
uöt32_t
 
zdr_DESTROY_SESSION4¨gs
 (
ZDR
 *, 
DESTROY_SESSION4¨gs
*);

2643 
uöt32_t
 
zdr_DESTROY_SESSION4ªs
 (
ZDR
 *, 
DESTROY_SESSION4ªs
*);

2644 
uöt32_t
 
zdr_FREE_STATEID4¨gs
 (
ZDR
 *, 
FREE_STATEID4¨gs
*);

2645 
uöt32_t
 
zdr_FREE_STATEID4ªs
 (
ZDR
 *, 
FREE_STATEID4ªs
*);

2646 
uöt32_t
 
zdr_©å_nŸi˚4
 (
ZDR
 *, 
©å_nŸi˚4
*);

2647 
uöt32_t
 
zdr_GET_DIR_DELEGATION4¨gs
 (
ZDR
 *, 
GET_DIR_DELEGATION4¨gs
*);

2648 
uöt32_t
 
zdr_GET_DIR_DELEGATION4ªsok
 (
ZDR
 *, 
GET_DIR_DELEGATION4ªsok
*);

2649 
uöt32_t
 
zdr_gdd∫f4_°©us
 (
ZDR
 *, 
gdd∫f4_°©us
*);

2650 
uöt32_t
 
zdr_GET_DIR_DELEGATION4ªs_n⁄_Áèl
 (
ZDR
 *, 
GET_DIR_DELEGATION4ªs_n⁄_Áèl
*);

2651 
uöt32_t
 
zdr_GET_DIR_DELEGATION4ªs
 (
ZDR
 *, 
GET_DIR_DELEGATION4ªs
*);

2652 
uöt32_t
 
zdr_GETDEVICEINFO4¨gs
 (
ZDR
 *, 
GETDEVICEINFO4¨gs
*);

2653 
uöt32_t
 
zdr_GETDEVICEINFO4ªsok
 (
ZDR
 *, 
GETDEVICEINFO4ªsok
*);

2654 
uöt32_t
 
zdr_GETDEVICEINFO4ªs
 (
ZDR
 *, 
GETDEVICEINFO4ªs
*);

2655 
uöt32_t
 
zdr_GETDEVICELIST4¨gs
 (
ZDR
 *, 
GETDEVICELIST4¨gs
*);

2656 
uöt32_t
 
zdr_GETDEVICELIST4ªsok
 (
ZDR
 *, 
GETDEVICELIST4ªsok
*);

2657 
uöt32_t
 
zdr_GETDEVICELIST4ªs
 (
ZDR
 *, 
GETDEVICELIST4ªs
*);

2658 
uöt32_t
 
zdr_√wtime4
 (
ZDR
 *, 
√wtime4
*);

2659 
uöt32_t
 
zdr_√woff£t4
 (
ZDR
 *, 
√woff£t4
*);

2660 
uöt32_t
 
zdr_LAYOUTCOMMIT4¨gs
 (
ZDR
 *, 
LAYOUTCOMMIT4¨gs
*);

2661 
uöt32_t
 
zdr_√wsize4
 (
ZDR
 *, 
√wsize4
*);

2662 
uöt32_t
 
zdr_LAYOUTCOMMIT4ªsok
 (
ZDR
 *, 
LAYOUTCOMMIT4ªsok
*);

2663 
uöt32_t
 
zdr_LAYOUTCOMMIT4ªs
 (
ZDR
 *, 
LAYOUTCOMMIT4ªs
*);

2664 
uöt32_t
 
zdr_LAYOUTGET4¨gs
 (
ZDR
 *, 
LAYOUTGET4¨gs
*);

2665 
uöt32_t
 
zdr_LAYOUTGET4ªsok
 (
ZDR
 *, 
LAYOUTGET4ªsok
*);

2666 
uöt32_t
 
zdr_LAYOUTGET4ªs
 (
ZDR
 *, 
LAYOUTGET4ªs
*);

2667 
uöt32_t
 
zdr_œyouåëu∫_ty≥4
 (
ZDR
 *, 
œyouåëu∫_ty≥4
*);

2668 
uöt32_t
 
zdr_œyouåëu∫_fûe4
 (
ZDR
 *, 
œyouåëu∫_fûe4
*);

2669 
uöt32_t
 
zdr_œyouåëu∫4
 (
ZDR
 *, 
œyouåëu∫4
*);

2670 
uöt32_t
 
zdr_LAYOUTRETURN4¨gs
 (
ZDR
 *, 
LAYOUTRETURN4¨gs
*);

2671 
uöt32_t
 
zdr_œyouåëu∫_°©eid
 (
ZDR
 *, 
œyouåëu∫_°©eid
*);

2672 
uöt32_t
 
zdr_LAYOUTRETURN4ªs
 (
ZDR
 *, 
LAYOUTRETURN4ªs
*);

2673 
uöt32_t
 
zdr_£cöfo_°yÀ4
 (
ZDR
 *, 
£cöfo_°yÀ4
*);

2674 
uöt32_t
 
zdr_SECINFO_NO_NAME4¨gs
 (
ZDR
 *, 
SECINFO_NO_NAME4¨gs
*);

2675 
uöt32_t
 
zdr_SECINFO_NO_NAME4ªs
 (
ZDR
 *, 
SECINFO_NO_NAME4ªs
*);

2676 
uöt32_t
 
zdr_SEQUENCE4¨gs
 (
ZDR
 *, 
SEQUENCE4¨gs
*);

2677 
uöt32_t
 
zdr_SEQUENCE4ªsok
 (
ZDR
 *, 
SEQUENCE4ªsok
*);

2678 
uöt32_t
 
zdr_SEQUENCE4ªs
 (
ZDR
 *, 
SEQUENCE4ªs
*);

2679 
uöt32_t
 
zdr_sß_dige°_öput4
 (
ZDR
 *, 
sß_dige°_öput4
*);

2680 
uöt32_t
 
zdr_SET_SSV4¨gs
 (
ZDR
 *, 
SET_SSV4¨gs
*);

2681 
uöt32_t
 
zdr_s§_dige°_öput4
 (
ZDR
 *, 
s§_dige°_öput4
*);

2682 
uöt32_t
 
zdr_SET_SSV4ªsok
 (
ZDR
 *, 
SET_SSV4ªsok
*);

2683 
uöt32_t
 
zdr_SET_SSV4ªs
 (
ZDR
 *, 
SET_SSV4ªs
*);

2684 
uöt32_t
 
zdr_TEST_STATEID4¨gs
 (
ZDR
 *, 
TEST_STATEID4¨gs
*);

2685 
uöt32_t
 
zdr_TEST_STATEID4ªsok
 (
ZDR
 *, 
TEST_STATEID4ªsok
*);

2686 
uöt32_t
 
zdr_TEST_STATEID4ªs
 (
ZDR
 *, 
TEST_STATEID4ªs
*);

2687 
uöt32_t
 
zdr_dñeg_˛aim4
 (
ZDR
 *, 
dñeg_˛aim4
*);

2688 
uöt32_t
 
zdr_WANT_DELEGATION4¨gs
 (
ZDR
 *, 
WANT_DELEGATION4¨gs
*);

2689 
uöt32_t
 
zdr_WANT_DELEGATION4ªs
 (
ZDR
 *, 
WANT_DELEGATION4ªs
*);

2690 
uöt32_t
 
zdr_DESTROY_CLIENTID4¨gs
 (
ZDR
 *, 
DESTROY_CLIENTID4¨gs
*);

2691 
uöt32_t
 
zdr_DESTROY_CLIENTID4ªs
 (
ZDR
 *, 
DESTROY_CLIENTID4ªs
*);

2692 
uöt32_t
 
zdr_RECLAIM_COMPLETE4¨gs
 (
ZDR
 *, 
RECLAIM_COMPLETE4¨gs
*);

2693 
uöt32_t
 
zdr_RECLAIM_COMPLETE4ªs
 (
ZDR
 *, 
RECLAIM_COMPLETE4ªs
*);

2694 
uöt32_t
 
zdr_ILLEGAL4ªs
 (
ZDR
 *, 
ILLEGAL4ªs
*);

2695 
uöt32_t
 
zdr_nfs_›num4
 (
ZDR
 *, 
nfs_›num4
*);

2696 
uöt32_t
 
zdr_nfs_¨g›4
 (
ZDR
 *, 
nfs_¨g›4
*);

2697 
uöt32_t
 
zdr_nfs_ªs›4
 (
ZDR
 *, 
nfs_ªs›4
*);

2698 
uöt32_t
 
zdr_COMPOUND4¨gs
 (
ZDR
 *, 
COMPOUND4¨gs
*);

2699 
uöt32_t
 
zdr_COMPOUND4ªs
 (
ZDR
 *, 
COMPOUND4ªs
*);

2700 
uöt32_t
 
zdr_CB_GETATTR4¨gs
 (
ZDR
 *, 
CB_GETATTR4¨gs
*);

2701 
uöt32_t
 
zdr_CB_GETATTR4ªsok
 (
ZDR
 *, 
CB_GETATTR4ªsok
*);

2702 
uöt32_t
 
zdr_CB_GETATTR4ªs
 (
ZDR
 *, 
CB_GETATTR4ªs
*);

2703 
uöt32_t
 
zdr_CB_RECALL4¨gs
 (
ZDR
 *, 
CB_RECALL4¨gs
*);

2704 
uöt32_t
 
zdr_CB_RECALL4ªs
 (
ZDR
 *, 
CB_RECALL4ªs
*);

2705 
uöt32_t
 
zdr_CB_ILLEGAL4ªs
 (
ZDR
 *, 
CB_ILLEGAL4ªs
*);

2706 
uöt32_t
 
zdr_nfs_cb_›num4
 (
ZDR
 *, 
nfs_cb_›num4
*);

2707 
uöt32_t
 
zdr_nfs_cb_¨g›4
 (
ZDR
 *, 
nfs_cb_¨g›4
*);

2708 
uöt32_t
 
zdr_nfs_cb_ªs›4
 (
ZDR
 *, 
nfs_cb_ªs›4
*);

2709 
uöt32_t
 
zdr_CB_COMPOUND4¨gs
 (
ZDR
 *, 
CB_COMPOUND4¨gs
*);

2710 
uöt32_t
 
zdr_CB_COMPOUND4ªs
 (
ZDR
 *, 
CB_COMPOUND4ªs
*);

2711 
uöt32_t
 
zdr_Ωc_gss_¥oc_t
 (
ZDR
 *, 
Ωc_gss_¥oc_t
*);

2712 
uöt32_t
 
zdr_Ωc_gss_¸ed_vîs_1_t
 (
ZDR
 *, 
Ωc_gss_¸ed_vîs_1_t
*);

2713 
uöt32_t
 
zdr_Ωc_gss_¸ed_t
 (
ZDR
 *, 
Ωc_gss_¸ed_t
*);

2714 
uöt32_t
 
zdr_Ωc_gss_öô_¨g
 (
ZDR
 *, 
Ωc_gss_öô_¨g
*);

2715 
uöt32_t
 
zdr_Ωc_gss_öô_ªs
 (
ZDR
 *, 
Ωc_gss_öô_ªs
*);

2716 
uöt32_t
 
zdr_Ωc_gss_öãg_d©a
 (
ZDR
 *, 
Ωc_gss_öãg_d©a
*);

2719 
uöt32_t
 
zdr_nfs_·y≥4
 ();

2720 
uöt32_t
 
zdr_nfs°©4
 ();

2721 
uöt32_t
 
zdr_bôm≠4
 ();

2722 
uöt32_t
 
zdr_off£t4
 ();

2723 
uöt32_t
 
zdr_cou¡4
 ();

2724 
uöt32_t
 
zdr_Àngth4
 ();

2725 
uöt32_t
 
zdr_˛õ¡id4
 ();

2726 
uöt32_t
 
zdr_£quí˚id4
 ();

2727 
uöt32_t
 
zdr_£qid4
 ();

2728 
uöt32_t
 
zdr_¶Ÿid4
 ();

2729 
uöt32_t
 
zdr_utf8°rög
 ();

2730 
uöt32_t
 
zdr_utf8°r_cis
 ();

2731 
uöt32_t
 
zdr_utf8°r_cs
 ();

2732 
uöt32_t
 
zdr_utf8°r_mixed
 ();

2733 
uöt32_t
 
zdr_comp⁄ít4
 ();

2734 
uöt32_t
 
zdr_∑th«me4
 ();

2735 
uöt32_t
 
zdr_nfs_lockid4
 ();

2736 
uöt32_t
 
zdr_nfs_cookõ4
 ();

2737 
uöt32_t
 
zdr_lökãxt4
 ();

2738 
uöt32_t
 
zdr_£c_oid4
 ();

2739 
uöt32_t
 
zdr_q›4
 ();

2740 
uöt32_t
 
zdr_mode4
 ();

2741 
uöt32_t
 
zdr_ch™geid4
 ();

2742 
uöt32_t
 
zdr_vîifõr4
 ();

2743 
uöt32_t
 
zdr_£ssi⁄id4
 ();

2744 
uöt32_t
 
zdr_authsys_∑rms
 ();

2745 
uöt32_t
 
zdr_devi˚id4
 ();

2746 
uöt32_t
 
zdr_œyouây≥4
 ();

2747 
uöt32_t
 
zdr_œyoutupd©e4
 ();

2748 
uöt32_t
 
zdr_devi˚_addr4
 ();

2749 
uöt32_t
 
zdr_nf°ime4
 ();

2750 
uöt32_t
 
zdr_time_how4
 ();

2751 
uöt32_t
 
zdr_œyoutiomode4
 ();

2752 
uöt32_t
 
zdr_œyout_c⁄ã¡4
 ();

2753 
uöt32_t
 
zdr_œyout4
 ();

2754 
uöt32_t
 
zdr_£âime4
 ();

2755 
uöt32_t
 
zdr_nfs_fh4
 ();

2756 
uöt32_t
 
zdr_fsid4
 ();

2757 
uöt32_t
 
zdr_fs_loˇti⁄4
 ();

2758 
uöt32_t
 
zdr_fs_loˇti⁄s4
 ();

2759 
uöt32_t
 
zdr_a˚ty≥4
 ();

2760 
uöt32_t
 
zdr_a˚Êag4
 ();

2761 
uöt32_t
 
zdr_a˚mask4
 ();

2762 
uöt32_t
 
zdr_nfß˚4
 ();

2763 
uöt32_t
 
zdr_•ecd©a4
 ();

2764 
uöt32_t
 
zdr_Áâr4_suµ‹ãd_©ås
 ();

2765 
uöt32_t
 
zdr_Áâr4_ty≥
 ();

2766 
uöt32_t
 
zdr_Áâr4_fh_expúe_ty≥
 ();

2767 
uöt32_t
 
zdr_Áâr4_ch™ge
 ();

2768 
uöt32_t
 
zdr_Áâr4_size
 ();

2769 
uöt32_t
 
zdr_Áâr4_lök_suµ‹t
 ();

2770 
uöt32_t
 
zdr_Áâr4_symlök_suµ‹t
 ();

2771 
uöt32_t
 
zdr_Áâr4_«med_©å
 ();

2772 
uöt32_t
 
zdr_Áâr4_fsid
 ();

2773 
uöt32_t
 
zdr_Áâr4_unique_h™dÀs
 ();

2774 
uöt32_t
 
zdr_Áâr4_Àa£_time
 ();

2775 
uöt32_t
 
zdr_Áâr4_rd©å_îr‹
 ();

2776 
uöt32_t
 
zdr_Áâr4_a˛
 ();

2777 
uöt32_t
 
zdr_Áâr4_a˛suµ‹t
 ();

2778 
uöt32_t
 
zdr_Áâr4_¨chive
 ();

2779 
uöt32_t
 
zdr_Áâr4_ˇn£âime
 ();

2780 
uöt32_t
 
zdr_Áâr4_ˇ£_ö£nsôive
 ();

2781 
uöt32_t
 
zdr_Áâr4_ˇ£_¥e£rvög
 ();

2782 
uöt32_t
 
zdr_Áâr4_chown_ª°ri˘ed
 ();

2783 
uöt32_t
 
zdr_Áâr4_fûeid
 ();

2784 
uöt32_t
 
zdr_Áâr4_fûes_avaû
 ();

2785 
uöt32_t
 
zdr_Áâr4_fûeh™dÀ
 ();

2786 
uöt32_t
 
zdr_Áâr4_fûes_‰ì
 ();

2787 
uöt32_t
 
zdr_Áâr4_fûes_tŸÆ
 ();

2788 
uöt32_t
 
zdr_Áâr4_fs_loˇti⁄s
 ();

2789 
uöt32_t
 
zdr_Áâr4_hiddí
 ();

2790 
uöt32_t
 
zdr_Áâr4_homogíeous
 ();

2791 
uöt32_t
 
zdr_Áâr4_maxfûesize
 ();

2792 
uöt32_t
 
zdr_Áâr4_maxlök
 ();

2793 
uöt32_t
 
zdr_Áâr4_max«me
 ();

2794 
uöt32_t
 
zdr_Áâr4_maxªad
 ();

2795 
uöt32_t
 
zdr_Áâr4_maxwrôe
 ();

2796 
uöt32_t
 
zdr_Áâr4_mimëy≥
 ();

2797 
uöt32_t
 
zdr_Áâr4_mode
 ();

2798 
uöt32_t
 
zdr_Áâr4_mou¡ed_⁄_fûeid
 ();

2799 
uöt32_t
 
zdr_Áâr4_no_åunc
 ();

2800 
uöt32_t
 
zdr_Áâr4_numlöks
 ();

2801 
uöt32_t
 
zdr_Áâr4_ow√r
 ();

2802 
uöt32_t
 
zdr_Áâr4_ow√r_group
 ();

2803 
uöt32_t
 
zdr_Áâr4_quŸa_avaû_h¨d
 ();

2804 
uöt32_t
 
zdr_Áâr4_quŸa_avaû_so·
 ();

2805 
uöt32_t
 
zdr_Áâr4_quŸa_u£d
 ();

2806 
uöt32_t
 
zdr_Áâr4_øwdev
 ();

2807 
uöt32_t
 
zdr_Áâr4_•a˚_avaû
 ();

2808 
uöt32_t
 
zdr_Áâr4_•a˚_‰ì
 ();

2809 
uöt32_t
 
zdr_Áâr4_•a˚_tŸÆ
 ();

2810 
uöt32_t
 
zdr_Áâr4_•a˚_u£d
 ();

2811 
uöt32_t
 
zdr_Áâr4_sy°em
 ();

2812 
uöt32_t
 
zdr_Áâr4_time_ac˚ss
 ();

2813 
uöt32_t
 
zdr_Áâr4_time_ac˚ss_£t
 ();

2814 
uöt32_t
 
zdr_Áâr4_time_backup
 ();

2815 
uöt32_t
 
zdr_Áâr4_time_¸óã
 ();

2816 
uöt32_t
 
zdr_Áâr4_time_dñè
 ();

2817 
uöt32_t
 
zdr_Áâr4_time_mëad©a
 ();

2818 
uöt32_t
 
zdr_Áâr4_time_modify
 ();

2819 
uöt32_t
 
zdr_Áâr4_time_modify_£t
 ();

2820 
uöt32_t
 
zdr_©åli°4
 ();

2821 
uöt32_t
 
zdr_Áâr4
 ();

2822 
uöt32_t
 
zdr_ch™ge_öfo4
 ();

2823 
uöt32_t
 
zdr_˛õ¡addr4
 ();

2824 
uöt32_t
 
zdr_cb_˛õ¡4
 ();

2825 
uöt32_t
 
zdr_°©eid4
 ();

2826 
uöt32_t
 
zdr_nfs_˛õ¡_id4
 ();

2827 
uöt32_t
 
zdr_›í_ow√r4
 ();

2828 
uöt32_t
 
zdr_lock_ow√r4
 ();

2829 
uöt32_t
 
zdr_nfs_lock_ty≥4
 ();

2830 
uöt32_t
 
zdr_˛õ¡_ow√r4
 ();

2831 
uöt32_t
 
zdr_£rvî_ow√r4
 ();

2832 
uöt32_t
 
zdr_nfs_im∂_id4
 ();

2833 
uöt32_t
 
zdr_ACCESS4¨gs
 ();

2834 
uöt32_t
 
zdr_ACCESS4ªsok
 ();

2835 
uöt32_t
 
zdr_ACCESS4ªs
 ();

2836 
uöt32_t
 
zdr_CLOSE4¨gs
 ();

2837 
uöt32_t
 
zdr_CLOSE4ªs
 ();

2838 
uöt32_t
 
zdr_COMMIT4¨gs
 ();

2839 
uöt32_t
 
zdr_COMMIT4ªsok
 ();

2840 
uöt32_t
 
zdr_COMMIT4ªs
 ();

2841 
uöt32_t
 
zdr_¸óãty≥4
 ();

2842 
uöt32_t
 
zdr_CREATE4¨gs
 ();

2843 
uöt32_t
 
zdr_CREATE4ªsok
 ();

2844 
uöt32_t
 
zdr_CREATE4ªs
 ();

2845 
uöt32_t
 
zdr_DELEGPURGE4¨gs
 ();

2846 
uöt32_t
 
zdr_DELEGPURGE4ªs
 ();

2847 
uöt32_t
 
zdr_DELEGRETURN4¨gs
 ();

2848 
uöt32_t
 
zdr_DELEGRETURN4ªs
 ();

2849 
uöt32_t
 
zdr_GETATTR4¨gs
 ();

2850 
uöt32_t
 
zdr_GETATTR4ªsok
 ();

2851 
uöt32_t
 
zdr_GETATTR4ªs
 ();

2852 
uöt32_t
 
zdr_GETFH4ªsok
 ();

2853 
uöt32_t
 
zdr_GETFH4ªs
 ();

2854 
uöt32_t
 
zdr_LINK4¨gs
 ();

2855 
uöt32_t
 
zdr_LINK4ªsok
 ();

2856 
uöt32_t
 
zdr_LINK4ªs
 ();

2857 
uöt32_t
 
zdr_›í_to_lock_ow√r4
 ();

2858 
uöt32_t
 
zdr_exi°_lock_ow√r4
 ();

2859 
uöt32_t
 
zdr_lockî4
 ();

2860 
uöt32_t
 
zdr_LOCK4¨gs
 ();

2861 
uöt32_t
 
zdr_LOCK4díõd
 ();

2862 
uöt32_t
 
zdr_LOCK4ªsok
 ();

2863 
uöt32_t
 
zdr_LOCK4ªs
 ();

2864 
uöt32_t
 
zdr_LOCKT4¨gs
 ();

2865 
uöt32_t
 
zdr_LOCKT4ªs
 ();

2866 
uöt32_t
 
zdr_LOCKU4¨gs
 ();

2867 
uöt32_t
 
zdr_LOCKU4ªs
 ();

2868 
uöt32_t
 
zdr_LOOKUP4¨gs
 ();

2869 
uöt32_t
 
zdr_LOOKUP4ªs
 ();

2870 
uöt32_t
 
zdr_LOOKUPP4ªs
 ();

2871 
uöt32_t
 
zdr_NVERIFY4¨gs
 ();

2872 
uöt32_t
 
zdr_NVERIFY4ªs
 ();

2873 
uöt32_t
 
zdr_¸óãmode4
 ();

2874 
uöt32_t
 
zdr_¸óãhow4
 ();

2875 
uöt32_t
 
zdr_›íty≥4
 ();

2876 
uöt32_t
 
zdr_›íÊag4
 ();

2877 
uöt32_t
 
zdr_limô_by4
 ();

2878 
uöt32_t
 
zdr_nfs_modifõd_limô4
 ();

2879 
uöt32_t
 
zdr_nfs_•a˚_limô4
 ();

2880 
uöt32_t
 
zdr_›í_dñeg©i⁄_ty≥4
 ();

2881 
uöt32_t
 
zdr_›í_˛aim_ty≥4
 ();

2882 
uöt32_t
 
zdr_›í_˛aim_dñeg©e_cur4
 ();

2883 
uöt32_t
 
zdr_›í_˛aim4
 ();

2884 
uöt32_t
 
zdr_OPEN4¨gs
 ();

2885 
uöt32_t
 
zdr_›í_ªad_dñeg©i⁄4
 ();

2886 
uöt32_t
 
zdr_›í_wrôe_dñeg©i⁄4
 ();

2887 
uöt32_t
 
zdr_›í_dñeg©i⁄4
 ();

2888 
uöt32_t
 
zdr_OPEN4ªsok
 ();

2889 
uöt32_t
 
zdr_OPEN4ªs
 ();

2890 
uöt32_t
 
zdr_OPENATTR4¨gs
 ();

2891 
uöt32_t
 
zdr_OPENATTR4ªs
 ();

2892 
uöt32_t
 
zdr_OPEN_CONFIRM4¨gs
 ();

2893 
uöt32_t
 
zdr_OPEN_CONFIRM4ªsok
 ();

2894 
uöt32_t
 
zdr_OPEN_CONFIRM4ªs
 ();

2895 
uöt32_t
 
zdr_OPEN_DOWNGRADE4¨gs
 ();

2896 
uöt32_t
 
zdr_OPEN_DOWNGRADE4ªsok
 ();

2897 
uöt32_t
 
zdr_OPEN_DOWNGRADE4ªs
 ();

2898 
uöt32_t
 
zdr_PUTFH4¨gs
 ();

2899 
uöt32_t
 
zdr_PUTFH4ªs
 ();

2900 
uöt32_t
 
zdr_PUTPUBFH4ªs
 ();

2901 
uöt32_t
 
zdr_PUTROOTFH4ªs
 ();

2902 
uöt32_t
 
zdr_READ4¨gs
 ();

2903 
uöt32_t
 
zdr_READ4ªsok
 ();

2904 
uöt32_t
 
zdr_READ4ªs
 ();

2905 
uöt32_t
 
zdr_READDIR4¨gs
 ();

2906 
uöt32_t
 
zdr_íåy4
 ();

2907 
uöt32_t
 
zdr_dúli°4
 ();

2908 
uöt32_t
 
zdr_READDIR4ªsok
 ();

2909 
uöt32_t
 
zdr_READDIR4ªs
 ();

2910 
uöt32_t
 
zdr_READLINK4ªsok
 ();

2911 
uöt32_t
 
zdr_READLINK4ªs
 ();

2912 
uöt32_t
 
zdr_REMOVE4¨gs
 ();

2913 
uöt32_t
 
zdr_REMOVE4ªsok
 ();

2914 
uöt32_t
 
zdr_REMOVE4ªs
 ();

2915 
uöt32_t
 
zdr_RENAME4¨gs
 ();

2916 
uöt32_t
 
zdr_RENAME4ªsok
 ();

2917 
uöt32_t
 
zdr_RENAME4ªs
 ();

2918 
uöt32_t
 
zdr_RENEW4¨gs
 ();

2919 
uöt32_t
 
zdr_RENEW4ªs
 ();

2920 
uöt32_t
 
zdr_RESTOREFH4ªs
 ();

2921 
uöt32_t
 
zdr_SAVEFH4ªs
 ();

2922 
uöt32_t
 
zdr_SECINFO4¨gs
 ();

2923 
uöt32_t
 
zdr_Ωc_gss_svc_t
 ();

2924 
uöt32_t
 
zdr_Ωc£c_gss_öfo
 ();

2925 
uöt32_t
 
zdr_£cöfo4
 ();

2926 
uöt32_t
 
zdr_SECINFO4ªsok
 ();

2927 
uöt32_t
 
zdr_SECINFO4ªs
 ();

2928 
uöt32_t
 
zdr_SETATTR4¨gs
 ();

2929 
uöt32_t
 
zdr_SETATTR4ªs
 ();

2930 
uöt32_t
 
zdr_SETCLIENTID4¨gs
 ();

2931 
uöt32_t
 
zdr_SETCLIENTID4ªsok
 ();

2932 
uöt32_t
 
zdr_SETCLIENTID4ªs
 ();

2933 
uöt32_t
 
zdr_SETCLIENTID_CONFIRM4¨gs
 ();

2934 
uöt32_t
 
zdr_SETCLIENTID_CONFIRM4ªs
 ();

2935 
uöt32_t
 
zdr_VERIFY4¨gs
 ();

2936 
uöt32_t
 
zdr_VERIFY4ªs
 ();

2937 
uöt32_t
 
zdr_°abÀ_how4
 ();

2938 
uöt32_t
 
zdr_WRITE4¨gs
 ();

2939 
uöt32_t
 
zdr_WRITE4ªsok
 ();

2940 
uöt32_t
 
zdr_WRITE4ªs
 ();

2941 
uöt32_t
 
zdr_RELEASE_LOCKOWNER4¨gs
 ();

2942 
uöt32_t
 
zdr_RELEASE_LOCKOWNER4ªs
 ();

2943 
uöt32_t
 
zdr_gssh™dÀ4_t
 ();

2944 
uöt32_t
 
zdr_ˇŒback_£c_∑rms4
 ();

2945 
uöt32_t
 
zdr_ch™√l_dú_‰om_˛õ¡4
 ();

2946 
uöt32_t
 
zdr_BIND_CONN_TO_SESSION4¨gs
 ();

2947 
uöt32_t
 
zdr_ch™√l_dú_‰om_£rvî4
 ();

2948 
uöt32_t
 
zdr_BIND_CONN_TO_SESSION4ªsok
 ();

2949 
uöt32_t
 
zdr_BIND_CONN_TO_SESSION4ªs
 ();

2950 
uöt32_t
 
zdr_°©e_¥Ÿe˘_›s4
 ();

2951 
uöt32_t
 
zdr_ssv_•_∑rms4
 ();

2952 
uöt32_t
 
zdr_°©e_¥Ÿe˘_how4
 ();

2953 
uöt32_t
 
zdr_°©e_¥Ÿe˘4_a
 ();

2954 
uöt32_t
 
zdr_EXCHANGE_ID4¨gs
 ();

2955 
uöt32_t
 
zdr_ssv_¥Ÿ_öfo4
 ();

2956 
uöt32_t
 
zdr_°©e_¥Ÿe˘4_r
 ();

2957 
uöt32_t
 
zdr_EXCHANGE_ID4ªsok
 ();

2958 
uöt32_t
 
zdr_EXCHANGE_ID4ªs
 ();

2959 
uöt32_t
 
zdr_ch™√l_©ås4
 ();

2960 
uöt32_t
 
zdr_CREATE_SESSION4¨gs
 ();

2961 
uöt32_t
 
zdr_CREATE_SESSION4ªsok
 ();

2962 
uöt32_t
 
zdr_CREATE_SESSION4ªs
 ();

2963 
uöt32_t
 
zdr_DESTROY_SESSION4¨gs
 ();

2964 
uöt32_t
 
zdr_DESTROY_SESSION4ªs
 ();

2965 
uöt32_t
 
zdr_FREE_STATEID4¨gs
 ();

2966 
uöt32_t
 
zdr_FREE_STATEID4ªs
 ();

2967 
uöt32_t
 
zdr_©å_nŸi˚4
 ();

2968 
uöt32_t
 
zdr_GET_DIR_DELEGATION4¨gs
 ();

2969 
uöt32_t
 
zdr_GET_DIR_DELEGATION4ªsok
 ();

2970 
uöt32_t
 
zdr_gdd∫f4_°©us
 ();

2971 
uöt32_t
 
zdr_GET_DIR_DELEGATION4ªs_n⁄_Áèl
 ();

2972 
uöt32_t
 
zdr_GET_DIR_DELEGATION4ªs
 ();

2973 
uöt32_t
 
zdr_GETDEVICEINFO4¨gs
 ();

2974 
uöt32_t
 
zdr_GETDEVICEINFO4ªsok
 ();

2975 
uöt32_t
 
zdr_GETDEVICEINFO4ªs
 ();

2976 
uöt32_t
 
zdr_GETDEVICELIST4¨gs
 ();

2977 
uöt32_t
 
zdr_GETDEVICELIST4ªsok
 ();

2978 
uöt32_t
 
zdr_GETDEVICELIST4ªs
 ();

2979 
uöt32_t
 
zdr_√wtime4
 ();

2980 
uöt32_t
 
zdr_√woff£t4
 ();

2981 
uöt32_t
 
zdr_LAYOUTCOMMIT4¨gs
 ();

2982 
uöt32_t
 
zdr_√wsize4
 ();

2983 
uöt32_t
 
zdr_LAYOUTCOMMIT4ªsok
 ();

2984 
uöt32_t
 
zdr_LAYOUTCOMMIT4ªs
 ();

2985 
uöt32_t
 
zdr_LAYOUTGET4¨gs
 ();

2986 
uöt32_t
 
zdr_LAYOUTGET4ªsok
 ();

2987 
uöt32_t
 
zdr_LAYOUTGET4ªs
 ();

2988 
uöt32_t
 
zdr_œyouåëu∫_ty≥4
 ();

2989 
uöt32_t
 
zdr_œyouåëu∫_fûe4
 ();

2990 
uöt32_t
 
zdr_œyouåëu∫4
 ();

2991 
uöt32_t
 
zdr_LAYOUTRETURN4¨gs
 ();

2992 
uöt32_t
 
zdr_œyouåëu∫_°©eid
 ();

2993 
uöt32_t
 
zdr_LAYOUTRETURN4ªs
 ();

2994 
uöt32_t
 
zdr_£cöfo_°yÀ4
 ();

2995 
uöt32_t
 
zdr_SECINFO_NO_NAME4¨gs
 ();

2996 
uöt32_t
 
zdr_SECINFO_NO_NAME4ªs
 ();

2997 
uöt32_t
 
zdr_SEQUENCE4¨gs
 ();

2998 
uöt32_t
 
zdr_SEQUENCE4ªsok
 ();

2999 
uöt32_t
 
zdr_SEQUENCE4ªs
 ();

3000 
uöt32_t
 
zdr_sß_dige°_öput4
 ();

3001 
uöt32_t
 
zdr_SET_SSV4¨gs
 ();

3002 
uöt32_t
 
zdr_s§_dige°_öput4
 ();

3003 
uöt32_t
 
zdr_SET_SSV4ªsok
 ();

3004 
uöt32_t
 
zdr_SET_SSV4ªs
 ();

3005 
uöt32_t
 
zdr_TEST_STATEID4¨gs
 ();

3006 
uöt32_t
 
zdr_TEST_STATEID4ªsok
 ();

3007 
uöt32_t
 
zdr_TEST_STATEID4ªs
 ();

3008 
uöt32_t
 
zdr_dñeg_˛aim4
 ();

3009 
uöt32_t
 
zdr_WANT_DELEGATION4¨gs
 ();

3010 
uöt32_t
 
zdr_WANT_DELEGATION4ªs
 ();

3011 
uöt32_t
 
zdr_DESTROY_CLIENTID4¨gs
 ();

3012 
uöt32_t
 
zdr_DESTROY_CLIENTID4ªs
 ();

3013 
uöt32_t
 
zdr_RECLAIM_COMPLETE4¨gs
 ();

3014 
uöt32_t
 
zdr_RECLAIM_COMPLETE4ªs
 ();

3015 
uöt32_t
 
zdr_ILLEGAL4ªs
 ();

3016 
uöt32_t
 
zdr_nfs_›num4
 ();

3017 
uöt32_t
 
zdr_nfs_¨g›4
 ();

3018 
uöt32_t
 
zdr_nfs_ªs›4
 ();

3019 
uöt32_t
 
zdr_COMPOUND4¨gs
 ();

3020 
uöt32_t
 
zdr_COMPOUND4ªs
 ();

3021 
uöt32_t
 
zdr_CB_GETATTR4¨gs
 ();

3022 
uöt32_t
 
zdr_CB_GETATTR4ªsok
 ();

3023 
uöt32_t
 
zdr_CB_GETATTR4ªs
 ();

3024 
uöt32_t
 
zdr_CB_RECALL4¨gs
 ();

3025 
uöt32_t
 
zdr_CB_RECALL4ªs
 ();

3026 
uöt32_t
 
zdr_CB_ILLEGAL4ªs
 ();

3027 
uöt32_t
 
zdr_nfs_cb_›num4
 ();

3028 
uöt32_t
 
zdr_nfs_cb_¨g›4
 ();

3029 
uöt32_t
 
zdr_nfs_cb_ªs›4
 ();

3030 
uöt32_t
 
zdr_CB_COMPOUND4¨gs
 ();

3031 
uöt32_t
 
zdr_CB_COMPOUND4ªs
 ();

3032 
uöt32_t
 
zdr_Ωc_gss_¥oc_t
 ();

3033 
uöt32_t
 
zdr_Ωc_gss_¸ed_vîs_1_t
 ();

3034 
uöt32_t
 
zdr_Ωc_gss_¸ed_t
 ();

3035 
uöt32_t
 
zdr_Ωc_gss_öô_¨g
 ();

3036 
uöt32_t
 
zdr_Ωc_gss_öô_ªs
 ();

3037 
uöt32_t
 
zdr_Ωc_gss_öãg_d©a
 ();

3041 
	~<nfsc/libnfs.h
>

3043 #i‡
deföed
(
WIN32
Ë&& deföed(
libnfs_EXPORTS
)

3044 
	#EXTERN
 
	`__de˛•ec
–
dŒexp‹t
 )

	)

3046 #i‚de‡
EXTERN


3047 
	#EXTERN


	)

3068 
EXTERN
 
nfs4_gëa˛_async
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

3069 
nfs_cb
 
cb
, *
¥iv©e_d©a
);

3080 
EXTERN
 
nfs4_gëa˛
(
nfs_c⁄ãxt
 *
nfs
, 
nfsfh
 *nfsfh,

3081 
Áâr4_a˛
 *
nfs4a˛
);

3083 
EXTERN
 
nfs4_a˛_‰ì
(
Áâr4_a˛
 *
nfs4a˛
);

3085 #ifde‡
__˝lu•lus


	@nfs4/nfs4.c

19 #ifde‡
PS2_EE


20 
	~"ps2_com∑t.h
"

23 #ifde‡
WIN32


24 
	~<wö32/wö32_com∑t.h
>

26 
	~<sys/°©.h
>

29 
	~<°dio.h
>

30 
	~<î∫o.h
>

31 
	~<°rög.h
>

32 
	~"libnfs-zdr.h
"

33 
	~"libnfs.h
"

34 
	~"libnfs-øw.h
"

35 
	~"libnfs-¥iv©e.h
"

36 
	~"libnfs-øw-nfs4.h
"

39 
	$nfs°©4_to_°r
(
îr‹
)

41 
îr‹
) {

42 
NFS4_OK
:  "NFS4_OK"; ;

43 
NFS4ERR_PERM
:  "NFS4ERR_PERM"; ;

44 
NFS4ERR_NOENT
:  "NFS4ERR_NOENT"; ;

45 
NFS4ERR_IO
:  "NFS4ERR_IO"; ;

46 
NFS4ERR_NXIO
:  "NFS4ERR_NXIO"; ;

47 
NFS4ERR_ACCESS
:  "NFS4ERR_ACCESS"; ;

48 
NFS4ERR_EXIST
:  "NFS4ERR_EXIST"; ;

49 
NFS4ERR_XDEV
:  "NFS4ERR_XDEV"; ;

50 
NFS4ERR_NOTDIR
:  "NFS4ERR_NOTDIR"; ;

51 
NFS4ERR_ISDIR
:  "NFS4ERR_ISDIR"; ;

52 
NFS4ERR_INVAL
:  "NFS4ERR_INVAL"; ;

53 
NFS4ERR_FBIG
:  "NFS4ERR_FBIG"; ;

54 
NFS4ERR_NOSPC
:  "NFS4ERR_NOSPC"; ;

55 
NFS4ERR_ROFS
: "NFS4ERR_ROFS"; ;

56 
NFS4ERR_MLINK
:  "NFS4ERR_MLINK"; ;

57 
NFS4ERR_NAMETOOLONG
:  "NFS4ERR_NAMETOOLONG"; ;

58 
NFS4ERR_NOTEMPTY
:  "NFS4ERR_NOTEMPTY"; ;

59 
NFS4ERR_DQUOT
:  "NFS4ERR_DQUOT"; ;

60 
NFS4ERR_STALE
:  "NFS4ERR_STALE"; ;

61 
NFS4ERR_BADHANDLE
:  "NFS4ERR_BADHANDLE"; ;

62 
NFS4ERR_BAD_COOKIE
:  "NFS4ERR_BAD_COOKIE"; ;

63 
NFS4ERR_NOTSUPP
:  "NFS4ERR_NOTSUPP"; ;

64 
NFS4ERR_TOOSMALL
:  "NFS4ERR_TOOSMALL"; ;

65 
NFS4ERR_SERVERFAULT
:  "NFS4ERR_SERVERFAULT"; ;

66 
NFS4ERR_BADTYPE
:  "NFS4ERR_BADTYPE"; ;

67 
NFS4ERR_DELAY
:  "NFS4ERR_DELAY"; ;

68 
NFS4ERR_SAME
:  "NFS4ERR_SAME"; ;

69 
NFS4ERR_DENIED
:  "NFS4ERR_DENIED"; ;

70 
NFS4ERR_EXPIRED
:  "NFS4ERR_EXPIRED"; ;

71 
NFS4ERR_LOCKED
:  "NFS4ERR_LOCKED"; ;

72 
NFS4ERR_GRACE
:  "NFS4ERR_GRACE"; ;

73 
NFS4ERR_FHEXPIRED
:  "NFS4ERR_FHEXPIRED"; ;

74 
NFS4ERR_SHARE_DENIED
:  "NFS4ERR_SHARE_DENIED"; ;

75 
NFS4ERR_WRONGSEC
:  "NFS4ERR_WRONGSEC"; ;

76 
NFS4ERR_CLID_INUSE
:  "NFS4ERR_CLID_INUSE"; ;

77 
NFS4ERR_RESOURCE
:  "NFS4ERR_RESOURCE"; ;

78 
NFS4ERR_MOVED
:  "NFS4ERR_MOVED"; ;

79 
NFS4ERR_NOFILEHANDLE
:  "NFS4ERR_NOFILEHANDLE"; ;

80 
NFS4ERR_MINOR_VERS_MISMATCH
:

82 
NFS4ERR_STALE_CLIENTID
:  "NFS4ERR_STALE_CLIENTID"; ;

83 
NFS4ERR_STALE_STATEID
:  "NFS4ERR_STALE_STATEID"; ;

84 
NFS4ERR_OLD_STATEID
:  "NFS4ERR_OLD_STATEID"; ;

85 
NFS4ERR_BAD_STATEID
:  "NFS4ERR_BAD_STATEID"; ;

86 
NFS4ERR_BAD_SEQID
:  "NFS4ERR_BAD_SEQID"; ;

87 
NFS4ERR_NOT_SAME
:  "NFS4ERR_NOT_SAME"; ;

88 
NFS4ERR_LOCK_RANGE
:  "NFS4ERR_LOCK_RANGE"; ;

89 
NFS4ERR_SYMLINK
:  "NFS4ERR_SYMLINK"; ;

90 
NFS4ERR_RESTOREFH
:  "NFS4ERR_RESTOREFH"; ;

91 
NFS4ERR_LEASE_MOVED
:  "NFS4ERR_LEASE_MOVED"; ;

92 
NFS4ERR_ATTRNOTSUPP
:  "NFS4ERR_ATTRNOTSUPP"; ;

93 
NFS4ERR_NO_GRACE
:  "NFS4ERR_NO_GRACE"; ;

94 
NFS4ERR_RECLAIM_BAD
:  "NFS4ERR_RECLAIM_BAD"; ;

95 
NFS4ERR_RECLAIM_CONFLICT
:  "NFS4ERR_RECLAIM_CONFLICT"; ;

96 
NFS4ERR_BADZDR
:  "NFS4ERR_BADZDR"; ;

97 
NFS4ERR_LOCKS_HELD
:  "NFS4ERR_LOCKS_HELD"; ;

98 
NFS4ERR_OPENMODE
:  "NFS4ERR_OPENMODE"; ;

99 
NFS4ERR_BADOWNER
:  "NFS4ERR_BADOWNER"; ;

100 
NFS4ERR_BADCHAR
:  "NFS4ERR_BADCHAR"; ;

101 
NFS4ERR_BADNAME
:  "NFS4ERR_BADNAME"; ;

102 
NFS4ERR_BAD_RANGE
:  "NFS4ERR_BAD_RANGE"; ;

103 
NFS4ERR_LOCK_NOTSUPP
:  "NFS4ERR_LOCK_NOTSUPP"; ;

104 
NFS4ERR_OP_ILLEGAL
:  "NFS4ERR_OP_ILLEGAL"; ;

105 
NFS4ERR_DEADLOCK
:  "NFS4ERR_DEADLOCK"; ;

106 
NFS4ERR_FILE_OPEN
:  "NFS4ERR_FILE_OPEN"; ;

107 
NFS4ERR_ADMIN_REVOKED
:  "NFS4ERR_ADMIN_REVOKED"; ;

108 
NFS4ERR_CB_PATH_DOWN
:  "NFS4ERR_CB_PATH_DOWN"; ;

111 
	}
}

114 
	$nfs°©4_to_î∫o
(
îr‹
)

116 
îr‹
) {

117 
NFS4_OK
:  0;

118 
NFS4ERR_PERM
:  -
EPERM
;

119 
NFS4ERR_NOENT
:  -
ENOENT
 ;

120 
NFS4ERR_IO
:  -
EIO
;

121 
NFS4ERR_NXIO
:  -
ENXIO
;

122 
NFS4ERR_ACCESS
:  -
EACCES
 ;

123 
NFS4ERR_EXIST
:  -
EEXIST
;

124 
NFS4ERR_XDEV
:  -
EXDEV
;

125 
NFS4ERR_NOTDIR
:  -
ENOTDIR
 ;

126 
NFS4ERR_ISDIR
:  -
EISDIR
 ;

127 
NFS4ERR_INVAL
:  -
EINVAL
;

128 
NFS4ERR_FBIG
:  -
EFBIG
;

129 
NFS4ERR_NOSPC
:  -
ENOSPC
;

130 
NFS4ERR_ROFS
:  -
EROFS
;

131 
NFS4ERR_MLINK
:  -
EMLINK
;

132 
NFS4ERR_NAMETOOLONG
:  -
ENAMETOOLONG
;

133 
NFS4ERR_NOTEMPTY
:  -
ENOTEMPTY
;

134 
NFS4ERR_DQUOT
:  -
ERANGE
;

135 
NFS4ERR_STALE
:  -
EIO
;

136 
NFS4ERR_BADHANDLE
:  -
EINVAL
;

137 
NFS4ERR_BAD_COOKIE
:  -
EINVAL
;

138 
NFS4ERR_NOTSUPP
:  -
EINVAL
;

139 
NFS4ERR_TOOSMALL
:  -
EIO
;

140 
NFS4ERR_SERVERFAULT
:  -
EIO
;

141 
NFS4ERR_BADTYPE
:  -
EINVAL
;

142 
NFS4ERR_DELAY
:  -
EIO
;

143 
NFS4ERR_SAME
:  -
EIO
;

144 
NFS4ERR_DENIED
:  -
EIO
;

145 
NFS4ERR_EXPIRED
:  -
EAGAIN
;

146 
NFS4ERR_LOCKED
:  -
EIO
;

147 
NFS4ERR_GRACE
:  -
EIO
;

148 
NFS4ERR_FHEXPIRED
:  -
EAGAIN
;

149 
NFS4ERR_SHARE_DENIED
:  -
EIO
;

150 
NFS4ERR_WRONGSEC
:  -
EIO
;

151 
NFS4ERR_CLID_INUSE
:  -
EIO
;

152 
NFS4ERR_RESOURCE
:  -
EIO
;

153 
NFS4ERR_MOVED
:  -
EIO
;

154 
NFS4ERR_NOFILEHANDLE
:  -
EIO
;

155 
NFS4ERR_MINOR_VERS_MISMATCH
:  -
EIO
;

156 
NFS4ERR_STALE_CLIENTID
:  -
EIO
;

157 
NFS4ERR_STALE_STATEID
:  -
EIO
;

158 
NFS4ERR_OLD_STATEID
:  -
EIO
;

159 
NFS4ERR_BAD_STATEID
:  -
EINVAL
;

160 
NFS4ERR_BAD_SEQID
:  -
EINVAL
;

161 
NFS4ERR_NOT_SAME
:  -
EIO
;

162 
NFS4ERR_LOCK_RANGE
:  -
EIO
;

163 
NFS4ERR_SYMLINK
:  -
EIO
;

164 
NFS4ERR_RESTOREFH
:  -
EIO
;

165 
NFS4ERR_ATTRNOTSUPP
:  -
EINVAL
;

166 
NFS4ERR_NO_GRACE
:  -
EIO
;

167 
NFS4ERR_RECLAIM_BAD
:  -
EIO
;

168 
NFS4ERR_RECLAIM_CONFLICT
:  -
EIO
;

169 
NFS4ERR_BADZDR
:  -
EINVAL
;

170 
NFS4ERR_LOCKS_HELD
:  -
EIO
;

171 
NFS4ERR_OPENMODE
:  -
EIO
;

172 
NFS4ERR_BADOWNER
:  -
EINVAL
;

173 
NFS4ERR_BADCHAR
:  -
EINVAL
;

174 
NFS4ERR_BADNAME
:  -
EINVAL
;

175 
NFS4ERR_BAD_RANGE
:  -
EINVAL
;

176 
NFS4ERR_LOCK_NOTSUPP
:  -
EINVAL
;

177 
NFS4ERR_OP_ILLEGAL
:  -
EIO
;

178 
NFS4ERR_DEADLOCK
:  -
EIO
;

179 
NFS4ERR_FILE_OPEN
:  -
EIO
;

180 
NFS4ERR_ADMIN_REVOKED
:  -
EIO
;

181 
NFS4ERR_CB_PATH_DOWN
:  -
EIO
;

183  -
ERANGE
;

184 
	}
}

186 
Ωc_pdu
 *
	$Ωc_nfs4_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

187 *
¥iv©e_d©a
)

189 
Ωc_pdu
 *
pdu
;

191 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NFS4_PROGRAM
, 
NFS_V4
, 
NFSPROC4_NULL
, 
cb
,

192 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

193 i‡(
pdu
 =
NULL
) {

194 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu "

196  
NULL
;

199 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

200 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for "

202  
NULL
;

205  
pdu
;

206 
	}
}

208 
Ωc_pdu
 *
	$Ωc_nfs4_compound_èsk2
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

209 
COMPOUND4¨gs
 *
¨gs
,

210 *
¥iv©e_d©a
,

211 
size_t
 
Æloc_höt
)

213 
Ωc_pdu
 *
pdu
;

215 
pdu
 = 
	`Ωc_Æloˇã_pdu2
(
Ωc
, 
NFS4_PROGRAM
, 
NFS_V4
, 
NFSPROC4_COMPOUND
,

216 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_COMPOUND4ªs
,

217 (
COMPOUND4ªs
),

218 
Æloc_höt
);

219 i‡(
pdu
 =
NULL
) {

220 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for "

222  
NULL
;

225 i‡(
	`zdr_COMPOUND4¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

226 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode COMPOUND4args");

227 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

228  
NULL
;

231 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

232 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for "

234  
NULL
;

237  
pdu
;

238 
	}
}

241 
Ωc_pdu
 *
	$Ωc_nfs4_compound_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

242 
COMPOUND4¨gs
 *
¨gs
,

243 *
¥iv©e_d©a
)

245  
	`Ωc_nfs4_compound_èsk2
(
Ωc
, 
cb
, 
¨gs
, 
¥iv©e_d©a
, 0);

246 
	}
}

248 
Ωc_pdu
 *
	$Ωc_nfs4_ªad_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

249 *
buf
, 
size_t
 
cou¡
,

250 
COMPOUND4¨gs
 *
¨gs
,

251 *
¥iv©e_d©a
)

253 
Ωc_pdu
 *
pdu
;

255 
pdu
 = 
	`Ωc_Æloˇã_pdu2
(
Ωc
, 
NFS4_PROGRAM
, 
NFS_V4
, 
NFSPROC4_COMPOUND
,

256 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_COMPOUND4ªs
,

257 (
COMPOUND4ªs
), 0);

258 i‡(
pdu
 =
NULL
) {

259 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for "

261  
NULL
;

264 i‡(
	`zdr_COMPOUND4¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

265 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode COMPOUND4args");

266 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

267  
NULL
;

270 
pdu
->
ö
.
buf
 = buf;

271 
pdu
->
ö
.
Àn
 = 
cou¡
;

273 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

274 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for "

276  
NULL
;

279  
pdu
;

280 
	}
}

282 
Ωc_pdu
 *
	$Ωc_nfs4_wrôe_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
,

283 c⁄° *
buf
, 
size_t
 
cou¡
,

284 
COMPOUND4¨gs
 *
¨gs
,

285 *
¥iv©e_d©a
)

287 
Ωc_pdu
 *
pdu
;

288 
°¨t
;

289 
uöt32_t
 
Àn
;

290 
uöt32_t
 
zîo_∑ddög
;

292 
pdu
 = 
	`Ωc_Æloˇã_pdu2
(
Ωc
, 
NFS4_PROGRAM
, 
NFS_V4
, 
NFSPROC4_COMPOUND
,

293 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_COMPOUND4ªs
,

294 (
COMPOUND4ªs
), 0);

295 i‡(
pdu
 =
NULL
) {

296 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for "

298  
NULL
;

301 
°¨t
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

303 i‡(
	`zdr_COMPOUND4¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

304 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode COMPOUND4args");

305 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

306  
NULL
;

310 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, &pdu->
outd©a
.
d©a
[
°¨t
 + 4],

311 
	`zdr_gëpos
(&
pdu
->
zdr
Ë- 
°¨t
, 
NULL
) < 0) {

312 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

313  
NULL
;

317 
°¨t
 = 
	`zdr_gëpos
(&
pdu
->
zdr
);

318 
Àn
 = 
cou¡
;

319 
	`zdr_u_öt
(&
pdu
->
zdr
, &
Àn
);

320 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, &pdu->
outd©a
.
d©a
[
°¨t
 + 4],

321 4, 
NULL
) < 0) {

322 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

323  
NULL
;

327 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, (*)
buf
, 
cou¡
, 
NULL
) < 0) {

328 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

329  
NULL
;

333 i‡(
cou¡
 & 0x03) {

334 i‡(
	`Ωc_add_iove˘‹
(
Ωc
, &
pdu
->
out
, (*)&
zîo_∑ddög
,

335 4 - (
cou¡
 & 0x03),

336 
NULL
) < 0) {

337 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

338  
NULL
;

342 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

343 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for "

345  
NULL
;

348  
pdu
;

349 
	}
}

	@nlm/libnfs-raw-nlm.c

35 
	~"libnfs-zdr.h
"

36 
	~"libnfs-øw-∆m.h
"

38 
uöt32_t


39 
	$zdr_∆m_fh4
 (
ZDR
 *
zdrs
, 
∆m_fh4
 *
objp
)

41 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, ~0))

42  
FALSE
;

43  
TRUE
;

44 
	}
}

46 
uöt32_t


47 
	$zdr_∆m4_oh
 (
ZDR
 *
zdrs
, 
∆m4_oh
 *
objp
)

49 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, ~0))

50  
FALSE
;

51  
TRUE
;

52 
	}
}

54 
uöt32_t


55 
	$zdr_∆m_cookõ
 (
ZDR
 *
zdrs
, 
∆m_cookõ
 *
objp
)

57 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
d©a
.
d©a_vÆ
, (
u_öt
 *Ë&objp->d©a.
d©a_Àn
, ~0))

58  
FALSE
;

59  
TRUE
;

60 
	}
}

62 
uöt32_t


63 
	$zdr_∆m°©4
 (
ZDR
 *
zdrs
, 
∆m°©4
 *
objp
)

65 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

66  
FALSE
;

67  
TRUE
;

68 
	}
}

70 
uöt32_t


71 
	$zdr_∆m4_hﬁdî
 (
ZDR
 *
zdrs
, 
∆m4_hﬁdî
 *
objp
)

73 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ex˛usive
))

74  
FALSE
;

75 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
svid
))

76  
FALSE
;

77 i‡(!
	`zdr_∆m4_oh
 (
zdrs
, &
objp
->
oh
))

78  
FALSE
;

79 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
l_off£t
))

80  
FALSE
;

81 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
l_Àn
))

82  
FALSE
;

83  
TRUE
;

84 
	}
}

86 
uöt32_t


87 
	$zdr_∆m4_lock
 (
ZDR
 *
zdrs
, 
∆m4_lock
 *
objp
)

89 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
ˇŒî_«me
, 
NLM_MAXNAME
))

90  
FALSE
;

91 i‡(!
	`zdr_∆m_fh4
 (
zdrs
, &
objp
->
fh
))

92  
FALSE
;

93 i‡(!
	`zdr_∆m4_oh
 (
zdrs
, &
objp
->
oh
))

94  
FALSE
;

95 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
svid
))

96  
FALSE
;

97 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
l_off£t
))

98  
FALSE
;

99 i‡(!
	`zdr_uöt64_t
 (
zdrs
, &
objp
->
l_Àn
))

100  
FALSE
;

101  
TRUE
;

102 
	}
}

104 
uöt32_t


105 
	$zdr_∆m4_sh¨e
 (
ZDR
 *
zdrs
, 
∆m4_sh¨e
 *
objp
)

107 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
ˇŒî_«me
, 
NLM_MAXNAME
))

108  
FALSE
;

109 i‡(!
	`zdr_∆m_fh4
 (
zdrs
, &
objp
->
fh
))

110  
FALSE
;

111 i‡(!
	`zdr_∆m4_oh
 (
zdrs
, &
objp
->
oh
))

112  
FALSE
;

113 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
mode
))

114  
FALSE
;

115 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
ac˚ss
))

116  
FALSE
;

117  
TRUE
;

118 
	}
}

120 
uöt32_t


121 
	$zdr_∆m4_ã°ªs_díõd
 (
ZDR
 *
zdrs
, 
∆m4_ã°ªs_díõd
 *
objp
)

123 i‡(!
	`zdr_∆m4_hﬁdî
 (
zdrs
, &
objp
->
hﬁdî
))

124  
FALSE
;

125  
TRUE
;

126 
	}
}

128 
uöt32_t


129 
	$zdr_∆m4_ã°ª∂y
 (
ZDR
 *
zdrs
, 
∆m4_ã°ª∂y
 *
objp
)

131 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

132  
FALSE
;

133 
objp
->
°©us
) {

134 
NLM4_DENIED
:

135 i‡(!
	`zdr_∆m4_ã°ªs_díõd
 (
zdrs
, &
objp
->
∆m4_ã°ª∂y_u
.
lock
))

136  
FALSE
;

141  
TRUE
;

142 
	}
}

144 
uöt32_t


145 
	$zdr_NLM4_TESTªs
 (
ZDR
 *
zdrs
, 
NLM4_TESTªs
 *
objp
)

147 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

148  
FALSE
;

149 i‡(!
	`zdr_∆m4_ã°ª∂y
 (
zdrs
, &
objp
->
ª∂y
))

150  
FALSE
;

151  
TRUE
;

152 
	}
}

154 
uöt32_t


155 
	$zdr_NLM4_TEST¨gs
 (
ZDR
 *
zdrs
, 
NLM4_TEST¨gs
 *
objp
)

157 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

158  
FALSE
;

159 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ex˛usive
))

160  
FALSE
;

161 i‡(!
	`zdr_∆m4_lock
 (
zdrs
, &
objp
->
lock
))

162  
FALSE
;

163  
TRUE
;

164 
	}
}

166 
uöt32_t


167 
	$zdr_NLM4_CANCªs
 (
ZDR
 *
zdrs
, 
NLM4_CANCªs
 *
objp
)

169 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

170  
FALSE
;

171 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

172  
FALSE
;

173  
TRUE
;

174 
	}
}

176 
uöt32_t


177 
	$zdr_NLM4_CANC¨gs
 (
ZDR
 *
zdrs
, 
NLM4_CANC¨gs
 *
objp
)

179 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

180  
FALSE
;

181 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
block
))

182  
FALSE
;

183 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ex˛usive
))

184  
FALSE
;

185 i‡(!
	`zdr_∆m4_lock
 (
zdrs
, &
objp
->
lock
))

186  
FALSE
;

187  
TRUE
;

188 
	}
}

190 
uöt32_t


191 
	$zdr_NLM4_UNLOCKªs
 (
ZDR
 *
zdrs
, 
NLM4_UNLOCKªs
 *
objp
)

193 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

194  
FALSE
;

195 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

196  
FALSE
;

197  
TRUE
;

198 
	}
}

200 
uöt32_t


201 
	$zdr_NLM4_UNLOCK¨gs
 (
ZDR
 *
zdrs
, 
NLM4_UNLOCK¨gs
 *
objp
)

203 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

204  
FALSE
;

205 i‡(!
	`zdr_∆m4_lock
 (
zdrs
, &
objp
->
lock
))

206  
FALSE
;

207  
TRUE
;

208 
	}
}

210 
uöt32_t


211 
	$zdr_NLM4_LOCKªs
 (
ZDR
 *
zdrs
, 
NLM4_LOCKªs
 *
objp
)

213 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

214  
FALSE
;

215 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

216  
FALSE
;

217  
TRUE
;

218 
	}
}

220 
uöt32_t


221 
	$zdr_NLM4_LOCK¨gs
 (
ZDR
 *
zdrs
, 
NLM4_LOCK¨gs
 *
objp
)

223 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

224  
FALSE
;

225 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
block
))

226  
FALSE
;

227 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ex˛usive
))

228  
FALSE
;

229 i‡(!
	`zdr_∆m4_lock
 (
zdrs
, &
objp
->
lock
))

230  
FALSE
;

231 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ª˛aim
))

232  
FALSE
;

233 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
°©e
))

234  
FALSE
;

235  
TRUE
;

236 
	}
}

238 
uöt32_t


239 
	$zdr_NLM4_GRANTED¨gs
 (
ZDR
 *
zdrs
, 
NLM4_GRANTED¨gs
 *
objp
)

241 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

242  
FALSE
;

243 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ex˛usive
))

244  
FALSE
;

245 i‡(!
	`zdr_∆m4_lock
 (
zdrs
, &
objp
->
lock
))

246  
FALSE
;

247  
TRUE
;

248 
	}
}

250 
uöt32_t


251 
	$zdr_NLM4_GRANTEDªs
 (
ZDR
 *
zdrs
, 
NLM4_GRANTEDªs
 *
objp
)

253 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

254  
FALSE
;

255 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

256  
FALSE
;

257  
TRUE
;

258 
	}
}

260 
uöt32_t


261 
	$zdr_NLM4_SHAREªs
(
ZDR
 *
zdrs
, 
NLM4_SHAREªs
 *
objp
)

263 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

264  
FALSE
;

265 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

266  
FALSE
;

267  
TRUE
;

268 
	}
}

270 
uöt32_t


271 
	$zdr_NLM4_SHARE¨gs
(
ZDR
 *
zdrs
, 
NLM4_SHARE¨gs
 *
objp
)

273 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

274  
FALSE
;

275 i‡(!
	`zdr_∆m4_sh¨e
 (
zdrs
, &
objp
->
sh¨e
))

276  
FALSE
;

277 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ª˛aim
))

278  
FALSE
;

279  
TRUE
;

280 
	}
}

282 
uöt32_t


283 
	$zdr_NLM4_UNSHAREªs
(
ZDR
 *
zdrs
, 
NLM4_UNSHAREªs
 *
objp
)

285 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

286  
FALSE
;

287 i‡(!
	`zdr_∆m°©4
 (
zdrs
, &
objp
->
°©us
))

288  
FALSE
;

289  
TRUE
;

290 
	}
}

292 
uöt32_t


293 
	$zdr_NLM4_UNSHARE¨gs
(
ZDR
 *
zdrs
, 
NLM4_SHARE¨gs
 *
objp
)

295 i‡(!
	`zdr_∆m_cookõ
 (
zdrs
, &
objp
->
cookõ
))

296  
FALSE
;

297 i‡(!
	`zdr_∆m4_sh¨e
 (
zdrs
, &
objp
->
sh¨e
))

298  
FALSE
;

299 i‡(!
	`zdr_boﬁ
 (
zdrs
, &
objp
->
ª˛aim
))

300  
FALSE
;

301  
TRUE
;

302 
	}
}

	@nlm/libnfs-raw-nlm.h

35 #i‚de‡
_NLM_H_RPCGEN


36 
	#_NLM_H_RPCGEN


	)

38 
	~<nfsc/libnfs-zdr.h
>

41 #ifde‡
__˝lu•lus


46 
	s∆m_fh4
 {

48 
u_öt
 
d©a_Àn
;

49 *
d©a_vÆ
;

50 } 
d©a
;

52 
∆m_fh4
 
	t∆m_fh4
;

54 *
	t∆m4_oh
;

56 
	s∆m_cookõ
 {

58 
u_öt
 
d©a_Àn
;

59 *
d©a_vÆ
;

60 } 
d©a
;

62 
∆m_cookõ
 
	t∆m_cookõ
;

64 
	e∆m°©4
 {

65 
NLM4_GRANTED
 = 0,

66 
NLM4_DENIED
 = 1,

67 
NLM4_DENIED_NOLOCKS
 = 2,

68 
NLM4_BLOCKED
 = 3,

69 
NLM4_DENIED_GRACE_PERIOD
 = 4,

70 
NLM4_DEADLCK
 = 5,

71 
NLM4_ROFS
 = 6,

72 
NLM4_STALE_FH
 = 7,

73 
NLM4_FBIG
 = 8,

74 
NLM4_FAILED
 = 9,

76 
∆m°©4
 
	t∆m°©4
;

78 
	s∆m4_hﬁdî
 {

79 
uöt32_t
 
ex˛usive
;

80 
u_öt
 
svid
;

81 
∆m4_oh
 
oh
;

82 
uöt64_t
 
l_off£t
;

83 
uöt64_t
 
l_Àn
;

85 
∆m4_hﬁdî
 
	t∆m4_hﬁdî
;

86 
	#NLM_MAXNAME
 256

	)

88 
	s∆m4_lock
 {

89 *
ˇŒî_«me
;

90 
∆m_fh4
 
fh
;

91 
∆m4_oh
 
oh
;

92 
u_öt
 
svid
;

93 
uöt64_t
 
l_off£t
;

94 
uöt64_t
 
l_Àn
;

96 
∆m4_lock
 
	t∆m4_lock
;

98 
	s∆m4_sh¨e
 {

99 *
ˇŒî_«me
;

100 
∆m_fh4
 
fh
;

101 
∆m4_oh
 
oh
;

102 
u_öt
 
mode
;

103 
u_öt
 
ac˚ss
;

105 
∆m4_sh¨e
 
	t∆m4_sh¨e
;

107 
	s∆m4_ã°ªs_díõd
 {

108 
∆m4_hﬁdî
 
hﬁdî
;

110 
∆m4_ã°ªs_díõd
 
	t∆m4_ã°ªs_díõd
;

112 
	s∆m4_ã°ª∂y
 {

113 
∆m°©4
 
°©us
;

115 
∆m4_ã°ªs_díõd
 
lock
;

116 } 
∆m4_ã°ª∂y_u
;

118 
∆m4_ã°ª∂y
 
	t∆m4_ã°ª∂y
;

120 
	sNLM4_TESTªs
 {

121 
∆m_cookõ
 
cookõ
;

122 
∆m4_ã°ª∂y
 
ª∂y
;

124 
NLM4_TESTªs
 
	tNLM4_TESTªs
;

126 
	sNLM4_TEST¨gs
 {

127 
∆m_cookõ
 
cookõ
;

128 
uöt32_t
 
ex˛usive
;

129 
∆m4_lock
 
lock
;

131 
NLM4_TEST¨gs
 
	tNLM4_TEST¨gs
;

133 
	sNLM4_CANCªs
 {

134 
∆m_cookõ
 
cookõ
;

135 
∆m°©4
 
°©us
;

137 
NLM4_CANCªs
 
	tNLM4_CANCªs
;

139 
	sNLM4_CANC¨gs
 {

140 
∆m_cookõ
 
cookõ
;

141 
uöt32_t
 
block
;

142 
uöt32_t
 
ex˛usive
;

143 
∆m4_lock
 
lock
;

145 
NLM4_CANC¨gs
 
	tNLM4_CANC¨gs
;

147 
	sNLM4_UNLOCKªs
 {

148 
∆m_cookõ
 
cookõ
;

149 
∆m°©4
 
°©us
;

151 
NLM4_UNLOCKªs
 
	tNLM4_UNLOCKªs
;

153 
	sNLM4_UNLOCK¨gs
 {

154 
∆m_cookõ
 
cookõ
;

155 
∆m4_lock
 
lock
;

157 
NLM4_UNLOCK¨gs
 
	tNLM4_UNLOCK¨gs
;

159 
	sNLM4_LOCKªs
 {

160 
∆m_cookõ
 
cookõ
;

161 
∆m°©4
 
°©us
;

163 
NLM4_LOCKªs
 
	tNLM4_LOCKªs
;

165 
	sNLM4_LOCK¨gs
 {

166 
∆m_cookõ
 
cookõ
;

167 
uöt32_t
 
block
;

168 
uöt32_t
 
ex˛usive
;

169 
∆m4_lock
 
lock
;

170 
uöt32_t
 
ª˛aim
;

171 
°©e
;

173 
NLM4_LOCK¨gs
 
	tNLM4_LOCK¨gs
;

175 
	sNLM4_GRANTED¨gs
 {

176 
∆m_cookõ
 
cookõ
;

177 
uöt32_t
 
ex˛usive
;

178 
∆m4_lock
 
lock
;

180 
NLM4_GRANTED¨gs
 
	tNLM4_GRANTED¨gs
;

182 
	sNLM4_GRANTEDªs
 {

183 
∆m_cookõ
 
cookõ
;

184 
∆m°©4
 
°©us
;

186 
NLM4_GRANTEDªs
 
	tNLM4_GRANTEDªs
;

188 
	sNLM4_SHARE¨gs
 {

189 
∆m_cookõ
 
cookõ
;

190 
∆m4_sh¨e
 
sh¨e
;

191 
boﬁ_t
 
ª˛aim
;

193 
NLM4_SHARE¨gs
 
	tNLM4_SHARE¨gs
;

195 
	sNLM4_SHAREªs
 {

196 
∆m_cookõ
 
cookõ
;

197 
∆m°©4
 
°©us
;

198 
öt32_t
 
£quí˚
;

200 
NLM4_SHAREªs
 
	tNLM4_SHAREªs
;

202 
	sNLM4_UNSHAREªs
 {

203 
∆m_cookõ
 
cookõ
;

204 
∆m°©4
 
°©us
;

205 
öt32_t
 
£quí˚
;

207 
NLM4_UNSHAREªs
 
	tNLM4_UNSHAREªs
;

209 
	#NLM_PROGRAM
 100021

	)

210 
	#NLM_V4
 4

	)

212 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

213 
	#NLM4_NULL
 0

	)

214 * 
∆m4_nuŒ_4
(*, *);

215 * 
∆m4_nuŒ_4_svc
(*, 
svc_ªq
 *);

216 
	#NLM4_TEST
 1

	)

217 
NLM4_TESTªs
 * 
∆m4_ã°_4
(
NLM4_TEST¨gs
 *, *);

218 
NLM4_TESTªs
 * 
∆m4_ã°_4_svc
(
NLM4_TEST¨gs
 *, 
svc_ªq
 *);

219 
	#NLM4_LOCK
 2

	)

220 
NLM4_LOCKªs
 * 
∆m4_lock_4
(
NLM4_LOCK¨gs
 *, *);

221 
NLM4_LOCKªs
 * 
∆m4_lock_4_svc
(
NLM4_LOCK¨gs
 *, 
svc_ªq
 *);

222 
	#NLM4_CANCEL
 3

	)

223 
NLM4_CANCªs
 * 
∆m4_ˇn˚l_4
(
NLM4_CANC¨gs
 *, *);

224 
NLM4_CANCªs
 * 
∆m4_ˇn˚l_4_svc
(
NLM4_CANC¨gs
 *, 
svc_ªq
 *);

225 
	#NLM4_UNLOCK
 4

	)

226 
NLM4_UNLOCKªs
 * 
∆m4_u∆ock_4
(
NLM4_UNLOCK¨gs
 *, *);

227 
NLM4_UNLOCKªs
 * 
∆m4_u∆ock_4_svc
(
NLM4_UNLOCK¨gs
 *, 
svc_ªq
 *);

228 
	#NLM4_GRANT
 5

	)

229 
NLM4_GRANTEDªs
 * 
∆m4_gø¡_4
(
NLM4_GRANTED¨gs
 *, *);

230 
NLM4_GRANTEDªs
 * 
∆m4_gø¡_4_svc
(
NLM4_GRANTED¨gs
 *, 
svc_ªq
 *);

231 
	#NLM4_TEST_MSG
 6

	)

232 * 
∆m4_ã°_msg_4
(
NLM4_TEST¨gs
 *, *);

233 * 
∆m4_ã°_msg_4_svc
(
NLM4_TEST¨gs
 *, 
svc_ªq
 *);

234 
	#NLM4_LOCK_MSG
 7

	)

235 * 
∆m4_lock_msg_4
(
NLM4_LOCK¨gs
 *, *);

236 * 
∆m4_lock_msg_4_svc
(
NLM4_LOCK¨gs
 *, 
svc_ªq
 *);

237 
	#NLM4_CANCEL_MSG
 8

	)

238 * 
∆m4_ˇn˚l_msg_4
(
NLM4_CANC¨gs
 *, *);

239 * 
∆m4_ˇn˚l_msg_4_svc
(
NLM4_CANC¨gs
 *, 
svc_ªq
 *);

240 
	#NLM4_UNLOCK_MSG
 9

	)

241 * 
∆m4_u∆ock_msg_4
(
NLM4_UNLOCK¨gs
 *, *);

242 * 
∆m4_u∆ock_msg_4_svc
(
NLM4_UNLOCK¨gs
 *, 
svc_ªq
 *);

243 
	#NLM4_GRANT_MSG
 10

	)

244 * 
∆m4_gø¡_msg_4
(
NLM4_GRANTED¨gs
 *, *);

245 * 
∆m4_gø¡_msg_4_svc
(
NLM4_GRANTED¨gs
 *, 
svc_ªq
 *);

246 
	#NLM4_TEST_RES
 11

	)

247 * 
∆m4_ã°_ªs_4
(
NLM4_TESTªs
 *, *);

248 * 
∆m4_ã°_ªs_4_svc
(
NLM4_TESTªs
 *, 
svc_ªq
 *);

249 
	#NLM4_LOCK_RES
 12

	)

250 * 
∆m4_lock_ªs_4
(
NLM4_LOCKªs
 *, *);

251 * 
∆m4_lock_ªs_4_svc
(
NLM4_LOCKªs
 *, 
svc_ªq
 *);

252 
	#NLM4_CANCEL_RES
 13

	)

253 * 
∆m4_ˇn˚l_ªs_4
(
NLM4_CANCªs
 *, *);

254 * 
∆m4_ˇn˚l_ªs_4_svc
(
NLM4_CANCªs
 *, 
svc_ªq
 *);

255 
	#NLM4_UNLOCK_RES
 14

	)

256 * 
∆m4_u∆ock_ªs_4
(
NLM4_UNLOCKªs
 *, *);

257 * 
∆m4_u∆ock_ªs_4_svc
(
NLM4_UNLOCKªs
 *, 
svc_ªq
 *);

258 
	#NLM4_GRANT_RES
 15

	)

259 * 
∆m4_gø¡_ªs_4
(
NLM4_GRANTEDªs
 *, *);

260 * 
∆m4_gø¡_ªs_4_svc
(
NLM4_GRANTEDªs
 *, 
svc_ªq
 *);

261 
∆m_¥ogøm_4_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

262 
	#NLM4_SHARE
 20

	)

263 
NLM4_SHAREªs
 *
∆m4_sh¨e_4
(
NLM4_SHARE¨gs
 *, *);

264 
NLM4_SHAREªs
 *
∆m4_sh¨e_4_svc
(
NLM4_SHARE¨gs
 *,

265 
svc_ªq
 *);

266 
	#NLM4_UNSHARE
 21

	)

267 
NLM4_SHAREªs
 *
∆m4_unsh¨e_4
(
NLM4_SHARE¨gs
 *, *);

268 
NLM4_SHAREªs
 *
∆m4_unsh¨e_4_svc
(
NLM4_SHARE¨gs
 *,

269 
svc_ªq
 *);

272 
	#NLM4_NULL
 0

	)

273 * 
∆m4_nuŒ_4
();

274 * 
∆m4_nuŒ_4_svc
();

275 
	#NLM4_TEST
 1

	)

276 
NLM4_TESTªs
 * 
∆m4_ã°_4
();

277 
NLM4_TESTªs
 * 
∆m4_ã°_4_svc
();

278 
	#NLM4_LOCK
 2

	)

279 
NLM4_LOCKªs
 * 
∆m4_lock_4
();

280 
NLM4_LOCKªs
 * 
∆m4_lock_4_svc
();

281 
	#NLM4_CANCEL
 3

	)

282 
NLM4_CANCªs
 * 
∆m4_ˇn˚l_4
();

283 
NLM4_CANCªs
 * 
∆m4_ˇn˚l_4_svc
();

284 
	#NLM4_UNLOCK
 4

	)

285 
NLM4_UNLOCKªs
 * 
∆m4_u∆ock_4
();

286 
NLM4_UNLOCKªs
 * 
∆m4_u∆ock_4_svc
();

287 
	#NLM4_GRANT
 5

	)

288 
NLM4_GRANTEDªs
 * 
∆m4_gø¡_4
();

289 
NLM4_GRANTEDªs
 * 
∆m4_gø¡_4_svc
();

290 
	#NLM4_TEST_MSG
 6

	)

291 * 
∆m4_ã°_msg_4
();

292 * 
∆m4_ã°_msg_4_svc
();

293 
	#NLM4_LOCK_MSG
 7

	)

294 * 
∆m4_lock_msg_4
();

295 * 
∆m4_lock_msg_4_svc
();

296 
	#NLM4_CANCEL_MSG
 8

	)

297 * 
∆m4_ˇn˚l_msg_4
();

298 * 
∆m4_ˇn˚l_msg_4_svc
();

299 
	#NLM4_UNLOCK_MSG
 9

	)

300 * 
∆m4_u∆ock_msg_4
();

301 * 
∆m4_u∆ock_msg_4_svc
();

302 
	#NLM4_GRANT_MSG
 10

	)

303 * 
∆m4_gø¡_msg_4
();

304 * 
∆m4_gø¡_msg_4_svc
();

305 
	#NLM4_TEST_RES
 11

	)

306 * 
∆m4_ã°_ªs_4
();

307 * 
∆m4_ã°_ªs_4_svc
();

308 
	#NLM4_LOCK_RES
 12

	)

309 * 
∆m4_lock_ªs_4
();

310 * 
∆m4_lock_ªs_4_svc
();

311 
	#NLM4_CANCEL_RES
 13

	)

312 * 
∆m4_ˇn˚l_ªs_4
();

313 * 
∆m4_ˇn˚l_ªs_4_svc
();

314 
	#NLM4_UNLOCK_RES
 14

	)

315 * 
∆m4_u∆ock_ªs_4
();

316 * 
∆m4_u∆ock_ªs_4_svc
();

317 
	#NLM4_GRANT_RES
 15

	)

318 * 
∆m4_gø¡_ªs_4
();

319 * 
∆m4_gø¡_ªs_4_svc
();

320 
∆m_¥ogøm_4_‰ìªsu…
 ();

321 
	#NLM4_SHARE
 20

	)

322 
NLM4_SHAREªs
 *
∆m4_sh¨e_4
();

323 
NLM4_SHAREªs
 *
∆m4_sh¨e_4_svc
();

324 
	#NLM4_UNSHARE
 21

	)

325 
NLM4_SHAREªs
 *
∆m4_unsh¨e_4
();

326 
NLM4_SHAREªs
 *
∆m4_unsh¨e_4_svc
();

331 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

332 
uöt32_t
 
zdr_∆m_fh4
 (
ZDR
 *, 
∆m_fh4
*);

333 
uöt32_t
 
zdr_∆m4_oh
 (
ZDR
 *, 
∆m4_oh
*);

334 
uöt32_t
 
zdr_∆m_cookõ
 (
ZDR
 *, 
∆m_cookõ
*);

335 
uöt32_t
 
zdr_∆m°©4
 (
ZDR
 *, 
∆m°©4
*);

336 
uöt32_t
 
zdr_∆m4_hﬁdî
 (
ZDR
 *, 
∆m4_hﬁdî
*);

337 
uöt32_t
 
zdr_∆m4_lock
 (
ZDR
 *, 
∆m4_lock
*);

338 
uöt32_t
 
zdr_∆m4_sh¨e
 (
ZDR
 *, 
∆m4_sh¨e
*);

339 
uöt32_t
 
zdr_∆m4_ã°ªs_díõd
 (
ZDR
 *, 
∆m4_ã°ªs_díõd
*);

340 
uöt32_t
 
zdr_∆m4_ã°ª∂y
 (
ZDR
 *, 
∆m4_ã°ª∂y
*);

341 
uöt32_t
 
zdr_NLM4_TESTªs
 (
ZDR
 *, 
NLM4_TESTªs
*);

342 
uöt32_t
 
zdr_NLM4_TEST¨gs
 (
ZDR
 *, 
NLM4_TEST¨gs
*);

343 
uöt32_t
 
zdr_NLM4_CANCªs
 (
ZDR
 *, 
NLM4_CANCªs
*);

344 
uöt32_t
 
zdr_NLM4_CANC¨gs
 (
ZDR
 *, 
NLM4_CANC¨gs
*);

345 
uöt32_t
 
zdr_NLM4_UNLOCKªs
 (
ZDR
 *, 
NLM4_UNLOCKªs
*);

346 
uöt32_t
 
zdr_NLM4_UNLOCK¨gs
 (
ZDR
 *, 
NLM4_UNLOCK¨gs
*);

347 
uöt32_t
 
zdr_NLM4_LOCKªs
 (
ZDR
 *, 
NLM4_LOCKªs
*);

348 
uöt32_t
 
zdr_NLM4_LOCK¨gs
 (
ZDR
 *, 
NLM4_LOCK¨gs
*);

349 
uöt32_t
 
zdr_NLM4_GRANTED¨gs
 (
ZDR
 *, 
NLM4_GRANTED¨gs
*);

350 
uöt32_t
 
zdr_NLM4_GRANTEDªs
 (
ZDR
 *, 
NLM4_GRANTEDªs
*);

351 
uöt32_t
 
zdr_NLM4_SHAREªs
 (
ZDR
 *, 
NLM4_SHAREªs
*);

352 
uöt32_t
 
zdr_NLM4_SHARE¨gs
 (
ZDR
 *, 
NLM4_SHARE¨gs
*);

353 
uöt32_t
 
zdr_NLM4_UNSHAREªs
 (
ZDR
 *, 
NLM4_UNSHAREªs
*);

354 
uöt32_t
 
zdr_NLM4_UNSHARE¨gs
 (
ZDR
 *, 
NLM4_SHARE¨gs
*);

357 
uöt32_t
 
zdr_∆m_fh4
 ();

358 
uöt32_t
 
zdr_∆m4_oh
 ();

359 
uöt32_t
 
zdr_∆m_cookõ
 ();

360 
uöt32_t
 
zdr_∆m°©4
 ();

361 
uöt32_t
 
zdr_∆m4_hﬁdî
 ();

362 
uöt32_t
 
zdr_∆m4_lock
 ();

363 
uöt32_t
 
zdr_∆m4_sh¨e
 ();

364 
uöt32_t
 
zdr_∆m4_ã°ªs_díõd
 ();

365 
uöt32_t
 
zdr_∆m4_ã°ª∂y
 ();

366 
uöt32_t
 
zdr_NLM4_TESTªs
 ();

367 
uöt32_t
 
zdr_NLM4_TEST¨gs
 ();

368 
uöt32_t
 
zdr_NLM4_CANCªs
 ();

369 
uöt32_t
 
zdr_NLM4_CANC¨gs
 ();

370 
uöt32_t
 
zdr_NLM4_UNLOCKªs
 ();

371 
uöt32_t
 
zdr_NLM4_UNLOCK¨gs
 ();

372 
uöt32_t
 
zdr_NLM4_LOCKªs
 ();

373 
uöt32_t
 
zdr_NLM4_LOCK¨gs
 ();

374 
uöt32_t
 
zdr_NLM4_GRANTED¨gs
 ();

375 
uöt32_t
 
zdr_NLM4_GRANTEDªs
 ();

376 
uöt32_t
 
zdr_NLM4_SHAREªs
 ();

377 
uöt32_t
 
zdr_NLM4_SHARE¨gs
 ();

378 
uöt32_t
 
zdr_NLM4_UNSHAREªs
 ();

379 
uöt32_t
 
zdr_NLM4_UNSHARE¨gs
 ();

383 #ifde‡
__˝lu•lus


	@nlm/nlm.c

18 #ifde‡
WIN32


19 
	~<wö32/wö32_com∑t.h
>

22 
	~<°dio.h
>

23 
	~<î∫o.h
>

24 
	~"libnfs-zdr.h
"

25 
	~"libnfs.h
"

26 
	~"libnfs-øw.h
"

27 
	~"libnfs-¥iv©e.h
"

28 
	~"libnfs-øw-∆m.h
"

30 
Ωc_pdu
 *

31 
	$Ωc_∆m4_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

33 
Ωc_pdu
 *
pdu
;

35 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

36 i‡(
pdu
 =
NULL
) {

37 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/null call");

38  
NULL
;

41 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

42 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/null call");

43  
NULL
;

46  
pdu
;

47 
	}
}

49 
Ωc_pdu
 *

50 
	$Ωc_∆m4_ã°_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NLM4_TEST¨gs
 *
¨gs
, *
¥iv©e_d©a
)

52 
Ωc_pdu
 *
pdu
;

54 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_TEST
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NLM4_TESTªs
, (
NLM4_TESTªs
));

55 i‡(
pdu
 =
NULL
) {

56 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/test call");

57  
NULL
;

60 i‡(
	`zdr_NLM4_TEST¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

61 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NLM4_TESTargs");

62 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

63  
NULL
;

66 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

67 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/test call");

68  
NULL
;

71  
pdu
;

72 
	}
}

74 
Ωc_pdu
 *

75 
	$Ωc_∆m4_lock_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NLM4_LOCK¨gs
 *
¨gs
, *
¥iv©e_d©a
)

77 
Ωc_pdu
 *
pdu
;

79 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_LOCK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NLM4_LOCKªs
, (
NLM4_LOCKªs
));

80 i‡(
pdu
 =
NULL
) {

81 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/lock call");

82  
NULL
;

85 i‡(
	`zdr_NLM4_LOCK¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

86 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NLM4_LOCKargs");

87 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

88  
NULL
;

91 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

92 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/lock call");

93  
NULL
;

96  
pdu
;

97 
	}
}

99 
Ωc_pdu
 *

100 
	$Ωc_∆m4_ˇn˚l_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NLM4_CANC¨gs
 *
¨gs
, *
¥iv©e_d©a
)

102 
Ωc_pdu
 *
pdu
;

104 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_CANCEL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NLM4_CANCªs
, (
NLM4_CANCªs
));

105 i‡(
pdu
 =
NULL
) {

106 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/cancel call");

107  
NULL
;

110 i‡(
	`zdr_NLM4_CANC¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

111 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NLM4_CANCargs");

112 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

113  
NULL
;

116 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

117 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/cancel call");

118  
NULL
;

121  
pdu
;

122 
	}
}

124 
Ωc_pdu
 *

125 
	$Ωc_∆m4_u∆ock_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NLM4_UNLOCK¨gs
 *
¨gs
, *
¥iv©e_d©a
)

127 
Ωc_pdu
 *
pdu
;

129 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_UNLOCK
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NLM4_UNLOCKªs
, (
NLM4_UNLOCKªs
));

130 i‡(
pdu
 =
NULL
) {

131 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/unlock call");

132  
NULL
;

135 i‡(
	`zdr_NLM4_UNLOCK¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

136 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NLM4_UNLOCKargs");

137 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

138  
NULL
;

141 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

142 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/unlock call");

143  
NULL
;

146  
pdu
;

147 
	}
}

149 
Ωc_pdu
 *

150 
	$Ωc_∆m4_sh¨e_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NLM4_SHARE¨gs
 *
¨gs
, *
¥iv©e_d©a
)

152 
Ωc_pdu
 *
pdu
;

154 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_SHARE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NLM4_SHAREªs
, (
NLM4_SHAREªs
));

155 i‡(
pdu
 =
NULL
) {

156 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/lock call");

157  
NULL
;

160 i‡(
	`zdr_NLM4_SHARE¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

161 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NLM4_LOCKargs");

162 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

163  
NULL
;

166 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

167 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/lock call");

168  
NULL
;

171  
pdu
;

172 
	}
}

174 
Ωc_pdu
 *

175 
	$Ωc_∆m4_unsh¨e_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NLM4_SHARE¨gs
 *
¨gs
, *
¥iv©e_d©a
)

177 
Ωc_pdu
 *
pdu
;

179 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NLM_PROGRAM
, 
NLM_V4
, 
NLM4_UNSHARE
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NLM4_UNSHAREªs
, (
NLM4_UNSHAREªs
));

180 i‡(
pdu
 =
NULL
) {

181 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇlm/lock call");

182  
NULL
;

185 i‡(
	`zdr_NLM4_UNSHARE¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

186 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NLM4_LOCKargs");

187 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

188  
NULL
;

191 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

192 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇlm/lock call");

193  
NULL
;

196  
pdu
;

197 
	}
}

199 *
	$∆m°©4_to_°r
(
°
)

201 
∆m°©4
 
°©
 = 
°
;

203 *
°r
 = "unknownÇlm stat";

204 
°©
) {

205 
NLM4_GRANTED
: 
°r
="NLM4_GRANTED";;

206 
NLM4_DENIED
: 
°r
="NLM4_DENIED";;

207 
NLM4_DENIED_NOLOCKS
: 
°r
="NLM4_DENIED_NOLOCKS";;

208 
NLM4_BLOCKED
: 
°r
="NLM4_BLOCKED";;

209 
NLM4_DENIED_GRACE_PERIOD
: 
°r
="NLM4_DENIED_GRACE_PERIOD";;

210 
NLM4_DEADLCK
: 
°r
="NLM4_DEADLCK";;

211 
NLM4_ROFS
: 
°r
="NLM4_ROFS";;

212 
NLM4_STALE_FH
: 
°r
="NLM4_STALE_FH";;

213 
NLM4_FBIG
: 
°r
="NLM4_FBIG";;

214 
NLM4_FAILED
: 
°r
="NLM4_FAILED";;

216  
°r
;

217 
	}
}

	@nsm/libnfs-raw-nsm.c

35 
	~"libnfs-zdr.h
"

36 
	~"libnfs-øw-nsm.h
"

38 
uöt32_t


39 
	$zdr_nsm°©1
 (
ZDR
 *
zdrs
, 
nsm°©1
 *
objp
)

41 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

42  
FALSE
;

43  
TRUE
;

44 
	}
}

46 
uöt32_t


47 
	$zdr_nsm_my_id
 (
ZDR
 *
zdrs
, 
nsm_my_id
 *
objp
)

49 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
my_«me
, 
NSM_MAXSTRLEN
))

50  
FALSE
;

51 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
my_¥og
))

52  
FALSE
;

53 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
my_vîs
))

54  
FALSE
;

55 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
my_¥oc
))

56  
FALSE
;

57  
TRUE
;

58 
	}
}

60 
uöt32_t


61 
	$zdr_nsm_m⁄_id
 (
ZDR
 *
zdrs
, 
nsm_m⁄_id
 *
objp
)

63 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
m⁄_«me
, 
NSM_MAXSTRLEN
))

64  
FALSE
;

65 i‡(!
	`zdr_nsm_my_id
 (
zdrs
, &
objp
->
my_id
))

66  
FALSE
;

67  
TRUE
;

68 
	}
}

70 
uöt32_t


71 
	$zdr_NSM1_STATªs
 (
ZDR
 *
zdrs
, 
NSM1_STATªs
 *
objp
)

73 i‡(!
	`zdr_nsm°©1
 (
zdrs
, &
objp
->
ªs
))

74  
FALSE
;

75 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
°©e
))

76  
FALSE
;

77  
TRUE
;

78 
	}
}

80 
uöt32_t


81 
	$zdr_NSM1_STAT¨gs
 (
ZDR
 *
zdrs
, 
NSM1_STAT¨gs
 *
objp
)

83 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
m⁄_«me
, 
NSM_MAXSTRLEN
))

84  
FALSE
;

85  
TRUE
;

86 
	}
}

88 
uöt32_t


89 
	$zdr_NSM1_MONªs
 (
ZDR
 *
zdrs
, 
NSM1_MONªs
 *
objp
)

91 i‡(!
	`zdr_nsm°©1
 (
zdrs
, &
objp
->
ªs
))

92  
FALSE
;

93 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
°©e
))

94  
FALSE
;

95  
TRUE
;

96 
	}
}

98 
uöt32_t


99 
	$zdr_NSM1_MON¨gs
 (
ZDR
 *
zdrs
, 
NSM1_MON¨gs
 *
objp
)

101 i‡(!
	`zdr_nsm_m⁄_id
 (
zdrs
, &
objp
->
m⁄_id
))

102  
FALSE
;

103 i‡(!
	`zdr_›aque
 (
zdrs
, 
objp
->
¥iv
, 16))

104  
FALSE
;

105  
TRUE
;

106 
	}
}

108 
uöt32_t


109 
	$zdr_NSM1_UNMONªs
 (
ZDR
 *
zdrs
, 
NSM1_UNMONªs
 *
objp
)

111 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
°©e
))

112  
FALSE
;

113  
TRUE
;

114 
	}
}

116 
uöt32_t


117 
	$zdr_NSM1_UNMON¨gs
 (
ZDR
 *
zdrs
, 
NSM1_UNMON¨gs
 *
objp
)

119 i‡(!
	`zdr_nsm_m⁄_id
 (
zdrs
, &
objp
->
m⁄_id
))

120  
FALSE
;

121  
TRUE
;

122 
	}
}

124 
uöt32_t


125 
	$zdr_NSM1_UNMONALLªs
 (
ZDR
 *
zdrs
, 
NSM1_UNMONALLªs
 *
objp
)

127 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
°©e
))

128  
FALSE
;

129  
TRUE
;

130 
	}
}

132 
uöt32_t


133 
	$zdr_NSM1_UNMONALL¨gs
 (
ZDR
 *
zdrs
, 
NSM1_UNMONALL¨gs
 *
objp
)

135 i‡(!
	`zdr_nsm_my_id
 (
zdrs
, &
objp
->
my_id
))

136  
FALSE
;

137  
TRUE
;

138 
	}
}

140 
uöt32_t


141 
	$zdr_NSM1_NOTIFY¨gs
 (
ZDR
 *
zdrs
, 
NSM1_NOTIFY¨gs
 *
objp
)

143 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
m⁄_«me
, 
NSM_MAXSTRLEN
))

144  
FALSE
;

145 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
°©e
))

146  
FALSE
;

147  
TRUE
;

148 
	}
}

	@nsm/libnfs-raw-nsm.h

35 #i‚de‡
_NSM_H_RPCGEN


36 
	#_NSM_H_RPCGEN


	)

38 
	~<nfsc/libnfs-zdr.h
>

41 #ifde‡
__˝lu•lus


45 
	#NSM_MAXSTRLEN
 1024

	)

47 
	ensm°©1
 {

48 
NSM_STAT_SUCC
 = 0,

49 
NSM_STAT_FAIL
 = 1,

51 
nsm°©1
 
	tnsm°©1
;

53 
	snsm_my_id
 {

54 *
my_«me
;

55 
my_¥og
;

56 
my_vîs
;

57 
my_¥oc
;

59 
nsm_my_id
 
	tnsm_my_id
;

61 
	snsm_m⁄_id
 {

62 *
m⁄_«me
;

63 
nsm_my_id
 
my_id
;

65 
nsm_m⁄_id
 
	tnsm_m⁄_id
;

67 
	sNSM1_STATªs
 {

68 
nsm°©1
 
ªs
;

69 
°©e
;

71 
NSM1_STATªs
 
	tNSM1_STATªs
;

73 
	sNSM1_STAT¨gs
 {

74 *
m⁄_«me
;

76 
NSM1_STAT¨gs
 
	tNSM1_STAT¨gs
;

78 
	sNSM1_MONªs
 {

79 
nsm°©1
 
ªs
;

80 
°©e
;

82 
NSM1_MONªs
 
	tNSM1_MONªs
;

84 
	sNSM1_MON¨gs
 {

85 
nsm_m⁄_id
 
m⁄_id
;

86 
¥iv
[16];

88 
NSM1_MON¨gs
 
	tNSM1_MON¨gs
;

90 
	sNSM1_UNMONªs
 {

91 
°©e
;

93 
NSM1_UNMONªs
 
	tNSM1_UNMONªs
;

95 
	sNSM1_UNMON¨gs
 {

96 
nsm_m⁄_id
 
m⁄_id
;

98 
NSM1_UNMON¨gs
 
	tNSM1_UNMON¨gs
;

100 
	sNSM1_UNMONALLªs
 {

101 
°©e
;

103 
NSM1_UNMONALLªs
 
	tNSM1_UNMONALLªs
;

105 
	sNSM1_UNMONALL¨gs
 {

106 
nsm_my_id
 
my_id
;

108 
NSM1_UNMONALL¨gs
 
	tNSM1_UNMONALL¨gs
;

110 
	sNSM1_NOTIFY¨gs
 {

111 *
m⁄_«me
;

112 
°©e
;

114 
NSM1_NOTIFY¨gs
 
	tNSM1_NOTIFY¨gs
;

116 
	#NSM_PROGRAM
 100024

	)

117 
	#NSM_V1
 1

	)

119 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

120 
	#NSM1_NULL
 0

	)

121 * 
nsm1_nuŒ_1
(*, *);

122 * 
nsm1_nuŒ_1_svc
(*, 
svc_ªq
 *);

123 
	#NSM1_STAT
 1

	)

124 
NSM1_STATªs
 * 
nsm1_°©_1
(
NSM1_STAT¨gs
 *, *);

125 
NSM1_STATªs
 * 
nsm1_°©_1_svc
(
NSM1_STAT¨gs
 *, 
svc_ªq
 *);

126 
	#NSM1_MON
 2

	)

127 
NSM1_MONªs
 * 
nsm1_m⁄_1
(
NSM1_MON¨gs
 *, *);

128 
NSM1_MONªs
 * 
nsm1_m⁄_1_svc
(
NSM1_MON¨gs
 *, 
svc_ªq
 *);

129 
	#NSM1_UNMON
 3

	)

130 
NSM1_UNMONªs
 * 
nsm1_unm⁄_1
(
NSM1_UNMON¨gs
 *, *);

131 
NSM1_UNMONªs
 * 
nsm1_unm⁄_1_svc
(
NSM1_UNMON¨gs
 *, 
svc_ªq
 *);

132 
	#NSM1_UNMON_ALL
 4

	)

133 
NSM1_UNMONALLªs
 * 
nsm1_unm⁄_Æl_1
(
NSM1_UNMONALL¨gs
 *, *);

134 
NSM1_UNMONALLªs
 * 
nsm1_unm⁄_Æl_1_svc
(
NSM1_UNMONALL¨gs
 *, 
svc_ªq
 *);

135 
	#NSM1_SIMU_CRASH
 5

	)

136 * 
nsm1_simu_¸ash_1
(*, *);

137 * 
nsm1_simu_¸ash_1_svc
(*, 
svc_ªq
 *);

138 
	#NSM1_NOTIFY
 6

	)

139 * 
nsm1_nŸify_1
(
NSM1_NOTIFY¨gs
 *, *);

140 * 
nsm1_nŸify_1_svc
(
NSM1_NOTIFY¨gs
 *, 
svc_ªq
 *);

141 
nsm_¥ogøm_1_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

144 
	#NSM1_NULL
 0

	)

145 * 
nsm1_nuŒ_1
();

146 * 
nsm1_nuŒ_1_svc
();

147 
	#NSM1_STAT
 1

	)

148 
NSM1_STATªs
 * 
nsm1_°©_1
();

149 
NSM1_STATªs
 * 
nsm1_°©_1_svc
();

150 
	#NSM1_MON
 2

	)

151 
NSM1_MONªs
 * 
nsm1_m⁄_1
();

152 
NSM1_MONªs
 * 
nsm1_m⁄_1_svc
();

153 
	#NSM1_UNMON
 3

	)

154 
NSM1_UNMONªs
 * 
nsm1_unm⁄_1
();

155 
NSM1_UNMONªs
 * 
nsm1_unm⁄_1_svc
();

156 
	#NSM1_UNMON_ALL
 4

	)

157 
NSM1_UNMONALLªs
 * 
nsm1_unm⁄_Æl_1
();

158 
NSM1_UNMONALLªs
 * 
nsm1_unm⁄_Æl_1_svc
();

159 
	#NSM1_SIMU_CRASH
 5

	)

160 * 
nsm1_simu_¸ash_1
();

161 * 
nsm1_simu_¸ash_1_svc
();

162 
	#NSM1_NOTIFY
 6

	)

163 * 
nsm1_nŸify_1
();

164 * 
nsm1_nŸify_1_svc
();

165 
nsm_¥ogøm_1_‰ìªsu…
 ();

170 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

171 
uöt32_t
 
zdr_nsm°©1
 (
ZDR
 *, 
nsm°©1
*);

172 
uöt32_t
 
zdr_nsm_my_id
 (
ZDR
 *, 
nsm_my_id
*);

173 
uöt32_t
 
zdr_nsm_m⁄_id
 (
ZDR
 *, 
nsm_m⁄_id
*);

174 
uöt32_t
 
zdr_NSM1_STATªs
 (
ZDR
 *, 
NSM1_STATªs
*);

175 
uöt32_t
 
zdr_NSM1_STAT¨gs
 (
ZDR
 *, 
NSM1_STAT¨gs
*);

176 
uöt32_t
 
zdr_NSM1_MONªs
 (
ZDR
 *, 
NSM1_MONªs
*);

177 
uöt32_t
 
zdr_NSM1_MON¨gs
 (
ZDR
 *, 
NSM1_MON¨gs
*);

178 
uöt32_t
 
zdr_NSM1_UNMONªs
 (
ZDR
 *, 
NSM1_UNMONªs
*);

179 
uöt32_t
 
zdr_NSM1_UNMON¨gs
 (
ZDR
 *, 
NSM1_UNMON¨gs
*);

180 
uöt32_t
 
zdr_NSM1_UNMONALLªs
 (
ZDR
 *, 
NSM1_UNMONALLªs
*);

181 
uöt32_t
 
zdr_NSM1_UNMONALL¨gs
 (
ZDR
 *, 
NSM1_UNMONALL¨gs
*);

182 
uöt32_t
 
zdr_NSM1_NOTIFY¨gs
 (
ZDR
 *, 
NSM1_NOTIFY¨gs
*);

185 
uöt32_t
 
zdr_nsm°©1
 ();

186 
uöt32_t
 
zdr_nsm_my_id
 ();

187 
uöt32_t
 
zdr_nsm_m⁄_id
 ();

188 
uöt32_t
 
zdr_NSM1_STATªs
 ();

189 
uöt32_t
 
zdr_NSM1_STAT¨gs
 ();

190 
uöt32_t
 
zdr_NSM1_MONªs
 ();

191 
uöt32_t
 
zdr_NSM1_MON¨gs
 ();

192 
uöt32_t
 
zdr_NSM1_UNMONªs
 ();

193 
uöt32_t
 
zdr_NSM1_UNMON¨gs
 ();

194 
uöt32_t
 
zdr_NSM1_UNMONALLªs
 ();

195 
uöt32_t
 
zdr_NSM1_UNMONALL¨gs
 ();

196 
uöt32_t
 
zdr_NSM1_NOTIFY¨gs
 ();

200 #ifde‡
__˝lu•lus


	@nsm/nsm.c

18 #ifde‡
WIN32


19 
	~<wö32/wö32_com∑t.h
>

22 
	~<°dio.h
>

23 
	~<î∫o.h
>

24 
	~"libnfs-zdr.h
"

25 
	~"libnfs.h
"

26 
	~"libnfs-øw.h
"

27 
	~"libnfs-¥iv©e.h
"

28 
	~"libnfs-øw-nsm.h
"

30 
Ωc_pdu
 *

31 
	$Ωc_nsm1_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

33 
Ωc_pdu
 *
pdu
;

35 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

36 i‡(
pdu
 =
NULL
) {

37 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/null call");

38  
NULL
;

41 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

42 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/null call");

43  
NULL
;

46  
pdu
;

47 
	}
}

49 
Ωc_pdu
 *

50 
	$Ωc_nsm1_°©_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NSM1_STAT¨gs
 *
¨gs
, *
¥iv©e_d©a
)

52 
Ωc_pdu
 *
pdu
;

54 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_STAT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NSM1_STATªs
, (
NSM1_STATªs
));

55 i‡(
pdu
 =
NULL
) {

56 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/stat call");

57  
NULL
;

60 i‡(
	`zdr_NSM1_STAT¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

61 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NSM1_STATargs");

62 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

63  
NULL
;

66 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

67 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/stat call");

68  
NULL
;

71  
pdu
;

72 
	}
}

74 
Ωc_pdu
 *

75 
	$Ωc_nsm1_m⁄_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NSM1_MON¨gs
 *
¨gs
, *
¥iv©e_d©a
)

77 
Ωc_pdu
 *
pdu
;

79 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_MON
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NSM1_MONªs
, (
NSM1_MONªs
));

80 i‡(
pdu
 =
NULL
) {

81 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/mon call");

82  
NULL
;

85 i‡(
	`zdr_NSM1_MON¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

86 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NSM1_MONargs");

87 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

88  
NULL
;

91 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

92 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/mon call");

93  
NULL
;

96  
pdu
;

97 
	}
}

99 
Ωc_pdu
 *

100 
	$Ωc_nsm1_unm⁄_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NSM1_UNMON¨gs
 *
¨gs
, *
¥iv©e_d©a
)

102 
Ωc_pdu
 *
pdu
;

104 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_UNMON
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NSM1_UNMONªs
, (
NSM1_UNMONªs
));

105 i‡(
pdu
 =
NULL
) {

106 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/unmon call");

107  
NULL
;

110 i‡(
	`zdr_NSM1_UNMON¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

111 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NSM1_UNMONargs");

112 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

113  
NULL
;

116 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

117 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/unmon call");

118  
NULL
;

121  
pdu
;

122 
	}
}

124 
Ωc_pdu
 *

125 
	$Ωc_nsm1_unm⁄Æl_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NSM1_UNMONALL¨gs
 *
¨gs
, *
¥iv©e_d©a
)

127 
Ωc_pdu
 *
pdu
;

129 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_UNMON_ALL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_NSM1_UNMONALLªs
, (
NSM1_UNMONALLªs
));

130 i‡(
pdu
 =
NULL
) {

131 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/unmonall call");

132  
NULL
;

135 i‡(
	`zdr_NSM1_UNMONALL¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

136 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NSM1_UNMONALLargs");

137 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

138  
NULL
;

141 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

142 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/unmonall call");

143  
NULL
;

146  
pdu
;

147 
	}
}

149 
Ωc_pdu
 *

150 
	$Ωc_nsm1_simu¸ash_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

152 
Ωc_pdu
 *
pdu
;

154 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_SIMU_CRASH
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

155 i‡(
pdu
 =
NULL
) {

156 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/simucrash call");

157  
NULL
;

160 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

161 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/simucrash call");

162  
NULL
;

165  
pdu
;

166 
	}
}

168 
Ωc_pdu
 *

169 
	$Ωc_nsm1_nŸify_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, 
NSM1_NOTIFY¨gs
 *
¨gs
, *
¥iv©e_d©a
)

171 
Ωc_pdu
 *
pdu
;

173 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
NSM_PROGRAM
, 
NSM_V1
, 
NSM1_NOTIFY
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

174 i‡(
pdu
 =
NULL
) {

175 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÇsm/notify call");

176  
NULL
;

179 i‡(
	`zdr_NSM1_NOTIFY¨gs
(&
pdu
->
zdr
, 
¨gs
) == 0) {

180 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode NSM1_NOTIFYargs");

181 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

182  
NULL
;

185 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

186 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÇsm/notify call");

187  
NULL
;

190  
pdu
;

191 
	}
}

193 *
	$nsm°©1_to_°r
(
°
)

195 
nsm°©1
 
°©
 = 
°
;

197 *
°r
 = "unknownÇ1m stat";

198 
°©
) {

199 
NSM_STAT_SUCC
: 
°r
="NSM_STAT_SUCC";;

200 
NSM_STAT_FAIL
: 
°r
="NSM_STAT_FAIL";;

202  
°r
;

203 
	}
}

	@portmap/libnfs-raw-portmap.c

35 
	~"libnfs-zdr.h
"

36 
	~"libnfs-øw-p‹tm≠.h
"

38 
uöt32_t


39 
	$zdr_pm≠2_m≠pög
 (
ZDR
 *
zdrs
, 
pm≠2_m≠pög
 *
objp
)

44 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

45 
öt32_t
 *
buf
;

46 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 4 * 
BYTES_PER_ZDR_UNIT
);

47 i‡(
buf
 =
NULL
) {

48 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

49  
FALSE
;

50 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

51  
FALSE
;

52 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥Ÿ
))

53  
FALSE
;

54 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
p‹t
))

55  
FALSE
;

57 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
¥og
);

58 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
vîs
);

59 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
¥Ÿ
);

60 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
p‹t
);

62  
TRUE
;

63 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

64 
öt32_t
 *
buf
;

65 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 4 * 
BYTES_PER_ZDR_UNIT
);

66 i‡(
buf
 =
NULL
) {

67 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

68  
FALSE
;

69 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

70  
FALSE
;

71 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥Ÿ
))

72  
FALSE
;

73 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
p‹t
))

74  
FALSE
;

76 
objp
->
¥og
 = 
	`IZDR_GET_U_LONG
(
buf
);

77 
objp
->
vîs
 = 
	`IZDR_GET_U_LONG
(
buf
);

78 
objp
->
¥Ÿ
 = 
	`IZDR_GET_U_LONG
(
buf
);

79 
objp
->
p‹t
 = 
	`IZDR_GET_U_LONG
(
buf
);

81  
TRUE
;

84 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

85  
FALSE
;

86 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

87  
FALSE
;

88 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥Ÿ
))

89  
FALSE
;

90 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
p‹t
))

91  
FALSE
;

92  
TRUE
;

93 
	}
}

95 
uöt32_t


96 
	$zdr_pm≠2_ˇŒ_¨gs
 (
ZDR
 *
zdrs
, 
pm≠2_ˇŒ_¨gs
 *
objp
)

101 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

102 
öt32_t
 *
buf
;

103 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

104 i‡(
buf
 =
NULL
) {

105 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

106  
FALSE
;

107 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

108  
FALSE
;

109 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥oc
))

110  
FALSE
;

113 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
¥og
);

114 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
vîs
);

115 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
¥oc
);

117 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
¨gs
.
¨gs_vÆ
, (
u_öt
 *Ë&objp->¨gs.
¨gs_Àn
, ~0))

118  
FALSE
;

119  
TRUE
;

120 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

121 
öt32_t
 *
buf
;

122 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

123 i‡(
buf
 =
NULL
) {

124 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

125  
FALSE
;

126 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

127  
FALSE
;

128 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥oc
))

129  
FALSE
;

132 
objp
->
¥og
 = 
	`IZDR_GET_U_LONG
(
buf
);

133 
objp
->
vîs
 = 
	`IZDR_GET_U_LONG
(
buf
);

134 
objp
->
¥oc
 = 
	`IZDR_GET_U_LONG
(
buf
);

136 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
¨gs
.
¨gs_vÆ
, (
u_öt
 *Ë&objp->¨gs.
¨gs_Àn
, ~0))

137  
FALSE
;

138  
TRUE
;

141 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

142  
FALSE
;

143 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

144  
FALSE
;

145 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥oc
))

146  
FALSE
;

147 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
¨gs
.
¨gs_vÆ
, (
u_öt
 *Ë&objp->¨gs.
¨gs_Àn
, ~0))

148  
FALSE
;

149  
TRUE
;

150 
	}
}

152 
uöt32_t


153 
	$zdr_pm≠2_ˇŒ_ªsu…
 (
ZDR
 *
zdrs
, 
pm≠2_ˇŒ_ªsu…
 *
objp
)

157 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
p‹t
))

158  
FALSE
;

159 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
ªs
.
ªs_vÆ
, (
u_öt
 *Ë&objp->ªs.
ªs_Àn
, ~0))

160  
FALSE
;

161  
TRUE
;

162 
	}
}

164 
uöt32_t


165 
	$zdr_pm≠2_m≠pög_li°
 (
ZDR
 *
zdrs
, 
pm≠2_m≠pög_li°
 *
objp
)

169 i‡(!
	`zdr_pm≠2_m≠pög
 (
zdrs
, &
objp
->
m≠
))

170  
FALSE
;

171 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
√xt
,  (
pm≠2_m≠pög_li°
), (
zdΩroc_t
Ë
zdr_pm≠2_m≠pög_li°
))

172  
FALSE
;

173  
TRUE
;

174 
	}
}

176 
uöt32_t


177 
	$zdr_pm≠2_dump_ªsu…
 (
ZDR
 *
zdrs
, 
pm≠2_dump_ªsu…
 *
objp
)

181 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
li°
,  (
pm≠2_m≠pög_li°
), (
zdΩroc_t
Ë
zdr_pm≠2_m≠pög_li°
))

182  
FALSE
;

183  
TRUE
;

184 
	}
}

186 
uöt32_t


187 
	$zdr_pm≠3_°rög_ªsu…
 (
ZDR
 *
zdrs
, 
pm≠3_°rög_ªsu…
 *
objp
)

191 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
addr
, ~0))

192  
FALSE
;

193  
TRUE
;

194 
	}
}

196 
uöt32_t


197 
	$zdr_pm≠3_m≠pög
 (
ZDR
 *
zdrs
, 
pm≠3_m≠pög
 *
objp
)

201 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

202  
FALSE
;

203 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

204  
FALSE
;

205 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
√tid
, ~0))

206  
FALSE
;

207 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
addr
, ~0))

208  
FALSE
;

209 i‡(!
	`zdr_°rög
 (
zdrs
, &
objp
->
ow√r
, ~0))

210  
FALSE
;

211  
TRUE
;

212 
	}
}

214 
uöt32_t


215 
	$zdr_pm≠3_m≠pög_li°
 (
ZDR
 *
zdrs
, 
pm≠3_m≠pög_li°
 *
objp
)

219 i‡(!
	`zdr_pm≠3_m≠pög
 (
zdrs
, &
objp
->
m≠
))

220  
FALSE
;

221 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
√xt
,  (
pm≠3_m≠pög_li°
), (
zdΩroc_t
Ë
zdr_pm≠3_m≠pög_li°
))

222  
FALSE
;

223  
TRUE
;

224 
	}
}

226 
uöt32_t


227 
	$zdr_pm≠3_dump_ªsu…
 (
ZDR
 *
zdrs
, 
pm≠3_dump_ªsu…
 *
objp
)

231 i‡(!
	`zdr_poöãr
 (
zdrs
, (**)&
objp
->
li°
,  (
pm≠3_m≠pög_li°
), (
zdΩroc_t
Ë
zdr_pm≠3_m≠pög_li°
))

232  
FALSE
;

233  
TRUE
;

234 
	}
}

236 
uöt32_t


237 
	$zdr_pm≠3_ˇŒ_¨gs
 (
ZDR
 *
zdrs
, 
pm≠3_ˇŒ_¨gs
 *
objp
)

242 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

243 
öt32_t
 *
buf
;

244 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

245 i‡(
buf
 =
NULL
) {

246 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

247  
FALSE
;

248 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

249  
FALSE
;

250 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥oc
))

251  
FALSE
;

254 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
¥og
);

255 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
vîs
);

256 
	`IZDR_PUT_U_LONG
(
buf
, 
objp
->
¥oc
);

258 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
¨gs
.
¨gs_vÆ
, (
u_öt
 *Ë&objp->¨gs.
¨gs_Àn
, ~0))

259  
FALSE
;

260  
TRUE
;

261 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

262 
öt32_t
 *
buf
;

263 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 3 * 
BYTES_PER_ZDR_UNIT
);

264 i‡(
buf
 =
NULL
) {

265 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

266  
FALSE
;

267 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

268  
FALSE
;

269 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥oc
))

270  
FALSE
;

273 
objp
->
¥og
 = 
	`IZDR_GET_U_LONG
(
buf
);

274 
objp
->
vîs
 = 
	`IZDR_GET_U_LONG
(
buf
);

275 
objp
->
¥oc
 = 
	`IZDR_GET_U_LONG
(
buf
);

277 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
¨gs
.
¨gs_vÆ
, (
u_öt
 *Ë&objp->¨gs.
¨gs_Àn
, ~0))

278  
FALSE
;

279  
TRUE
;

282 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥og
))

283  
FALSE
;

284 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
vîs
))

285  
FALSE
;

286 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
¥oc
))

287  
FALSE
;

288 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
¨gs
.
¨gs_vÆ
, (
u_öt
 *Ë&objp->¨gs.
¨gs_Àn
, ~0))

289  
FALSE
;

290  
TRUE
;

291 
	}
}

293 
uöt32_t


294 
	$zdr_pm≠3_ˇŒ_ªsu…
 (
ZDR
 *
zdrs
, 
pm≠3_ˇŒ_ªsu…
 *
objp
)

298 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
p‹t
))

299  
FALSE
;

300 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
ªs
.
ªs_vÆ
, (
u_öt
 *Ë&objp->ªs.
ªs_Àn
, ~0))

301  
FALSE
;

302  
TRUE
;

303 
	}
}

305 
uöt32_t


306 
	$zdr_pm≠3_√tbuf
 (
ZDR
 *
zdrs
, 
pm≠3_√tbuf
 *
objp
)

310 i‡(!
	`zdr_u_öt
 (
zdrs
, &
objp
->
maxÀn
))

311  
FALSE
;

312 i‡(!
	`zdr_byãs
 (
zdrs
, (**)&
objp
->
buf
.
buf_vÆ
, (
u_öt
 *Ë&objp->buf.
buf_Àn
, ~0))

313  
FALSE
;

314  
TRUE
;

315 
	}
}

317 
uöt32_t


318 
	$zdr_PMAP2SET¨gs
 (
ZDR
 *
zdrs
, 
PMAP2SET¨gs
 *
objp
)

322 i‡(!
	`zdr_pm≠2_m≠pög
 (
zdrs
, 
objp
))

323  
FALSE
;

324  
TRUE
;

325 
	}
}

327 
uöt32_t


328 
	$zdr_PMAP2UNSET¨gs
 (
ZDR
 *
zdrs
, 
PMAP2UNSET¨gs
 *
objp
)

332 i‡(!
	`zdr_pm≠2_m≠pög
 (
zdrs
, 
objp
))

333  
FALSE
;

334  
TRUE
;

335 
	}
}

337 
uöt32_t


338 
	$zdr_PMAP2GETPORT¨gs
 (
ZDR
 *
zdrs
, 
PMAP2GETPORT¨gs
 *
objp
)

342 i‡(!
	`zdr_pm≠2_m≠pög
 (
zdrs
, 
objp
))

343  
FALSE
;

344  
TRUE
;

345 
	}
}

347 
uöt32_t


348 
	$zdr_PMAP2CALLIT¨gs
 (
ZDR
 *
zdrs
, 
PMAP2CALLIT¨gs
 *
objp
)

352 i‡(!
	`zdr_pm≠2_ˇŒ_¨gs
 (
zdrs
, 
objp
))

353  
FALSE
;

354  
TRUE
;

355 
	}
}

357 
uöt32_t


358 
	$zdr_PMAP2CALLITªs
 (
ZDR
 *
zdrs
, 
PMAP2CALLITªs
 *
objp
)

362 i‡(!
	`zdr_pm≠2_ˇŒ_ªsu…
 (
zdrs
, 
objp
))

363  
FALSE
;

364  
TRUE
;

365 
	}
}

367 
uöt32_t


368 
	$zdr_PMAP2DUMPªs
 (
ZDR
 *
zdrs
, 
PMAP2DUMPªs
 *
objp
)

372 i‡(!
	`zdr_pm≠2_dump_ªsu…
 (
zdrs
, 
objp
))

373  
FALSE
;

374  
TRUE
;

375 
	}
}

377 
uöt32_t


378 
	$zdr_PMAP3SET¨gs
 (
ZDR
 *
zdrs
, 
PMAP3SET¨gs
 *
objp
)

382 i‡(!
	`zdr_pm≠3_m≠pög
 (
zdrs
, 
objp
))

383  
FALSE
;

384  
TRUE
;

385 
	}
}

387 
uöt32_t


388 
	$zdr_PMAP3UNSET¨gs
 (
ZDR
 *
zdrs
, 
PMAP3UNSET¨gs
 *
objp
)

392 i‡(!
	`zdr_pm≠3_m≠pög
 (
zdrs
, 
objp
))

393  
FALSE
;

394  
TRUE
;

395 
	}
}

397 
uöt32_t


398 
	$zdr_PMAP3GETADDR¨gs
 (
ZDR
 *
zdrs
, 
PMAP3GETADDR¨gs
 *
objp
)

402 i‡(!
	`zdr_pm≠3_m≠pög
 (
zdrs
, 
objp
))

403  
FALSE
;

404  
TRUE
;

405 
	}
}

407 
uöt32_t


408 
	$zdr_PMAP3GETADDRªs
 (
ZDR
 *
zdrs
, 
PMAP3GETADDRªs
 *
objp
)

412 i‡(!
	`zdr_pm≠3_°rög_ªsu…
 (
zdrs
, 
objp
))

413  
FALSE
;

414  
TRUE
;

415 
	}
}

417 
uöt32_t


418 
	$zdr_PMAP3DUMPªs
 (
ZDR
 *
zdrs
, 
PMAP3DUMPªs
 *
objp
)

422 i‡(!
	`zdr_pm≠3_dump_ªsu…
 (
zdrs
, 
objp
))

423  
FALSE
;

424  
TRUE
;

425 
	}
}

427 
uöt32_t


428 
	$zdr_PMAP3CALLIT¨gs
 (
ZDR
 *
zdrs
, 
PMAP3CALLIT¨gs
 *
objp
)

432 i‡(!
	`zdr_pm≠3_ˇŒ_ªsu…
 (
zdrs
, 
objp
))

433  
FALSE
;

434  
TRUE
;

435 
	}
}

437 
uöt32_t


438 
	$zdr_PMAP3CALLITªs
 (
ZDR
 *
zdrs
, 
PMAP3CALLITªs
 *
objp
)

442 i‡(!
	`zdr_pm≠3_ˇŒ_ªsu…
 (
zdrs
, 
objp
))

443  
FALSE
;

444  
TRUE
;

445 
	}
}

447 
uöt32_t


448 
	$zdr_PMAP3UADDR2TADDRªs
 (
ZDR
 *
zdrs
, 
PMAP3UADDR2TADDRªs
 *
objp
)

452 i‡(!
	`zdr_pm≠3_√tbuf
 (
zdrs
, 
objp
))

453  
FALSE
;

454  
TRUE
;

455 
	}
}

457 
uöt32_t


458 
	$zdr_PMAP3TADDR2UADDR¨gs
 (
ZDR
 *
zdrs
, 
PMAP3TADDR2UADDR¨gs
 *
objp
)

462 i‡(!
	`zdr_pm≠3_√tbuf
 (
zdrs
, 
objp
))

463  
FALSE
;

464  
TRUE
;

465 
	}
}

467 
uöt32_t


468 
	$zdr_PMAP3TADDR2UADDRªs
 (
ZDR
 *
zdrs
, 
PMAP3TADDR2UADDRªs
 *
objp
)

472 i‡(!
	`zdr_pm≠3_°rög_ªsu…
 (
zdrs
, 
objp
))

473  
FALSE
;

474  
TRUE
;

475 
	}
}

	@portmap/libnfs-raw-portmap.h

35 #i‚de‡
_PORTMAP_H_RPCGEN


36 
	#_PORTMAP_H_RPCGEN


	)

38 
	~<nfsc/libnfs-zdr.h
>

41 #ifde‡
__˝lu•lus


45 
	#PMAP_PORT
 111

	)

47 
	spm≠2_m≠pög
 {

48 
u_öt
 
¥og
;

49 
u_öt
 
vîs
;

50 
u_öt
 
¥Ÿ
;

51 
u_öt
 
p‹t
;

53 
pm≠2_m≠pög
 
	tpm≠2_m≠pög
;

55 
	spm≠2_ˇŒ_¨gs
 {

56 
u_öt
 
¥og
;

57 
u_öt
 
vîs
;

58 
u_öt
 
¥oc
;

60 
u_öt
 
¨gs_Àn
;

61 *
¨gs_vÆ
;

62 } 
¨gs
;

64 
pm≠2_ˇŒ_¨gs
 
	tpm≠2_ˇŒ_¨gs
;

66 
	spm≠2_ˇŒ_ªsu…
 {

67 
u_öt
 
p‹t
;

69 
u_öt
 
ªs_Àn
;

70 *
ªs_vÆ
;

71 } 
ªs
;

73 
pm≠2_ˇŒ_ªsu…
 
	tpm≠2_ˇŒ_ªsu…
;

75 
	spm≠2_m≠pög_li°
 {

76 
pm≠2_m≠pög
 
m≠
;

77 
pm≠2_m≠pög_li°
 *
√xt
;

79 
pm≠2_m≠pög_li°
 
	tpm≠2_m≠pög_li°
;

81 
	spm≠2_dump_ªsu…
 {

82 
pm≠2_m≠pög_li°
 *
li°
;

84 
pm≠2_dump_ªsu…
 
	tpm≠2_dump_ªsu…
;

86 
	spm≠3_°rög_ªsu…
 {

87 *
addr
;

89 
pm≠3_°rög_ªsu…
 
	tpm≠3_°rög_ªsu…
;

91 
	spm≠3_m≠pög
 {

92 
u_öt
 
¥og
;

93 
u_öt
 
vîs
;

94 *
√tid
;

95 *
addr
;

96 *
ow√r
;

98 
pm≠3_m≠pög
 
	tpm≠3_m≠pög
;

100 
	spm≠3_m≠pög_li°
 {

101 
pm≠3_m≠pög
 
m≠
;

102 
pm≠3_m≠pög_li°
 *
√xt
;

104 
pm≠3_m≠pög_li°
 
	tpm≠3_m≠pög_li°
;

106 
	spm≠3_dump_ªsu…
 {

107 
pm≠3_m≠pög_li°
 *
li°
;

109 
pm≠3_dump_ªsu…
 
	tpm≠3_dump_ªsu…
;

111 
	spm≠3_ˇŒ_¨gs
 {

112 
u_öt
 
¥og
;

113 
u_öt
 
vîs
;

114 
u_öt
 
¥oc
;

116 
u_öt
 
¨gs_Àn
;

117 *
¨gs_vÆ
;

118 } 
¨gs
;

120 
pm≠3_ˇŒ_¨gs
 
	tpm≠3_ˇŒ_¨gs
;

122 
	spm≠3_ˇŒ_ªsu…
 {

123 
u_öt
 
p‹t
;

125 
u_öt
 
ªs_Àn
;

126 *
ªs_vÆ
;

127 } 
ªs
;

129 
pm≠3_ˇŒ_ªsu…
 
	tpm≠3_ˇŒ_ªsu…
;

131 
	spm≠3_√tbuf
 {

132 
u_öt
 
maxÀn
;

134 
u_öt
 
buf_Àn
;

135 *
buf_vÆ
;

136 } 
buf
;

138 
pm≠3_√tbuf
 
	tpm≠3_√tbuf
;

140 
pm≠2_m≠pög
 
	tPMAP2SET¨gs
;

142 
pm≠2_m≠pög
 
	tPMAP2UNSET¨gs
;

144 
pm≠2_m≠pög
 
	tPMAP2GETPORT¨gs
;

146 
pm≠2_ˇŒ_¨gs
 
	tPMAP2CALLIT¨gs
;

148 
pm≠2_ˇŒ_ªsu…
 
	tPMAP2CALLITªs
;

150 
pm≠2_dump_ªsu…
 
	tPMAP2DUMPªs
;

152 
pm≠3_m≠pög
 
	tPMAP3SET¨gs
;

154 
pm≠3_m≠pög
 
	tPMAP3UNSET¨gs
;

156 
pm≠3_m≠pög
 
	tPMAP3GETADDR¨gs
;

158 
pm≠3_°rög_ªsu…
 
	tPMAP3GETADDRªs
;

160 
pm≠3_dump_ªsu…
 
	tPMAP3DUMPªs
;

162 
pm≠3_ˇŒ_ªsu…
 
	tPMAP3CALLIT¨gs
;

164 
pm≠3_ˇŒ_ªsu…
 
	tPMAP3CALLITªs
;

166 
pm≠3_√tbuf
 
	tPMAP3UADDR2TADDRªs
;

168 
pm≠3_√tbuf
 
	tPMAP3TADDR2UADDR¨gs
;

170 
pm≠3_°rög_ªsu…
 
	tPMAP3TADDR2UADDRªs
;

172 
	#PMAP_PROGRAM
 100000

	)

173 
	#PMAP_V2
 2

	)

175 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

176 
	#PMAP2_NULL
 0

	)

177 * 
pm≠2_nuŒ_2
(*, *);

178 * 
pm≠2_nuŒ_2_svc
(*, 
svc_ªq
 *);

179 
	#PMAP2_SET
 1

	)

180 
uöt32_t
 * 
pm≠2_£t_2
(
PMAP2SET¨gs
 *, *);

181 
uöt32_t
 * 
pm≠2_£t_2_svc
(
PMAP2SET¨gs
 *, 
svc_ªq
 *);

182 
	#PMAP2_UNSET
 2

	)

183 
uöt32_t
 * 
pm≠2_un£t_2
(
PMAP2UNSET¨gs
 *, *);

184 
uöt32_t
 * 
pm≠2_un£t_2_svc
(
PMAP2UNSET¨gs
 *, 
svc_ªq
 *);

185 
	#PMAP2_GETPORT
 3

	)

186 
uöt32_t
 * 
pm≠2_gëp‹t_2
(
PMAP2GETPORT¨gs
 *, *);

187 
uöt32_t
 * 
pm≠2_gëp‹t_2_svc
(
PMAP2GETPORT¨gs
 *, 
svc_ªq
 *);

188 
	#PMAP2_DUMP
 4

	)

189 
PMAP2DUMPªs
 * 
pm≠2_dump_2
(*, *);

190 
PMAP2DUMPªs
 * 
pm≠2_dump_2_svc
(*, 
svc_ªq
 *);

191 
	#PMAP2_CALLIT
 5

	)

192 
PMAP2CALLITªs
 * 
pm≠2_ˇŒô_2
(
PMAP2CALLIT¨gs
 *, *);

193 
PMAP2CALLITªs
 * 
pm≠2_ˇŒô_2_svc
(
PMAP2CALLIT¨gs
 *, 
svc_ªq
 *);

194 
pm≠_¥ogøm_2_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

197 
	#PMAP2_NULL
 0

	)

198 * 
pm≠2_nuŒ_2
();

199 * 
pm≠2_nuŒ_2_svc
();

200 
	#PMAP2_SET
 1

	)

201 
uöt32_t
 * 
pm≠2_£t_2
();

202 
uöt32_t
 * 
pm≠2_£t_2_svc
();

203 
	#PMAP2_UNSET
 2

	)

204 
uöt32_t
 * 
pm≠2_un£t_2
();

205 
uöt32_t
 * 
pm≠2_un£t_2_svc
();

206 
	#PMAP2_GETPORT
 3

	)

207 
uöt32_t
 * 
pm≠2_gëp‹t_2
();

208 
uöt32_t
 * 
pm≠2_gëp‹t_2_svc
();

209 
	#PMAP2_DUMP
 4

	)

210 
PMAP2DUMPªs
 * 
pm≠2_dump_2
();

211 
PMAP2DUMPªs
 * 
pm≠2_dump_2_svc
();

212 
	#PMAP2_CALLIT
 5

	)

213 
PMAP2CALLITªs
 * 
pm≠2_ˇŒô_2
();

214 
PMAP2CALLITªs
 * 
pm≠2_ˇŒô_2_svc
();

215 
pm≠_¥ogøm_2_‰ìªsu…
 ();

217 
	#PMAP_V3
 3

	)

219 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

220 
	#PMAP3_NULL
 0

	)

221 * 
pm≠3_nuŒ_3
(*, *);

222 * 
pm≠3_nuŒ_3_svc
(*, 
svc_ªq
 *);

223 
	#PMAP3_SET
 1

	)

224 
uöt32_t
 * 
pm≠3_£t_3
(
PMAP3SET¨gs
 *, *);

225 
uöt32_t
 * 
pm≠3_£t_3_svc
(
PMAP3SET¨gs
 *, 
svc_ªq
 *);

226 
	#PMAP3_UNSET
 2

	)

227 
uöt32_t
 * 
pm≠3_un£t_3
(
PMAP3UNSET¨gs
 *, *);

228 
uöt32_t
 * 
pm≠3_un£t_3_svc
(
PMAP3UNSET¨gs
 *, 
svc_ªq
 *);

229 
	#PMAP3_GETADDR
 3

	)

230 
PMAP3GETADDRªs
 * 
pm≠3_gëaddr_3
(
PMAP3GETADDR¨gs
 *, *);

231 
PMAP3GETADDRªs
 * 
pm≠3_gëaddr_3_svc
(
PMAP3GETADDR¨gs
 *, 
svc_ªq
 *);

232 
	#PMAP3_DUMP
 4

	)

233 
PMAP3DUMPªs
 * 
pm≠3_dump_3
(*, *);

234 
PMAP3DUMPªs
 * 
pm≠3_dump_3_svc
(*, 
svc_ªq
 *);

235 
	#PMAP3_CALLIT
 5

	)

236 
PMAP3CALLITªs
 * 
pm≠3_ˇŒô_3
(
PMAP3CALLIT¨gs
 *, *);

237 
PMAP3CALLITªs
 * 
pm≠3_ˇŒô_3_svc
(
PMAP3CALLIT¨gs
 *, 
svc_ªq
 *);

238 
	#PMAP3_GETTIME
 6

	)

239 
uöt32_t
 * 
pm≠3_gëtime_3
(*, *);

240 
uöt32_t
 * 
pm≠3_gëtime_3_svc
(*, 
svc_ªq
 *);

241 
	#PMAP3_UADDR2TADDR
 7

	)

242 
PMAP3UADDR2TADDRªs
 * 
pm≠3_uaddr2èddr_3
(**, *);

243 
PMAP3UADDR2TADDRªs
 * 
pm≠3_uaddr2èddr_3_svc
(**, 
svc_ªq
 *);

244 
	#PMAP3_TADDR2UADDR
 8

	)

245 
PMAP3TADDR2UADDRªs
 * 
pm≠3_èddr2uaddr_3
(
PMAP3TADDR2UADDR¨gs
 *, *);

246 
PMAP3TADDR2UADDRªs
 * 
pm≠3_èddr2uaddr_3_svc
(
PMAP3TADDR2UADDR¨gs
 *, 
svc_ªq
 *);

247 
pm≠_¥ogøm_3_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

250 
	#PMAP3_NULL
 0

	)

251 * 
pm≠3_nuŒ_3
();

252 * 
pm≠3_nuŒ_3_svc
();

253 
	#PMAP3_SET
 1

	)

254 
uöt32_t
 * 
pm≠3_£t_3
();

255 
uöt32_t
 * 
pm≠3_£t_3_svc
();

256 
	#PMAP3_UNSET
 2

	)

257 
uöt32_t
 * 
pm≠3_un£t_3
();

258 
uöt32_t
 * 
pm≠3_un£t_3_svc
();

259 
	#PMAP3_GETADDR
 3

	)

260 
PMAP3GETADDRªs
 * 
pm≠3_gëaddr_3
();

261 
PMAP3GETADDRªs
 * 
pm≠3_gëaddr_3_svc
();

262 
	#PMAP3_DUMP
 4

	)

263 
PMAP3DUMPªs
 * 
pm≠3_dump_3
();

264 
PMAP3DUMPªs
 * 
pm≠3_dump_3_svc
();

265 
	#PMAP3_CALLIT
 5

	)

266 
PMAP3CALLITªs
 * 
pm≠3_ˇŒô_3
();

267 
PMAP3CALLITªs
 * 
pm≠3_ˇŒô_3_svc
();

268 
	#PMAP3_GETTIME
 6

	)

269 
uöt32_t
 * 
pm≠3_gëtime_3
();

270 
uöt32_t
 * 
pm≠3_gëtime_3_svc
();

271 
	#PMAP3_UADDR2TADDR
 7

	)

272 
PMAP3UADDR2TADDRªs
 * 
pm≠3_uaddr2èddr_3
();

273 
PMAP3UADDR2TADDRªs
 * 
pm≠3_uaddr2èddr_3_svc
();

274 
	#PMAP3_TADDR2UADDR
 8

	)

275 
PMAP3TADDR2UADDRªs
 * 
pm≠3_èddr2uaddr_3
();

276 
PMAP3TADDR2UADDRªs
 * 
pm≠3_èddr2uaddr_3_svc
();

277 
pm≠_¥ogøm_3_‰ìªsu…
 ();

282 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

283 
uöt32_t
 
zdr_pm≠2_m≠pög
 (
ZDR
 *, 
pm≠2_m≠pög
*);

284 
uöt32_t
 
zdr_pm≠2_ˇŒ_¨gs
 (
ZDR
 *, 
pm≠2_ˇŒ_¨gs
*);

285 
uöt32_t
 
zdr_pm≠2_ˇŒ_ªsu…
 (
ZDR
 *, 
pm≠2_ˇŒ_ªsu…
*);

286 
uöt32_t
 
zdr_pm≠2_m≠pög_li°
 (
ZDR
 *, 
pm≠2_m≠pög_li°
*);

287 
uöt32_t
 
zdr_pm≠2_dump_ªsu…
 (
ZDR
 *, 
pm≠2_dump_ªsu…
*);

288 
uöt32_t
 
zdr_pm≠3_°rög_ªsu…
 (
ZDR
 *, 
pm≠3_°rög_ªsu…
*);

289 
uöt32_t
 
zdr_pm≠3_m≠pög
 (
ZDR
 *, 
pm≠3_m≠pög
*);

290 
uöt32_t
 
zdr_pm≠3_m≠pög_li°
 (
ZDR
 *, 
pm≠3_m≠pög_li°
*);

291 
uöt32_t
 
zdr_pm≠3_dump_ªsu…
 (
ZDR
 *, 
pm≠3_dump_ªsu…
*);

292 
uöt32_t
 
zdr_pm≠3_ˇŒ_¨gs
 (
ZDR
 *, 
pm≠3_ˇŒ_¨gs
*);

293 
uöt32_t
 
zdr_pm≠3_ˇŒ_ªsu…
 (
ZDR
 *, 
pm≠3_ˇŒ_ªsu…
*);

294 
uöt32_t
 
zdr_pm≠3_√tbuf
 (
ZDR
 *, 
pm≠3_√tbuf
*);

295 
uöt32_t
 
zdr_PMAP2SET¨gs
 (
ZDR
 *, 
PMAP2SET¨gs
*);

296 
uöt32_t
 
zdr_PMAP2UNSET¨gs
 (
ZDR
 *, 
PMAP2UNSET¨gs
*);

297 
uöt32_t
 
zdr_PMAP2GETPORT¨gs
 (
ZDR
 *, 
PMAP2GETPORT¨gs
*);

298 
uöt32_t
 
zdr_PMAP2CALLIT¨gs
 (
ZDR
 *, 
PMAP2CALLIT¨gs
*);

299 
uöt32_t
 
zdr_PMAP2CALLITªs
 (
ZDR
 *, 
PMAP2CALLITªs
*);

300 
uöt32_t
 
zdr_PMAP2DUMPªs
 (
ZDR
 *, 
PMAP2DUMPªs
*);

301 
uöt32_t
 
zdr_PMAP3SET¨gs
 (
ZDR
 *, 
PMAP3SET¨gs
*);

302 
uöt32_t
 
zdr_PMAP3UNSET¨gs
 (
ZDR
 *, 
PMAP3UNSET¨gs
*);

303 
uöt32_t
 
zdr_PMAP3GETADDR¨gs
 (
ZDR
 *, 
PMAP3GETADDR¨gs
*);

304 
uöt32_t
 
zdr_PMAP3GETADDRªs
 (
ZDR
 *, 
PMAP3GETADDRªs
*);

305 
uöt32_t
 
zdr_PMAP3DUMPªs
 (
ZDR
 *, 
PMAP3DUMPªs
*);

306 
uöt32_t
 
zdr_PMAP3CALLIT¨gs
 (
ZDR
 *, 
PMAP3CALLIT¨gs
*);

307 
uöt32_t
 
zdr_PMAP3CALLITªs
 (
ZDR
 *, 
PMAP3CALLITªs
*);

308 
uöt32_t
 
zdr_PMAP3UADDR2TADDRªs
 (
ZDR
 *, 
PMAP3UADDR2TADDRªs
*);

309 
uöt32_t
 
zdr_PMAP3TADDR2UADDR¨gs
 (
ZDR
 *, 
PMAP3TADDR2UADDR¨gs
*);

310 
uöt32_t
 
zdr_PMAP3TADDR2UADDRªs
 (
ZDR
 *, 
PMAP3TADDR2UADDRªs
*);

313 
uöt32_t
 
zdr_pm≠2_m≠pög
 ();

314 
uöt32_t
 
zdr_pm≠2_ˇŒ_¨gs
 ();

315 
uöt32_t
 
zdr_pm≠2_ˇŒ_ªsu…
 ();

316 
uöt32_t
 
zdr_pm≠2_m≠pög_li°
 ();

317 
uöt32_t
 
zdr_pm≠2_dump_ªsu…
 ();

318 
uöt32_t
 
zdr_pm≠3_°rög_ªsu…
 ();

319 
uöt32_t
 
zdr_pm≠3_m≠pög
 ();

320 
uöt32_t
 
zdr_pm≠3_m≠pög_li°
 ();

321 
uöt32_t
 
zdr_pm≠3_dump_ªsu…
 ();

322 
uöt32_t
 
zdr_pm≠3_ˇŒ_¨gs
 ();

323 
uöt32_t
 
zdr_pm≠3_ˇŒ_ªsu…
 ();

324 
uöt32_t
 
zdr_pm≠3_√tbuf
 ();

325 
uöt32_t
 
zdr_PMAP2SET¨gs
 ();

326 
uöt32_t
 
zdr_PMAP2UNSET¨gs
 ();

327 
uöt32_t
 
zdr_PMAP2GETPORT¨gs
 ();

328 
uöt32_t
 
zdr_PMAP2CALLIT¨gs
 ();

329 
uöt32_t
 
zdr_PMAP2CALLITªs
 ();

330 
uöt32_t
 
zdr_PMAP2DUMPªs
 ();

331 
uöt32_t
 
zdr_PMAP3SET¨gs
 ();

332 
uöt32_t
 
zdr_PMAP3UNSET¨gs
 ();

333 
uöt32_t
 
zdr_PMAP3GETADDR¨gs
 ();

334 
uöt32_t
 
zdr_PMAP3GETADDRªs
 ();

335 
uöt32_t
 
zdr_PMAP3DUMPªs
 ();

336 
uöt32_t
 
zdr_PMAP3CALLIT¨gs
 ();

337 
uöt32_t
 
zdr_PMAP3CALLITªs
 ();

338 
uöt32_t
 
zdr_PMAP3UADDR2TADDRªs
 ();

339 
uöt32_t
 
zdr_PMAP3TADDR2UADDR¨gs
 ();

340 
uöt32_t
 
zdr_PMAP3TADDR2UADDRªs
 ();

344 #ifde‡
__˝lu•lus


	@portmap/portmap.c

17 #ifde‡
WIN32


18 
	~<wö32/wö32_com∑t.h
>

21 
	~<°dio.h
>

22 
	~"libnfs-zdr.h
"

23 
	~"libnfs.h
"

24 
	~"libnfs-øw.h
"

25 
	~"libnfs-¥iv©e.h
"

26 
	~"libnfs-øw-p‹tm≠.h
"

31 
Ωc_pdu
 *

32 
	$Ωc_pm≠2_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

34 
Ωc_pdu
 *
pdu
;

36 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
, 
PMAP2_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

37 i‡(
pdu
 =
NULL
) {

38 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP2/NULL call");

39  
NULL
;

42 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

43 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for PORTMAP2/NULL call");

44  
NULL
;

47  
pdu
;

48 
	}
}

50 
Ωc_pdu
 *

51 
	$Ωc_pm≠2_gëp‹t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥Ÿocﬁ
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

53 
Ωc_pdu
 *
pdu
;

54 
pm≠2_m≠pög
 
m
;

56 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
, 
PMAP2_GETPORT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_öt
, (
uöt32_t
));

57 i‡(
pdu
 =
NULL
) {

58 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP2/GETPORT call");

59  
NULL
;

62 
m
.
¥og
 = 
¥ogøm
;

63 
m
.
vîs
 = 
vîsi⁄
;

64 
m
.
¥Ÿ
 = 
¥Ÿocﬁ
;

65 
m
.
p‹t
 = 0;

66 i‡(
	`zdr_pm≠2_m≠pög
(&
pdu
->
zdr
, &
m
) == 0) {

67 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP2/GETPORT call");

68 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

69  
NULL
;

72 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

73 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP2/GETPORTÖdu");

74  
NULL
;

77  
pdu
;

78 
	}
}

80 
Ωc_pdu
 *

81 
	$Ωc_pm≠2_£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥Ÿocﬁ
, 
p‹t
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

83 
Ωc_pdu
 *
pdu
;

84 
pm≠2_m≠pög
 
m
;

86 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
, 
PMAP2_SET
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_öt
, (
uöt32_t
));

87 i‡(
pdu
 =
NULL
) {

88 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP2/SET call");

89  
NULL
;

92 
m
.
¥og
 = 
¥ogøm
;

93 
m
.
vîs
 = 
vîsi⁄
;

94 
m
.
¥Ÿ
 = 
¥Ÿocﬁ
;

95 
m
.
p‹t
 =Öort;

96 i‡(
	`zdr_pm≠2_m≠pög
(&
pdu
->
zdr
, &
m
) == 0) {

97 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP2/SET call");

98 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

99  
NULL
;

102 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

103 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP2/SETÖdu");

104  
NULL
;

107  
pdu
;

108 
	}
}

110 
Ωc_pdu
 *

111 
	$Ωc_pm≠2_un£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥Ÿocﬁ
, 
p‹t
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

113 
Ωc_pdu
 *
pdu
;

114 
pm≠2_m≠pög
 
m
;

116 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
, 
PMAP2_UNSET
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_öt
, (
uöt32_t
));

117 i‡(
pdu
 =
NULL
) {

118 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP2/UNSET call");

119  
NULL
;

122 
m
.
¥og
 = 
¥ogøm
;

123 
m
.
vîs
 = 
vîsi⁄
;

124 
m
.
¥Ÿ
 = 
¥Ÿocﬁ
;

125 
m
.
p‹t
 =Öort;

126 i‡(
	`zdr_pm≠2_m≠pög
(&
pdu
->
zdr
, &
m
) == 0) {

127 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP2/UNSET call");

128 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

129  
NULL
;

132 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

133 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP2/UNSETÖdu");

134  
NULL
;

137  
pdu
;

138 
	}
}

140 
Ωc_pdu
 *

141 
	$Ωc_pm≠2_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

143 
Ωc_pdu
 *
pdu
;

145 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
, 
PMAP2_DUMP
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠2_dump_ªsu…
, (
pm≠2_dump_ªsu…
));

146 i‡(
pdu
 =
NULL
) {

147 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP2/DUMP call");

148  
NULL
;

151 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

152 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP2/DUMPÖdu");

153  
NULL
;

156  
pdu
;

157 
	}
}

159 
Ωc_pdu
 *

160 
	$Ωc_pm≠2_ˇŒô_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, *
d©a
, 
d©Æí
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

162 
Ωc_pdu
 *
pdu
;

163 
pm≠2_ˇŒ_¨gs
 
ˇ
;

165 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V2
, 
PMAP2_CALLIT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠2_ˇŒ_ªsu…
, (
pm≠2_ˇŒ_ªsu…
));

166 i‡(
pdu
 =
NULL
) {

167 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP2/CALLIT call");

168  
NULL
;

171 
ˇ
.
¥og
 = 
¥ogøm
;

172 
ˇ
.
vîs
 = 
vîsi⁄
;

173 
ˇ
.
¥oc
 = 
¥o˚duª
;

174 
ˇ
.
¨gs
.
¨gs_Àn
 = 
d©Æí
;

175 
ˇ
.
¨gs
.
¨gs_vÆ
 = 
d©a
;

177 i‡(
	`zdr_pm≠2_ˇŒ_¨gs
(&
pdu
->
zdr
, &
ˇ
) == 0) {

178 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP2/CALLIT call");

179 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

180  
NULL
;

183 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

184 
	`Ωc_£t_îr‹
(
Ωc
, "FaûedÅÿqueuêPORTMAP2/CALLITÖdu: %s", 
	`Ωc_gë_îr‹
(rpc));

185  
NULL
;

188  
pdu
;

189 
	}
}

194 
Ωc_pdu
 *

195 
	$Ωc_pm≠3_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

197 
Ωc_pdu
 *
pdu
;

199 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

200 i‡(
pdu
 =
NULL
) {

201 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/NULL call");

202  
NULL
;

205 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

206 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu for PORTMAP3/NULL call");

207  
NULL
;

210  
pdu
;

211 
	}
}

213 
Ωc_pdu
 *

214 
	$Ωc_pm≠3_£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
pm≠3_m≠pög
 *
m≠
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

216 
Ωc_pdu
 *
pdu
;

218 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_SET
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_öt
, (
uöt32_t
));

219 i‡(
pdu
 =
NULL
) {

220 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/SET call");

221  
NULL
;

224 i‡(
	`zdr_pm≠3_m≠pög
(&
pdu
->
zdr
, 
m≠
) == 0) {

225 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP3/SET call");

226 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

227  
NULL
;

230 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

231 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP3/SETÖdu");

232  
NULL
;

235  
pdu
;

236 
	}
}

238 
Ωc_pdu
 *

239 
	$Ωc_pm≠3_un£t_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
pm≠3_m≠pög
 *
m≠
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

241 
Ωc_pdu
 *
pdu
;

243 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_UNSET
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_öt
, (
uöt32_t
));

244 i‡(
pdu
 =
NULL
) {

245 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/UNSET call");

246  
NULL
;

249 i‡(
	`zdr_pm≠3_m≠pög
(&
pdu
->
zdr
, 
m≠
) == 0) {

250 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP3/UNSET call");

251 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

252  
NULL
;

255 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

256 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP3/UNSETÖdu");

257  
NULL
;

260  
pdu
;

261 
	}
}

263 
Ωc_pdu
 *

264 
	$Ωc_pm≠3_gëaddr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
pm≠3_m≠pög
 *
m≠
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

266 
Ωc_pdu
 *
pdu
;

268 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_GETADDR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠3_°rög_ªsu…
, (
pm≠3_°rög_ªsu…
));

269 i‡(
pdu
 =
NULL
) {

270 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/GETADDR call");

271  
NULL
;

274 i‡(
	`zdr_pm≠3_m≠pög
(&
pdu
->
zdr
, 
m≠
) == 0) {

275 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP3/GETADDR call");

276 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

277  
NULL
;

280 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

281 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP3/GETADDRÖdu");

282  
NULL
;

285  
pdu
;

286 
	}
}

288 
Ωc_pdu
 *

289 
	$Ωc_pm≠3_dump_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

291 
Ωc_pdu
 *
pdu
;

293 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_DUMP
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠3_dump_ªsu…
, (
pm≠3_dump_ªsu…
));

294 i‡(
pdu
 =
NULL
) {

295 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/DUMP call");

296  
NULL
;

299 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

300 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP3/DUMPÖdu");

301  
NULL
;

304  
pdu
;

305 
	}
}

307 
Ωc_pdu
 *

308 
	$Ωc_pm≠3_gëtime_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

310 
Ωc_pdu
 *
pdu
;

312 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_GETTIME
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_öt
, (
uöt32_t
));

313 i‡(
pdu
 =
NULL
) {

314 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/GETTIME call");

315  
NULL
;

318 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

319 
	`Ωc_£t_îr‹
(
Ωc
, "FailedÅo queue PORTMAP3/GETTIMEÖdu");

320  
NULL
;

323  
pdu
;

324 
	}
}

326 
Ωc_pdu
 *

327 
	$Ωc_pm≠3_ˇŒô_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
¥ogøm
, 
vîsi⁄
, 
¥o˚duª
, *
d©a
, 
d©Æí
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

329 
Ωc_pdu
 *
pdu
;

330 
pm≠3_ˇŒ_¨gs
 
ˇ
;

332 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_CALLIT
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠3_ˇŒ_ªsu…
, (
pm≠3_ˇŒ_ªsu…
));

333 i‡(
pdu
 =
NULL
) {

334 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/CALLIT call");

335  
NULL
;

338 
ˇ
.
¥og
 = 
¥ogøm
;

339 
ˇ
.
vîs
 = 
vîsi⁄
;

340 
ˇ
.
¥oc
 = 
¥o˚duª
;

341 
ˇ
.
¨gs
.
¨gs_Àn
 = 
d©Æí
;

342 
ˇ
.
¨gs
.
¨gs_vÆ
 = 
d©a
;

344 i‡(
	`zdr_pm≠3_ˇŒ_¨gs
(&
pdu
->
zdr
, &
ˇ
) == 0) {

345 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP3/CALLIT call");

346 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

347  
NULL
;

350 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

351 
	`Ωc_£t_îr‹
(
Ωc
, "FaûedÅÿqueuêPORTMAP3/CALLITÖdu: %s", 
	`Ωc_gë_îr‹
(rpc));

352  
NULL
;

355  
pdu
;

356 
	}
}

358 
Ωc_pdu
 *

359 
	$Ωc_pm≠3_uaddr2èddr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, *
uaddr
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

361 
Ωc_pdu
 *
pdu
;

363 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_UADDR2TADDR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠3_√tbuf
, (
pm≠3_√tbuf
));

364 i‡(
pdu
 =
NULL
) {

365 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/UADDR2TADDR call");

366  
NULL
;

369 i‡(
	`zdr_°rög
(&
pdu
->
zdr
, &
uaddr
, 255) == 0) {

370 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP3/UADDR2TADDR call");

371 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

372  
NULL
;

375 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

376 
	`Ωc_£t_îr‹
(
Ωc
, "FaûedÅÿqueuêPORTMAP3/UADDR2TADDRÖdu: %s", 
	`Ωc_gë_îr‹
(rpc));

377  
NULL
;

380  
pdu
;

381 
	}
}

383 
Ωc_pdu
 *

384 
	$Ωc_pm≠3_èddr2uaddr_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
pm≠3_√tbuf
 *
nb
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

386 
Ωc_pdu
 *
pdu
;

388 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
PMAP_PROGRAM
, 
PMAP_V3
, 
PMAP3_TADDR2UADDR
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_pm≠3_°rög_ªsu…
, (
pm≠3_°rög_ªsu…
));

389 i‡(
pdu
 =
NULL
) {

390 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu for PORTMAP3/TADDR2UADDR call");

391  
NULL
;

394 i‡(
	`zdr_pm≠3_√tbuf
(&
pdu
->
zdr
, 
nb
) == 0) {

395 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode data for PORTMAP3/TADDR2UADDR call");

396 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

397  
NULL
;

400 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

401 
	`Ωc_£t_îr‹
(
Ωc
, "FaûedÅÿqueuêPORTMAP3/TADDR2UADDRÖdu: %s", 
	`Ωc_gë_îr‹
(rpc));

402  
NULL
;

405  
pdu
;

406 
	}
}

	@ps2_ee/config.h

19 #i‚de‡
__PS2_CONFIG_H__


21 
	#HAVE_ARPA_INET_H
 1

	)

22 
	#HAVE_INTTYPES_H
 1

	)

23 
	#HAVE_MEMORY_H
 1

	)

24 
	#HAVE_NETDB_H
 1

	)

25 
	#HAVE_NETINET_IN_H
 1

	)

26 
	#HAVE_SOCKADDR_LEN
 1

	)

27 
	#HAVE_STDINT_H
 1

	)

28 
	#HAVE_STDLIB_H
 1

	)

29 
	#HAVE_STRINGS_H
 1

	)

30 
	#HAVE_STRING_H
 1

	)

32 
	#HAVE_SYS_STAT_H
 1

	)

33 
	#HAVE_SYS_TIME_H
 1

	)

34 
	#HAVE_SYS_TYPES_H
 1

	)

35 
	#HAVE_UNISTD_H
 1

	)

36 
	#HAVE_UTIME_H
 1

	)

	@ps2_ee/ps2_compat.c

19 #ifde‡
PS2_EE


21 
	#NEED_READV


	)

22 
	#NEED_WRITEV


	)

23 
	#NEED_POLL


	)

24 
	#NEED_BE64TOH


	)

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~"ps2_com∑t.h
"

31 
	$gë«meöfo
(c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
,

32 *
ho°
, 
sockÀn_t
 
ho°Àn
,

33 *
£rv
, 
sockÀn_t
 
£rvÀn
, 
Êags
)

37 
	}
}

39 
	$nfs_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

40 c⁄° 
addröfo
 *
höts
,

41 
addröfo
 **
ªs
)

43 
sockaddr_ö
 *
sö
;

45 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

46 
sö
->
sö_Àn
 = (
sockaddr_ö
);

47 
sö
->
sö_Ámûy
=
AF_INET
;

50 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
node
);

52 
sö
->
sö_p‹t
=0;

53 i‡(
£rvi˚
) {

54 
sö
->
sö_p‹t
=
	`ht⁄s
(
	`©oi
(
£rvi˚
));

57 *
ªs
 = 
	`mÆloc
((
addröfo
));

58 
	`mem£t
(*
ªs
, 0, (
addröfo
));

60 (*
ªs
)->
ai_Ámûy
 = 
AF_INET
;

61 (*
ªs
)->
ai_addæí
 = (
sockaddr_ö
);

62 (*
ªs
)->
ai_addr
 = (
sockaddr
 *)
sö
;

65 
	}
}

67 
	$nfs_‰ìaddröfo
(
addröfo
 *
ªs
)

69 
	`‰ì
(
ªs
->
ai_addr
);

70 
	`‰ì
(
ªs
);

71 
	}
}

	@ps2_ee/ps2_compat.h

19 #i‚de‡
_PS2_COMPAT_H_


20 
	#_PS2_COMPAT_H_


	)

22 #ifde‡
PS2_EE


24 
	#NO_SRV_AUTOSCAN


	)

25 
	#IPPORT_RESERVED
 1024

	)

27 
	~<î∫o.h
>

28 
	~<sys/time.h
>

29 
	~<sys/utime.h
>

30 
	~<ps2ù.h
>

31 
	~<f˙é.h
>

32 
	~<uni°d.h
>

34 
	tfsfû˙t_t
;

36 
	#gë£rvbyp‹t
(
a
,
b
Ë
NULL


	)

37 
	#gëaddröfo
 
nfs_gëaddröfo


	)

38 
	#‰ìaddröfo
 
nfs_‰ìaddröfo


	)

39 
	#maj‹
(
a
Ë0

	)

40 
	#mö‹
(
a
Ë0

	)

41 #i‚de‡
O_NOFOLLOW


42 
	#O_NOFOLLOW
 0

	)

45 
	s°©vfs
 {

46 
	mf_bsize
;

47 
	mf_‰size
;

48 
	mf_blocks
;

49 
	mf_b‰ì
;

50 
	mf_bavaû
;

51 
	mf_fûes
;

52 
	mf_f‰ì
;

53 
	mf_Ávaû
;

54 
	mf_fsid
;

55 
	mf_Êag
;

56 
	mf_«memax
;

59 
	#gëpid
(Ë0

	)

60 
	#gëuid
(Ë0

	)

61 
	#gëgid
(Ë0

	)

63 
	#gëlogö_r
(
a
,
b
Ë
ENXIO


	)

65 
	#POLLIN
 0x0001

	)

66 
	#POLLPRI
 0x0002

	)

67 
	#POLLOUT
 0x0004

	)

68 
	#POLLERR
 0x0008

	)

69 
	#POLLHUP
 0x0010

	)

71 
	spﬁlfd
 {

72 
	mfd
;

73 
	mevíts
;

74 
	mªvíts
;

77 
pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
);

79 
	siovec
 {

80 *
	miov_ba£
;

81 
size_t
 
	miov_Àn
;

84 
ssize_t
 
wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

85 
ssize_t
 
ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

88 
gë«meöfo
(c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
,

89 *
ho°
, 
sockÀn_t
 
ho°Àn
,

90 *
£rv
, 
sockÀn_t
 
£rvÀn
, 
Êags
);

91 
nfs_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

92 c⁄° 
addröfo
 *
höts
,

93 
addröfo
 **
ªs
);

94 
nfs_‰ìaddröfo
(
addröfo
 *
ªs
);

96 
be64toh
(
x
);

98 
	#SOL_TCP
 
IPPROTO_TCP


	)

99 
	#EAI_AGAIN
 
EAGAIN


	)

102 
	#sockaddr_ö6
 
sockaddr_ö


	)

	@ps3_ppu/config.h

4 
	#HAVE_ARPA_INET_H
 1

	)

7 
	#HAVE_INTTYPES_H
 1

	)

10 
	#HAVE_MEMORY_H
 1

	)

13 
	#HAVE_NETDB_H
 1

	)

16 
	#HAVE_NETINET_IN_H
 1

	)

19 
	#HAVE_SOCKADDR_LEN
 1

	)

22 
	#HAVE_STDINT_H
 1

	)

25 
	#HAVE_STDLIB_H
 1

	)

28 
	#HAVE_STRINGS_H
 1

	)

31 
	#HAVE_STRING_H
 1

	)

34 
	#HAVE_SYS_SOCKET_H
 1

	)

37 
	#HAVE_SYS_STAT_H
 1

	)

40 
	#HAVE_SYS_TIME_H
 1

	)

43 
	#HAVE_SYS_TYPES_H
 1

	)

46 
	#HAVE_UNISTD_H
 1

	)

49 
	#HAVE_UTIME_H
 1

	)

	@ps3_ppu/ps3_compat.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<sys/sockë.h
>

24 
	~<√tdb.h
>

25 
	~<¨∑/öë.h
>

26 
	~"ps3_com∑t.h
"

28 
	$nfs_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

29 *
ho°
, 
size_t
 
ho°Àn
,

30 *
£rv
, 
size_t
 
£rvÀn
, 
Êags
)

32 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

34 i‡(
ho°
) {

35 
	`¢¥ötf
(
ho°
, 
ho°Àn
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

39 
	}
}

41 
	$nfs_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

42 c⁄° 
addröfo
 *
höts
,

43 
addröfo
 **
ªs
)

45 
sockaddr_ö
 *
sö
;

47 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

48 
sö
->
sö_Àn
 = (
sockaddr_ö
);

49 
sö
->
sö_Ámûy
=
AF_INET
;

52 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
node
);

54 
sö
->
sö_p‹t
=0;

55 i‡(
£rvi˚
) {

56 
sö
->
sö_p‹t
=
	`ht⁄s
(
	`©oi
(
£rvi˚
));

59 *
ªs
 = 
	`mÆloc
((
addröfo
));

60 
	`mem£t
(*
ªs
, 0, (
addröfo
));

62 (*
ªs
)->
ai_Ámûy
 = 
AF_INET
;

63 (*
ªs
)->
ai_addæí
 = (
sockaddr_ö
);

64 (*
ªs
)->
ai_addr
 = (
sockaddr
 *)
sö
;

67 
	}
}

69 
	$nfs_‰ìaddröfo
(
addröfo
 *
ªs
)

71 
	`‰ì
(
ªs
->
ai_addr
);

72 
	`‰ì
(
ªs
);

73 
	}
}

	@ps3_ppu/ps3_compat.h

18 #i‚de‡
PS3_COMPAT_H


19 
	#PS3_COMPAT_H


	)

21 
	~<uni°d.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/time.h
>

24 
	~<√tdb.h
>

25 
	~<√t/sockë.h
>

26 
	~<√t/pﬁl.h
>

27 
	~<√töë/ö.h
>

29 
	#gë«meöfo
 
nfs_gë«meöfo


	)

30 
	#gëaddröfo
 
nfs_gëaddröfo


	)

31 
	#‰ìaddröfo
 
nfs_‰ìaddröfo


	)

33 
nfs_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

34 *
ho°
, 
size_t
 
ho°Àn
,

35 *
£rv
, 
size_t
 
£rvÀn
, 
Êags
);

36 
nfs_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

37 c⁄° 
addröfo
 *
höts
,

38 
addröfo
 **
ªs
);

39 
nfs_‰ìaddröfo
(
addröfo
 *
ªs
);

41 
	#IFNAMSIZ
 16

	)

44 
	#sockaddr_ö6
 
sockaddr_ö


	)

46 
	#IPPORT_RESERVED
 1024

	)

47 
	#MSG_NOSIGNAL
 0x20000

	)

48 
	#O_NOFOLLOW
 0400000

	)

49 
	#MINORBITS
 20

	)

50 
	#MINORMASK
 ((1U << 
MINORBITS
Ë- 1)

	)

52 
	#maj‹
(
dev
Ë((Ë((devË>> 
MINORBITS
))

	)

53 
	#mö‹
(
dev
Ë((Ë((devË& 
MINORMASK
))

	)

55 
	#IFF_UP
 0x1

	)

56 
	#IFF_BROADCAST
 0x2

	)

57 
	#IFF_DEBUG
 0x4

	)

58 
	#IFF_LOOPBACK
 0x8

	)

61 
	sifm≠
 {

62 
	mmem_°¨t
;

63 
	mmem_íd
;

64 
	mba£_addr
;

65 
	múq
;

66 
	mdma
;

67 
	mp‹t
;

71 
	si‰eq
 {

72 
	mi‰_«me
[
IFNAMSIZ
];

74 
sockaddr
 
	mi‰_addr
;

75 
sockaddr
 
	mi‰_d°addr
;

76 
sockaddr
 
	mi‰_brﬂdaddr
;

77 
sockaddr
 
	mi‰_√tmask
;

78 
sockaddr
 
	mi‰_hwaddr
;

79 
	mi‰_Êags
;

80 
	mi‰_ifödex
;

81 
	mi‰_mëric
;

82 
	mi‰_mtu
;

83 
ifm≠
 
	mi‰_m≠
;

84 
	mi‰_¶ave
[
IFNAMSIZ
];

85 
	mi‰_√w«me
[
IFNAMSIZ
];

86 *
	mi‰_d©a
;

90 
	sifc⁄f
 {

91 
	mifc_Àn
;

93 *
	mifc_buf
;

94 
i‰eq
 *
	mifc_ªq
;

98 
uöt32_t
 
	tfsblk˙t_t
;

99 
uöt32_t
 
	tfsfû˙t_t
;

101 
	s°©vfs
 {

102 
	mf_bsize
;

103 
	mf_‰size
;

104 
fsblk˙t_t
 
	mf_blocks
;

105 
fsblk˙t_t
 
	mf_b‰ì
;

106 
fsblk˙t_t
 
	mf_bavaû
;

107 
fsfû˙t_t
 
	mf_fûes
;

108 
fsfû˙t_t
 
	mf_f‰ì
;

109 
fsfû˙t_t
 
	mf_Ávaû
;

110 
	mf_fsid
;

111 
	mf_Êag
;

112 
	mf_«memax
;

	@rquota/libnfs-raw-rquota.c

35 
	~"libnfs-zdr.h
"

36 
	~"libnfs-øw-rquŸa.h
"

38 
uöt32_t


39 
	$zdr_rquŸa°©
 (
ZDR
 *
zdrs
, 
rquŸa°©
 *
objp
)

41 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

42  
FALSE
;

43  
TRUE
;

44 
	}
}

46 
uöt32_t


47 
	$zdr_exp‹ç©h
 (
ZDR
 *
zdrs
, 
exp‹ç©h
 *
objp
)

49 i‡(!
	`zdr_°rög
 (
zdrs
, 
objp
, 
RQUOTAPATHLEN
))

50  
FALSE
;

51  
TRUE
;

52 
	}
}

54 
uöt32_t


55 
	$zdr_GETQUOTA1¨gs
 (
ZDR
 *
zdrs
, 
GETQUOTA1¨gs
 *
objp
)

57 i‡(!
	`zdr_exp‹ç©h
 (
zdrs
, &
objp
->
exp‹t
))

58  
FALSE
;

59 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
uid
))

60  
FALSE
;

61  
TRUE
;

62 
	}
}

64 
uöt32_t


65 
	$zdr_quŸ©y≥
 (
ZDR
 *
zdrs
, 
quŸ©y≥
 *
objp
)

67 i‡(!
	`zdr_íum
 (
zdrs
, (
íum_t
 *Ë
objp
))

68  
FALSE
;

69  
TRUE
;

70 
	}
}

72 
uöt32_t


73 
	$zdr_GETQUOTA2¨gs
 (
ZDR
 *
zdrs
, 
GETQUOTA2¨gs
 *
objp
)

75 i‡(!
	`zdr_exp‹ç©h
 (
zdrs
, &
objp
->
exp‹t
))

76  
FALSE
;

77 i‡(!
	`zdr_quŸ©y≥
 (
zdrs
, &
objp
->
ty≥
))

78  
FALSE
;

79 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
uid
))

80  
FALSE
;

81  
TRUE
;

82 
	}
}

84 
uöt32_t


85 
	$zdr_GETQUOTA1ªs_ok
 (
ZDR
 *
zdrs
, 
GETQUOTA1ªs_ok
 *
objp
)

87 
öt32_t
 *
buf
;

88 
buf
 = 
NULL
;

90 i‡(
zdrs
->
x_›
 =
ZDR_ENCODE
) {

91 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 10 * 
BYTES_PER_ZDR_UNIT
);

92 i‡(
buf
 =
NULL
) {

93 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bsize
))

94  
FALSE
;

95 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
a˘ive
))

96  
FALSE
;

97 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bh¨dlimô
))

98  
FALSE
;

99 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bso·limô
))

100  
FALSE
;

101 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
curblocks
))

102  
FALSE
;

103 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
fh¨dlimô
))

104  
FALSE
;

105 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
fso·limô
))

106  
FALSE
;

107 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
curfûes
))

108  
FALSE
;

109 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
btimñe·
))

110  
FALSE
;

111 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
·imñe·
))

112  
FALSE
;

114 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
bsize
);

115 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
a˘ive
);

116 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
bh¨dlimô
);

117 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
bso·limô
);

118 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
curblocks
);

119 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
fh¨dlimô
);

120 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
fso·limô
);

121 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
curfûes
);

122 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
btimñe·
);

123 
	`IZDR_PUT_LONG
(
buf
, 
objp
->
·imñe·
);

125  
TRUE
;

126 } i‡(
zdrs
->
x_›
 =
ZDR_DECODE
) {

127 
buf
 = 
	`ZDR_INLINE
 (
zdrs
, 10 * 
BYTES_PER_ZDR_UNIT
);

128 i‡(
buf
 =
NULL
) {

129 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bsize
))

130  
FALSE
;

131 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
a˘ive
))

132  
FALSE
;

133 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bh¨dlimô
))

134  
FALSE
;

135 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bso·limô
))

136  
FALSE
;

137 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
curblocks
))

138  
FALSE
;

139 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
fh¨dlimô
))

140  
FALSE
;

141 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
fso·limô
))

142  
FALSE
;

143 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
curfûes
))

144  
FALSE
;

145 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
btimñe·
))

146  
FALSE
;

147 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
·imñe·
))

148  
FALSE
;

150 
objp
->
bsize
 = 
	`IZDR_GET_LONG
(
buf
);

151 
objp
->
a˘ive
 = 
	`IZDR_GET_LONG
(
buf
);

152 
objp
->
bh¨dlimô
 = 
	`IZDR_GET_LONG
(
buf
);

153 
objp
->
bso·limô
 = 
	`IZDR_GET_LONG
(
buf
);

154 
objp
->
curblocks
 = 
	`IZDR_GET_LONG
(
buf
);

155 
objp
->
fh¨dlimô
 = 
	`IZDR_GET_LONG
(
buf
);

156 
objp
->
fso·limô
 = 
	`IZDR_GET_LONG
(
buf
);

157 
objp
->
curfûes
 = 
	`IZDR_GET_LONG
(
buf
);

158 
objp
->
btimñe·
 = 
	`IZDR_GET_LONG
(
buf
);

159 
objp
->
·imñe·
 = 
	`IZDR_GET_LONG
(
buf
);

161  
TRUE
;

164 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bsize
))

165  
FALSE
;

166 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
a˘ive
))

167  
FALSE
;

168 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bh¨dlimô
))

169  
FALSE
;

170 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
bso·limô
))

171  
FALSE
;

172 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
curblocks
))

173  
FALSE
;

174 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
fh¨dlimô
))

175  
FALSE
;

176 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
fso·limô
))

177  
FALSE
;

178 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
curfûes
))

179  
FALSE
;

180 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
btimñe·
))

181  
FALSE
;

182 i‡(!
	`zdr_öt
 (
zdrs
, &
objp
->
·imñe·
))

183  
FALSE
;

184  
TRUE
;

185 
	}
}

187 
uöt32_t


188 
	$zdr_GETQUOTA1ªs
 (
ZDR
 *
zdrs
, 
GETQUOTA1ªs
 *
objp
)

190 i‡(!
	`zdr_rquŸa°©
 (
zdrs
, &
objp
->
°©us
))

191  
FALSE
;

192 
objp
->
°©us
) {

193 
RQUOTA_OK
:

194 i‡(!
	`zdr_GETQUOTA1ªs_ok
 (
zdrs
, &
objp
->
GETQUOTA1ªs_u
.
quŸa
))

195  
FALSE
;

200  
TRUE
;

201 
	}
}

	@rquota/libnfs-raw-rquota.h

35 #i‚de‡
_RQUOTA_H_RPCGEN


36 
	#_RQUOTA_H_RPCGEN


	)

38 
	~<nfsc/libnfs-zdr.h
>

41 #ifde‡
__˝lu•lus


45 
	#RQUOTAPATHLEN
 1024

	)

47 
	erquŸa°©
 {

48 
RQUOTA_OK
 = 1,

49 
RQUOTA_NOQUOTA
 = 2,

50 
RQUOTA_EPERM
 = 3,

52 
rquŸa°©
 
	trquŸa°©
;

54 *
	texp‹ç©h
;

56 
	sGETQUOTA1¨gs
 {

57 
exp‹ç©h
 
exp‹t
;

58 
uid
;

60 
GETQUOTA1¨gs
 
	tGETQUOTA1¨gs
;

62 
	equŸ©y≥
 {

63 
RQUOTA_TYPE_UID
 = 0,

64 
RQUOTA_TYPE_GID
 = 1,

66 
quŸ©y≥
 
	tquŸ©y≥
;

68 
	sGETQUOTA2¨gs
 {

69 
exp‹ç©h
 
exp‹t
;

70 
quŸ©y≥
 
ty≥
;

71 
uid
;

73 
GETQUOTA2¨gs
 
	tGETQUOTA2¨gs
;

75 
	sGETQUOTA1ªs_ok
 {

76 
bsize
;

77 
a˘ive
;

78 
bh¨dlimô
;

79 
bso·limô
;

80 
curblocks
;

81 
fh¨dlimô
;

82 
fso·limô
;

83 
curfûes
;

84 
btimñe·
;

85 
·imñe·
;

87 
GETQUOTA1ªs_ok
 
	tGETQUOTA1ªs_ok
;

89 
	sGETQUOTA1ªs
 {

90 
rquŸa°©
 
°©us
;

92 
GETQUOTA1ªs_ok
 
quŸa
;

93 } 
GETQUOTA1ªs_u
;

95 
GETQUOTA1ªs
 
	tGETQUOTA1ªs
;

97 
	#RQUOTA_PROGRAM
 100011

	)

98 
	#RQUOTA_V1
 1

	)

100 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

101 
	#RQUOTA1_NULL
 0

	)

102 * 
rquŸa1_nuŒ_1
(*, *);

103 * 
rquŸa1_nuŒ_1_svc
(*, 
svc_ªq
 *);

104 
	#RQUOTA1_GETQUOTA
 1

	)

105 
GETQUOTA1ªs
 * 
rquŸa1_gëquŸa_1
(
GETQUOTA1¨gs
 *, *);

106 
GETQUOTA1ªs
 * 
rquŸa1_gëquŸa_1_svc
(
GETQUOTA1¨gs
 *, 
svc_ªq
 *);

107 
	#RQUOTA1_GETACTIVEQUOTA
 2

	)

108 
GETQUOTA1ªs
 * 
rquŸa1_gëa˘ivequŸa_1
(
GETQUOTA1¨gs
 *, *);

109 
GETQUOTA1ªs
 * 
rquŸa1_gëa˘ivequŸa_1_svc
(
GETQUOTA1¨gs
 *, 
svc_ªq
 *);

110 
rquŸa_¥ogøm_1_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

113 
	#RQUOTA1_NULL
 0

	)

114 * 
rquŸa1_nuŒ_1
();

115 * 
rquŸa1_nuŒ_1_svc
();

116 
	#RQUOTA1_GETQUOTA
 1

	)

117 
GETQUOTA1ªs
 * 
rquŸa1_gëquŸa_1
();

118 
GETQUOTA1ªs
 * 
rquŸa1_gëquŸa_1_svc
();

119 
	#RQUOTA1_GETACTIVEQUOTA
 2

	)

120 
GETQUOTA1ªs
 * 
rquŸa1_gëa˘ivequŸa_1
();

121 
GETQUOTA1ªs
 * 
rquŸa1_gëa˘ivequŸa_1_svc
();

122 
rquŸa_¥ogøm_1_‰ìªsu…
 ();

124 
	#RQUOTA_V2
 2

	)

126 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

127 
	#RQUOTA2_NULL
 0

	)

128 * 
rquŸa2_nuŒ_2
(*, *);

129 * 
rquŸa2_nuŒ_2_svc
(*, 
svc_ªq
 *);

130 
	#RQUOTA2_GETQUOTA
 1

	)

131 
GETQUOTA1ªs
 * 
rquŸa2_gëquŸa_2
(
GETQUOTA2¨gs
 *, *);

132 
GETQUOTA1ªs
 * 
rquŸa2_gëquŸa_2_svc
(
GETQUOTA2¨gs
 *, 
svc_ªq
 *);

133 
	#RQUOTA2_GETACTIVEQUOTA
 2

	)

134 
GETQUOTA1ªs
 * 
rquŸa2_gëa˘ivequŸa_2
(
GETQUOTA2¨gs
 *, *);

135 
GETQUOTA1ªs
 * 
rquŸa2_gëa˘ivequŸa_2_svc
(
GETQUOTA2¨gs
 *, 
svc_ªq
 *);

136 
rquŸa_¥ogøm_2_‰ìªsu…
 (*, 
zdΩroc_t
, 
ˇddr_t
);

139 
	#RQUOTA2_NULL
 0

	)

140 * 
rquŸa2_nuŒ_2
();

141 * 
rquŸa2_nuŒ_2_svc
();

142 
	#RQUOTA2_GETQUOTA
 1

	)

143 
GETQUOTA1ªs
 * 
rquŸa2_gëquŸa_2
();

144 
GETQUOTA1ªs
 * 
rquŸa2_gëquŸa_2_svc
();

145 
	#RQUOTA2_GETACTIVEQUOTA
 2

	)

146 
GETQUOTA1ªs
 * 
rquŸa2_gëa˘ivequŸa_2
();

147 
GETQUOTA1ªs
 * 
rquŸa2_gëa˘ivequŸa_2_svc
();

148 
rquŸa_¥ogøm_2_‰ìªsu…
 ();

153 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

154 
uöt32_t
 
zdr_rquŸa°©
 (
ZDR
 *, 
rquŸa°©
*);

155 
uöt32_t
 
zdr_exp‹ç©h
 (
ZDR
 *, 
exp‹ç©h
*);

156 
uöt32_t
 
zdr_GETQUOTA1¨gs
 (
ZDR
 *, 
GETQUOTA1¨gs
*);

157 
uöt32_t
 
zdr_quŸ©y≥
 (
ZDR
 *, 
quŸ©y≥
*);

158 
uöt32_t
 
zdr_GETQUOTA2¨gs
 (
ZDR
 *, 
GETQUOTA2¨gs
*);

159 
uöt32_t
 
zdr_GETQUOTA1ªs_ok
 (
ZDR
 *, 
GETQUOTA1ªs_ok
*);

160 
uöt32_t
 
zdr_GETQUOTA1ªs
 (
ZDR
 *, 
GETQUOTA1ªs
*);

163 
uöt32_t
 
zdr_rquŸa°©
 ();

164 
uöt32_t
 
zdr_exp‹ç©h
 ();

165 
uöt32_t
 
zdr_GETQUOTA1¨gs
 ();

166 
uöt32_t
 
zdr_quŸ©y≥
 ();

167 
uöt32_t
 
zdr_GETQUOTA2¨gs
 ();

168 
uöt32_t
 
zdr_GETQUOTA1ªs_ok
 ();

169 
uöt32_t
 
zdr_GETQUOTA1ªs
 ();

173 #ifde‡
__˝lu•lus


	@rquota/rquota.c

17 #ifde‡
WIN32


18 
	~<wö32/wö32_com∑t.h
>

21 
	~<°dio.h
>

22 
	~<î∫o.h
>

23 
	~<sys/°©.h
>

24 
	~"libnfs-zdr.h
"

25 
	~"libnfs.h
"

26 
	~"libnfs-øw.h
"

27 
	~"libnfs-¥iv©e.h
"

28 
	~"libnfs-øw-rquŸa.h
"

32 *
	$rquŸa°©_to_°r
(
îr‹
)

34 
îr‹
) {

35 
RQUOTA_OK
:  "RQUOTA_OK"; ;

36 
RQUOTA_NOQUOTA
:  "RQUOTA_NOQUOTA"; ;

37 
RQUOTA_EPERM
:  "RQUOTA_EPERM"; ;

40 
	}
}

42 
	$rquŸa°©_to_î∫o
(
îr‹
)

44 
îr‹
) {

45 
RQUOTA_OK
:  0; ;

46 
RQUOTA_NOQUOTA
:  -
ENOENT
; ;

47 
RQUOTA_EPERM
:  -
EPERM
; ;

49  -
ENOENT
;

50 
	}
}

53 
Ωc_pdu
 *

54 
	$Ωc_rquŸa1_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

56 
Ωc_pdu
 *
pdu
;

58 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V1
, 
RQUOTA1_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

59 i‡(
pdu
 =
NULL
) {

60 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÑquota1/null call");

61  
NULL
;

64 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

65 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÑquota1/null call");

66  
NULL
;

69  
pdu
;

70 
	}
}

72 
Ωc_pdu
 *

73 
	$Ωc_rquŸa1_gëquŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, 
uid
, *
¥iv©e_d©a
)

75 
Ωc_pdu
 *
pdu
;

76 
GETQUOTA1¨gs
 
¨gs
;

78 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V1
, 
RQUOTA1_GETQUOTA
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETQUOTA1ªs
, (
GETQUOTA1ªs
));

79 i‡(
pdu
 =
NULL
) {

80 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÑquota1/getquota call");

81  
NULL
;

84 
¨gs
.
exp‹t
 =Éxport;

85 
¨gs
.
uid
 = uid;

87 i‡(
	`zdr_GETQUOTA1¨gs
(&
pdu
->
zdr
, &
¨gs
) == 0) {

88 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETQUOTA1args");

89 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

90  
NULL
;

93 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

94 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÑquota1/getquota call");

95  
NULL
;

98  
pdu
;

99 
	}
}

101 
Ωc_pdu
 *

102 
	$Ωc_rquŸa1_gëa˘ivequŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, 
uid
, *
¥iv©e_d©a
)

104 
Ωc_pdu
 *
pdu
;

105 
GETQUOTA1¨gs
 
¨gs
;

107 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V1
, 
RQUOTA1_GETACTIVEQUOTA
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETQUOTA1ªs
, (
GETQUOTA1ªs
));

108 i‡(
pdu
 =
NULL
) {

109 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÑquota1/getactivequota call");

110  
NULL
;

113 
¨gs
.
exp‹t
 =Éxport;

114 
¨gs
.
uid
 = uid;

116 i‡(
	`zdr_GETQUOTA1¨gs
(&
pdu
->
zdr
, &
¨gs
) == 0) {

117 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETQUOTA1args");

118 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

119  
NULL
;

122 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

123 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÑquota1/getactivequota call");

124  
NULL
;

127  
pdu
;

128 
	}
}

131 
Ωc_pdu
 *

132 
	$Ωc_rquŸa2_nuŒ_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
¥iv©e_d©a
)

134 
Ωc_pdu
 *
pdu
;

136 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V2
, 
RQUOTA2_NULL
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_void
, 0);

137 i‡(
pdu
 =
NULL
) {

138 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÑquota2/null call");

139  
NULL
;

142 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

143 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÑquota2/null call");

144  
NULL
;

147  
pdu
;

148 
	}
}

150 
Ωc_pdu
 *

151 
	$Ωc_rquŸa2_gëquŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, 
ty≥
, 
uid
, *
¥iv©e_d©a
)

153 
Ωc_pdu
 *
pdu
;

154 
GETQUOTA2¨gs
 
¨gs
;

156 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V2
, 
RQUOTA2_GETQUOTA
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETQUOTA1ªs
, (
GETQUOTA1ªs
));

157 i‡(
pdu
 =
NULL
) {

158 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÑquota2/getquota call");

159  
NULL
;

162 
¨gs
.
exp‹t
 =Éxport;

163 
¨gs
.
ty≥
 =Åype;

164 
¨gs
.
uid
 = uid;

166 i‡(
	`zdr_GETQUOTA2¨gs
(&
pdu
->
zdr
, &
¨gs
) == 0) {

167 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETQUOTA2args");

168 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

169  
NULL
;

172 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

173 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÑquota2/getquota call");

174  
NULL
;

177  
pdu
;

178 
	}
}

180 
Ωc_pdu
 *

181 
	$Ωc_rquŸa2_gëa˘ivequŸa_èsk
(
Ωc_c⁄ãxt
 *
Ωc
, 
Ωc_cb
 
cb
, *
exp‹t
, 
ty≥
, 
uid
, *
¥iv©e_d©a
)

183 
Ωc_pdu
 *
pdu
;

184 
GETQUOTA2¨gs
 
¨gs
;

186 
pdu
 = 
	`Ωc_Æloˇã_pdu
(
Ωc
, 
RQUOTA_PROGRAM
, 
RQUOTA_V2
, 
RQUOTA2_GETACTIVEQUOTA
, 
cb
, 
¥iv©e_d©a
, (
zdΩroc_t
)
zdr_GETQUOTA1ªs
, (
GETQUOTA1ªs
));

187 i‡(
pdu
 =
NULL
) {

188 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅoállocateÖdu forÑquota2/getactivequota call");

189  
NULL
;

192 
¨gs
.
exp‹t
 =Éxport;

193 
¨gs
.
ty≥
 =Åype;

194 
¨gs
.
uid
 = uid;

196 i‡(
	`zdr_GETQUOTA2¨gs
(&
pdu
->
zdr
, &
¨gs
) == 0) {

197 
	`Ωc_£t_îr‹
(
Ωc
, "ZDRÉrror: FailedÅoÉncode GETQUOTA2args");

198 
	`Ωc_‰ì_pdu
(
Ωc
, 
pdu
);

199  
NULL
;

202 i‡(
	`Ωc_queue_pdu
(
Ωc
, 
pdu
) != 0) {

203 
	`Ωc_£t_îr‹
(
Ωc
, "Out of memory. FailedÅo queueÖdu forÑquota2/getactivequota call");

204  
NULL
;

207  
pdu
;

208 
	}
}

	@tests/ld_timeout.c

19 
	#_GNU_SOURCE


	)

21 
	~<asm/f˙é.h
>

22 
	~<î∫o.h
>

23 
	~<pﬁl.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

29 
	~<uni°d.h
>

31 
	~<nfsc/libnfs.h
>

33 
	~<sys/sysˇŒ.h
>

34 
	~<dlf˙.h
>

36 #i‚de‡
disˇrd_c⁄°


37 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

40 
	#PRINTF
(
fmt
, 
¨gs
...) \

42 
	`Ârötf
(
°dîr
,"ld_nfs: "); \

43 
	`Ârötf
(
°dîr
, (
fmt
), ##
¨gs
); \

44 
	`Ârötf
(
°dîr
,"\n"); \

45 } 0);

	)

47 
	gtimeout_°¨t
 = 0;

49 (*
ªÆ_Ωc_£rvi˚
)(
Ωc_c⁄ãxt
 *
Ωc
, 
ªvíts
);

51 
	$Ωc_£rvi˚
(
Ωc_c⁄ãxt
 *
Ωc
, 
ªvíts
)

53 
ˇŒ_idx
 = 0;

55 
ˇŒ_idx
++;

56 i‡(
ˇŒ_idx
 >
timeout_°¨t
) {

57 
	`PRINTF
("sleep for 1 seconds causingáÅimeout");

58 
	`¶ìp
(1);

64 
ªvíts
 &~
POLLIN
;

66  
	`ªÆ_Ωc_£rvi˚
(
Ωc
, 
ªvíts
);

67 
	}
}

70 
__©åibuã__
((
c⁄°ru˘‹
))

71 
	$_öô
()

74 i‡(
	`gëív
("TIMEOUT_START"Ë!
NULL
) {

75 
timeout_°¨t
 = 
	`©oi
(
	`gëív
("TIMEOUT_START"));

78 
ªÆ_Ωc_£rvi˚
 = 
	`dlsym
(
RTLD_NEXT
, "rpc_service");

79 
	}
}

	@tests/prog_access.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_access <url> <cwd> <path> <flags>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

45 
Êags
 = 0;

47 i‡(
¨gc
 != 5) {

48 
	`ußge
();

51 i‡(
	`°r°r
(
¨gv
[4], "R_OK")) {

52 
Êags
 |
R_OK
;

54 i‡(
	`°r°r
(
¨gv
[4], "W_OK")) {

55 
Êags
 |
W_OK
;

57 i‡(
	`°r°r
(
¨gv
[4], "X_OK")) {

58 
Êags
 |
X_OK
;

61 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

62 i‡(
nfs
 =
NULL
) {

63 
	`¥ötf
("failedÅo init context\n");

64 
	`exô
(1);

67 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

68 i‡(
uæ
 =
NULL
) {

69 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

70 
	`exô
(1);

73 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

74 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

75 
	`nfs_gë_îr‹
(
nfs
));

76 
ªt
 = 1;

77 
föished
;

80 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

81 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

82 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

83 
ªt
 = 1;

84 
föished
;

87 i‡(
	`nfs_ac˚ss
(
nfs
, 
¨gv
[3], 
Êags
)) {

88 
	`Ârötf
(
°dîr
, "FailedÅoáccess(): %s\n",

89 
	`nfs_gë_îr‹
(
nfs
));

90 
ªt
 = 1;

91 
föished
;

94 
föished
:

95 
	`nfs_de°roy_uæ
(
uæ
);

96 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

98  
ªt
;

99 
	}
}

	@tests/prog_access2.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_access <url> <cwd> <path> <flags>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

45 
Êags
 = 0;

47 i‡(
¨gc
 != 5) {

48 
	`ußge
();

51 i‡(
	`°r°r
(
¨gv
[4], "R_OK")) {

52 
Êags
 |
R_OK
;

54 i‡(
	`°r°r
(
¨gv
[4], "W_OK")) {

55 
Êags
 |
W_OK
;

57 i‡(
	`°r°r
(
¨gv
[4], "X_OK")) {

58 
Êags
 |
X_OK
;

61 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

62 i‡(
nfs
 =
NULL
) {

63 
	`¥ötf
("failedÅo init context\n");

64 
	`exô
(1);

67 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

68 i‡(
uæ
 =
NULL
) {

69 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

70 
	`exô
(1);

73 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

74 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

75 
	`nfs_gë_îr‹
(
nfs
));

76 
ªt
 = 1;

77 
föished
;

80 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

81 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

82 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

83 
ªt
 = 1;

84 
föished
;

87 i‡((
ªt
 = 
	`nfs_ac˚ss2
(
nfs
, 
¨gv
[3])Ë!
Êags
) {

88 
	`Ârötf
(
°dîr
, "access2() failed. Received mode %08x but "

89 "ex≥˘ed %08x: %s\n", 
ªt
, 
Êags
,

90 
	`nfs_gë_îr‹
(
nfs
));

91 
ªt
 = 1;

92 
föished
;

94 
ªt
 = 0;

96 
föished
:

97 
	`nfs_de°roy_uæ
(
uæ
);

98 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

100  
ªt
;

101 
	}
}

	@tests/prog_chmod.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_chmod <url> <cwd> <path> <mode(octal)>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
mode
;

48 i‡(
¨gc
 != 5) {

49 
	`ußge
();

52 
mode
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 8);

54 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

55 i‡(
nfs
 =
NULL
) {

56 
	`¥ötf
("failedÅo init context\n");

57 
	`exô
(1);

60 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

61 i‡(
uæ
 =
NULL
) {

62 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

63 
	`exô
(1);

66 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

67 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

68 
	`nfs_gë_îr‹
(
nfs
));

69 
ªt
 = 1;

70 
föished
;

73 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

74 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

75 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

76 
ªt
 = 1;

77 
föished
;

80 i‡(
	`nfs_chmod
(
nfs
, 
¨gv
[3], 
mode
)) {

81 
	`Ârötf
(
°dîr
, "FailedÅo chmod(): %s\n",

82 
	`nfs_gë_îr‹
(
nfs
));

83 
ªt
 = 1;

84 
föished
;

87 
föished
:

88 
	`nfs_de°roy_uæ
(
uæ
);

89 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

91  
ªt
;

92 
	}
}

	@tests/prog_chown.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_chown <url> <cwd> <path> <uid> <gid>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
uid
, 
gid
;

48 i‡(
¨gc
 != 6) {

49 
	`ußge
();

52 
uid
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 10);

53 
gid
 = 
	`°πﬁ
(
¨gv
[5], 
NULL
, 10);

55 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

56 i‡(
nfs
 =
NULL
) {

57 
	`¥ötf
("failedÅo init context\n");

58 
	`exô
(1);

61 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

62 i‡(
uæ
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

64 
	`exô
(1);

67 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

68 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

69 
	`nfs_gë_îr‹
(
nfs
));

70 
ªt
 = 1;

71 
föished
;

74 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

75 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

76 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

77 
ªt
 = 1;

78 
föished
;

81 i‡(
	`nfs_chown
(
nfs
, 
¨gv
[3], 
uid
, 
gid
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo chown(): %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
ªt
 = 1;

85 
föished
;

88 
föished
:

89 
	`nfs_de°roy_uæ
(
uæ
);

90 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

92  
ªt
;

93 
	}
}

	@tests/prog_create.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_create <url> <cwd> <path> <mode(octal)>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
mode
;

47 
nfsfh
 *
fh
;

49 i‡(
¨gc
 != 5) {

50 
	`ußge
();

53 
mode
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 8);

55 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

56 i‡(
nfs
 =
NULL
) {

57 
	`¥ötf
("failedÅo init context\n");

58 
	`exô
(1);

61 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

62 i‡(
uæ
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

64 
	`exô
(1);

67 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

68 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

69 
	`nfs_gë_îr‹
(
nfs
));

70 
ªt
 = 1;

71 
föished
;

74 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

75 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

76 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

77 
ªt
 = 1;

78 
föished
;

81 i‡(
	`nfs_¸ót
(
nfs
, 
¨gv
[3], 
mode
, &
fh
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo creat(): %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
ªt
 = 1;

85 
föished
;

88 i‡(
	`nfs_˛o£
(
nfs
, 
fh
)) {

89 
	`Ârötf
(
°dîr
, "FailedÅo close(): %s\n",

90 
	`nfs_gë_îr‹
(
nfs
));

91 
ªt
 = 1;

92 
föished
;

95 
föished
:

96 
	`nfs_de°roy_uæ
(
uæ
);

97 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

99  
ªt
;

100 
	}
}

	@tests/prog_fchmod.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_fchmod <url> <cwd> <path> <mode(octal)>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
mode
;

47 
nfsfh
 *
fh
;

49 i‡(
¨gc
 != 5) {

50 
	`ußge
();

53 
mode
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 8);

55 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

56 i‡(
nfs
 =
NULL
) {

57 
	`¥ötf
("failedÅo init context\n");

58 
	`exô
(1);

61 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

62 i‡(
uæ
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

64 
	`exô
(1);

67 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

68 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

69 
	`nfs_gë_îr‹
(
nfs
));

70 
ªt
 = 1;

71 
föished
;

74 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

75 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

76 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

77 
ªt
 = 1;

78 
föished
;

81 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3], 
O_RDWR
, &
fh
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo open file : %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
	`exô
(1);

87 i‡(
	`nfs_fchmod
(
nfs
, 
fh
, 
mode
)) {

88 
	`Ârötf
(
°dîr
, "FailedÅo fchmod(): %s\n",

89 
	`nfs_gë_îr‹
(
nfs
));

90 
ªt
 = 1;

91 
föished
;

94 i‡(
	`nfs_˛o£
(
nfs
, 
fh
)) {

95 
	`Ârötf
(
°dîr
, "FailedÅo close(): %s\n",

96 
	`nfs_gë_îr‹
(
nfs
));

97 
ªt
 = 1;

98 
föished
;

101 
föished
:

102 
	`nfs_de°roy_uæ
(
uæ
);

103 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

105  
ªt
;

106 
	}
}

	@tests/prog_fchown.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_fchown <url> <cwd> <path> <uid> <gid>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
uid
, 
gid
;

47 
nfsfh
 *
fh
;

49 i‡(
¨gc
 != 6) {

50 
	`ußge
();

53 
uid
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 10);

54 
gid
 = 
	`°πﬁ
(
¨gv
[5], 
NULL
, 10);

56 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

57 i‡(
nfs
 =
NULL
) {

58 
	`¥ötf
("failedÅo init context\n");

59 
	`exô
(1);

62 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

63 i‡(
uæ
 =
NULL
) {

64 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

65 
	`exô
(1);

68 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

69 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

70 
	`nfs_gë_îr‹
(
nfs
));

71 
ªt
 = 1;

72 
föished
;

75 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

76 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

77 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

78 
ªt
 = 1;

79 
föished
;

82 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3], 
O_RDWR
, &
fh
)) {

83 
	`Ârötf
(
°dîr
, "FailedÅo open file : %s\n",

84 
	`nfs_gë_îr‹
(
nfs
));

85 
	`exô
(1);

88 i‡(
	`nfs_fchown
(
nfs
, 
fh
, 
uid
, 
gid
)) {

89 
	`Ârötf
(
°dîr
, "FailedÅo fchown(): %s\n",

90 
	`nfs_gë_îr‹
(
nfs
));

91 
ªt
 = 1;

92 
föished
;

95 i‡(
	`nfs_˛o£
(
nfs
, 
fh
)) {

96 
	`Ârötf
(
°dîr
, "FailedÅo close(): %s\n",

97 
	`nfs_gë_îr‹
(
nfs
));

98 
ªt
 = 1;

99 
föished
;

102 
föished
:

103 
	`nfs_de°roy_uæ
(
uæ
);

104 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

106  
ªt
;

107 
	}
}

	@tests/prog_fstat.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_fstat <url> <cwd> <path>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
;

42 
nfsfh
 *nfsfh;

43 
nfs_uæ
 *
uæ
;

44 
nfs_°©_64
 
°
;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

57 i‡(
uæ
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

59 
	`exô
(1);

62 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

63 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

64 
	`nfs_gë_îr‹
(
nfs
));

65 
	`exô
(1);

68 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

69 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

70 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

71 
	`exô
(1);

74 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3], 
O_RDONLY
, &
nfsfh
)) {

75 
	`Ârötf
(
°dîr
, "FailedÅo open file : %s\n",

76 
	`nfs_gë_îr‹
(
nfs
));

77 
	`exô
(1);

80 i‡(
	`nfs_f°©64
(
nfs
, 
nfsfh
, &
°
)) {

81 
	`Ârötf
(
°dîr
, "FailedÅo stat file : %s\n",

82 
	`nfs_gë_îr‹
(
nfs
));

83 
	`exô
(1);

86 
	`¥ötf
("nfs_öo:%" 
PRIu64
 "\n", 
°
.
nfs_öo
);

87 
	`¥ötf
("nfs_mode:%" 
PRIo64
 "\n", 
°
.
nfs_mode
);

88 
	`¥ötf
("nfs_∆ök:%" 
PRIu64
 "\n", 
°
.
nfs_∆ök
);

89 
	`¥ötf
("nfs_uid:%" 
PRIu64
 "\n", 
°
.
nfs_uid
);

90 
	`¥ötf
("nfs_gid:%" 
PRIu64
 "\n", 
°
.
nfs_gid
);

91 
	`¥ötf
("nfs_size:%" 
PRIu64
 "\n", 
°
.
nfs_size
);

92 
	`¥ötf
("nfs_©ime:%" 
PRIu64
 "\n", 
°
.
nfs_©ime
);

93 
	`¥ötf
("nfs_mtime:%" 
PRIu64
 "\n", 
°
.
nfs_mtime
);

94 
	`¥ötf
("nfs_˘ime:%" 
PRIu64
 "\n", 
°
.
nfs_˘ime
);

96 
	`nfs_de°roy_uæ
(
uæ
);

97 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

98 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

101 
	}
}

	@tests/prog_ftruncate.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/ty≥s.h
>

30 
	~"libnfs.h
"

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, "Usage:Örog_ftruncate <url> <cwd> <path> <offset>\n");

35 
	`exô
(1);

36 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
nfs_c⁄ãxt
 *
nfs
;

41 
nfsfh
 *nfsfh;

42 
nfs_uæ
 *
uæ
;

43 
uöt64_t
 
Àngth
;

45 i‡(
¨gc
 != 5) {

46 
	`ußge
();

49 
Àngth
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 10);

51 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

52 i‡(
nfs
 =
NULL
) {

53 
	`¥ötf
("failedÅo init context\n");

54 
	`exô
(1);

57 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

58 i‡(
uæ
 =
NULL
) {

59 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

60 
	`exô
(1);

63 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

64 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

65 
	`nfs_gë_îr‹
(
nfs
));

66 
	`exô
(1);

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
	`exô
(1);

75 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3], 
O_WRONLY
, &
nfsfh
)) {

76 
	`Ârötf
(
°dîr
, "FailedÅo open file : %s\n",

77 
	`nfs_gë_îr‹
(
nfs
));

78 
	`exô
(1);

81 i‡(
	`nfs_·runˇã
(
nfs
, 
nfsfh
, 
Àngth
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo ftruncate file : %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
	`exô
(1);

87 
	`nfs_de°roy_uæ
(
uæ
);

88 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

89 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

92 
	}
}

	@tests/prog_lchmod.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_lchmod <url> <cwd> <path> <mode(octal)>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
mode
;

48 i‡(
¨gc
 != 5) {

49 
	`ußge
();

52 
mode
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 8);

54 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

55 i‡(
nfs
 =
NULL
) {

56 
	`¥ötf
("failedÅo init context\n");

57 
	`exô
(1);

60 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

61 i‡(
uæ
 =
NULL
) {

62 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

63 
	`exô
(1);

66 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

67 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

68 
	`nfs_gë_îr‹
(
nfs
));

69 
ªt
 = 1;

70 
föished
;

73 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

74 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

75 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

76 
ªt
 = 1;

77 
föished
;

80 i‡(
	`nfs_lchmod
(
nfs
, 
¨gv
[3], 
mode
)) {

81 
	`Ârötf
(
°dîr
, "FailedÅoÜchmod(): %s\n",

82 
	`nfs_gë_îr‹
(
nfs
));

83 
ªt
 = 1;

84 
föished
;

87 
föished
:

88 
	`nfs_de°roy_uæ
(
uæ
);

89 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

91  
ªt
;

92 
	}
}

	@tests/prog_lchown.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_lchown <url> <cwd> <path> <uid> <gid>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
uid
, 
gid
;

48 i‡(
¨gc
 != 6) {

49 
	`ußge
();

52 
uid
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 10);

53 
gid
 = 
	`°πﬁ
(
¨gv
[5], 
NULL
, 10);

55 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

56 i‡(
nfs
 =
NULL
) {

57 
	`¥ötf
("failedÅo init context\n");

58 
	`exô
(1);

61 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

62 i‡(
uæ
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

64 
	`exô
(1);

67 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

68 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

69 
	`nfs_gë_îr‹
(
nfs
));

70 
ªt
 = 1;

71 
föished
;

74 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

75 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

76 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

77 
ªt
 = 1;

78 
föished
;

81 i‡(
	`nfs_lchown
(
nfs
, 
¨gv
[3], 
uid
, 
gid
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅoÜchown(): %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
ªt
 = 1;

85 
föished
;

88 
föished
:

89 
	`nfs_de°roy_uæ
(
uæ
);

90 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

92  
ªt
;

93 
	}
}

	@tests/prog_link.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_link <url> <cwd> <oldpath> <newpath>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 5) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

57 i‡(
uæ
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

59 
	`exô
(1);

62 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

63 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

64 
	`nfs_gë_îr‹
(
nfs
));

65 
ªt
 = 1;

66 
föished
;

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
ªt
 = 1;

73 
föished
;

76 i‡(
	`nfs_lök
(
nfs
, 
¨gv
[3],árgv[4])) {

77 
	`Ârötf
(
°dîr
, "FailedÅoÜink: %s\n",

78 
	`nfs_gë_îr‹
(
nfs
));

79 
ªt
 = 1;

80 
föished
;

83 
föished
:

84 
	`nfs_de°roy_uæ
(
uæ
);

85 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

87  
ªt
;

88 
	}
}

	@tests/prog_lseek.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_lseek <url> <cwd> <path>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
;

42 
nfsfh
 *nfsfh;

43 
nfs_uæ
 *
uæ
;

44 
nfs_°©_64
 
°
;

45 
uöt64_t
 
cuºít
;

47 i‡(
¨gc
 != 4) {

48 
	`ußge
();

51 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

52 i‡(
nfs
 =
NULL
) {

53 
	`¥ötf
("failedÅo init context\n");

54 
	`exô
(1);

57 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

58 i‡(
uæ
 =
NULL
) {

59 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

60 
	`exô
(1);

63 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

64 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

65 
	`nfs_gë_îr‹
(
nfs
));

66 
	`exô
(1);

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
	`exô
(1);

75 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3], 
O_RDONLY
, &
nfsfh
)) {

76 
	`Ârötf
(
°dîr
, "FailedÅo open file : %s\n",

77 
	`nfs_gë_îr‹
(
nfs
));

78 
	`exô
(1);

81 i‡(
	`nfs_f°©64
(
nfs
, 
nfsfh
, &
°
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo stat file : %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
	`exô
(1);

87 
	`¥ötf
("Fûêsize:%" 
PRIu64
 "\n", 
°
.
nfs_size
);

89 
	`¥ötf
("TryÜseek(SEEK_SET, 512)\n");

90 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, 512, 
SEEK_SET
, &
cuºít
)) {

91 
	`Ârötf
(
°dîr
, "lseek failed: %s\n",

92 
	`nfs_gë_îr‹
(
nfs
));

93 
	`exô
(1);

95 i‡(
cuºít
 != 512) {

96 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

97 "Ex≥˘ed %d buàgŸ %" 
PRIu64
 "\n", 512, 
cuºít
);

98 
	`exô
(1);

101 
	`¥ötf
("TryÜseek(SEEK_CUR, 0)\n");

102 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, 0, 
SEEK_CUR
, &
cuºít
)) {

103 
	`Ârötf
(
°dîr
, "lseek failed: %s\n",

104 
	`nfs_gë_îr‹
(
nfs
));

105 
	`exô
(1);

107 i‡(
cuºít
 != 512) {

108 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

109 "Ex≥˘ed %d buàgŸ %" 
PRIu64
 "\n", 512, 
cuºít
);

110 
	`exô
(1);

113 
	`¥ötf
("TryÜseek(SEEK_CUR, 4)\n");

114 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, 4, 
SEEK_CUR
, &
cuºít
)) {

115 
	`Ârötf
(
°dîr
, "lseek failed: %s\n",

116 
	`nfs_gë_îr‹
(
nfs
));

117 
	`exô
(1);

119 i‡(
cuºít
 != 516) {

120 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

121 "Ex≥˘ed %d buàgŸ %" 
PRIu64
 "\n", 516, 
cuºít
);

122 
	`exô
(1);

125 
	`¥ötf
("TryÜseek(SEEK_CUR, -16)\n");

126 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, -16, 
SEEK_CUR
, &
cuºít
)) {

127 
	`Ârötf
(
°dîr
, "lseek failed: %s\n",

128 
	`nfs_gë_îr‹
(
nfs
));

129 
	`exô
(1);

131 i‡(
cuºít
 != 500) {

132 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

133 "Ex≥˘ed %d buàgŸ %" 
PRIu64
 "\n", 500, 
cuºít
);

134 
	`exô
(1);

137 
	`¥ötf
("TryÜseek(SEEK_CUR, -500)\n");

138 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, -500, 
SEEK_CUR
, &
cuºít
)) {

139 
	`Ârötf
(
°dîr
, "lseek failed: %s\n",

140 
	`nfs_gë_îr‹
(
nfs
));

141 
	`exô
(1);

143 i‡(
cuºít
 != 0) {

144 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

145 "Ex≥˘ed %d buàgŸ %" 
PRIu64
 "\n", 0, 
cuºít
);

146 
	`exô
(1);

149 
	`¥ötf
("TryÜseek(SEEK_CUR, -1)\n");

150 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, -1, 
SEEK_CUR
, &
cuºít
) >= 0) {

151 
	`Ârötf
(
°dîr
, "lseek should have failed.\n");

152 
	`exô
(1);

154 i‡(
cuºít
 != 0) {

155 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

156 "Ex≥˘ed %d buàgŸ %" 
PRIu64
 "\n", 0, 
cuºít
);

157 
	`exô
(1);

160 
	`¥ötf
("TryÜseek(SEEK_END, -500)\n");

161 i‡(
	`nfs_l£ek
(
nfs
, 
nfsfh
, -500, 
SEEK_END
, &
cuºít
)) {

162 
	`Ârötf
(
°dîr
, "lseek failed: %s\n",

163 
	`nfs_gë_îr‹
(
nfs
));

164 
	`exô
(1);

166 i‡(
cuºít
 !
°
.
nfs_size
 - 500) {

167 
	`Ârötf
(
°dîr
, "lseekÑeturned wrong current offset."

168 "Ex≥˘ed %" 
PRIu64
 " but got %" PRIu64 "\n",

169 
°
.
nfs_size
 - 500, 
cuºít
);

170 
	`exô
(1);

173 
	`nfs_de°roy_uæ
(
uæ
);

174 
	`nfs_˛o£
(
nfs
, 
nfsfh
);

175 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

178 
	}
}

	@tests/prog_lstat.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_lstat <url> <cwd> <path>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

42 
nfs_uæ
 *
uæ
 = 
NULL
;

43 
nfs_°©_64
 
°
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
	`nfs_£t_timeout
(
nfs
, 1000);

58 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

59 i‡(
uæ
 =
NULL
) {

60 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

61 
	`exô
(1);

64 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

65 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

66 
	`nfs_gë_îr‹
(
nfs
));

67 
ªt
 = 1;

68 
föished
;

71 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

72 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

73 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

74 
ªt
 = 1;

75 
föished
;

78 i‡(
	`nfs_l°©64
(
nfs
, 
¨gv
[3], &
°
)) {

79 
	`Ârötf
(
°dîr
, "FailedÅoÜstat file : %s\n",

80 
	`nfs_gë_îr‹
(
nfs
));

81 
ªt
 = 1;

82 
föished
;

85 
	`¥ötf
("nfs_öo:%" 
PRIu64
 "\n", 
°
.
nfs_öo
);

86 
	`¥ötf
("nfs_mode:%" 
PRIo64
 "\n", 
°
.
nfs_mode
);

87 
	`¥ötf
("nfs_∆ök:%" 
PRIu64
 "\n", 
°
.
nfs_∆ök
);

88 
	`¥ötf
("nfs_uid:%" 
PRIu64
 "\n", 
°
.
nfs_uid
);

89 
	`¥ötf
("nfs_gid:%" 
PRIu64
 "\n", 
°
.
nfs_gid
);

90 
	`¥ötf
("nfs_size:%" 
PRIu64
 "\n", 
°
.
nfs_size
);

91 
	`¥ötf
("nfs_©ime:%" 
PRIu64
 "\n", 
°
.
nfs_©ime
);

92 
	`¥ötf
("nfs_mtime:%" 
PRIu64
 "\n", 
°
.
nfs_mtime
);

93 
	`¥ötf
("nfs_˘ime:%" 
PRIu64
 "\n", 
°
.
nfs_˘ime
);

95 
föished
:

96 
	`nfs_de°roy_uæ
(
uæ
);

97 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

99  
ªt
;

100 
	}
}

	@tests/prog_mkdir.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_mkdir <url> <cwd> <path>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

57 i‡(
uæ
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

59 
	`exô
(1);

62 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

63 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

64 
	`nfs_gë_îr‹
(
nfs
));

65 
ªt
 = 1;

66 
föished
;

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
ªt
 = 1;

73 
föished
;

76 i‡(
	`nfs_mkdú
(
nfs
, 
¨gv
[3])) {

77 
	`Ârötf
(
°dîr
, "FailedÅo mkdir: %s\n",

78 
	`nfs_gë_îr‹
(
nfs
));

79 
ªt
 = 1;

80 
föished
;

83 
föished
:

84 
	`nfs_de°roy_uæ
(
uæ
);

85 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

87  
ªt
;

88 
	}
}

	@tests/prog_mknod.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_mknod <url> <cwd> <path> <mode(octal)>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
mode
, 
dev
;

48 i‡(
¨gc
 != 6) {

49 
	`ußge
();

52 
mode
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 8);

53 
dev
 = 
	`°πﬁ
(
¨gv
[5], 
NULL
, 16);

55 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

56 i‡(
nfs
 =
NULL
) {

57 
	`¥ötf
("failedÅo init context\n");

58 
	`exô
(1);

61 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

62 i‡(
uæ
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

64 
	`exô
(1);

67 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

68 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

69 
	`nfs_gë_îr‹
(
nfs
));

70 
ªt
 = 1;

71 
föished
;

74 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

75 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

76 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

77 
ªt
 = 1;

78 
föished
;

81 i‡(
	`nfs_mknod
(
nfs
, 
¨gv
[3], 
mode
, 
dev
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo unlink: %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
ªt
 = 1;

85 
föished
;

88 
föished
:

89 
	`nfs_de°roy_uæ
(
uæ
);

90 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

92  
ªt
;

93 
	}
}

	@tests/prog_mount.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_mount <url>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

42 
nfs_uæ
 *
uæ
 = 
NULL
;

43 
ªt
 = 0;

45 i‡(
¨gc
 != 2) {

46 
	`ußge
();

49 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

50 i‡(
nfs
 =
NULL
) {

51 
	`¥ötf
("failedÅo init context\n");

52 
	`exô
(1);

55 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

56 i‡(
uæ
 =
NULL
) {

57 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

58 
	`exô
(1);

61 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

62 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

63 
	`nfs_gë_îr‹
(
nfs
));

64 
ªt
 = 1;

65 
föished
;

68 
föished
:

69 
	`nfs_de°roy_uæ
(
uæ
);

70 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

72  
ªt
;

73 
	}
}

	@tests/prog_open_read.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_open_read <url> <cwd> <path> <flags>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
Êags
 = 0, 
cou¡
, 
ªs
, 
pos
;

47 
nfsfh
 *
fh
;

48 
buf
[1024];

50 i‡(
¨gc
 != 5) {

51 
	`ußge
();

54 i‡(
	`°r°r
(
¨gv
[4], "O_RDONLY")) {

55 
Êags
 |
O_RDONLY
;

57 i‡(
	`°r°r
(
¨gv
[4], "O_RDWR")) {

58 
Êags
 |
O_RDWR
;

60 i‡(
	`°r°r
(
¨gv
[4], "O_WRONLY")) {

61 
Êags
 |
O_WRONLY
;

63 i‡(
	`°r°r
(
¨gv
[4], "O_NOFOLLOW")) {

64 
Êags
 |
O_NOFOLLOW
;

66 i‡(
	`°r°r
(
¨gv
[4], "O_APPEND")) {

67 
Êags
 |
O_APPEND
;

69 i‡(
	`°r°r
(
¨gv
[4], "O_TRUNC")) {

70 
Êags
 |
O_TRUNC
;

73 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

74 i‡(
nfs
 =
NULL
) {

75 
	`¥ötf
("failedÅo init context\n");

76 
	`exô
(1);

79 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

80 i‡(
uæ
 =
NULL
) {

81 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

82 
	`exô
(1);

85 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

86 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

87 
	`nfs_gë_îr‹
(
nfs
));

88 
ªt
 = 1;

89 
föished
;

92 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

93 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

94 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

95 
ªt
 = 1;

96 
föished
;

99 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3],
Êags
, &
fh
)) {

100 
	`Ârötf
(
°dîr
, "FailedÅo open(): %s\n",

101 
	`nfs_gë_îr‹
(
nfs
));

102 
ªt
 = 1;

103 
föished
;

106 
cou¡
 = 
	`nfs_ªad
(
nfs
, 
fh
, 
buf
, (buf));

107 i‡(
cou¡
 < 0) {

108 
	`Ârötf
(
°dîr
, "FailedÅoÑead(): %s\n",

109 
	`nfs_gë_îr‹
(
nfs
));

110 
ªt
 = 1;

111 
föished
;

114 
pos
 = 0;

115 
cou¡
) {

116 
ªs
 = 
	`wrôe
(1, &
buf
[
pos
], 
cou¡
);

117 i‡(
ªs
 < 0) {

118 
	`Ârötf
(
°dîr
, "write() failed\n");

119 
ªt
 = 1;

120 
föished
;

122 
cou¡
 -
ªs
;

123 
pos
 +
ªs
;

126 i‡(
	`nfs_˛o£
(
nfs
, 
fh
)) {

127 
	`Ârötf
(
°dîr
, "FailedÅo close(): %s\n",

128 
	`nfs_gë_îr‹
(
nfs
));

129 
ªt
 = 1;

130 
föished
;

133 
föished
:

134 
	`nfs_de°roy_uæ
(
uæ
);

135 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

137  
ªt
;

138 
	}
}

	@tests/prog_open_write.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_open_write <url> <cwd> <path> <flags>"

38 
	`exô
(1);

39 
	}
}

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

44 
nfs_uæ
 *
uæ
 = 
NULL
;

45 
ªt
 = 0;

46 
Êags
 = 0, 
cou¡
;

47 
nfsfh
 *
fh
;

49 i‡(
¨gc
 != 6) {

50 
	`ußge
();

53 i‡(
	`°r°r
(
¨gv
[4], "O_RDONLY")) {

54 
Êags
 |
O_RDONLY
;

56 i‡(
	`°r°r
(
¨gv
[4], "O_RDWR")) {

57 
Êags
 |
O_RDWR
;

59 i‡(
	`°r°r
(
¨gv
[4], "O_WRONLY")) {

60 
Êags
 |
O_WRONLY
;

62 i‡(
	`°r°r
(
¨gv
[4], "O_NOFOLLOW")) {

63 
Êags
 |
O_NOFOLLOW
;

65 i‡(
	`°r°r
(
¨gv
[4], "O_APPEND")) {

66 
Êags
 |
O_APPEND
;

68 i‡(
	`°r°r
(
¨gv
[4], "O_TRUNC")) {

69 
Êags
 |
O_TRUNC
;

71 i‡(
	`°r°r
(
¨gv
[4], "O_CREAT")) {

72 
Êags
 |
O_CREAT
;

74 i‡(
	`°r°r
(
¨gv
[4], "O_EXCL")) {

75 
Êags
 |
O_EXCL
;

78 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

79 i‡(
nfs
 =
NULL
) {

80 
	`¥ötf
("failedÅo init context\n");

81 
	`exô
(1);

84 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

85 i‡(
uæ
 =
NULL
) {

86 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

87 
	`exô
(1);

90 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

91 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

92 
	`nfs_gë_îr‹
(
nfs
));

93 
ªt
 = 1;

94 
föished
;

97 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

98 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

99 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

100 
ªt
 = 1;

101 
föished
;

104 i‡(
	`nfs_›í
(
nfs
, 
¨gv
[3],
Êags
, &
fh
)) {

105 
	`Ârötf
(
°dîr
, "FailedÅo open(): %s\n",

106 
	`nfs_gë_îr‹
(
nfs
));

107 
ªt
 = 1;

108 
föished
;

111 i‡(
	`°æí
(
¨gv
[5]) > 0) {

112 
cou¡
 = 
	`nfs_wrôe
(
nfs
, 
fh
, 
¨gv
[5], 
	`°æí
(argv[5]));

113 i‡(
cou¡
 < 0) {

114 
	`Ârötf
(
°dîr
, "FailedÅo write(): %s\n",

115 
	`nfs_gë_îr‹
(
nfs
));

116 
ªt
 = 1;

117 
föished
;

121 i‡(
	`nfs_˛o£
(
nfs
, 
fh
)) {

122 
	`Ârötf
(
°dîr
, "FailedÅo close(): %s\n",

123 
	`nfs_gë_îr‹
(
nfs
));

124 
ªt
 = 1;

125 
föished
;

128 
föished
:

129 
	`nfs_de°roy_uæ
(
uæ
);

130 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

132  
ªt
;

133 
	}
}

	@tests/prog_opendir.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_opendir <url> <cwd> <path>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

42 
nfs_uæ
 *
uæ
 = 
NULL
;

43 
nfsdúít
 *nfsdirent;

44 
nfsdú
 *nfsdir;

45 
ªt
 = 0;

47 i‡(
¨gc
 != 4) {

48 
	`ußge
();

51 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

52 i‡(
nfs
 =
NULL
) {

53 
	`¥ötf
("failedÅo init context\n");

54 
	`exô
(1);

57 
	`nfs_£t_timeout
(
nfs
, 300);

59 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

60 i‡(
uæ
 =
NULL
) {

61 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

62 
	`exô
(1);

65 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

66 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

67 
	`nfs_gë_îr‹
(
nfs
));

68 
ªt
 = 1;

69 
föished
;

72 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

73 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

74 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

75 
ªt
 = 1;

76 
föished
;

79 i‡(
	`nfs_›ídú
(
nfs
, 
¨gv
[3], &
nfsdú
)) {

80 
	`Ârötf
(
°dîr
, "FailedÅo opendir() : %s\n",

81 
	`nfs_gë_îr‹
(
nfs
));

82 
ªt
 = 1;

83 
föished
;

86 (
nfsdúít
 = 
	`nfs_ªaddú
(
nfs
, 
nfsdú
)Ë!
NULL
) {

87 i‡(!
	`°rcmp
(
nfsdúít
->
«me
, ".") || !strcmp(nfsdirent->name, "..")) {

90 
	`¥ötf
("%s\n", 
nfsdúít
->
«me
);

92 
	`nfs_˛o£dú
(
nfs
, 
nfsdú
);

94 
föished
:

95 
	`nfs_de°roy_uæ
(
uæ
);

96 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

98  
ªt
;

99 
	}
}

	@tests/prog_read_update_pos.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_write_update_pos <url> <file>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

45 
nfsfh
 *
fh
;

46 
uöt64_t
 
pos
;

47 
buf
[1024];

48 
nfs_°©_64
 
°
;

50 i‡(
¨gc
 != 2) {

51 
	`ußge
();

54 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

55 i‡(
nfs
 =
NULL
) {

56 
	`¥ötf
("failedÅo init context\n");

57 
	`exô
(1);

60 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

61 i‡(
uæ
 =
NULL
) {

62 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

63 
	`exô
(1);

66 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

67 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

68 
	`nfs_gë_îr‹
(
nfs
));

69 
ªt
 = 1;

70 
föished
;

73 i‡(
	`nfs_›í
(
nfs
, 
uæ
->
fûe
, 
O_RDONLY
, &
fh
)) {

74 
	`Ârötf
(
°dîr
, "FailedÅo open(): %s\n",

75 
	`nfs_gë_îr‹
(
nfs
));

76 
ªt
 = 1;

77 
föished
;

80 i‡(
	`nfs_f°©64
(
nfs
, 
fh
, &
°
)) {

81 
	`Ârötf
(
°dîr
, "FailedÅo fstat64(): %s\n",

82 
	`nfs_gë_îr‹
(
nfs
));

83 
ªt
 = 1;

84 
föished
;

86 i‡(
	`nfs_l£ek
(
nfs
, 
fh
, -3, 
SEEK_END
, &
pos
) < 0) {

87 
	`Ârötf
(
°dîr
, "FailedÅoÜseek(): %s\n",

88 
	`nfs_gë_îr‹
(
nfs
));

89 
ªt
 = 1;

90 
föished
;

92 i‡(
pos
 !
°
.
nfs_size
 - 3) {

93 
	`Ârötf
(
°dîr
, "lseek()Ñeturned wrongÖos\n");

94 
ªt
 = 1;

95 
föished
;

98 i‡(
	`nfs_¥ód
(
nfs
, 
fh
, 
buf
, 1, 
°
.
nfs_size
 - 3) != 1) {

99 
	`Ârötf
(
°dîr
, "pread() failedÅoÑead 1 byte: %s\n",

100 
	`nfs_gë_îr‹
(
nfs
));

101 
ªt
 = 1;

102 
föished
;

105 i‡(
	`nfs_l£ek
(
nfs
, 
fh
, 0, 
SEEK_CUR
, &
pos
) < 0) {

106 
	`Ârötf
(
°dîr
, "FailedÅoÜseek(): %s\n",

107 
	`nfs_gë_îr‹
(
nfs
));

108 
ªt
 = 1;

109 
föished
;

111 i‡(
pos
 !
°
.
nfs_size
 - 3) {

112 
	`Ârötf
(
°dîr
, "offset changedáfterÖread()\n");

113 
ªt
 = 1;

114 
föished
;

117 i‡(
	`nfs_ªad
(
nfs
, 
fh
, 
buf
, 1) != 1) {

118 
	`Ârötf
(
°dîr
, "read() failedÅoÑead 1 byte: %s\n",

119 
	`nfs_gë_îr‹
(
nfs
));

120 
ªt
 = 1;

121 
föished
;

124 i‡(
	`nfs_l£ek
(
nfs
, 
fh
, 0, 
SEEK_CUR
, &
pos
) < 0) {

125 
	`Ârötf
(
°dîr
, "FailedÅoÜseek(): %s\n",

126 
	`nfs_gë_îr‹
(
nfs
));

127 
ªt
 = 1;

128 
föished
;

130 i‡(
pos
 =
°
.
nfs_size
 - 3) {

131 
	`Ârötf
(
°dîr
, "offset didÇot changeáfterÑead()\n");

132 
ªt
 = 1;

133 
föished
;

135 i‡(
pos
 !
°
.
nfs_size
 - 2) {

136 
	`Ârötf
(
°dîr
, "offset changedÅo wrong valueáfterÑead()\n");

137 
ªt
 = 1;

138 
föished
;

141 i‡(
	`nfs_˛o£
(
nfs
, 
fh
)) {

142 
	`Ârötf
(
°dîr
, "FailedÅo close(): %s\n",

143 
	`nfs_gë_îr‹
(
nfs
));

144 
ªt
 = 1;

145 
föished
;

148 
föished
:

149 
	`nfs_de°roy_uæ
(
uæ
);

150 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

152  
ªt
;

153 
	}
}

	@tests/prog_rename.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_rename <url> <cwd> <oldpath> <newpath>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 5) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

57 i‡(
uæ
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

59 
	`exô
(1);

62 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

63 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

64 
	`nfs_gë_îr‹
(
nfs
));

65 
ªt
 = 1;

66 
föished
;

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
ªt
 = 1;

73 
föished
;

76 i‡(
	`nfs_ª«me
(
nfs
, 
¨gv
[3],árgv[4])) {

77 
	`Ârötf
(
°dîr
, "FailedÅoÑename: %s\n",

78 
	`nfs_gë_îr‹
(
nfs
));

79 
ªt
 = 1;

80 
föished
;

83 
föished
:

84 
	`nfs_de°roy_uæ
(
uæ
);

85 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

87  
ªt
;

88 
	}
}

	@tests/prog_rmdir.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_rmdir <url> <cwd> <path>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

57 i‡(
uæ
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

59 
	`exô
(1);

62 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

63 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

64 
	`nfs_gë_îr‹
(
nfs
));

65 
ªt
 = 1;

66 
föished
;

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
ªt
 = 1;

73 
föished
;

76 i‡(
	`nfs_rmdú
(
nfs
, 
¨gv
[3])) {

77 
	`Ârötf
(
°dîr
, "FailedÅoÑmdir: %s\n",

78 
	`nfs_gë_îr‹
(
nfs
));

79 
ªt
 = 1;

80 
föished
;

83 
föished
:

84 
	`nfs_de°roy_uæ
(
uæ
);

85 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

87  
ªt
;

88 
	}
}

	@tests/prog_stat.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_stat <url> <cwd> <path>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

42 
nfs_uæ
 *
uæ
 = 
NULL
;

43 
nfs_°©_64
 
°
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
	`nfs_£t_timeout
(
nfs
, 300);

58 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

59 i‡(
uæ
 =
NULL
) {

60 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

61 
	`exô
(1);

64 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

65 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

66 
	`nfs_gë_îr‹
(
nfs
));

67 
ªt
 = 1;

68 
föished
;

71 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

72 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

73 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

74 
ªt
 = 1;

75 
föished
;

78 i‡(
	`nfs_°©64
(
nfs
, 
¨gv
[3], &
°
)) {

79 
	`Ârötf
(
°dîr
, "FailedÅo stat file : %s\n",

80 
	`nfs_gë_îr‹
(
nfs
));

81 
ªt
 = 1;

82 
föished
;

85 
	`¥ötf
("nfs_öo:%" 
PRIu64
 "\n", 
°
.
nfs_öo
);

86 
	`¥ötf
("nfs_mode:%" 
PRIo64
 "\n", 
°
.
nfs_mode
);

87 
	`¥ötf
("nfs_∆ök:%" 
PRIu64
 "\n", 
°
.
nfs_∆ök
);

88 
	`¥ötf
("nfs_uid:%" 
PRIu64
 "\n", 
°
.
nfs_uid
);

89 
	`¥ötf
("nfs_gid:%" 
PRIu64
 "\n", 
°
.
nfs_gid
);

90 
	`¥ötf
("nfs_size:%" 
PRIu64
 "\n", 
°
.
nfs_size
);

91 
	`¥ötf
("nfs_©ime:%" 
PRIu64
 "\n", 
°
.
nfs_©ime
);

92 
	`¥ötf
("nfs_mtime:%" 
PRIu64
 "\n", 
°
.
nfs_mtime
);

93 
	`¥ötf
("nfs_˘ime:%" 
PRIu64
 "\n", 
°
.
nfs_˘ime
);

95 
föished
:

96 
	`nfs_de°roy_uæ
(
uæ
);

97 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

99  
ªt
;

100 
	}
}

	@tests/prog_statvfs.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©vfs.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_statvfs <url> <cwd> <path>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

42 
nfs_uæ
 *
uæ
 = 
NULL
;

43 
nfs_°©vfs_64
 
svfs
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
	`nfs_£t_timeout
(
nfs
, 300);

58 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

59 i‡(
uæ
 =
NULL
) {

60 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

61 
	`exô
(1);

64 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

65 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

66 
	`nfs_gë_îr‹
(
nfs
));

67 
ªt
 = 1;

68 
föished
;

71 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

72 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

73 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

74 
ªt
 = 1;

75 
föished
;

78 i‡(
	`nfs_°©vfs64
(
nfs
, 
¨gv
[3], &
svfs
)) {

79 
	`Ârötf
(
°dîr
, "statvfs64 failed : %s\n",

80 
	`nfs_gë_îr‹
(
nfs
));

81 
ªt
 = 1;

82 
föished
;

85 
	`¥ötf
("bsize:%" 
PRIu64
 "\n", 
svfs
.
f_bsize
);

86 
	`¥ötf
("‰size:%" 
PRIu64
 "\n", 
svfs
.
f_‰size
);

87 
	`¥ötf
("blocks:%" 
PRIu64
 "\n", 
svfs
.
f_blocks
);

88 
	`¥ötf
("b‰ì:%" 
PRIu64
 "\n", 
svfs
.
f_b‰ì
);

89 
	`¥ötf
("bavaû:%" 
PRIu64
 "\n", 
svfs
.
f_bavaû
);

90 
	`¥ötf
("fûes:%" 
PRIu64
 "\n", 
svfs
.
f_fûes
);

91 
	`¥ötf
("f‰ì:%" 
PRIu64
 "\n", 
svfs
.
f_f‰ì
);

92 
	`¥ötf
("Ávaû:%" 
PRIu64
 "\n", 
svfs
.
f_Ávaû
);

93 
	`¥ötf
("fsid:%" 
PRIu64
 "\n", 
svfs
.
f_fsid
);

94 
	`¥ötf
("«memax:%" 
PRIu64
 "\n", 
svfs
.
f_«memax
);

96 
föished
:

97 
	`nfs_de°roy_uæ
(
uæ
);

98 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

100  
ªt
;

101 
	}
}

	@tests/prog_symlink.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_symlink <url> <cwd> <target> <link>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

45 
buf
[1024];

47 i‡(
¨gc
 != 5) {

48 
	`ußge
();

51 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

52 i‡(
nfs
 =
NULL
) {

53 
	`¥ötf
("failedÅo init context\n");

54 
	`exô
(1);

57 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

58 i‡(
uæ
 =
NULL
) {

59 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

60 
	`exô
(1);

63 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

64 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

65 
	`nfs_gë_îr‹
(
nfs
));

66 
ªt
 = 1;

67 
föished
;

70 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

71 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

72 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

73 
ªt
 = 1;

74 
föished
;

77 i‡(
	`nfs_symlök
(
nfs
, 
¨gv
[3],árgv[4])) {

78 
	`Ârötf
(
°dîr
, "FailedÅo create symlink: %s\n",

79 
	`nfs_gë_îr‹
(
nfs
));

80 
ªt
 = 1;

81 
föished
;

84 
	`mem£t
(
buf
, 0, (buf));

86 i‡(
	`nfs_ªadlök
(
nfs
, 
¨gv
[4], 
buf
, (buf))) {

87 
	`Ârötf
(
°dîr
, "FailedÅoÑead symlink: %s\n",

88 
	`nfs_gë_îr‹
(
nfs
));

89 
ªt
 = 1;

90 
föished
;

93 i‡(
	`°rcmp
(
¨gv
[3], 
buf
)) {

94 
	`Ârötf
(
°dîr
, "SymlinkÅarget didÇotÑead back correctly."

96 
buf
, 
¨gv
[3]);

97 
ªt
 = 1;

98 
föished
;

101 
föished
:

102 
	`nfs_de°roy_uæ
(
uæ
);

103 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

105  
ªt
;

106 
	}
}

	@tests/prog_timeout.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

31 
	~"libnfs.h
"

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage:Örog_timeout <file>\n");

36 
	`exô
(1);

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

42 
nfs_uæ
 *
uæ
 = 
NULL
;

43 
nfs_°©_64
 
°
;

45 i‡(
¨gc
 != 2) {

46 
	`ußge
();

49 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

50 i‡(
nfs
 =
NULL
) {

51 
	`¥ötf
("failedÅo init context\n");

52 
	`exô
(1);

55 
	`nfs_£t_timeout
(
nfs
, 1000);

57 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[
¨gc
 - 1]);

58 i‡(
uæ
 =
NULL
) {

59 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

60 
	`exô
(1);

63 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

64 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

65 
	`nfs_gë_îr‹
(
nfs
));

66 
föished
;

69 i‡(
	`nfs_°©64
(
nfs
, 
uæ
->
fûe
, &
°
)) {

70 
	`Ârötf
(
°dîr
, "FailedÅo stat file : %s\n",

71 
	`nfs_gë_îr‹
(
nfs
));

72 
föished
;

75 
	`¥ötf
("nfs_öo:%" 
PRIu64
 "\n", 
°
.
nfs_öo
);

76 
	`¥ötf
("nfs_mode:%" 
PRIo64
 "\n", 
°
.
nfs_mode
);

77 
	`¥ötf
("nfs_∆ök:%" 
PRIu64
 "\n", 
°
.
nfs_∆ök
);

78 
	`¥ötf
("nfs_uid:%" 
PRIu64
 "\n", 
°
.
nfs_uid
);

79 
	`¥ötf
("nfs_gid:%" 
PRIu64
 "\n", 
°
.
nfs_gid
);

80 
	`¥ötf
("nfs_size:%" 
PRIu64
 "\n", 
°
.
nfs_size
);

81 
	`¥ötf
("nfs_©ime:%" 
PRIu64
 "\n", 
°
.
nfs_©ime
);

82 
	`¥ötf
("nfs_mtime:%" 
PRIu64
 "\n", 
°
.
nfs_mtime
);

83 
	`¥ötf
("nfs_˘ime:%" 
PRIu64
 "\n", 
°
.
nfs_˘ime
);

85 
föished
:

86 
	`nfs_de°roy_uæ
(
uæ
);

87 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

93 
	}
}

	@tests/prog_truncate.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/ty≥s.h
>

30 
	~"libnfs.h
"

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, "Usage:Örog_truncate <url> <cwd> <path> <offset>\n");

35 
	`exô
(1);

36 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
nfs_c⁄ãxt
 *
nfs
;

41 
nfs_uæ
 *
uæ
;

42 
uöt64_t
 
Àngth
;

43 
nfs_°©_64
 
°
;

45 i‡(
¨gc
 != 5) {

46 
	`ußge
();

49 
Àngth
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 10);

51 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

52 i‡(
nfs
 =
NULL
) {

53 
	`¥ötf
("failedÅo init context\n");

54 
	`exô
(1);

57 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

58 i‡(
uæ
 =
NULL
) {

59 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

60 
	`exô
(1);

63 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

64 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

65 
	`nfs_gë_îr‹
(
nfs
));

66 
	`exô
(1);

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
	`exô
(1);

75 i‡(
	`nfs_åunˇã
(
nfs
, 
¨gv
[3], 
Àngth
)) {

76 
	`Ârötf
(
°dîr
, "FailedÅoÅruncate file : %s\n",

77 
	`nfs_gë_îr‹
(
nfs
));

78 
	`exô
(1);

81 i‡(
	`nfs_°©64
(
nfs
, 
¨gv
[3], &
°
)) {

82 
	`Ârötf
(
°dîr
, "FailedÅo stat file : %s\n",

83 
	`nfs_gë_îr‹
(
nfs
));

84 
	`exô
(1);

87 i‡(
°
.
nfs_size
 !
Àngth
) {

88 
	`Ârötf
(
°dîr
, "Unexpected file size. Expected %d got %d\n",

89 ()
Àngth
, ()
°
.
nfs_size
);

90 
	`exô
(1);

93 
	`nfs_de°roy_uæ
(
uæ
);

94 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

97 
	}
}

	@tests/prog_unlink.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_unlink <url> <cwd> <path>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

46 i‡(
¨gc
 != 4) {

47 
	`ußge
();

50 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

51 i‡(
nfs
 =
NULL
) {

52 
	`¥ötf
("failedÅo init context\n");

53 
	`exô
(1);

56 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

57 i‡(
uæ
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

59 
	`exô
(1);

62 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

63 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

64 
	`nfs_gë_îr‹
(
nfs
));

65 
ªt
 = 1;

66 
föished
;

69 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

70 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

71 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

72 
ªt
 = 1;

73 
föished
;

76 i‡(
	`nfs_u∆ök
(
nfs
, 
¨gv
[3])) {

77 
	`Ârötf
(
°dîr
, "FailedÅo unlink: %s\n",

78 
	`nfs_gë_îr‹
(
nfs
));

79 
ªt
 = 1;

80 
föished
;

83 
föished
:

84 
	`nfs_de°roy_uæ
(
uæ
);

85 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

87  
ªt
;

88 
	}
}

	@tests/prog_utimes.c

19 
	#_FILE_OFFSET_BITS
 64

	)

20 
	#_GNU_SOURCE


	)

22 
	~<f˙é.h
>

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<uni°d.h
>

32 
	~"libnfs.h
"

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage:Örog_utimes <url> <cwd> <path> <atime> <mtime>\n");

37 
	`exô
(1);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

43 
nfs_uæ
 *
uæ
 = 
NULL
;

44 
ªt
 = 0;

45 
©ime
, 
mtime
;

46 
timevÆ
 
times
[2];

48 i‡(
¨gc
 != 6) {

49 
	`ußge
();

52 
©ime
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 10);

53 
mtime
 = 
	`°πﬁ
(
¨gv
[5], 
NULL
, 10);

55 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

56 i‡(
nfs
 =
NULL
) {

57 
	`¥ötf
("failedÅo init context\n");

58 
	`exô
(1);

61 
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
nfs
, 
¨gv
[1]);

62 i‡(
uæ
 =
NULL
) {

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

64 
	`exô
(1);

67 i‡(
	`nfs_mou¡
(
nfs
, 
uæ
->
£rvî
, uæ->
∑th
) != 0) {

68 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

69 
	`nfs_gë_îr‹
(
nfs
));

70 
ªt
 = 1;

71 
föished
;

74 i‡(
	`nfs_chdú
(
nfs
, 
¨gv
[2]) != 0) {

75 
	`Ârötf
(
°dîr
, "FailedÅo chdirÅo \"%s\" : %s\n",

76 
¨gv
[2], 
	`nfs_gë_îr‹
(
nfs
));

77 
ªt
 = 1;

78 
föished
;

81 
	`mem£t
(&
times
[0], 0, 2 * (
timevÆ
));

82 
times
[0].
tv_£c
 = 
©ime
;

83 
times
[1].
tv_£c
 = 
mtime
;

85 i‡(
	`nfs_utimes
(
nfs
, 
¨gv
[3], &
times
[0])) {

86 
	`Ârötf
(
°dîr
, "FailedÅoáccess(): %s\n",

87 
	`nfs_gë_îr‹
(
nfs
));

88 
ªt
 = 1;

89 
föished
;

92 
föished
:

93 
	`nfs_de°roy_uæ
(
uæ
);

94 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

96  
ªt
;

97 
	}
}

	@tls/handshake.c

19 #i‚de‡
_GNU_SOURCE


20 
	#_GNU_SOURCE


	)

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°dboﬁ.h
>

30 
	~<°rög.h
>

31 
	~<î∫o.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<√töë/t˝.h
>

34 
	~<löux/ö.h
>

36 #ifde‡
HAVE_SYS_UTSNAME_H


37 
	~<sys/ut¢ame.h
>

40 
	~<gnués/gnués.h
>

42 
	~"libnfs.h
"

43 
	~"libnfs-øw.h
"

44 
	~"libnfs-¥iv©e.h
"

45 
	~"és-¥iv©e.h
"

47 #ifde‡
_GNU_SOURCE


48 
	#GETENV
 
£cuª_gëív


	)

50 
	#GETENV
 
gëív


	)

59 
	#MIN_KERNEL_VERSION_FOR_KTLS
 "5.10"

	)

61 
boﬁ_t
 
	gglobÆ_öô_d⁄e
;

62 
gnués_˚πifiˇã_¸edítüls_t
 
	gx¸ed
;

63 
boﬁ_t
 
	gés_globÆ_öô_d⁄e
;

65 
	gés_log_Àvñ
;

67 
	$libnfs_gnués_audô_func
(
gnués_£ssi⁄_t
 
£ssi⁄
, c⁄° *
msg
)

69 
	`Ârötf
(
°dîr
, "gnué†audô [%p]: %s\n", 
£ssi⁄
, 
msg
);

70 
	}
}

72 #ifde‡
HAVE_SYS_UTSNAME_H


73 
boﬁ
 
	$kî√l_vîsi⁄_©_Àa°
(c⁄° *
mö_vîsi⁄
)

75 
ut¢ame
 utsname;

77 i‡(
	`GETENV
("KTLS_SKIP_KERNEL_VERSION_CHECK"Ë!
NULL
) {

78 
	`TLS_LOG
(2, "Skipping kernel version check, RPC-with-TLS mayÇot work!");

79  
åue
;

82 i‡(
	`u«me
(&
ut¢ame
) < 0) {

83 
	`TLS_LOG
(1, "u«me(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

84  
Ál£
;

87 
	`TLS_LOG
(2, "%†kî√»vîsi⁄ %†dëe˘ed", 
ut¢ame
.
sy¢ame
, ut¢ame.
ªÀa£
);

89 i‡(
	`°rcmp
(
ut¢ame
.
sy¢ame
, "Linux") != 0) {

90 
	`TLS_LOG
(1, "RPC-with-TLS only supported on Linux");

91  
Ál£
;

94 i‡(
	`°rvîscmp
(
ut¢ame
.
ªÀa£
, 
mö_vîsi⁄
) < 0) {

95 
	`TLS_LOG
(1, "Kernel version %sÜessÅhan min version knownÅo work %s",

96 
ut¢ame
.
ªÀa£
, 
mö_vîsi⁄
);

97  
Ál£
;

100  
åue
;

101 
	}
}

103 
boﬁ
 
	$kî√l_vîsi⁄_©_Àa°
(c⁄° *
mö_vîsi⁄
 
_U_
)

105 
	`TLS_LOG
(2, "uname()Çot found, cannotÖerform kernel min version check");

106  
åue
;

107 
	}
}

114 
	$és_globÆ_öô
(
Ωc_c⁄ãxt
 *
Ωc
)

116 c⁄° *
åu°ed_ˇ_fûe
;

117 c⁄° *
åu°ed_ˇ_dú
;

118 c⁄° *
˛õ¡_˚π_fûe
;

119 c⁄° *
˛õ¡_key_fûe
;

120 
tŸÆ_˚πs_lﬂded
 = 0;

121 
ªt
;

124 i‡(
és_globÆ_öô_d⁄e
)

134 
és_log_Àvñ
 = 
Ωc
->
debug
;

137 i‡(
	`gnués_check_vîsi⁄
("3.4.6"Ë=
NULL
) {

138 
	`TLS_LOG
(1, "tls_global_init: GnuTLS 3.4.6 orÜater isÑequired");

143 i‡(!
	`kî√l_vîsi⁄_©_Àa°
(
MIN_KERNEL_VERSION_FOR_KTLS
)) {

147 
	`gnués_globÆ_£t_log_Àvñ
(
és_log_Àvñ
);

148 
	`gnués_globÆ_£t_audô_log_fun˘i⁄
(
libnfs_gnués_audô_func
);

150 
	`TLS_LOG
(2, "Usög GnuTLS vîsi⁄ %s", 
	`gnués_check_vîsi⁄
("0.0.0"));

153 
ªt
 = 
	`gnués_globÆ_öô
();

154 i‡(
ªt
 < 0) {

155 
	`TLS_LOG
(1, "tls_global_init: gnutls_global_init() failed (%d): %s",

156 
ªt
, 
	`gnués_°ªº‹
(ret));

160 
globÆ_öô_d⁄e
 = 
TRUE
;

163 
ªt
 = 
	`gnués_˚πifiˇã_Æloˇã_¸edítüls
(&
x¸ed
);

164 i‡(
ªt
 < 0) {

165 
	`TLS_LOG
(1, "tls_global_init: gnutls_certificate_allocate_credentials() "

166 "Áûed (%d): %s", 
ªt
, 
	`gnués_°ªº‹
(ret));

167 
Áûed
;

170 
tŸÆ_˚πs_lﬂded
 = 0;

173 
ªt
 = 
	`gnués_˚πifiˇã_£t_x509_sy°em_åu°
(
x¸ed
);

174 i‡(
ªt
 < 0) {

175 
	`TLS_LOG
(1, "tls_global_init: gnutls_certificate_set_x509_system_trust() "

176 "Áûed (%d): %s", 
ªt
, 
	`gnués_°ªº‹
(ret));

182 
	`TLS_LOG
(2, "tls_global_init: Loaded %d certificate(s) from system "

183 "åu° st‹e", 
ªt
);

184 
tŸÆ_˚πs_lﬂded
 +
ªt
;

188 
åu°ed_ˇ_dú
 = 
	`GETENV
("LIBNFS_TLS_TRUSTED_CA_DIR");

189 i‡(
åu°ed_ˇ_dú
 !
NULL
) {

190 
ªt
 = 
	`gnués_˚πifiˇã_£t_x509_åu°_dú
(
x¸ed
,

191 
åu°ed_ˇ_dú
,

192 
GNUTLS_X509_FMT_PEM
);

193 i‡(
ªt
 < 0) {

194 
	`TLS_LOG
(1, "tls_global_init: gnutls_certificate_set_x509_trust_dir(%s) "

195 "Áûed (%d): %s", 
åu°ed_ˇ_dú
, 
ªt
, 
	`gnués_°ªº‹
(ret));

198 
	`TLS_LOG
(2, "tls_global_init: Loaded %d certificate(s) from dir %s",

199 
ªt
, 
åu°ed_ˇ_dú
);

200 
tŸÆ_˚πs_lﬂded
 +
ªt
;

205 
åu°ed_ˇ_fûe
 = 
	`GETENV
("LIBNFS_TLS_TRUSTED_CA_PEM");

206 i‡(
åu°ed_ˇ_fûe
 !
NULL
) {

207 
ªt
 = 
	`gnués_˚πifiˇã_£t_x509_åu°_fûe
(
x¸ed
,

208 
åu°ed_ˇ_fûe
,

209 
GNUTLS_X509_FMT_PEM
);

210 i‡(
ªt
 < 0) {

211 
	`TLS_LOG
(1, "tls_global_init: gnutls_certificate_set_x509_trust_file(%s) "

212 "Áûed (%d): %s", 
åu°ed_ˇ_fûe
, 
ªt
, 
	`gnués_°ªº‹
(ret));

215 
	`TLS_LOG
(2, "tls_global_init: Loaded %d certificate(s) from file %s",

216 
ªt
, 
åu°ed_ˇ_fûe
);

217 
tŸÆ_˚πs_lﬂded
 +
ªt
;

222 i‡(
tŸÆ_˚πs_lﬂded
 == 0) {

223 
	`TLS_LOG
(1, "tls_global_init: No CA certsÜoaded, make sure your systemÅrust "

227 
Áûed
;

234 
˛õ¡_˚π_fûe
 = 
	`GETENV
("LIBNFS_TLS_CLIENT_CERT_PEM");

235 
˛õ¡_key_fûe
 = 
	`GETENV
("LIBNFS_TLS_CLIENT_KEY_PEM");

237 i‡(
˛õ¡_˚π_fûe
 && 
˛õ¡_key_fûe
) {

238 
ªt
 = 
	`gnués_˚πifiˇã_£t_x509_key_fûe
(
x¸ed
,

239 
˛õ¡_˚π_fûe
,

240 
˛õ¡_key_fûe
,

241 
GNUTLS_X509_FMT_PEM
);

242 i‡(
ªt
 < 0) {

243 
	`TLS_LOG
(1, "tls_global_init: gnutls_certificate_set_x509_key_file(%s, %s) "

245 
˛õ¡_˚π_fûe
, 
˛õ¡_key_fûe
, 
ªt
, 
	`gnués_°ªº‹
(ret));

246 
Áûed
;

248 } i‡(
˛õ¡_˚π_fûe
) {

249 
	`TLS_LOG
(1, "tls_global_init: Client cert specified (%s) butÇot key, "

250 "mé†ˇ¬Ÿ bêu£d", 
˛õ¡_˚π_fûe
);

251 } i‡(
˛õ¡_key_fûe
) {

252 
	`TLS_LOG
(1, "tls_global_init: Client key specified (%s) butÇot cert, "

253 "mé†ˇ¬Ÿ bêu£d", 
˛õ¡_key_fûe
);

255 
	`TLS_LOG
(2, "tls_global_init: Client certánd keyÇot specified, mtls "

259 
és_globÆ_öô_d⁄e
 = 
TRUE
;

262 
Áûed
:

263 
	`gnués_˚πifiˇã_‰ì_¸edítüls
(
x¸ed
);

265 i‡(
globÆ_öô_d⁄e
) {

266 
	`gnués_globÆ_deöô
();

267 
globÆ_öô_d⁄e
 = 
FALSE
;

271 
	}
}

277 
	$és_£t_«gÀ
(
sockfd
, 
vÆ
)

279 
ßved_«gÀ
;

280 
sockÀn_t
 
Àn
 = (
ßved_«gÀ
);

282 i‡(
	`gësock›t
(
sockfd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
ßved_«gÀ
, &
Àn
) != 0) {

283 
	`TLS_LOG
(1, "getsockopt(TCP_NODELAY) failed(%d): %s",

284 
î∫o
, 
	`°ªº‹
(errno));

288 i‡(
	`£tsock›t
(
sockfd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
vÆ
, (val)) != 0) {

289 
	`TLS_LOG
(1, "setsockopt(TCP_NODELAY, %d) failed(%d): %s",

290 
vÆ
, 
î∫o
, 
	`°ªº‹
(errno));

294  
ßved_«gÀ
;

295 
	}
}

303 
és_h™dshake_°©e


304 
	$do_és_h™dshake
(
Ωc_c⁄ãxt
 *
Ωc
)

306 c⁄° 
sd
 = 
	`Ωc_gë_fd
(
Ωc
);

307 c⁄° *c⁄° 
£rvî_¢i
 = 
Ωc
->
£rvî
;

308 c⁄° *
¥i‹ôy_°rög
;

310 
gnués_£ssi⁄_t
 
£ssi⁄
 = 
Ωc
->
és_c⁄ãxt
.session;

311 
ªt
, 
ßved_«gÀ
;

313 i‡(!
és_globÆ_öô_d⁄e
) {

314 
	`TLS_LOG
(1, "do_tls_handshake:Åls_global_init()Çot done!");

316 
	`as£π
(0);

317  
TLS_HANDSHAKE_FAILED
;

321 i‡(
Ωc
->
is_udp
) {

322 
	`TLS_LOG
(1, "do_tls_handshake: UDPÅransportÇot supported");

323  
TLS_HANDSHAKE_FAILED
;

327 i‡(
£rvî_¢i
 =
NULL
) {

328 
	`TLS_LOG
(1, "do_tls_handshake: ServerÇameÇot set!");

329  
TLS_HANDSHAKE_FAILED
;

333 i‡(
sd
 == -1) {

334 
	`TLS_LOG
(1, "do_tls_handshake:Ñpc->fd is -1");

335  
TLS_HANDSHAKE_FAILED
;

338 i‡(!
Ωc
->
is_c⁄√˘ed
) {

339 
	`TLS_LOG
(1, "do_tls_handshake:Ñpc isÇot connected");

340  
TLS_HANDSHAKE_FAILED
;

346 
	`as£π
((
Ωc
->
és_c⁄ãxt
.
£ssi⁄
 =
NULL
) ||

347 (
Ωc
->
és_c⁄ãxt
.
°©e
 =
TLS_HANDSHAKE_IN_PROGRESS
));

349 i‡(
£ssi⁄
 =
NULL
) {

351 
ªt
 = 
	`gnués_öô
(&
Ωc
->
és_c⁄ãxt
.
£ssi⁄
, 
GNUTLS_CLIENT
);

352 i‡(
ªt
 < 0) {

353 
	`TLS_LOG
(1, "do_tls_handshake: gnutls_init() failed(%d): %s",

354 
ªt
, 
	`gnués_°ªº‹
(ret));

355  
TLS_HANDSHAKE_FAILED
;

358 
£ssi⁄
 = 
Ωc
->
és_c⁄ãxt
.session;

360 
ªt
 = 
	`gnués_£rvî_«me_£t
(
£ssi⁄
, 
GNUTLS_NAME_DNS
, 
£rvî_¢i
,

361 
	`°æí
(
£rvî_¢i
));

362 i‡(
ªt
 < 0) {

363 
	`TLS_LOG
(1, "do_tls_handshake: gnutls_server_name_set(%s) failed(%d): %s",

364 
£rvî_¢i
, 
ªt
, 
	`gnués_°ªº‹
(ret));

365 
h™dshake_Áûed
;

373 
¥i‹ôy_°rög
 = 
	`GETENV
("LIBNFS_TLS_GNUTLS_PRIORITY_STRING");

374 i‡(
¥i‹ôy_°rög
 =
NULL
) {

376 
¥i‹ôy_°rög
 = "PERFORMANCE:-CIPHER-ALL:+AES-128-GCM";

377 
ªt
 = 
	`gnués_¥i‹ôy_£t_dúe˘
(
£ssi⁄
, 
¥i‹ôy_°rög
, 
NULL
);

378 i‡(
ªt
 < 0) {

379 
	`TLS_LOG
(1, "do_tls_handshake: gnutls_priority_set_direct(%s) "

381 
¥i‹ôy_°rög
, 
ªt
, 
	`gnués_°ªº‹
(ret));

382 
h™dshake_Áûed
;

384 } i‡(
	`°rcmp
(
¥i‹ôy_°rög
, "default") == 0) {

385 
ªt
 = 
	`gnués_£t_deÁu…_¥i‹ôy
(
£ssi⁄
);

386 i‡(
ªt
 < 0) {

387 
	`TLS_LOG
(1, "do_tls_handshake: gnutls_set_default_priority() "

388 "Áûed(%d): %s", 
ªt
, 
	`gnués_°ªº‹
(ret));

389 
h™dshake_Áûed
;

393 
ªt
 = 
	`gnués_¥i‹ôy_£t_dúe˘
(
£ssi⁄
, 
¥i‹ôy_°rög
, 
NULL
);

394 i‡(
ªt
 < 0) {

395 
	`TLS_LOG
(1, "do_tls_handshake: gnutls_priority_set_direct(%s) "

397 
¥i‹ôy_°rög
, 
ªt
, 
	`gnués_°ªº‹
(ret));

398 
h™dshake_Áûed
;

403 
ªt
 = 
	`gnués_¸edítüls_£t
(
£ssi⁄
, 
GNUTLS_CRD_CERTIFICATE
, 
x¸ed
);

404 i‡(
ªt
 < 0) {

405 
	`TLS_LOG
(1, "do_tls_handshake: gnutls_credentials_set() failed(%d): %s",

406 
ªt
, 
	`gnués_°ªº‹
(ret));

407 
h™dshake_Áûed
;

410 
	`TLS_LOG
(2, "gnués_£ssi⁄_£t_vîify_˚π(), SNI sëÅÿ%s", 
£rvî_¢i
);

412 
	`gnués_£ssi⁄_£t_vîify_˚π
(
£ssi⁄
, 
£rvî_¢i
, 0);

413 
	`gnués_h™dshake_£t_timeout
(
£ssi⁄
, 
GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT
);

417 
	`gnués_å™•‹t_£t_öt
(
£ssi⁄
, 
sd
);

420 
ßved_«gÀ
 = 
	`és_£t_«gÀ
(
sd
, 0);

422 
ªt
 = 
	`gnués_h™dshake
(
£ssi⁄
);

423 
	`és_£t_«gÀ
(
sd
, 
ßved_«gÀ
);

425 
	`TLS_LOG
(2, "gnués_h™dshake(Ëªtu∫ed %d: %s", 
ªt
, 
	`gnués_°ªº‹
(ret));

427 i‡(
ªt
 < 0) {

428 i‡(
ªt
 =
GNUTLS_E_CERTIFICATE_VERIFICATION_ERROR
) {

430 c⁄° 
ty≥
 = 
	`gnués_˚πifiˇã_ty≥_gë
(
£ssi⁄
);

431 c⁄° 
°©us
 = 
	`gnués_£ssi⁄_gë_vîify_˚π_°©us
(
£ssi⁄
);

432 
gnués_d©um_t
 
out
;

433 c⁄° 
ªt1
 = 
	`gnués_˚πifiˇã_vîifiˇti⁄_°©us_¥öt
(

434 
°©us
, 
ty≥
, &
out
, 0);

435 i‡(
ªt1
 =
GNUTLS_E_SUCCESS
) {

436 
	`TLS_LOG
(1, "˚π vîify ouçut: %s", 
out
.
d©a
);

437 
	`gnués_‰ì
(
out
.
d©a
);

439 
	`TLS_LOG
(1, "*** H™dshakêÁûed: %s", 
	`gnués_°ªº‹
(
ªt
));

440 
h™dshake_Áûed
;

441 } i‡(
	`gnués_îr‹_is_Áèl
(
ªt
)) {

443 
	`TLS_LOG
(1, "*** H™dshakêÁûed: %s", 
	`gnués_°ªº‹
(
ªt
));

444 
h™dshake_Áûed
;

446  
TLS_HANDSHAKE_IN_PROGRESS
;

449 *
desc
 = 
	`gnués_£ssi⁄_gë_desc
(
£ssi⁄
);

451 
	`TLS_LOG
(2, "+++ Handshake successful +++");

452 
	`TLS_LOG
(2, "Sessi⁄ info: %s", 
desc
);

454 
	`gnués_‰ì
(
desc
);

458 
ªt
 = 
	`£tup_kés
(
£ssi⁄
);

459 i‡(
ªt
 < 0) {

460 
	`TLS_LOG
(1, "do_és_h™dshake: sëup_kés(ËÁûed(%d)", 
ªt
);

461 
h™dshake_Áûed
;

465 
	`gnués_deöô
(
Ωc
->
és_c⁄ãxt
.
£ssi⁄
);

466 
Ωc
->
és_c⁄ãxt
.
£ssi⁄
 = 
NULL
;

468  
TLS_HANDSHAKE_COMPLETED
;

470 
h™dshake_Áûed
:

471 
	`gnués_deöô
(
Ωc
->
és_c⁄ãxt
.
£ssi⁄
);

472 
Ωc
->
és_c⁄ãxt
.
£ssi⁄
 = 
NULL
;

473  
TLS_HANDSHAKE_FAILED
;

474 
	}
}

	@tls/ktls.c

19 #i‚de‡
_GNU_SOURCE


20 
	#_GNU_SOURCE


	)

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<°dboﬁ.h
>

30 
	~<î∫o.h
>

31 
	~<√töë/t˝.h
>

32 
	~<gnués/gnués.h
>

33 
	~<gnués/sockë.h
>

34 
	~<löux/és.h
>

36 
	~"libnfs.h
"

37 
	~"libnfs-øw.h
"

38 
	~"libnfs-¥iv©e.h
"

39 
	~"és-¥iv©e.h
"

45 #ifde‡
HAVE_GNUTLS_TRANSPORT_IS_KTLS_ENABLED


50 
boﬁ
 
	$és_is_kés_íabÀd
(
gnués_£ssi⁄_t
 
£ssi⁄
, 
boﬁ
 
ªad
)

52 c⁄° 
ªt
 = 
	`gnués_å™•‹t_is_kés_íabÀd
(
£ssi⁄
);

54 i‡(
ªt
 =
GNUTLS_E_UNIMPLEMENTED_FEATURE
) {

55 
	`TLS_LOG
(1, "gnutls version %s has kTLS support but kTLS isÇot "

57 
	`gnués_check_vîsi⁄
("0.0.0"));

58  
Ál£
;

61 i‡(
ªad
) {

62 i‡(!(
ªt
 & 
GNUTLS_KTLS_RECV
)) {

71 
	`TLS_LOG
(1, "gnutls has *NOT*ÉnabledÑeceive kTLS forÅhis session");

72  
Ál£
;

74 
	`TLS_LOG
(2, "gnutls hasÉnabledÑeceive kTLS forÅhis session");

76 i‡(!(
ªt
 & 
GNUTLS_KTLS_SEND
)) {

77 
	`TLS_LOG
(1, "gnutls has *NOT*Énabled send kTLS forÅhis session");

78  
Ál£
;

80 
	`TLS_LOG
(2, "gnutls hasÉnabled send kTLS forÅhis session");

83  
åue
;

84 
	}
}

86 
boﬁ
 
	$és_is_kés_íabÀd
(
gnués_£ssi⁄_t
 
£ssi⁄
 
_U_
, 
boﬁ
 
ªad
 _U_)

88  
Ál£
;

89 
	}
}

92 
	$kés_£tsock›t
(
sock
, 
boﬁ
 
ªad
, c⁄° *
öfo
, 
sockÀn_t
 
öfﬁí
)

94 c⁄° 
ªt
 = 
	`£tsock›t
(
sock
, 
SOL_TLS
, 
ªad
 ? 
TLS_RX
 : 
TLS_TX
, 
öfo
, 
öfﬁí
);

95 i‡(!
ªt
) {

96 
	`TLS_LOG
(2, "£tsock›t(%sËsuc˚ss", 
ªad
 ? "TLS_RX" : "TLS_TX");

100 i‡(
î∫o
 =
EBUSY
) {

108 
	`TLS_LOG
(1, "setsockopt(%s)Ñeturned(%d): %s. Treatingás success!",

109 
ªad
 ? "TLS_RX" : "TLS_TX", 
î∫o
, 
	`°ªº‹
(errno));

113 
	`TLS_LOG
(1, "setsockopt(%s) failed(%d): %s",

114 
ªad
 ? "TLS_RX" : "TLS_TX", 
î∫o
, 
	`°ªº‹
(errno));

117 
	}
}

119 
	#és12_¸y±o_öfo_AES_GCM_128
 
és12_¸y±o_öfo_´s_gcm_128


	)

120 
	#és12_¸y±o_öfo_AES_GCM_256
 
és12_¸y±o_öfo_´s_gcm_256


	)

121 
	#és12_¸y±o_öfo_AES_CCM_128
 
és12_¸y±o_öfo_´s_ccm_128


	)

122 
	#és12_¸y±o_öfo_CHACHA20_POLY1305
 
és12_¸y±o_öfo_chacha20_pﬁy1305


	)

124 
	#GENERATE_SET_CRYPTO_INFO
(
CIPHER
) \

125 
kés_£t_
##
CIPHER
##
	`_öfo
(
gnués_£ssi⁄_t
 
£ssi⁄
) \

127 c⁄° 
boﬁ
 
is_és12
 = \

128 (
	`gnués_¥Ÿocﬁ_gë_vîsi⁄
(
£ssi⁄
Ë=
GNUTLS_TLS1_2
);\

129 
és12_¸y±o_öfo_
##
CIPHER
 
öfo
 = { \

130 .
öfo
.
vîsi⁄
 = (
is_és12
 ? 
TLS_1_2_VERSION
 \

131 : 
TLS_1_3_VERSION
), \

132 .
öfo
.
cùhî_ty≥
 = 
TLS_CIPHER_
##
CIPHER
, \

134 
£q_numbî
[12]; \

135 
gnués_d©um_t
 
cùhî_key
; \

136 
gnués_d©um_t
 
mac_key
; \

137 
gnués_d©um_t
 
iv
; \

138 
ªt
, 
ªad
; \

139 c⁄° 
sockfd
 = 
	`gnués_å™•‹t_gë_öt
(
£ssi⁄
); \

142 
ªad
 = 0;Ñead <= 1;Ñead++) { \

143 i‡(
	`és_is_kés_íabÀd
(
£ssi⁄
, 
ªad
)) \

146 
ªt
 = 
	`gnués_ªc‹d_gë_°©e
(
£ssi⁄
, \

147 
ªad
, \

148 &
mac_key
, \

149 &
iv
, \

150 &
cùhî_key
, \

151 
£q_numbî
); \

152 i‡(
ªt
 !
GNUTLS_E_SUCCESS
) { \

153 
	`TLS_LOG
(1, "gnutls_record_get_state " \

155 
ªt
, 
	`gnués_°ªº‹
(ret)); \

160 i‡(
is_és12
) { \

161 
	`mem˝y
(
öfo
.
iv
, 
£q_numbî
, \

162 
TLS_CIPHER_
##
CIPHER
##
_IV_SIZE
); \

164 
	`mem˝y
(
öfo
.
iv
, \

165 
iv
.
d©a
 + 
TLS_CIPHER_
##
CIPHER
##
_SALT_SIZE
,\

166 
TLS_CIPHER_
##
CIPHER
##
_IV_SIZE
); \

168 
	`mem˝y
(
öfo
.
ß…
, 
iv
.
d©a
, \

169 
TLS_CIPHER_
##
CIPHER
##
_SALT_SIZE
); \

170 
	`mem˝y
(
öfo
.
key
, 
cùhî_key
.
d©a
, \

171 
TLS_CIPHER_
##
CIPHER
##
_KEY_SIZE
); \

172 
	`mem˝y
(
öfo
.
ªc_£q
, 
£q_numbî
, \

173 
TLS_CIPHER_
##
CIPHER
##
_REC_SEQ_SIZE
); \

175 i‡(
	`kés_£tsock›t
(
sockfd
, 
ªad
, &
öfo
, \

176 (
öfo
)) != 0) { \

177 
	`TLS_LOG
(1, "FailedÅo set crypto info for %s", \

183 }

	)

185 
	#SET_CRYPTO_INFO
(
CIPHER
, 
£ssi⁄
Ë
kés_£t_
##CIPHER##
	`_öfo
(£ssi⁄)

	)

187 #i‡
deföed
(
TLS_CIPHER_AES_GCM_128
)

188 
	$GENERATE_SET_CRYPTO_INFO
(
AES_GCM_128
)

191 #i‡
	`deföed
(
TLS_CIPHER_AES_GCM_256
)

192 
	$GENERATE_SET_CRYPTO_INFO
(
AES_GCM_256
)

195 #i‡
	`deföed
(
TLS_CIPHER_AES_CCM_128
)

196 
	$GENERATE_SET_CRYPTO_INFO
(
AES_CCM_128
)

199 #i‡
	`deföed
(
TLS_CIPHER_CHACHA20_POLY1305
)

200 
	$GENERATE_SET_CRYPTO_INFO
(
CHACHA20_POLY1305
)

203 
	$£tup_kés
(
gnués_£ssi⁄_t
 
£ssi⁄
)

205 c⁄° 
gnués_cùhî_Æg‹ôhm_t
 
cùhî
 = 
	`gnués_cùhî_gë
(
£ssi⁄
);

207 
	`TLS_LOG
(2, "setup_ktls(session=%p, fd=%d)",

208 
£ssi⁄
, 
	`gnués_å™•‹t_gë_öt
(session));

213 i‡(
	`£tsock›t
(
	`gnués_å™•‹t_gë_öt
(
£ssi⁄
), 
SOL_TCP
, 
TCP_ULP
,

215 
	`TLS_LOG
(1, "£tsock›t(TLS_ULPËÁûed(%d): %s", 
î∫o
, 
	`°ªº‹
(errno));

219 
cùhî
) {

220 #i‡
	`deföed
(
TLS_CIPHER_AES_GCM_128
)

221 
GNUTLS_CIPHER_AES_128_GCM
:

222 
	`TLS_LOG
(2, "Got cipher AES_GCM_128");

223  
	`SET_CRYPTO_INFO
(
AES_GCM_128
, 
£ssi⁄
);

225 #i‡
	`deföed
(
TLS_CIPHER_AES_GCM_256
)

226 
GNUTLS_CIPHER_AES_256_GCM
:

227 
	`TLS_LOG
(2, "Got cipher AES_GCM_256");

228  
	`SET_CRYPTO_INFO
(
AES_GCM_256
, 
£ssi⁄
);

230 #i‡
	`deföed
(
TLS_CIPHER_AES_CCM_128
)

231 
GNUTLS_CIPHER_AES_128_CCM
:

232 
	`TLS_LOG
(2, "Got cipher AES_CCM_128");

233  
	`SET_CRYPTO_INFO
(
AES_CCM_128
, 
£ssi⁄
);

235 #i‡
	`deföed
(
TLS_CIPHER_CHACHA20_POLY1305
)

236 
GNUTLS_CIPHER_CHACHA20_POLY1305
:

237 
	`TLS_LOG
(2, "Got cipher CHACHA20_POLY1305");

238  
	`SET_CRYPTO_INFO
(
CHACHA20_POLY1305
, 
£ssi⁄
);

241 
	`TLS_LOG
(1, "Unsuµ‹ãd cùhî %d", 
cùhî
);

245 
	}
}

	@tls/tls-private.h

19 #i‚de‡
__TLS_PRIVATE_H__


20 
	#__TLS_PRIVATE_H__


	)

28 
	#TLS_LOG
(
Àvñ
, 
f‹m©
, ...) \

30 i‡(
Àvñ
 <
és_log_Àvñ
) { \

31 
	`Ârötf
(
°dîr
, "libnfs—ls):%d " 
f‹m©
 "\n", 
Àvñ
, ## 
__VA_ARGS__
); \

33 } 0)

	)

35 #ifde‡
__˝lu•lus


39 
és_log_Àvñ
;

40 
£tup_kés
(
gnués_£ssi⁄_t
 
£ssi⁄
);

42 #ifde‡
__˝lu•lus


	@utils/nfs-cat.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

35 
	~<sys/°©.h
>

36 
	~<°rög.h
>

39 #ifde‡
HAVE_POLL_H


40 
	~<pﬁl.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°döt.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<f˙é.h
>

52 
	~"libnfs.h
"

53 
	~"libnfs-øw.h
"

54 
	~"libnfs-øw-mou¡.h
"

56 
	sfûe_c⁄ãxt
 {

57 
	mfd
;

58 
nfs_c⁄ãxt
 *
	mnfs
;

59 
nfsfh
 *
	mnfsfh
;

60 
nfs_uæ
 *
	muæ
;

63 
	$ußge
()

65 
	`Ârötf
(
°dîr
, "Usage:Çfs-cat <file>\n");

66 
	`Ârötf
(
°dîr
, "<file> catánÇfs file.\n");

67 
	`exô
(0);

68 
	}
}

71 
	$‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
 *file_context)

73 i‡(
fûe_c⁄ãxt
->
fd
 != -1) {

74 
	`˛o£
(
fûe_c⁄ãxt
->
fd
);

76 i‡(
fûe_c⁄ãxt
->
nfsfh
 !
NULL
) {

77 
	`nfs_˛o£
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
nfsfh
);

79 i‡(
fûe_c⁄ãxt
->
nfs
 !
NULL
) {

80 
	`nfs_de°roy_c⁄ãxt
(
fûe_c⁄ãxt
->
nfs
);

82 
	`nfs_de°roy_uæ
(
fûe_c⁄ãxt
->
uæ
);

83 
	`‰ì
(
fûe_c⁄ãxt
);

84 
	}
}

86 
fûe_c⁄ãxt
 *

87 
	$›í_fûe
(c⁄° *
uæ
, 
Êags
)

89 
fûe_c⁄ãxt
 *file_context;

91 
fûe_c⁄ãxt
 = 
	`mÆloc
((file_context));

92 i‡(
fûe_c⁄ãxt
 =
NULL
) {

93 
	`Ârötf
(
°dîr
, "FailedÅo malloc file_context\n");

94  
NULL
;

96 
fûe_c⁄ãxt
->
fd
 = -1;

97 
fûe_c⁄ãxt
->
nfs
 = 
NULL
;

98 
fûe_c⁄ãxt
->
nfsfh
 = 
NULL
;

99 
fûe_c⁄ãxt
->
uæ
 = 
NULL
;

101 
fûe_c⁄ãxt
->
nfs
 = 
	`nfs_öô_c⁄ãxt
();

102 i‡(
fûe_c⁄ãxt
->
nfs
 =
NULL
) {

103 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

104 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

105  
NULL
;

108 
fûe_c⁄ãxt
->
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(fûe_c⁄ãxt->
nfs
, url);

109 i‡(
fûe_c⁄ãxt
->
uæ
 =
NULL
) {

110 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

111 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

112  
NULL
;

115 i‡(
	`nfs_mou¡
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
£rvî
,

116 
fûe_c⁄ãxt
->
uæ
->
∑th
) != 0) {

117 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

118 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

119 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

120  
NULL
;

123 i‡(
Êags
 =
O_RDONLY
) {

124 i‡(
	`nfs_›í
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
fûe
, 
Êags
,

125 &
fûe_c⁄ãxt
->
nfsfh
) != 0) {

126 
	`Ârötf
(
°dîr
, "FailedÅo open file %s: %s\n",

127 
fûe_c⁄ãxt
->
uæ
->
fûe
,

128 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

129 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

130  
NULL
;

133 i‡(
	`nfs_¸ót
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
fûe
, 0660,

134 &
fûe_c⁄ãxt
->
nfsfh
) != 0) {

135 
	`Ârötf
(
°dîr
, "FailedÅo creat file %s: %s\n",

136 
fûe_c⁄ãxt
->
uæ
->
fûe
,

137 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

138 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

139  
NULL
;

142  
fûe_c⁄ãxt
;

143 
	}
}

145 
	#BUFSIZE
 1024*1024

	)

146 
	gbuf
[
BUFSIZE
];

148 
	$maö
(
¨gc
, *
¨gv
[])

150 
fûe_c⁄ãxt
 *
nf
;

151 
nfs_°©_64
 
°
;

152 
uöt64_t
 
off
;

153 
öt64_t
 
cou¡
;

155 #ifde‡
WIN32


156 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

157 
	`¥ötf
("FailedÅo start Winsock2\n");

162 #ifde‡
AROS


163 
	`¨os_öô_sockë
();

166 i‡(
¨gc
 < 2) {

167 
	`ußge
();

170 
nf
 = 
	`›í_fûe
(
¨gv
[1], 
O_RDONLY
);

171 i‡(
nf
 =
NULL
) {

172 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í %s\n", 
¨gv
[1]);

173 
	`exô
(10);

175 i‡(
	`nfs_f°©64
(
nf
->
nfs
,Çf->
nfsfh
, &
°
) < 0) {

176 
	`Ârötf
(
°dîr
, "FaûedÅÿ°© %s\n", 
¨gv
[1]);

177 
	`exô
(10);

180 
off
 = 0;

181 
off
 < 
°
.
nfs_size
) {

182 
cou¡
 = 
°
.
nfs_size
 - 
off
;

183 i‡(
cou¡
 > 
BUFSIZE
) {

184 
cou¡
 = 
BUFSIZE
;

186 
cou¡
 = 
	`nfs_¥ód
(
nf
->
nfs
,Çf->
nfsfh
, 
buf
, cou¡, 
off
);

187 i‡(
cou¡
 < 0) {

188 
	`Ârötf
(
°dîr
, "FailedÅoÑead from file\n");

189 
	`‰ì_fûe_c⁄ãxt
(
nf
);

192 
	`fwrôe
(
buf
, 
cou¡
, 1, 
°dout
);

193 
off
 +
cou¡
;

196 
	`‰ì_fûe_c⁄ãxt
(
nf
);

199 
	}
}

	@utils/nfs-cp.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

35 
	~<sys/°©.h
>

36 
	~<°rög.h
>

39 #ifde‡
HAVE_POLL_H


40 
	~<pﬁl.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°döt.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<f˙é.h
>

52 
	~"libnfs.h
"

53 
	~"libnfs-øw.h
"

54 
	~"libnfs-øw-mou¡.h
"

56 
	sfûe_c⁄ãxt
 {

57 
	mis_nfs
;

58 
	mfd
;

59 
nfs_c⁄ãxt
 *
	mnfs
;

60 
nfsfh
 *
	mnfsfh
;

61 
nfs_uæ
 *
	muæ
;

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, "Usage:Çfs-cp <src> <dst>\n");

67 
	`Ârötf
(
°dîr
, "<src>,<dst> canÉither beáÜocal file or "

69 
	`exô
(0);

70 
	}
}

73 
	$‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
 *file_context)

75 i‡(
fûe_c⁄ãxt
->
fd
 != -1) {

76 
	`˛o£
(
fûe_c⁄ãxt
->
fd
);

78 i‡(
fûe_c⁄ãxt
->
nfsfh
 !
NULL
) {

79 
	`nfs_˛o£
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
nfsfh
);

81 i‡(
fûe_c⁄ãxt
->
nfs
 !
NULL
) {

82 
	`nfs_de°roy_c⁄ãxt
(
fûe_c⁄ãxt
->
nfs
);

84 
	`nfs_de°roy_uæ
(
fûe_c⁄ãxt
->
uæ
);

85 
	`‰ì
(
fûe_c⁄ãxt
);

86 
	}
}

89 
	$f°©_fûe
(
fûe_c⁄ãxt
 *
fc
, 
°©
 *
°
)

91 i‡(
fc
->
is_nfs
 == 0) {

92  
	`f°©
(
fc
->
fd
, 
°
);

94 
ªs
;

95 
nfs_°©_64
 
nfs_°
;

96 
ªs
 = 
	`nfs_f°©64
(
fc
->
nfs
, fc->
nfsfh
, &
nfs_°
);

97 
°
->
°_dev
 = (
dev_t
)
nfs_°
.
nfs_dev
;

98 
°
->
°_öo
 = (
öo_t
)
nfs_°
.
nfs_öo
;

99 #i‚de‡
WIN32


100 
°
->
°_mode
 = (
mode_t
)
nfs_°
.
nfs_mode
;

101 
°
->
°_∆ök
 = (
∆ök_t
)
nfs_°
.
nfs_∆ök
;

102 
°
->
°_blksize
 = 
nfs_°
.
nfs_blksize
;

103 
°
->
°_blocks
 = 
nfs_°
.
nfs_blocks
;

105 
°
->
°_uid
 = (
uid_t
)
nfs_°
.
nfs_uid
;

106 
°
->
°_gid
 = (
gid_t
)
nfs_°
.
nfs_gid
;

107 
°
->
°_rdev
 = (
dev_t
)
nfs_°
.
nfs_rdev
;

108 
°
->
°_size
 = (
off_t
)
nfs_°
.
nfs_size
;

109 
°
->
°_©ime
 = 
nfs_°
.
nfs_©ime
;

110 
°
->
°_mtime
 = 
nfs_°
.
nfs_mtime
;

111 
°
->
°_˘ime
 = 
nfs_°
.
nfs_˘ime
;

113  
ªs
;

115 
	}
}

117 
ssize_t


118 
	$fûe_¥ód
(
fûe_c⁄ãxt
 *
fc
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off
)

120 i‡(
fc
->
is_nfs
 == 0) {

121 
	`l£ek
(
fc
->
fd
, 
off
, 
SEEK_SET
);

122  
	`ªad
(
fc
->
fd
, 
buf
, 
cou¡
);

124  
	`nfs_¥ód
(
fc
->
nfs
, fc->
nfsfh
, 
buf
, 
cou¡
, 
off
);

126 
	}
}

128 
ssize_t


129 
	$fûe_pwrôe
(
fûe_c⁄ãxt
 *
fc
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off
)

131 i‡(
fc
->
is_nfs
 == 0) {

132 
	`l£ek
(
fc
->
fd
, 
off
, 
SEEK_SET
);

133  
	`wrôe
(
fc
->
fd
, 
buf
, 
cou¡
);

135  
	`nfs_pwrôe
(
fc
->
nfs
, fc->
nfsfh
, 
buf
, 
cou¡
, 
off
);

137 
	}
}

139 
fûe_c⁄ãxt
 *

140 
	$›í_fûe
(c⁄° *
uæ
, 
Êags
)

142 
fûe_c⁄ãxt
 *file_context;

144 
fûe_c⁄ãxt
 = 
	`mÆloc
((file_context));

145 i‡(
fûe_c⁄ãxt
 =
NULL
) {

146 
	`Ârötf
(
°dîr
, "FailedÅo malloc file_context\n");

147  
NULL
;

149 
fûe_c⁄ãxt
->
is_nfs
 = 0;

150 
fûe_c⁄ãxt
->
fd
 = -1;

151 
fûe_c⁄ãxt
->
nfs
 = 
NULL
;

152 
fûe_c⁄ãxt
->
nfsfh
 = 
NULL
;

153 
fûe_c⁄ãxt
->
uæ
 = 
NULL
;

155 i‡(
	`°∫cmp
(
uæ
, "nfs://", 6)) {

156 
fûe_c⁄ãxt
->
is_nfs
 = 0;

157 
fûe_c⁄ãxt
->
fd
 = 
	`›í
(
uæ
, 
Êags
, 0660);

158 i‡(
fûe_c⁄ãxt
->
fd
 == -1) {

159 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í %s\n", 
uæ
);

160 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

161  
NULL
;

163  
fûe_c⁄ãxt
;

166 
fûe_c⁄ãxt
->
is_nfs
 = 1;

168 
fûe_c⁄ãxt
->
nfs
 = 
	`nfs_öô_c⁄ãxt
();

169 i‡(
fûe_c⁄ãxt
->
nfs
 =
NULL
) {

170 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

171 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

172  
NULL
;

175 
fûe_c⁄ãxt
->
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(fûe_c⁄ãxt->
nfs
, url);

176 i‡(
fûe_c⁄ãxt
->
uæ
 =
NULL
) {

177 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

178 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

179  
NULL
;

182 i‡(
	`nfs_mou¡
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
£rvî
,

183 
fûe_c⁄ãxt
->
uæ
->
∑th
) != 0) {

184 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

185 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

186 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

187  
NULL
;

190 i‡(
Êags
 =
O_RDONLY
) {

191 i‡(
	`nfs_›í
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
fûe
, 
Êags
,

192 &
fûe_c⁄ãxt
->
nfsfh
) != 0) {

193 
	`Ârötf
(
°dîr
, "FailedÅo open file %s: %s\n",

194 
fûe_c⁄ãxt
->
uæ
->
fûe
,

195 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

196 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

197  
NULL
;

200 i‡(
	`nfs_¸ót
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
fûe
,

202 &
fûe_c⁄ãxt
->
nfsfh
) != 0) {

203 
	`Ârötf
(
°dîr
, "FailedÅo creat file %s: %s\n",

204 
fûe_c⁄ãxt
->
uæ
->
fûe
,

205 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

206 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

207  
NULL
;

210  
fûe_c⁄ãxt
;

211 
	}
}

213 
	#BUFSIZE
 1024*1024

	)

214 
	gbuf
[
BUFSIZE
];

216 
	$maö
(
¨gc
, *
¨gv
[])

218 
°©
 
°
;

219 
fûe_c⁄ãxt
 *
§c
;

220 
fûe_c⁄ãxt
 *
d°
;

221 
off_t
 
off
;

222 
ssize_t
 
cou¡
;

224 #ifde‡
WIN32


225 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

226 
	`¥ötf
("FailedÅo start Winsock2\n");

231 #ifde‡
AROS


232 
	`¨os_öô_sockë
();

235 i‡(
¨gc
 != 3) {

236 
	`ußge
();

239 
§c
 = 
	`›í_fûe
(
¨gv
[1], 
O_RDONLY
);

240 i‡(
§c
 =
NULL
) {

241 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í %s\n", 
¨gv
[1]);

245 
d°
 = 
	`›í_fûe
(
¨gv
[2], 
O_WRONLY
|
O_CREAT
|
O_EXCL
|
O_TRUNC
);

246 i‡(
d°
 =
NULL
) {

247 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í %s\n", 
¨gv
[2]);

248 
	`‰ì_fûe_c⁄ãxt
(
§c
);

252 i‡(
	`f°©_fûe
(
§c
, &
°
) != 0) {

253 
	`Ârötf
(
°dîr
, "FailedÅo fstat source file\n");

254 
	`‰ì_fûe_c⁄ãxt
(
§c
);

255 
	`‰ì_fûe_c⁄ãxt
(
d°
);

259 
off
 = 0;

260 
off
 < 
°
.
°_size
) {

261 
cou¡
 = (
size_t
)(
°
.
°_size
 - 
off
);

262 i‡(
cou¡
 > 
BUFSIZE
) {

263 
cou¡
 = 
BUFSIZE
;

265 
cou¡
 = 
	`fûe_¥ód
(
§c
, 
buf
, cou¡, 
off
);

266 i‡(
cou¡
 < 0) {

267 
	`Ârötf
(
°dîr
, "FailedÅoÑead from source file\n");

268 
	`‰ì_fûe_c⁄ãxt
(
§c
);

269 
	`‰ì_fûe_c⁄ãxt
(
d°
);

272 
cou¡
 = 
	`fûe_pwrôe
(
d°
, 
buf
, cou¡, 
off
);

273 i‡(
cou¡
 < 0) {

274 
	`Ârötf
(
°dîr
, "FailedÅo writeÅo dest file\n");

275 
	`‰ì_fûe_c⁄ãxt
(
§c
);

276 
	`‰ì_fûe_c⁄ãxt
(
d°
);

280 
off
 +
cou¡
;

282 
	`¥ötf
("c›õd %d byãs\n", ()
off
);

284 
	`‰ì_fûe_c⁄ãxt
(
§c
);

285 
	`‰ì_fûe_c⁄ãxt
(
d°
);

288 
	}
}

	@utils/nfs-ls.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

29 #ifde‡
WIN32


30 
	~<wö32/wö32_com∑t.h
>

31 #¥agm®
commít
(
lib
, "ws2_32.lib")

32 
WSADATA
 
	gwßD©a
;

33 
	#PRId64
 "Œ"

	)

35 
	~<öây≥s.h
>

36 
	~<°rög.h
>

37 
	~<sys/°©.h
>

38 #i‚de‡
AROS


39 #ifde‡
__ANDROID__


40 
	#°©vfs
 
°©fs


	)

41 
	~<sys/vfs.h
>

43 
	~<sys/°©vfs.h
>

48 #ifde‡
HAVE_UNISTD_H


49 
	~<uni°d.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°döt.h
>

55 
	~<sys/ty≥s.h
>

56 
	~<sys/°©.h
>

57 
	~<f˙é.h
>

58 
	~"libnfs.h
"

59 
	~"libnfs-øw.h
"

60 
	~"libnfs-øw-mou¡.h
"

62 
	s˛õ¡
 {

63 *
	m£rvî
;

64 *
	mexp‹t
;

65 
uöt32_t
 
	mmou¡_p‹t
;

66 
	mis_föished
;

69 
	gªcursive
 = 0, 
	gsumm¨y
 = 0, 
	gdiscovîy
 = 0;

71 
	$¥öt_ußge
()

73 
	`Ârötf
(
°dîr
, "Usage:Çfs-ls [-?|--help|--usage] [-R|--recursive] [-s|--summary] [-D|--discovery] <url>\n");

74 
	}
}

76 
	$¥o˚ss_£rvî
(c⁄° *
£rvî
) {

77 
exp‹äode
 *
exp‹ts
;

78 
exp‹äode
 *
exp‹t
;

80 
exp‹ts
 = 
	`mou¡_gëexp‹ts
(
£rvî
);

81 i‡(
exp‹ts
 =
NULL
) {

82 
	`Ârötf
(
°dîr
, "FaûedÅÿgëÉxp‹t†f‹ sîvî %s.\n", 
£rvî
);

85 
exp‹t
=
exp‹ts
;Éxp‹t;Éxp‹àexp‹t->
ex_√xt
) {

86 
	`¥ötf
("nfs://%s%s\n", 
£rvî
, 
exp‹t
->
ex_dú
);

88 
	`mou¡_‰ì_exp‹t_li°
(
exp‹ts
);

90 
	}
}

92 
	$¥o˚ss_dú
(
nfs_c⁄ãxt
 *
nfs
, *
dú
, 
Àvñ
) {

93 
ªt
;

94 
nfsdúít
 *nfsdirent;

95 
nfsdú
 *nfsdir;

97 i‡(!
Àvñ
) {

98 
	`¥ötf
("Recursion detected!\n");

99 
	`exô
(10);

102 
ªt
 = 
	`nfs_›ídú
(
nfs
, 
dú
, &
nfsdú
);

103 i‡(
ªt
 != 0) {

104 
	`¥ötf
("FaûedÅÿ›ídú(\"%s\"Ë%s\n", 
dú
, 
	`nfs_gë_îr‹
(
nfs
));

105 
	`exô
(10);

107 (
nfsdúít
 = 
	`nfs_ªaddú
(
nfs
, 
nfsdú
)Ë!
NULL
) {

108 
∑th
[1024];

110 i‡(!
	`°rcmp
(
nfsdúít
->
«me
, ".") || !strcmp(nfsdirent->name, "..")) {

113 
	`¢¥ötf
(
∑th
, 1024, "%s/%s", 
dú
, 
nfsdúít
->
«me
);

115 
nfsdúít
->
mode
 & 
S_IFMT
) {

116 
S_IFLNK
:

117 
	`¥ötf
("l");

119 
S_IFREG
:

120 
	`¥ötf
("-");

122 
S_IFDIR
:

123 
	`¥ötf
("d");

125 
S_IFCHR
:

126 
	`¥ötf
("c");

128 
S_IFBLK
:

129 
	`¥ötf
("b");

132 
	`¥ötf
("%c%c%c",

133 "-r"[!!(
nfsdúít
->
mode
 & 
S_IRUSR
)],

134 "-w"[!!(
nfsdúít
->
mode
 & 
S_IWUSR
)],

135 "-x"[!!(
nfsdúít
->
mode
 & 
S_IXUSR
)]

137 
	`¥ötf
("%c%c%c",

138 "-r"[!!(
nfsdúít
->
mode
 & 
S_IRGRP
)],

139 "-w"[!!(
nfsdúít
->
mode
 & 
S_IWGRP
)],

140 "-x"[!!(
nfsdúít
->
mode
 & 
S_IXGRP
)]

142 
	`¥ötf
("%c%c%c",

143 "-r"[!!(
nfsdúít
->
mode
 & 
S_IROTH
)],

144 "-w"[!!(
nfsdúít
->
mode
 & 
S_IWOTH
)],

145 "-x"[!!(
nfsdúít
->
mode
 & 
S_IXOTH
)]

147 
	`¥ötf
(" %2d", ()
nfsdúít
->
∆ök
);

148 
	`¥ötf
(" %5d", ()
nfsdúít
->
uid
);

149 
	`¥ötf
(" %5d", ()
nfsdúít
->
gid
);

150 
	`¥ötf
(" %12" 
PRId64
, 
nfsdúít
->
size
);

152 
	`¥ötf
(" %s\n", 
∑th
 + 1);

154 i‡(
ªcursive
 && (
nfsdúít
->
mode
 & 
S_IFMT
Ë=
S_IFDIR
) {

155 
	`¥o˚ss_dú
(
nfs
, 
∑th
, 
Àvñ
 - 1);

158 
	`nfs_˛o£dú
(
nfs
, 
nfsdú
);

159 
	}
}

161 
	$maö
(
¨gc
, *
¨gv
[])

163 
nfs_c⁄ãxt
 *
nfs
 = 
NULL
;

164 
i
, 
ªt
 = 1;

165 
˛õ¡
 client;

166 
°©vfs
 
°vfs
;

167 
nfs_uæ
 *
uæ
 = 
NULL
;

168 #ifde‡
HAVE_MULTITHREADING


169 
mt_°¨ãd
 = 0;

172 #ifde‡
WIN32


173 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

174 
	`¥ötf
("FailedÅo start Winsock2\n");

175 
	`exô
(10);

179 #ifde‡
AROS


180 
	`¨os_öô_sockë
();

183 i‡(
¨gc
 < 2) {

184 
	`Ârötf
(
°dîr
, "No URL specified.\n");

185 
föished
;

188 
i
=1; i < 
¨gc
 -1; i++) {

189 i‡(!
	`°rcmp
(
¨gv
[
i
], "-R") || !strcmp(argv[i], "--recursive")) {

190 
ªcursive
++;

191 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-s") || !strcmp(argv[i], "--summary")) {

192 
summ¨y
++;

193 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-D") || !strcmp(argv[i], "--discovery")) {

194 
discovîy
++;

196 
föished
;

200 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

201 i‡(
nfs
 =
NULL
) {

202 
	`¥ötf
("failedÅo init context\n");

203 
föished
;

206 i‡(
discovîy
) {

207 
uæ
 = 
	`nfs_∑r£_uæ_öcom∂ëe
(
nfs
, 
¨gv
[
¨gc
 - 1]);

208 i‡(
uæ
 =
NULL
) {

209 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

210 
föished
;

212 i‡(!
uæ
->
£rvî
) {

213 
nfs_£rvî_li°
 *
§vrs
;

214 
nfs_£rvî_li°
 *
§v
;

216 
§vrs
 = 
	`nfs_föd_loˇl_£rvîs
();

217 i‡(
§vrs
 =
NULL
) {

218 
	`Ârötf
(
°dîr
, "FailedÅo findÜocal servers.\n");

219 
föished
;

221 
§v
=
§vrs
; srv; srv = srv->
√xt
) {

222 i‡(
ªcursive
) {

223 
	`¥o˚ss_£rvî
(
§v
->
addr
);

225 
	`¥ötf
("nfs://%s\n", 
§v
->
addr
);

228 
	`‰ì_nfs_§vr_li°
(
§vrs
);

229 
ªt
 = 0;

230 
föished
;

232 i‡(
uæ
->
£rvî
 && !uæ->
∑th
) {

233 
ªt
 = 
	`¥o˚ss_£rvî
(
uæ
->
£rvî
);

234 
föished
;

236 
	`nfs_de°roy_uæ
(
uæ
);

238 
uæ
 = 
	`nfs_∑r£_uæ_dú
(
nfs
, 
¨gv
[
¨gc
 - 1]);

239 i‡(
uæ
 =
NULL
) {

240 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
nfs
));

241 
föished
;

244 
˛õ¡
.
£rvî
 = 
uæ
->server;

245 
˛õ¡
.
exp‹t
 = 
uæ
->
∑th
;

246 
˛õ¡
.
is_föished
 = 0;

248 i‡((
ªt
 = 
	`nfs_mou¡
(
nfs
, 
˛õ¡
.
£rvî
, clõ¡.
exp‹t
)) != 0) {

249 
	`Ârötf
(
°dîr
, "FaûedÅÿmou¡Çf†sh¨ê: %s\n", 
	`nfs_gë_îr‹
(
nfs
));

250 
föished
;

253 #ifde‡
HAVE_MULTITHREADING


258 i‡(
	`nfs_mt_£rvi˚_thªad_°¨t
(
nfs
)) {

259 
	`¥ötf
("failedÅo start serviceÅhread\n");

260 
	`exô
(10);

262 
mt_°¨ãd
 = 1;

265 
	`¥o˚ss_dú
(
nfs
, "", 16);

267 i‡(
summ¨y
) {

268 i‡(
	`nfs_°©vfs
(
nfs
, "", &
°vfs
) != 0) {

269 
föished
;

271 
	`¥ötf
("\n%12" 
PRId64
 " of %12" PRId64 " bytes free.\n",

272 (
uöt64_t
)(
°vfs
.
f_‰size
 * stvfs.
f_b‰ì
),

273 (
uöt64_t
)(
°vfs
.
f_‰size
 * stvfs.
f_blocks
));

276 
ªt
 = 0;

277 
föished
:

278 #ifde‡
HAVE_MULTITHREADING


279 i‡(
mt_°¨ãd
) {

280 
	`nfs_mt_£rvi˚_thªad_°›
(
nfs
);

284 i‡(
ªt
 > 0) {

285 
	`¥öt_ußge
();

287 
	`nfs_de°roy_uæ
(
uæ
);

288 i‡(
nfs
 !
NULL
) {

289 
	`nfs_de°roy_c⁄ãxt
(
nfs
);

291  
ªt
;

292 
	}
}

	@utils/nfs-stat.c

18 
	#_FILE_OFFSET_BITS
 64

	)

19 
	#_GNU_SOURCE


	)

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
AROS


26 
	~"¨os_com∑t.h
"

30 #ifde‡
WIN32


31 
	~<wö32/wö32_com∑t.h
>

32 #¥agm®
commít
(
lib
, "ws2_32.lib")

33 
WSADATA
 
	gwßD©a
;

35 
	~<sys/°©.h
>

36 
	~<°rög.h
>

39 #ifde‡
HAVE_POLL_H


40 
	~<pﬁl.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°döt.h
>

50 
	~<öây≥s.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<f˙é.h
>

53 
	~"libnfs.h
"

54 
	~"libnfs-øw.h
"

55 
	~"libnfs-øw-mou¡.h
"

57 
	sfûe_c⁄ãxt
 {

58 
	mfd
;

59 
nfs_c⁄ãxt
 *
	mnfs
;

60 
nfsfh
 *
	mnfsfh
;

61 
nfs_uæ
 *
	muæ
;

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, "Usage:Çfs-stat <file>\n");

67 
	`Ârötf
(
°dîr
, "<file> statánÇfs file.\n");

68 
	`exô
(0);

69 
	}
}

72 
	$‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
 *file_context)

74 i‡(
fûe_c⁄ãxt
->
fd
 != -1) {

75 
	`˛o£
(
fûe_c⁄ãxt
->
fd
);

77 i‡(
fûe_c⁄ãxt
->
nfsfh
 !
NULL
) {

78 
	`nfs_˛o£
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
nfsfh
);

80 i‡(
fûe_c⁄ãxt
->
nfs
 !
NULL
) {

81 
	`nfs_de°roy_c⁄ãxt
(
fûe_c⁄ãxt
->
nfs
);

83 
	`nfs_de°roy_uæ
(
fûe_c⁄ãxt
->
uæ
);

84 
	`‰ì
(
fûe_c⁄ãxt
);

85 
	}
}

87 
fûe_c⁄ãxt
 *

88 
	$›í_fûe
(c⁄° *
uæ
, 
Êags
)

90 
fûe_c⁄ãxt
 *file_context;

92 
fûe_c⁄ãxt
 = 
	`mÆloc
((file_context));

93 i‡(
fûe_c⁄ãxt
 =
NULL
) {

94 
	`Ârötf
(
°dîr
, "FailedÅo malloc file_context\n");

95  
NULL
;

97 
fûe_c⁄ãxt
->
fd
 = -1;

98 
fûe_c⁄ãxt
->
nfs
 = 
NULL
;

99 
fûe_c⁄ãxt
->
nfsfh
 = 
NULL
;

100 
fûe_c⁄ãxt
->
uæ
 = 
NULL
;

102 
fûe_c⁄ãxt
->
nfs
 = 
	`nfs_öô_c⁄ãxt
();

103 i‡(
fûe_c⁄ãxt
->
nfs
 =
NULL
) {

104 
	`Ârötf
(
°dîr
, "failedÅo init context\n");

105 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

106  
NULL
;

109 
fûe_c⁄ãxt
->
uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(fûe_c⁄ãxt->
nfs
, url);

110 i‡(
fûe_c⁄ãxt
->
uæ
 =
NULL
) {

111 
	`Ârötf
(
°dîr
, "%s\n", 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

112 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

113  
NULL
;

116 i‡(
	`nfs_mou¡
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
£rvî
,

117 
fûe_c⁄ãxt
->
uæ
->
∑th
) != 0) {

118 
	`Ârötf
(
°dîr
, "FailedÅo mountÇfs share : %s\n",

119 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

120 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

121  
NULL
;

124 i‡(
Êags
 =
O_RDONLY
) {

125 i‡(
	`nfs_›í
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
fûe
, 
Êags
,

126 &
fûe_c⁄ãxt
->
nfsfh
) != 0) {

127 
	`Ârötf
(
°dîr
, "FailedÅo open file %s: %s\n",

128 
fûe_c⁄ãxt
->
uæ
->
fûe
,

129 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

130 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

131  
NULL
;

134 i‡(
	`nfs_¸ót
(
fûe_c⁄ãxt
->
nfs
, fûe_c⁄ãxt->
uæ
->
fûe
, 0660,

135 &
fûe_c⁄ãxt
->
nfsfh
) != 0) {

136 
	`Ârötf
(
°dîr
, "FailedÅo creat file %s: %s\n",

137 
fûe_c⁄ãxt
->
uæ
->
fûe
,

138 
	`nfs_gë_îr‹
(
fûe_c⁄ãxt
->
nfs
));

139 
	`‰ì_fûe_c⁄ãxt
(
fûe_c⁄ãxt
);

140  
NULL
;

143  
fûe_c⁄ãxt
;

144 
	}
}

146 *
	$gë_fûe_ty≥
(
mode
)

148 
mode
 & 
S_IFMT
) {

149 #i‚de‡
WIN32


150 
S_IFLNK
:  "symbolicÜink";

152 
S_IFDIR
:  "directory";

153 
S_IFCHR
:  "character device";

154 
S_IFBLK
:  "block device";

157 
	}
}

159 
	guidbuf
[16];

160 
	ggidbuf
[16];

162 #ifde‡
WIN32


163 *
	$uid_to_«me
(
uid
)

165 
	`•rötf
(
uidbuf
, "%d", 
uid
);

166  
uidbuf
;

167 
	}
}

168 *
	$gid_to_«me
(
gid
)

170 
	`•rötf
(
gidbuf
, "%d", 
gid
);

171  
gidbuf
;

172 
	}
}

174 
	~<sys/ty≥s.h
>

175 
	~<gΩ.h
>

176 
	~<pwd.h
>

177 *
	$uid_to_«me
(
uid
)

179 
∑sswd
 *
pw
;

181 
pw
 = 
	`gëpwuid
(
uid
);

182 i‡(
pw
) {

183  
pw
->
pw_«me
;

185 
	`•rötf
(
uidbuf
, "%d", 
uid
);

186  
uidbuf
;

188 
	}
}

189 *
	$gid_to_«me
(
gid
)

191 
group
 *
gr
;

193 
gr
 = 
	`gëgrgid
(
gid
);

194 i‡(
gr
) {

195  
gr
->
gr_«me
;

197 
	`•rötf
(
gidbuf
, "%d", 
gid
);

198  
gidbuf
;

200 
	}
}

203 
	gac˚ss_bôs
[11];

204 *
	$gë_ac˚ss_bôs
(
mode
)

206 
mode
 & 
S_IFMT
) {

207 #i‚de‡
WIN32


208 
S_IFLNK
: 
ac˚ss_bôs
[0] = 'l'; ;

210 
S_IFREG
: 
ac˚ss_bôs
[0] = '-'; ;

211 
S_IFDIR
: 
ac˚ss_bôs
[0] = 'd'; ;

212 
S_IFCHR
: 
ac˚ss_bôs
[0] = 'c'; ;

213 
S_IFBLK
: 
ac˚ss_bôs
[0] = 'b'; ;

214 : 
ac˚ss_bôs
[0] = '*';

216 
ac˚ss_bôs
[1] = "-r"[!!(
mode
 & 
S_IRUSR
)];

217 
ac˚ss_bôs
[2] = "-w"[!!(
mode
 & 
S_IWUSR
)];

218 
ac˚ss_bôs
[3] = "-xSs"[ !!(
mode
 & 
S_IXUSR
)

219 #i‚de‡
WIN32


220 + 2*!!(
mode
 & 
S_ISUID
)

223 
ac˚ss_bôs
[4] = "-r"[!!(
mode
 & 
S_IRGRP
)];

224 
ac˚ss_bôs
[5] = "-w"[!!(
mode
 & 
S_IWGRP
)];

225 
ac˚ss_bôs
[6] = "-xSs"[ !!(
mode
 & 
S_IXGRP
)

226 #i‚de‡
WIN32


227 + 2*!!(
mode
 & 
S_ISGID
)

230 
ac˚ss_bôs
[7] = "-r"[!!(
mode
 & 
S_IROTH
)];

231 
ac˚ss_bôs
[8] = "-w"[!!(
mode
 & 
S_IWOTH
)];

232 
ac˚ss_bôs
[9] = "-xTt"[ !!(
mode
 & 
S_IXOTH
)

233 #i‚de‡
WIN32


234 + 2*!!(
mode
 & 
S_ISVTX
)

237  
ac˚ss_bôs
;

238 
	}
}

240 
	$maö
(
¨gc
, *
¨gv
[])

242 
fûe_c⁄ãxt
 *
nf
;

243 
nfs_°©_64
 
°
;

245 #ifde‡
WIN32


246 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

247 
	`¥ötf
("FailedÅo start Winsock2\n");

252 #ifde‡
AROS


253 
	`¨os_öô_sockë
();

256 i‡(
¨gc
 < 2) {

257 
	`ußge
();

260 
nf
 = 
	`›í_fûe
(
¨gv
[1], 
O_RDONLY
);

261 i‡(
nf
 =
NULL
) {

262 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í %s\n", 
¨gv
[1]);

263 
	`exô
(10);

265 i‡(
	`nfs_f°©64
(
nf
->
nfs
,Çf->
nfsfh
, &
°
) < 0) {

266 
	`Ârötf
(
°dîr
, "FaûedÅÿ°© %s\n", 
¨gv
[1]);

267 
	`exô
(10);

270 
	`¥ötf
(" Fûe:%s\n", 
¨gv
[1]);

271 
	`¥ötf
(" Size: %-16" 
PRIu64
 "Blocks: %-11" PRIu64 " IO Block: %" PRIu64 " %s\n",

272 
°
.
nfs_size
, st.
nfs_blocks
, st.
nfs_blksize
,

273 
	`gë_fûe_ty≥
(
°
.
nfs_mode
));

274 
	`¥ötf
("Inode:%-12" 
PRIu64
 "Links %" PRIu64 "\n",

275 
°
.
nfs_öo
, st.
nfs_∆ök
);

276 
	`¥ötf
("Ac˚ss: (%04" 
PRIo64
 "/%sË Uid: ( %" 
PRIu64
 "/%s) Gid: ( %" PRIu64 "/%s)\n",

277 
°
.
nfs_mode
 & 07777, 
	`gë_ac˚ss_bôs
(st.nfs_mode),

278 
°
.
nfs_uid
, 
	`uid_to_«me
(st.nfs_uid),

279 
°
.
nfs_gid
, 
	`gid_to_«me
(st.nfs_gid));

281 
	`¥ötf
("Ac˚ss: %s", 
	`˘ime
–(c⁄° 
time_t
 *Ë&
°
.
nfs_©ime
));

282 
	`¥ötf
("Modify: %s", 
	`˘ime
–(c⁄° 
time_t
 *Ë&
°
.
nfs_mtime
));

283 
	`¥ötf
("Ch™ge: %s", 
	`˘ime
–(c⁄° 
time_t
 *Ë&
°
.
nfs_˘ime
));

284 
	`‰ì_fûe_c⁄ãxt
(
nf
);

287 
	}
}

	@win32/win32_compat.c

24 #i‚de‡
WIN32


26 
dummy
 
	g_U_
;

29 
	~<wö32/wö32_com∑t.h
>

30 
	~<î∫o.h
>

31 
	~<°dio.h
>

33 #unde‡
pﬁl


34 #unde‡
sockë


35 #unde‡
c⁄√˘


36 #unde‡
ac˚±


37 #unde‡
shutdown


38 #unde‡
gë≥î«me


39 #unde‡
¶ìp


40 #unde‡
öë_©⁄


41 #unde‡
gëtimeofday


42 #unde‡
°©


43 
	#as£π
(
a
)

	)

46 
	~<˘y≥.h
>

48 
	$wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
)

50 
sockaddr_ö
 
ß
;

51 
Àn
 = (
SOCKADDR
);

52 
ªt
 = -1;

53 
size_t
 
°rLí
 = 
	`°æí
(
§c
) + 1;

54 #ifde‡
UNICODE


55 
wch¨_t
 *
§cN⁄C⁄°
 = (wch¨_à*)
	`mÆloc
(
°rLí
*(wchar_t));

56 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

57 
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
§c
, -1, 
§cN⁄C⁄°
, 
°rLí
);

59 *
§cN⁄C⁄°
 = (*)
	`mÆloc
(
°rLí
);

60 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

61 
	`°∫˝y
(
§cN⁄C⁄°
, 
§c
, 
°rLí
);

64 if–
	`WSASåögToAddªss
(
§cN⁄C⁄°
,
af
,
NULL
,(
LPSOCKADDR
)&
ß
,&
Àn
) == 0 )

66 
ªt
 = 1;

70 if–
	`WSAGëLa°Eº‹
(Ë=
WSAEINVAL
 )

72 
ªt
 = -1;

75 
	`‰ì
(
§cN⁄C⁄°
);

76 
	`mem˝y
(
d°
, &
ß
.
sö_addr
, (
ö_addr
));

77  
ªt
;

78 
	}
}

80 
	$wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

82 
timevÆ
 
timeout
, *
t›å
;

83 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

84 
i
;

85 
rc
;

88 
	`FD_ZERO
(&
ifds
);

89 
	`FD_ZERO
(&
ofds
);

90 
	`FD_ZERO
(&
efds
);

91 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

93 
fds
[
i
].
ªvíts
 = 0;

94 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

96 
ù
 = &
ifds
;

97 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

99 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

101 
›
 = &
ofds
;

102 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

104 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

108 if(
timo
 < 0)

110 
t›å
 = 0;

114 
t›å
 = &
timeout
;

115 
timeout
.
tv_£c
 = 
timo
 / 1000;

116 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

119 #ifde‡
DEBUG_POLL


120 
	`¥ötf
("Entering select() sec=%ld usec=%ld ip=%lx op=%lx\n",

121 ()
timeout
.
tv_£c
, (Èimeout.
tv_u£c
, ()
ù
, ()
›
);

123 
rc
 = 
	`£À˘
(0, 
ù
, 
›
, &
efds
, 
t›å
);

124 #ifde‡
DEBUG_POLL


125 
	`¥ötf
("Exôög sñe˘Ñc=%d\n", 
rc
);

128 if(
rc
 <= 0)

129  
rc
;

131 if(
rc
 > 0)

133 
i
 = 0; i < 
nfds
; ++i)

135 
SOCKET
 
fd
 = 
fds
[
i
].fd;

136 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

137 
fds
[
i
].
ªvíts
 |
POLLIN
;

138 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

139 
fds
[
i
].
ªvíts
 |
POLLOUT
;

140 if(
	`FD_ISSET
(
fd
, &
efds
))

141 
fds
[
i
].
ªvíts
 |
POLLHUP
;

142 #ifde‡
DEBUG_POLL


143 
	`¥ötf
("%d %d %dÑevent = %x\n",

144 
	`FD_ISSET
(
fd
, &
ifds
), FD_ISSET(fd, &
ofds
), FD_ISSET(fd, &
efds
),

145 
fds
[
i
].
ªvíts


150  
rc
;

151 
	}
}

153 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
_MSC_EXTENSIONS
)

154 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000U
i64


	)

156 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000ULL

	)

159 #i‚de‡
__MINGW32__


160 
	stimez⁄e


162 
	mtz_möuãswe°
;

163 
	mtz_d°time
;

166 
	$wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

168 
FILETIME
 
·
;

169 
__öt64
 
tm¥es
 = 0;

170 
tzÊag
;

172 i‡(
NULL
 !
tv
)

174 
	`GëSy°emTimeAsFûeTime
(&
·
);

176 
tm¥es
 |
·
.
dwHighD©eTime
;

177 
tm¥es
 <<= 32;

178 
tm¥es
 |
·
.
dwLowD©eTime
;

181 
tm¥es
 -
DELTA_EPOCH_IN_MICROSECS
;

182 
tm¥es
 /= 10;

183 
tv
->
tv_£c
 = ()(
tm¥es
 / 1000000UL);

184 
tv
->
tv_u£c
 = ()(
tm¥es
 % 1000000UL);

187 i‡(
NULL
 !
tz
)

189 i‡(!
tzÊag
)

191 
	`_tz£t
();

192 
tzÊag
++;

194 
tz
->
tz_möuãswe°
 = 
_timez⁄e
 / 60;

195 
tz
->
tz_d°time
 = 
_daylight
;

199 
	}
}

202 * 
	$°∫dup
(c⁄° * 
s
, 
size_t
 
n
)

204 
size_t
 
Àn
;

205 
Àn
=0;Üí<
n
 && 
s
[len];Üen++);

206 
Àn
 += 1;

207 if(!
Àn
)

209 * 
c›y
 = 
	`mÆloc
(
Àn
);

210 if(!
c›y
)

212 
	`mem˝y
(
c›y
, 
s
, 
Àn
-1);

213 
c›y
[
Àn
-1] = 0;

214  
c›y
;

215 
	}
}

	@win32/win32_errnowrapper.h

22 #i‚de‡
WIN32_ERRNOWRAPPER_H_


23 
	#WIN32_ERRNOWRAPPER_H_


	)

25 #unde‡
î∫o


26 
	#î∫o
 
	`WSAGëLa°Eº‹
()

	)

27 #unde‡
EAGAIN


28 #unde‡
EWOULDBLOCK


29 #unde‡
EINTR


30 #unde‡
EINPROGRESS


32 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

33 
	#EAGAIN
 
WSAEWOULDBLOCK


34 
	#EINTR
 
WSAEINTR


	)

35 
	#EINPROGRESS
 
WSAEWOULDBLOCK


36 

	)

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


78 
	`__©åibuã_dïªˇãd_msg__
 ("Use inet_ntop instead");

83 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (c⁄° *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


31 
	~<bôs/dl_föd_obje˘.h
>

37 
	#RTLD_NEXT
 ((*Ë-1l)

	)

42 
	#RTLD_DEFAULT
 ((*Ë0)

	)

46 
	tLmid_t
;

49 
	#LM_ID_BASE
 0

	)

50 
	#LM_ID_NEWLM
 -1

	)

54 
__BEGIN_DECLS


58 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

62 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

66 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

67 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

69 #ifde‡
__USE_GNU


71 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

75 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

76 c⁄° *
__ª°ri˘
 
__«me
,

77 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

78 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

84 *
	$dÀº‹
 (Ë
__THROW
;

87 #ifde‡
__USE_GNU


92 c⁄° *
dli_‚ame
;

93 *
dli_fba£
;

94 c⁄° *
dli_¢ame
;

95 *
dli_ßddr
;

96 } 
	tDl_öfo
;

100 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

101 
__THROW
 
	`__n⁄nuŒ
 ((2));

104 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

105 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

113 
RTLD_DL_SYMENT
 = 1,

116 
RTLD_DL_LINKMAP
 = 2

125 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

126 
__ªque°
, *
__ª°ri˘
 
__¨g
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

133 
RTLD_DI_LMID
 = 1,

137 
RTLD_DI_LINKMAP
 = 2,

139 
RTLD_DI_CONFIGADDR
 = 3,

146 
RTLD_DI_SERINFO
 = 4,

147 
RTLD_DI_SERINFOSIZE
 = 5,

151 
RTLD_DI_ORIGIN
 = 6,

153 
RTLD_DI_PROFILENAME
 = 7,

154 
RTLD_DI_PROFILEOUT
 = 8,

159 
RTLD_DI_TLS_MODID
 = 9,

165 
RTLD_DI_TLS_DATA
 = 10,

167 
RTLD_DI_MAX
 = 10

175 *
dls_«me
;

176 
dls_Êags
;

177 } 
	tDl_£Ω©h
;

183 
size_t
 
dls_size
;

184 
dls_˙t
;

185 #i‡
	`__GNUC_PREREQ
 (3, 0)

190 
__exãnsi⁄__
 union

192 
Dl_£Ω©h
 
dls_£Ω©h
[0];

193 
Dl_£Ω©h
 
__dls_£Ω©h_∑d
[1];

196 
Dl_£Ω©h
 
dls_£Ω©h
[1];

198 } 
	tDl_£röfo
;

200 
	sdl_föd_obje˘


202 
__exãnsi⁄__
 
dlfo_Êags
;

203 *
dlfo_m≠_°¨t
;

204 *
dlfo_m≠_íd
;

205 
lök_m≠
 *
dlfo_lök_m≠
;

206 *
dlfo_eh_‰ame
;

207 #i‡
DLFO_STRUCT_HAS_EH_DBASE


208 *
dlfo_eh_dba£
;

209 #i‡
__WORDSIZE
 == 32

210 
__dlfo_eh_dba£_∑d
;

213 #i‡
DLFO_STRUCT_HAS_EH_COUNT


214 
dlfo_eh_cou¡
;

215 
__dlfo_eh_cou¡_∑d
;

217 
__exãnsi⁄__
 
__dÊo_ª£rved
[7];

222 
	$_dl_föd_obje˘
 (*
__addªss
, 
dl_föd_obje˘
 *
__ªsu…
Ë
__THROW
;

227 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_TIME_BITS64


148 #i‚de‡
__USE_FILE_OFFSET64


149 
f˙é
 (
__fd
, 
__cmd
, ...);

151 #ifde‡
__REDIRECT


152 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

154 
	#f˙é
 
f˙é64


	)

157 #ifde‡
__USE_LARGEFILE64


158 
f˙é64
 (
__fd
, 
__cmd
, ...);

161 #ifde‡
__REDIRECT


162 
__REDIRECT_NTH
 (
f˙é
, (
__fd
, 
__ªque°
, ...),

163 
__f˙é_time64
);

164 
__REDIRECT_NTH
 (
f˙é64
, (
__fd
, 
__ªque°
, ...),

165 
__f˙é_time64
);

167 
	$__f˙é_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

168 
	#f˙é64
 
__f˙é_time64


	)

169 
	#f˙é
 
__f˙é_time64


	)

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	~<bôs/ty≥s/FILE.h
>

56 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


61 
£tgª¡
 ();

67 
ídgª¡
 ();

73 
group
 *
gëgª¡
 ();

76 #ifdef 
__USE_MISC


83 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

86 #ifde‡
__USE_GNU


93 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

94 
FILE
 *
__ª°ri˘
 
__f
);

101 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

107 
group
 *
gëg∫am
 (c⁄° *
__«me
);

109 #ifde‡
__USE_POSIX


111 #ifde‡
__USE_MISC


114 
	#NSS_BUFLEN_GROUP
 1024

	)

130 #ifde‡
__USE_GNU


131 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

132 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

133 
group
 **
__ª°ri˘
 
__ªsu…
);

140 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
group
 **
__ª°ri˘
 
__ªsu…
);

148 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

149 
group
 *
__ª°ri˘
 
__ªsu…buf
,

150 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

151 
group
 **
__ª°ri˘
 
__ªsu…
);

153 #ifdef 
__USE_MISC


161 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

162 
group
 *
__ª°ri˘
 
__ªsu…buf
,

163 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

164 
group
 **
__ª°ri˘
 
__ªsu…
);

170 #ifdef 
__USE_MISC


172 
	#__√ed_size_t


	)

173 
	~<°ddef.h
>

176 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

186 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

187 
__gid_t
 *
__groups
, *
__ngroups
);

197 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

201 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 
__END_DECLS


	@/usr/include/linux/in.h

19 #i‚de‡
_LINUX_IN_H


20 
	#_LINUX_IN_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/libc-com∑t.h
>

24 
	~<löux/sockë.h
>

26 #i‡
__UAPI_DEF_IN_IPPROTO


29 
	mIPPROTO_IP
 = 0,

30 
	#IPPROTO_IP
 
IPPROTO_IP


	)

31 
	mIPPROTO_ICMP
 = 1,

32 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

33 
	mIPPROTO_IGMP
 = 2,

34 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

35 
	mIPPROTO_IPIP
 = 4,

36 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

37 
	mIPPROTO_TCP
 = 6,

38 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

39 
	mIPPROTO_EGP
 = 8,

40 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

41 
	mIPPROTO_PUP
 = 12,

42 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

43 
	mIPPROTO_UDP
 = 17,

44 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

45 
	mIPPROTO_IDP
 = 22,

46 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

47 
	mIPPROTO_TP
 = 29,

48 
	#IPPROTO_TP
 
IPPROTO_TP


	)

49 
	mIPPROTO_DCCP
 = 33,

50 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

51 
	mIPPROTO_IPV6
 = 41,

52 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

53 
	mIPPROTO_RSVP
 = 46,

54 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

55 
	mIPPROTO_GRE
 = 47,

56 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

57 
	mIPPROTO_ESP
 = 50,

58 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

59 
	mIPPROTO_AH
 = 51,

60 
	#IPPROTO_AH
 
IPPROTO_AH


	)

61 
	mIPPROTO_MTP
 = 92,

62 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

63 
	mIPPROTO_BEETPH
 = 94,

64 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

65 
	mIPPROTO_ENCAP
 = 98,

66 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

67 
	mIPPROTO_PIM
 = 103,

68 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

69 
	mIPPROTO_COMP
 = 108,

70 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

71 
	mIPPROTO_SCTP
 = 132,

72 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

73 
	mIPPROTO_UDPLITE
 = 136,

74 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

75 
	mIPPROTO_MPLS
 = 137,

76 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

77 
	mIPPROTO_ETHERNET
 = 143,

78 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

79 
	mIPPROTO_RAW
 = 255,

80 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

81 
	mIPPROTO_MPTCP
 = 262,

82 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

83 
	mIPPROTO_MAX


87 #i‡
__UAPI_DEF_IN_ADDR


89 
	sö_addr
 {

90 
__be32
 
	ms_addr
;

94 
	#IP_TOS
 1

	)

95 
	#IP_TTL
 2

	)

96 
	#IP_HDRINCL
 3

	)

97 
	#IP_OPTIONS
 4

	)

98 
	#IP_ROUTER_ALERT
 5

	)

99 
	#IP_RECVOPTS
 6

	)

100 
	#IP_RETOPTS
 7

	)

101 
	#IP_PKTINFO
 8

	)

102 
	#IP_PKTOPTIONS
 9

	)

103 
	#IP_MTU_DISCOVER
 10

	)

104 
	#IP_RECVERR
 11

	)

105 
	#IP_RECVTTL
 12

	)

106 
	#IP_RECVTOS
 13

	)

107 
	#IP_MTU
 14

	)

108 
	#IP_FREEBIND
 15

	)

109 
	#IP_IPSEC_POLICY
 16

	)

110 
	#IP_XFRM_POLICY
 17

	)

111 
	#IP_PASSSEC
 18

	)

112 
	#IP_TRANSPARENT
 19

	)

115 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

118 
	#IP_ORIGDSTADDR
 20

	)

119 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

121 
	#IP_MINTTL
 21

	)

122 
	#IP_NODEFRAG
 22

	)

123 
	#IP_CHECKSUM
 23

	)

124 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

125 
	#IP_RECVFRAGSIZE
 25

	)

126 
	#IP_RECVERR_RFC4884
 26

	)

129 
	#IP_PMTUDISC_DONT
 0

	)

130 
	#IP_PMTUDISC_WANT
 1

	)

131 
	#IP_PMTUDISC_DO
 2

	)

132 
	#IP_PMTUDISC_PROBE
 3

	)

137 
	#IP_PMTUDISC_INTERFACE
 4

	)

141 
	#IP_PMTUDISC_OMIT
 5

	)

143 
	#IP_MULTICAST_IF
 32

	)

144 
	#IP_MULTICAST_TTL
 33

	)

145 
	#IP_MULTICAST_LOOP
 34

	)

146 
	#IP_ADD_MEMBERSHIP
 35

	)

147 
	#IP_DROP_MEMBERSHIP
 36

	)

148 
	#IP_UNBLOCK_SOURCE
 37

	)

149 
	#IP_BLOCK_SOURCE
 38

	)

150 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

151 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

152 
	#IP_MSFILTER
 41

	)

153 
	#MCAST_JOIN_GROUP
 42

	)

154 
	#MCAST_BLOCK_SOURCE
 43

	)

155 
	#MCAST_UNBLOCK_SOURCE
 44

	)

156 
	#MCAST_LEAVE_GROUP
 45

	)

157 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

158 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

159 
	#MCAST_MSFILTER
 48

	)

160 
	#IP_MULTICAST_ALL
 49

	)

161 
	#IP_UNICAST_IF
 50

	)

162 
	#IP_LOCAL_PORT_RANGE
 51

	)

163 
	#IP_PROTOCOL
 52

	)

165 
	#MCAST_EXCLUDE
 0

	)

166 
	#MCAST_INCLUDE
 1

	)

169 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

170 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

174 #i‡
__UAPI_DEF_IP_MREQ


175 
	sù_mªq
 {

176 
ö_addr
 
	mimr_mu…üddr
;

177 
ö_addr
 
	mimr_öãrÁ˚
;

180 
	sù_mªqn
 {

181 
ö_addr
 
	mimr_mu…üddr
;

182 
ö_addr
 
	mimr_addªss
;

183 
	mimr_ifödex
;

186 
	sù_mªq_sour˚
 {

187 
__be32
 
	mimr_mu…üddr
;

188 
__be32
 
	mimr_öãrÁ˚
;

189 
__be32
 
	mimr_sour˚addr
;

192 
	sù_msfûãr
 {

195 
__be32
 
	mimsf_mu…üddr_aux
;

196 
__be32
 
	mimsf_öãrÁ˚_aux
;

197 
__u32
 
	mimsf_fmode_aux
;

198 
__u32
 
	mimsf_num§c_aux
;

199 
__be32
 
	mimsf_¶i°
[1];

202 
__be32
 
	mimsf_mu…üddr
;

203 
__be32
 
	mimsf_öãrÁ˚
;

204 
__u32
 
	mimsf_fmode
;

205 
__u32
 
	mimsf_num§c
;

206 
__be32
 
	mimsf_¶i°_Êex
[];

211 
	#IP_MSFILTER_SIZE
(
num§c
) \

212 ((
ù_msfûãr
Ë- (
__u32
) \

213 + (
num§c
Ë* (
__u32
))

	)

215 
	sgroup_ªq
 {

216 
__u32
 
	mgr_öãrÁ˚
;

217 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

220 
	sgroup_sour˚_ªq
 {

221 
__u32
 
	mg§_öãrÁ˚
;

222 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

223 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

226 
	sgroup_fûãr
 {

229 
__u32
 
	mgf_öãrÁ˚_aux
;

230 
__kî√l_sockaddr_°‹age
 
	mgf_group_aux
;

231 
__u32
 
	mgf_fmode_aux
;

232 
__u32
 
	mgf_num§c_aux
;

233 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

236 
__u32
 
	mgf_öãrÁ˚
;

237 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

238 
__u32
 
	mgf_fmode
;

239 
__u32
 
	mgf_num§c
;

240 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°_Êex
[];

245 
	#GROUP_FILTER_SIZE
(
num§c
) \

246 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

247 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

250 #i‡
__UAPI_DEF_IN_PKTINFO


251 
	sö_pktöfo
 {

252 
	mùi_ifödex
;

253 
ö_addr
 
	mùi_•ec_d°
;

254 
ö_addr
 
	mùi_addr
;

259 #i‡ 
__UAPI_DEF_SOCKADDR_IN


260 
	#__SOCK_SIZE__
 16

	)

261 
	ssockaddr_ö
 {

262 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

263 
__be16
 
	msö_p‹t
;

264 
ö_addr
 
	msö_addr
;

267 
	m__∑d
[
__SOCK_SIZE__
 - () -

268 (Ë- (
ö_addr
)];

270 
	#sö_zîo
 
__∑d


	)

273 #i‡
__UAPI_DEF_IN_CLASS


279 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

280 
	#IN_CLASSA_NET
 0xff000000

	)

281 
	#IN_CLASSA_NSHIFT
 24

	)

282 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

283 
	#IN_CLASSA_MAX
 128

	)

285 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

286 
	#IN_CLASSB_NET
 0xffff0000

	)

287 
	#IN_CLASSB_NSHIFT
 16

	)

288 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

289 
	#IN_CLASSB_MAX
 65536

	)

291 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

292 
	#IN_CLASSC_NET
 0xffffff00

	)

293 
	#IN_CLASSC_NSHIFT
 8

	)

294 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

296 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

297 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

298 
	#IN_MULTICAST_NET
 0xe0000000

	)

300 
	#IN_BADCLASS
(
a
Ë(((Ë◊ËË=()0xffffffff)

	)

301 
	#IN_EXPERIMENTAL
(
a
Ë
	`IN_BADCLASS
(◊))

	)

303 
	#IN_CLASSE
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

304 
	#IN_CLASSE_NET
 0xffffffff

	)

305 
	#IN_CLASSE_NSHIFT
 0

	)

308 
	#INADDR_ANY
 ((Ë0x00000000)

	)

311 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

314 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

317 
	#INADDR_DUMMY
 ((Ë0xc0000008)

	)

320 
	#IN_LOOPBACKNET
 127

	)

323 
	#INADDR_LOOPBACK
 0x7f000001

	)

324 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

327 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

328 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

329 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

330 
	#INADDR_ALLSNOOPERS_GROUP
 0xe000006aU

	)

331 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

335 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/tls.h

34 #i‚de‡
_LINUX_TLS_H


35 
	#_LINUX_TLS_H


	)

37 
	~<löux/ty≥s.h
>

40 
	#TLS_TX
 1

	)

41 
	#TLS_RX
 2

	)

44 
	#TLS_VERSION_MINOR
(
vî
Ë((vîË& 0xFF)

	)

45 
	#TLS_VERSION_MAJOR
(
vî
Ë(((vîË>> 8Ë& 0xFF)

	)

47 
	#TLS_VERSION_NUMBER
(
id
Ë((((id##
_VERSION_MAJOR
) & 0xFF) << 8) | \

48 ((
id
##
_VERSION_MINOR
Ë& 0xFF))

	)

50 
	#TLS_1_2_VERSION_MAJOR
 0x3

	)

51 
	#TLS_1_2_VERSION_MINOR
 0x3

	)

52 
	#TLS_1_2_VERSION
 
	`TLS_VERSION_NUMBER
(
TLS_1_2
)

	)

54 
	#TLS_1_3_VERSION_MAJOR
 0x3

	)

55 
	#TLS_1_3_VERSION_MINOR
 0x4

	)

56 
	#TLS_1_3_VERSION
 
	`TLS_VERSION_NUMBER
(
TLS_1_3
)

	)

59 
	#TLS_CIPHER_AES_GCM_128
 51

	)

60 
	#TLS_CIPHER_AES_GCM_128_IV_SIZE
 8

	)

61 
	#TLS_CIPHER_AES_GCM_128_KEY_SIZE
 16

	)

62 
	#TLS_CIPHER_AES_GCM_128_SALT_SIZE
 4

	)

63 
	#TLS_CIPHER_AES_GCM_128_TAG_SIZE
 16

	)

64 
	#TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE
 8

	)

66 
	#TLS_CIPHER_AES_GCM_256
 52

	)

67 
	#TLS_CIPHER_AES_GCM_256_IV_SIZE
 8

	)

68 
	#TLS_CIPHER_AES_GCM_256_KEY_SIZE
 32

	)

69 
	#TLS_CIPHER_AES_GCM_256_SALT_SIZE
 4

	)

70 
	#TLS_CIPHER_AES_GCM_256_TAG_SIZE
 16

	)

71 
	#TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE
 8

	)

73 
	#TLS_CIPHER_AES_CCM_128
 53

	)

74 
	#TLS_CIPHER_AES_CCM_128_IV_SIZE
 8

	)

75 
	#TLS_CIPHER_AES_CCM_128_KEY_SIZE
 16

	)

76 
	#TLS_CIPHER_AES_CCM_128_SALT_SIZE
 4

	)

77 
	#TLS_CIPHER_AES_CCM_128_TAG_SIZE
 16

	)

78 
	#TLS_CIPHER_AES_CCM_128_REC_SEQ_SIZE
 8

	)

80 
	#TLS_CIPHER_CHACHA20_POLY1305
 54

	)

81 
	#TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE
 12

	)

82 
	#TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE
 32

	)

83 
	#TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE
 0

	)

84 
	#TLS_CIPHER_CHACHA20_POLY1305_TAG_SIZE
 16

	)

85 
	#TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE
 8

	)

87 
	#TLS_SET_RECORD_TYPE
 1

	)

88 
	#TLS_GET_RECORD_TYPE
 2

	)

90 
	sés_¸y±o_öfo
 {

91 
__u16
 
	mvîsi⁄
;

92 
__u16
 
	mcùhî_ty≥
;

95 
	sés12_¸y±o_öfo_´s_gcm_128
 {

96 
és_¸y±o_öfo
 
	möfo
;

97 
	miv
[
TLS_CIPHER_AES_GCM_128_IV_SIZE
];

98 
	mkey
[
TLS_CIPHER_AES_GCM_128_KEY_SIZE
];

99 
	mß…
[
TLS_CIPHER_AES_GCM_128_SALT_SIZE
];

100 
	mªc_£q
[
TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE
];

103 
	sés12_¸y±o_öfo_´s_gcm_256
 {

104 
és_¸y±o_öfo
 
	möfo
;

105 
	miv
[
TLS_CIPHER_AES_GCM_256_IV_SIZE
];

106 
	mkey
[
TLS_CIPHER_AES_GCM_256_KEY_SIZE
];

107 
	mß…
[
TLS_CIPHER_AES_GCM_256_SALT_SIZE
];

108 
	mªc_£q
[
TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE
];

111 
	sés12_¸y±o_öfo_´s_ccm_128
 {

112 
és_¸y±o_öfo
 
	möfo
;

113 
	miv
[
TLS_CIPHER_AES_CCM_128_IV_SIZE
];

114 
	mkey
[
TLS_CIPHER_AES_CCM_128_KEY_SIZE
];

115 
	mß…
[
TLS_CIPHER_AES_CCM_128_SALT_SIZE
];

116 
	mªc_£q
[
TLS_CIPHER_AES_CCM_128_REC_SEQ_SIZE
];

119 
	sés12_¸y±o_öfo_chacha20_pﬁy1305
 {

120 
és_¸y±o_öfo
 
	möfo
;

121 
	miv
[
TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE
];

122 
	mkey
[
TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE
];

123 
	mß…
[
TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE
];

124 
	mªc_£q
[
TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE
];

128 
	mTLS_INFO_UNSPEC
,

129 
	mTLS_INFO_VERSION
,

130 
	mTLS_INFO_CIPHER
,

131 
	mTLS_INFO_TXCONF
,

132 
	mTLS_INFO_RXCONF
,

133 
	m__TLS_INFO_MAX
,

135 
	#TLS_INFO_MAX
 (
__TLS_INFO_MAX
 - 1)

	)

137 
	#TLS_CONF_BASE
 1

	)

138 
	#TLS_CONF_SW
 2

	)

139 
	#TLS_CONF_HW
 3

	)

140 
	#TLS_CONF_HW_RECORD
 4

	)

	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
,

195 
__i‚ame
[
IF_NAMESIZE
]Ë
__THROW


196 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2));

199 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

202 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

204 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

704 #ifde‡
__USE_TIME_BITS64


705 #i‡
	`deföed
(
__REDIRECT
)

706 
	`__REDIRECT
 (
gai_su•íd
, (c⁄° 
gaicb
 *c⁄° 
__li°
[],

707 
__ít
,

708 c⁄° 
time•ec
 *
__timeout
),

709 
__gai_su•íd_time64
);

711 
	#gai_su•íd
 
__gai_su•íd_time64


	)

716 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

719 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

722 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_ETHERNET
 = 143,

91 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

92 
	mIPPROTO_RAW
 = 255,

93 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

94 
	mIPPROTO_MPTCP
 = 262,

95 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

96 
	mIPPROTO_MAX


102 #i‡!
__USE_KERNEL_IPV6_DEFS


105 
	mIPPROTO_HOPOPTS
 = 0,

106 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

107 
	mIPPROTO_ROUTING
 = 43,

108 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

109 
	mIPPROTO_FRAGMENT
 = 44,

110 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

111 
	mIPPROTO_ICMPV6
 = 58,

112 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

113 
	mIPPROTO_NONE
 = 59,

114 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

115 
	mIPPROTO_DSTOPTS
 = 60,

116 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

117 
	mIPPROTO_MH
 = 135

118 
	#IPPROTO_MH
 
IPPROTO_MH


	)

123 
uöt16_t
 
	tö_p‹t_t
;

128 
	mIPPORT_ECHO
 = 7,

129 
	mIPPORT_DISCARD
 = 9,

130 
	mIPPORT_SYSTAT
 = 11,

131 
	mIPPORT_DAYTIME
 = 13,

132 
	mIPPORT_NETSTAT
 = 15,

133 
	mIPPORT_FTP
 = 21,

134 
	mIPPORT_TELNET
 = 23,

135 
	mIPPORT_SMTP
 = 25,

136 
	mIPPORT_TIMESERVER
 = 37,

137 
	mIPPORT_NAMESERVER
 = 42,

138 
	mIPPORT_WHOIS
 = 43,

139 
	mIPPORT_MTP
 = 57,

141 
	mIPPORT_TFTP
 = 69,

142 
	mIPPORT_RJE
 = 77,

143 
	mIPPORT_FINGER
 = 79,

144 
	mIPPORT_TTYLINK
 = 87,

145 
	mIPPORT_SUPDUP
 = 95,

148 
	mIPPORT_EXECSERVER
 = 512,

149 
	mIPPORT_LOGINSERVER
 = 513,

150 
	mIPPORT_CMDSERVER
 = 514,

151 
	mIPPORT_EFSSERVER
 = 520,

154 
	mIPPORT_BIFFUDP
 = 512,

155 
	mIPPORT_WHOSERVER
 = 513,

156 
	mIPPORT_ROUTESERVER
 = 520,

159 
	mIPPORT_RESERVED
 = 1024,

162 
	mIPPORT_USERRESERVED
 = 5000

170 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

171 
	#IN_CLASSA_NET
 0xff000000

	)

172 
	#IN_CLASSA_NSHIFT
 24

	)

173 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

174 
	#IN_CLASSA_MAX
 128

	)

176 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

177 
	#IN_CLASSB_NET
 0xffff0000

	)

178 
	#IN_CLASSB_NSHIFT
 16

	)

179 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

180 
	#IN_CLASSB_MAX
 65536

	)

182 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

183 
	#IN_CLASSC_NET
 0xffffff00

	)

184 
	#IN_CLASSC_NSHIFT
 8

	)

185 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

187 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

188 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

190 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

191 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

194 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

196 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

198 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

201 
	#INADDR_DUMMY
 ((
ö_addr_t
Ë0xc0000008)

	)

204 
	#IN_LOOPBACKNET
 127

	)

206 #i‚de‡
INADDR_LOOPBACK


207 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

211 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

212 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

213 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

214 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

215 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

217 #i‡!
__USE_KERNEL_IPV6_DEFS


219 
	sö6_addr


223 
uöt8_t
 
	m__u6_addr8
[16];

224 
uöt16_t
 
	m__u6_addr16
[8];

225 
uöt32_t
 
	m__u6_addr32
[4];

226 } 
	m__ö6_u
;

227 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

228 #ifde‡
__USE_MISC


229 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

230 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

235 c⁄° 
ö6_addr
 
ö6addr_™y
;

236 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

237 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

238 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

240 
	#INET_ADDRSTRLEN
 16

	)

241 
	#INET6_ADDRSTRLEN
 46

	)

245 
	ssockaddr_ö


247 
__SOCKADDR_COMMON
 (
sö_
);

248 
ö_p‹t_t
 
	msö_p‹t
;

249 
ö_addr
 
	msö_addr
;

252 
	msö_zîo
[ (
sockaddr
)

253 - 
__SOCKADDR_COMMON_SIZE


254 -  (
ö_p‹t_t
)

255 -  (
ö_addr
)];

258 #i‡!
__USE_KERNEL_IPV6_DEFS


260 
	ssockaddr_ö6


262 
__SOCKADDR_COMMON
 (
sö6_
);

263 
ö_p‹t_t
 
	msö6_p‹t
;

264 
uöt32_t
 
	msö6_Êowöfo
;

265 
ö6_addr
 
	msö6_addr
;

266 
uöt32_t
 
	msö6_sc›e_id
;

270 #ifde‡
__USE_MISC


272 
	sù_mªq


275 
ö_addr
 
	mimr_mu…üddr
;

278 
ö_addr
 
	mimr_öãrÁ˚
;

281 
	sù_mªq_sour˚


284 
ö_addr
 
	mimr_mu…üddr
;

287 
ö_addr
 
	mimr_öãrÁ˚
;

290 
ö_addr
 
	mimr_sour˚addr
;

294 #i‡!
__USE_KERNEL_IPV6_DEFS


296 
	sùv6_mªq


299 
ö6_addr
 
	mùv6mr_mu…üddr
;

302 
	mùv6mr_öãrÁ˚
;

306 #ifde‡
__USE_MISC


308 
	sgroup_ªq


311 
uöt32_t
 
	mgr_öãrÁ˚
;

314 
sockaddr_°‹age
 
	mgr_group
;

317 
	sgroup_sour˚_ªq


320 
uöt32_t
 
	mg§_öãrÁ˚
;

323 
sockaddr_°‹age
 
	mg§_group
;

326 
sockaddr_°‹age
 
	mg§_sour˚
;

331 
	sù_msfûãr


334 
ö_addr
 
	mimsf_mu…üddr
;

337 
ö_addr
 
	mimsf_öãrÁ˚
;

340 
uöt32_t
 
	mimsf_fmode
;

343 
uöt32_t
 
	mimsf_num§c
;

345 
ö_addr
 
	mimsf_¶i°
[1];

348 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

349 -  (
ö_addr
) \

350 + (
num§c
Ë*  (
ö_addr
))

	)

352 
	sgroup_fûãr


355 
uöt32_t
 
	mgf_öãrÁ˚
;

358 
sockaddr_°‹age
 
	mgf_group
;

361 
uöt32_t
 
	mgf_fmode
;

364 
uöt32_t
 
	mgf_num§c
;

366 
sockaddr_°‹age
 
	mgf_¶i°
[1];

369 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

370 -  (
sockaddr_°‹age
) \

371 + ((
num§c
) \

372 *  (
sockaddr_°‹age
)))

	)

382 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

384 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

385 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

386 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

387 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

388 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

390 
	~<ídün.h
>

393 
	~<bôs/byãsw≠.h
>

394 
	~<bôs/uöä-idítôy.h
>

396 #ifde‡
__OPTIMIZE__


400 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


403 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

404 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

405 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

406 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

408 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


409 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

410 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

411 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

412 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

417 #ifde‡
__GNUC__


418 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

426 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

430 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

431 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

432 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

434 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

435 (
__exãnsi⁄__
 \

436 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

437 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

439 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

440 (
__exãnsi⁄__
 \

441 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

442 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

444 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

451 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

455 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

456 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

457 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

459 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

460 (
__exãnsi⁄__
 \

461 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

462 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

463 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

464 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

465 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

466 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

468 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

469 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

472 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

474 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

475 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

476 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

477 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

478 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

480 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

482 =
	`ht⁄l
 (0x„800000))

	)

484 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

486 =
	`ht⁄l
 (0x„c00000))

	)

488 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

489 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

490 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

491 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

493 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

494 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

497 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

499 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

500 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

501 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

502 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

503 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

506 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

508 #ifde‡
__USE_MISC


510 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

513 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

514 
__THROW
;

518 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

522 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

526 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

530 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

531 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

532 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

534 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

535 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

536 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

539 #ifde‡
__USE_GNU


540 
cmsghdr
;

542 #i‡!
__USE_KERNEL_IPV6_DEFS


544 
	sö6_pktöfo


546 
ö6_addr
 
ùi6_addr
;

547 
ùi6_ifödex
;

551 
	sù6_mtuöfo


553 
sockaddr_ö6
 
ù6m_addr
;

554 
uöt32_t
 
ù6m_mtu
;

559 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

562 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

563 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

564 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

565 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

566 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

567 
__mu…x
, 
__∂usy
)

568 
__THROW
 
__©åibuã_dïªˇãd__
;

569 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

570 
uöt8_t
 **
__çåp
)

571 
__THROW
 
__©åibuã_dïªˇãd__
;

572 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

573 
uöt8_t
 **
__çåp
, 
__ty≥
)

574 
__THROW
 
__©åibuã_dïªˇãd__
;

578 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

579 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

583 
__THROW
;

584 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

586 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

587 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

588 **
__d©abuÂ
Ë
__THROW
;

589 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

590 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

591 **
__d©abuÂ
Ë
__THROW
;

592 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

593 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

597 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

598 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

599 
__£gmíts
Ë
__THROW
;

600 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

601 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

602 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

603 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

604 
__THROW
;

610 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

611 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

612 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

613 
__THROW
;

616 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

617 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

618 
uöt32_t
 
__num§c
,

619 c⁄° 
ö_addr
 *
__¶i°
)

620 
__THROW
;

624 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

627 
uöt32_t
 *
__num§c
,

628 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

632 c⁄° 
sockaddr
 *
__group
,

633 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

634 
uöt32_t
 
__num§c
,

635 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

638 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

76 
	#TCP_FASTOPEN_KEY
 33

	)

77 
	#TCP_FASTOPEN_NO_COOKIE
 34

	)

78 
	#TCP_ZEROCOPY_RECEIVE
 35

	)

79 
	#TCP_INQ
 36

	)

81 
	#TCP_CM_INQ
 
TCP_INQ


	)

82 
	#TCP_TX_DELAY
 37

	)

84 
	#TCP_REPAIR_ON
 1

	)

85 
	#TCP_REPAIR_OFF
 0

	)

86 
	#TCP_REPAIR_OFF_NO_WP
 -1

	)

88 #ifde‡
__USE_MISC


89 
	~<sys/ty≥s.h
>

90 
	~<sys/sockë.h
>

91 
	~<°döt.h
>

93 
uöt32_t
 
	tt˝_£q
;

98 
	st˝hdr


100 
__exãnsi⁄__
 union

104 
uöt16_t
 
	mth_•‹t
;

105 
uöt16_t
 
	mth_dp‹t
;

106 
t˝_£q
 
	mth_£q
;

107 
t˝_£q
 
	mth_ack
;

108 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


109 
uöt8_t
 
	mth_x2
:4;

110 
uöt8_t
 
	mth_off
:4;

112 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


113 
uöt8_t
 
	mth_off
:4;

114 
uöt8_t
 
	mth_x2
:4;

116 
uöt8_t
 
	mth_Êags
;

117 
	#TH_FIN
 0x01

	)

118 
	#TH_SYN
 0x02

	)

119 
	#TH_RST
 0x04

	)

120 
	#TH_PUSH
 0x08

	)

121 
	#TH_ACK
 0x10

	)

122 
	#TH_URG
 0x20

	)

123 
uöt16_t
 
	mth_wö
;

124 
uöt16_t
 
	mth_sum
;

125 
uöt16_t
 
	mth_uΩ
;

129 
uöt16_t
 
	msour˚
;

130 
uöt16_t
 
	mde°
;

131 
uöt32_t
 
	m£q
;

132 
uöt32_t
 
	mack_£q
;

133 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mdoff
:4;

136 
uöt16_t
 
	mfö
:1;

137 
uöt16_t
 
	msyn
:1;

138 
uöt16_t
 
	mr°
:1;

139 
uöt16_t
 
	mpsh
:1;

140 
uöt16_t
 
	mack
:1;

141 
uöt16_t
 
	murg
:1;

142 
uöt16_t
 
	mªs2
:2;

143 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
uöt16_t
 
	mdoff
:4;

145 
uöt16_t
 
	mªs1
:4;

146 
uöt16_t
 
	mªs2
:2;

147 
uöt16_t
 
	murg
:1;

148 
uöt16_t
 
	mack
:1;

149 
uöt16_t
 
	mpsh
:1;

150 
uöt16_t
 
	mr°
:1;

151 
uöt16_t
 
	msyn
:1;

152 
uöt16_t
 
	mfö
:1;

156 
uöt16_t
 
	mwödow
;

157 
uöt16_t
 
	mcheck
;

158 
uöt16_t
 
	murg_±r
;

165 
	mTCP_ESTABLISHED
 = 1,

166 
	mTCP_SYN_SENT
,

167 
	mTCP_SYN_RECV
,

168 
	mTCP_FIN_WAIT1
,

169 
	mTCP_FIN_WAIT2
,

170 
	mTCP_TIME_WAIT
,

171 
	mTCP_CLOSE
,

172 
	mTCP_CLOSE_WAIT
,

173 
	mTCP_LAST_ACK
,

174 
	mTCP_LISTEN
,

175 
	mTCP_CLOSING


178 
	#TCPOPT_EOL
 0

	)

179 
	#TCPOPT_NOP
 1

	)

180 
	#TCPOPT_MAXSEG
 2

	)

181 
	#TCPOLEN_MAXSEG
 4

	)

182 
	#TCPOPT_WINDOW
 3

	)

183 
	#TCPOLEN_WINDOW
 3

	)

184 
	#TCPOPT_SACK_PERMITTED
 4

	)

185 
	#TCPOLEN_SACK_PERMITTED
 2

	)

186 
	#TCPOPT_SACK
 5

	)

187 
	#TCPOPT_TIMESTAMP
 8

	)

188 
	#TCPOLEN_TIMESTAMP
 10

	)

189 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

191 
	#TCPOPT_TSTAMP_HDR
 \

192 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

200 
	#TCP_MSS
 512

	)

202 
	#TCP_MAXWIN
 65535

	)

204 
	#TCP_MAX_WINSHIFT
 14

	)

206 
	#SOL_TCP
 6

	)

209 
	#TCPI_OPT_TIMESTAMPS
 1

	)

210 
	#TCPI_OPT_SACK
 2

	)

211 
	#TCPI_OPT_WSCALE
 4

	)

212 
	#TCPI_OPT_ECN
 8

	)

213 
	#TCPI_OPT_ECN_SEEN
 16

	)

214 
	#TCPI_OPT_SYN_DATA
 32

	)

217 
	et˝_ˇ_°©e


219 
	mTCP_CA_O≥n
 = 0,

220 
	mTCP_CA_Dis‹dî
 = 1,

221 
	mTCP_CA_CWR
 = 2,

222 
	mTCP_CA_Recovîy
 = 3,

223 
	mTCP_CA_Loss
 = 4

226 
	st˝_öfo


228 
uöt8_t
 
	mt˝i_°©e
;

229 
uöt8_t
 
	mt˝i_ˇ_°©e
;

230 
uöt8_t
 
	mt˝i_ªå™smôs
;

231 
uöt8_t
 
	mt˝i_¥obes
;

232 
uöt8_t
 
	mt˝i_backoff
;

233 
uöt8_t
 
	mt˝i_›ti⁄s
;

234 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

236 
uöt32_t
 
	mt˝i_πo
;

237 
uöt32_t
 
	mt˝i_©o
;

238 
uöt32_t
 
	mt˝i_¢d_mss
;

239 
uöt32_t
 
	mt˝i_rcv_mss
;

241 
uöt32_t
 
	mt˝i_u«cked
;

242 
uöt32_t
 
	mt˝i_ßcked
;

243 
uöt32_t
 
	mt˝i_lo°
;

244 
uöt32_t
 
	mt˝i_ªå™s
;

245 
uöt32_t
 
	mt˝i_Áckës
;

248 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

249 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

250 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

251 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

254 
uöt32_t
 
	mt˝i_pmtu
;

255 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

256 
uöt32_t
 
	mt˝i_πt
;

257 
uöt32_t
 
	mt˝i_πtv¨
;

258 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

259 
uöt32_t
 
	mt˝i_¢d_cwnd
;

260 
uöt32_t
 
	mt˝i_advmss
;

261 
uöt32_t
 
	mt˝i_ª‹dîög
;

263 
uöt32_t
 
	mt˝i_rcv_πt
;

264 
uöt32_t
 
	mt˝i_rcv_•a˚
;

266 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

271 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

274 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

276 
	st˝_md5sig


278 
sockaddr_°‹age
 
	mt˝m_addr
;

279 
uöt8_t
 
	mt˝m_Êags
;

280 
uöt8_t
 
	mt˝m_¥efixÀn
;

281 
uöt16_t
 
	mt˝m_keyÀn
;

282 
uöt32_t
 
	m__t˝m_∑d
;

283 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

287 
	st˝_ª∑ú_›t


289 
uöt32_t
 
	m›t_code
;

290 
uöt32_t
 
	m›t_vÆ
;

296 
	mTCP_NO_QUEUE
,

297 
	mTCP_RECV_QUEUE
,

298 
	mTCP_SEND_QUEUE
,

299 
	mTCP_QUEUES_NR
,

303 
	#TCP_COOKIE_MIN
 8

	)

304 
	#TCP_COOKIE_MAX
 16

	)

305 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

308 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

309 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

313 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

314 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

316 
	#TCP_MSS_DEFAULT
 536U

	)

317 
	#TCP_MSS_DESIRED
 1220U

	)

319 
	st˝_cookõ_å™ß˘i⁄s


321 
uöt16_t
 
	mt˝˘_Êags
;

322 
uöt8_t
 
	m__t˝˘_∑d1
;

323 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

324 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

325 
uöt16_t
 
	mt˝˘_u£d
;

326 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

330 
	st˝_ª∑ú_wödow


332 
uöt32_t
 
	m¢d_wl1
;

333 
uöt32_t
 
	m¢d_wnd
;

334 
uöt32_t
 
	mmax_wödow
;

335 
uöt32_t
 
	mrcv_wnd
;

336 
uöt32_t
 
	mrcv_wup
;

340 
	st˝_zîoc›y_ª˚ive


342 
uöt64_t
 
	maddªss
;

343 
uöt32_t
 
	mÀngth
;

344 
uöt32_t
 
	mªcv_skù_höt
;

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	~<bôs/ty≥s/°ru˘___jmp_buf_èg.h
>

32 #ifde‡
__USE_MISC


33 
	~<bôs/±hªad_°ack_mö-dy«mic.h
>

39 
	mPTHREAD_CREATE_JOINABLE
,

40 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

41 
	mPTHREAD_CREATE_DETACHED


42 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

49 
	mPTHREAD_MUTEX_TIMED_NP
,

50 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

51 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

52 
	mPTHREAD_MUTEX_ADAPTIVE_NP


53 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


55 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

56 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

57 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

58 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


60 #ifde‡
__USE_GNU


62 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


67 #ifde‡
__USE_XOPEN2K


71 
	mPTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

73 
	mPTHREAD_MUTEX_ROBUST
,

74 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


79 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


83 
	mPTHREAD_PRIO_NONE
,

84 
	mPTHREAD_PRIO_INHERIT
,

85 
	mPTHREAD_PRIO_PROTECT


90 
	#PTHREAD_MUTEX_INITIALIZER
 \

91 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

92 #ifde‡
__USE_GNU


93 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

95 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

96 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

97 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

98 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

103 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


106 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

107 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

108 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

109 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


114 
	#PTHREAD_RWLOCK_INITIALIZER
 \

115 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

116 #ifde‡
__USE_GNU


117 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

118 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

126 
	mPTHREAD_INHERIT_SCHED
,

127 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

128 
	mPTHREAD_EXPLICIT_SCHED


129 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

136 
	mPTHREAD_SCOPE_SYSTEM
,

137 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

138 
	mPTHREAD_SCOPE_PROCESS


139 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

146 
	mPTHREAD_PROCESS_PRIVATE
,

147 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

148 
	mPTHREAD_PROCESS_SHARED


149 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

155 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

159 
	s_±hªad_˛ónup_buf„r


161 (*
	m__routöe
) (*);

162 *
	m__¨g
;

163 
	m__ˇn˚…y≥
;

164 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

170 
	mPTHREAD_CANCEL_ENABLE
,

171 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

172 
	mPTHREAD_CANCEL_DISABLE


173 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

177 
	mPTHREAD_CANCEL_DEFERRED
,

178 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

179 
	mPTHREAD_CANCEL_ASYNCHRONOUS


180 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

182 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

186 
	#PTHREAD_ONCE_INIT
 0

	)

189 #ifde‡
__USE_XOPEN2K


193 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

197 
__BEGIN_DECLS


202 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

203 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

204 *(*
__°¨t_routöe
) (*),

205 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

211 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

219 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

221 #ifde‡
__USE_GNU


224 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

226 #i‚de‡
__USE_TIME_BITS64


233 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

234 c⁄° 
time•ec
 *
__ab°ime
);

243 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

244 
˛ockid_t
 
__˛ockid
,

245 c⁄° 
time•ec
 *
__ab°ime
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
±hªad_timedjoö_≈
,

249 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

250 c⁄° 
time•ec
 *
__ab°ime
),

251 
__±hªad_timedjoö_≈64
);

253 
	`__REDIRECT
 (
±hªad_˛ockjoö_≈
,

254 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

255 
˛ockid_t
 
__˛ockid
,

256 c⁄° 
time•ec
 *
__ab°ime
),

257 
__±hªad_˛ockjoö_≈64
);

259 
	#±hªad_timedjoö_≈
 
__±hªad_timedjoö_≈64


	)

260 
	#±hªad_˛ockjoö_≈
 
__±hªad_˛ockjoö_≈64


	)

269 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

273 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

276 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

277 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

285 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

288 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

293 *
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

298 
__dëach°©e
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

304 
size_t
 *
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

308 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

309 
size_t
 
__gu¨dsize
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1));

314 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

315 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

316 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

319 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

320 c⁄° 
sched_∑øm
 *
__ª°ri˘


321 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

324 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


325 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1));

333 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


334 
__©å
, *
__ª°ri˘
 
__öhîô
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

338 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

339 
__öhîô
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1));

344 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

345 *
__ª°ri˘
 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

349 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


354 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

361 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

362 *
__°ackaddr
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

366 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

373 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

374 
size_t
 
__°acksize
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1));

377 #ifde‡
__USE_XOPEN2K


379 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

380 **
__ª°ri˘
 
__°ackaddr
,

381 
size_t
 *
__ª°ri˘
 
__°acksize
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

387 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

388 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_GNU


394 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

395 
size_t
 
__˝u£tsize
,

396 c⁄° 
˝u_£t_t
 *
__˝u£t
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

401 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

402 
size_t
 
__˝u£tsize
,

403 
˝u_£t_t
 *
__˝u£t
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

407 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	`±hªad_©å_£tsigmask_≈
 (
±hªad_©å_t
 *
__©å
,

412 c⁄° 
__sig£t_t
 *
sigmask
);

417 
	`±hªad_©å_gësigmask_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

418 
__sig£t_t
 *
sigmask
);

422 
	#PTHREAD_ATTR_NO_SIGMASK_NP
 (-1)

	)

426 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1));

432 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

433 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

442 c⁄° 
sched_∑øm
 *
__∑øm
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3));

446 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

447 *
__ª°ri˘
 
__pﬁicy
,

448 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

452 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

453 
__THROW
;

456 #ifde‡
__USE_GNU


458 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

459 
size_t
 
__buÊí
)

460 
__THROW
 
	`__n⁄nuŒ
 ((2));

463 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

464 
__THROW
 
	`__n⁄nuŒ
 ((2));

468 #ifde‡
__USE_UNIX98


470 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

473 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

476 #ifde‡
__USE_GNU


477 
	$±hªad_yõld
 (Ë
__THROW
;

478 #ifde‡
__REDIRECT_NTH


479 
	`__REDIRECT_NTH
 (
±hªad_yõld
, (), 
sched_yõld
)

480 
	`__©åibuã_dïªˇãd_msg__
 ("\
_yield is deprecated, use sched_yield instead");

483 
	#±hªad_yõld
 
sched_yõld


	)

489 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

490 c⁄° 
˝u_£t_t
 *
__˝u£t
)

491 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

495 
˝u_£t_t
 *
__˝u£t
)

496 
__THROW
 
	`__n⁄nuŒ
 ((3));

509 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

510 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

521 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

525 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

528 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

533 
	`±hªad_ã°ˇn˚l
 ();

538 
	s__ˇn˚l_jmp_buf_èg


540 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

541 
__mask_was_ßved
;

546 
__ˇn˚l_jmp_buf_èg
 
__ˇn˚l_jmp_buf
[1];

547 *
__∑d
[4];

548 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

551 #i‚de‡
__˛ónup_f˘_©åibuã


552 
	#__˛ónup_f˘_©åibuã


	)

557 
	s__±hªad_˛ónup_‰ame


559 (*
__ˇn˚l_routöe
) (*);

560 *
__ˇn˚l_¨g
;

561 
__do_ô
;

562 
__ˇn˚l_ty≥
;

565 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


566 #ifde‡
__˝lu•lus


568 ˛as†
	c__±hªad_˛ónup_˛ass


570 (*
__ˇn˚l_routöe
) (*);

571 *
__ˇn˚l_¨g
;

572 
__do_ô
;

573 
__ˇn˚l_ty≥
;

575 
public
:

576 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

577 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

578 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

579 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

580 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

581 &
__ˇn˚l_ty≥
); 
	}
}

582 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

598 
	#±hªad_˛ónup_p›
(
execuã
) \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

602 #ifde‡
__USE_GNU


606 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

608 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

609 
__˛‰ame
.
	`__de„r
 ()

	)

614 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

615 
__˛‰ame
.
	`__ª°‹e
 (); \

616 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

617 } 0)

	)

624 
__exã∫_ölöe
 

625 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

627 i‡(
__‰ame
->
__do_ô
)

628 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

629 
	}
}

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 };

	)

647 
	#±hªad_˛ónup_p›
(
execuã
) \

648 
__˛‰ame
.
__do_ô
 = (
execuã
); \

649 } 0)

	)

651 #ifde‡
__USE_GNU


655 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

657 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

658 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

659 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

660 .
__do_ô
 = 1 }; \

661 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

662 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

667 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

668 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

669 
__˛‰ame
.
__do_ô
 = (
execuã
); \

670 } 0)

	)

681 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

683 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

684 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

685 *
__ˇn˚l_¨g
 = (
¨g
); \

686 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

688 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

695 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

696 dÿ{

	)

697 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

698 
__˛ónup_f˘_©åibuã
;

702 
	#±hªad_˛ónup_p›
(
execuã
) \

705 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

706 i‡(
execuã
) \

707 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

708 } 0)

	)

709 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

712 #ifde‡
__USE_GNU


716 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

718 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

719 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

720 *
__ˇn˚l_¨g
 = (
¨g
); \

721 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

723 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

725 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

726 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

730 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

731 dÿ{

	)

732 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

733 
__˛ónup_f˘_©åibuã
;

738 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

741 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

742 i‡(
execuã
) \

743 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

744 
	}
} 0)

	)

745 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

746 
__˛ónup_f˘_©åibuã
;

750 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

751 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

752 #i‚de‡
SHARED


753 
	`__©åibuã__
 ((
__wók__
))

765 #i‡
	`__GNUC_PREREQ
 (11, 0)

766 
	`__REDIRECT_NTHNL
 (
__sig£tjmp_ˇn˚l
,

767 (
__ˇn˚l_jmp_buf_èg
 
__ív
[1],

768 
__ßvemask
),

769 
__sig£tjmp
Ë
__©åibuã_ªtu∫s_twi˚__
;

771 
	#__sig£tjmp_ˇn˚l
(
ív
, 
ßvemask
) \

772 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *Ë(*Ë(
ív
), (
ßvemask
))

	)

773 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1],

774 
__ßvemask
Ë
__THROWNL
;

781 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

782 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

797 #ifde‡
__USE_XOPEN2K


799 #i‚de‡
__USE_TIME_BITS64


800 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

801 c⁄° 
time•ec
 *
__ª°ri˘


802 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

804 #ifde‡
__REDIRECT_NTHNL


805 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_timedlock
,

806 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

807 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

808 
__±hªad_muãx_timedlock64
Ë
	`__n⁄nuŒ
 ((1, 2));

810 
	#±hªad_muãx_timedlock
 
__±hªad_muãx_timedlock64


	)

815 #ifde‡
__USE_GNU


816 #i‚de‡
__USE_TIME_BITS64


817 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

818 
˛ockid_t
 
__˛ockid
,

819 c⁄° 
time•ec
 *
__ª°ri˘


820 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

822 #ifde‡
__REDIRECT_NTHNL


823 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_˛ocklock
,

824 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

825 
˛ockid_t
 
__˛ockid
,

826 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

827 
__±hªad_muãx_˛ocklock64
Ë
	`__n⁄nuŒ
 ((1, 3));

829 
	#±hªad_muãx_˛ocklock
 
__±hªad_muãx_˛ocklock64


	)

835 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

836 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

840 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

841 
__ª°ri˘
 
__muãx
,

842 *
__ª°ri˘
 
__¥io˚ûög
)

843 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

848 
__¥io˚ûög
,

849 *
__ª°ri˘
 
__ﬁd_˚ûög
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

853 #ifde‡
__USE_XOPEN2K8


855 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 #ifde‡
__USE_GNU


858 #ifde‡
__REDIRECT_NTH


859 
	`__REDIRECT_NTH
 (
±hªad_muãx_c⁄si°ít_≈
, (
±hªad_muãx_t
 *),

860 
±hªad_muãx_c⁄si°ít
Ë
	`__n⁄nuŒ
 ((1))

861 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutex_consistent_np is deprecated, useÖthread_mutex_consistent");

864 
	#±hªad_muãx_c⁄si°ít_≈
 
±hªad_muãx_c⁄si°ít


	)

874 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

878 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

882 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

883 
__ª°ri˘
 
__©å
,

884 *
__ª°ri˘
 
__psh¨ed
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

889 
__psh¨ed
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


894 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


895 
__©å
, *
__ª°ri˘
 
__köd
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

901 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

907 
__ª°ri˘
 
__©å
,

908 *
__ª°ri˘
 
__¥Ÿocﬁ
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

914 
__¥Ÿocﬁ
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__¥io˚ûög
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

925 
__¥io˚ûög
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 #ifde‡
__USE_XOPEN2K


930 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

931 *
__robu°√ss
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

933 #ifde‡
__USE_GNU


934 #ifde‡
__REDIRECT_NTH


935 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_gërobu°_≈
,

936 (
±hªad_muãx©å_t
 *, *),

937 
±hªad_muãx©å_gërobu°
Ë
	`__n⁄nuŒ
 ((1))

938 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_getrobust_np is deprecated, useÖthread_mutexattr_getrobust");

941 
	#±hªad_muãx©å_gërobu°_≈
 
±hªad_muãx©å_gërobu°


	)

946 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

947 
__robu°√ss
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 #ifde‡
__USE_GNU


950 #ifde‡
__REDIRECT_NTH


951 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_£åobu°_≈
,

952 (
±hªad_muãx©å_t
 *, ),

953 
±hªad_muãx©å_£åobu°
Ë
	`__n⁄nuŒ
 ((1))

954 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_setrobust_np is deprecated, useÖthread_mutexattr_setrobust");

957 
	#±hªad_muãx©å_£åobu°_≈
 
±hªad_muãx©å_£åobu°


	)

962 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


967 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

968 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


969 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

977 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

981 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 #ifde‡
__USE_XOPEN2K


985 #i‚de‡
__USE_TIME_BITS64


986 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

987 c⁄° 
time•ec
 *
__ª°ri˘


988 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

990 #ifde‡
__REDIRECT_NTHNL


991 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedrdlock
,

992 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

994 
__±hªad_rwlock_timedrdlock64
)

995 
	`__n⁄nuŒ
 ((1, 2));

997 
	#±hªad_rwlock_timedrdlock
 
__±hªad_rwlock_timedrdlock64


	)

1002 #ifde‡
__USE_GNU


1003 #i‚de‡
__USE_TIME_BITS64


1004 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1005 
˛ockid_t
 
__˛ockid
,

1006 c⁄° 
time•ec
 *
__ª°ri˘


1007 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1009 #ifde‡
__REDIRECT_NTHNL


1010 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockrdlock
,

1011 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1012 
˛ockid_t
 
__˛ockid
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1014 
__±hªad_rwlock_˛ockrdlock64
)

1015 
	`__n⁄nuŒ
 ((1, 3));

1017 
	#±hªad_rwlock_˛ockrdlock
 
__±hªad_rwlock_˛ockrdlock64


	)

1023 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1024 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1028 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1032 #i‚de‡
__USE_TIME_BITS64


1033 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1034 c⁄° 
time•ec
 *
__ª°ri˘


1035 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

1037 #ifde‡
__REDIRECT_NTHNL


1038 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedwæock
,

1039 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1040 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1041 
__±hªad_rwlock_timedwæock64
)

1042 
	`__n⁄nuŒ
 ((1, 2));

1044 
	#±hªad_rwlock_timedwæock
 
__±hªad_rwlock_timedwæock64


	)

1049 #ifde‡
__USE_GNU


1050 #i‚de‡
__USE_TIME_BITS64


1051 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1052 
˛ockid_t
 
__˛ockid
,

1053 c⁄° 
time•ec
 *
__ª°ri˘


1054 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1057 #ifde‡
__REDIRECT_NTHNL


1058 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockwæock
,

1059 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1060 
˛ockid_t
 
__˛ockid
,

1061 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1062 
__±hªad_rwlock_˛ockwæock64
)

1063 
	`__n⁄nuŒ
 ((1, 3));

1065 
	#±hªad_rwlock_˛ockwæock
 
__±hªad_rwlock_˛ockwæock64


	)

1071 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

1087 
__ª°ri˘
 
__©å
,

1088 *
__ª°ri˘
 
__psh¨ed
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

1093 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1));

1097 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

1098 
__ª°ri˘
 
__©å
,

1099 *
__ª°ri˘
 
__¥ef
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1103 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

1104 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1113 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1118 
__THROW
 
	`__n⁄nuŒ
 ((1));

1121 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1122 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1125 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1126 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1133 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1134 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1135 
	`__n⁄nuŒ
 ((1, 2));

1144 #i‚de‡
__USE_TIME_BITS64


1145 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1146 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1147 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1148 
	`__n⁄nuŒ
 ((1, 2, 3));

1150 #ifde‡
__REDIRECT


1151 
	`__REDIRECT
 (
±hªad_c⁄d_timedwaô
,

1152 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1153 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1154 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1155 
__±hªad_c⁄d_timedwaô64
)

1156 
	`__n⁄nuŒ
 ((1, 2, 3));

1158 
	#±hªad_c⁄d_timedwaô
 
__±hªad_c⁄d_timedwaô64


	)

1162 #ifde‡
__USE_GNU


1170 #i‚de‡
__USE_TIME_BITS64


1171 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1172 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1173 
__˛ockid_t
 
__˛ock_id
,

1174 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1175 
	`__n⁄nuŒ
 ((1, 2, 4));

1177 #ifde‡
__REDIRECT


1178 
	`__REDIRECT
 (
±hªad_c⁄d_˛ockwaô
,

1179 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1180 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1181 
__˛ockid_t
 
__˛ock_id
,

1182 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1183 
__±hªad_c⁄d_˛ockwaô64
)

1184 
	`__n⁄nuŒ
 ((1, 2, 4));

1186 
	#±hªad_c⁄d_˛ockwaô
 
__±hªad_c⁄d_˛ockwaô64


	)

1194 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1195 
__THROW
 
	`__n⁄nuŒ
 ((1));

1198 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1199 
__THROW
 
	`__n⁄nuŒ
 ((1));

1202 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1203 
__ª°ri˘
 
__©å
,

1204 *
__ª°ri˘
 
__psh¨ed
)

1205 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1208 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1209 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1211 #ifde‡
__USE_XOPEN2K


1213 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1214 
__ª°ri˘
 
__©å
,

1215 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1216 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1219 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1220 
__˛ockid_t
 
__˛ock_id
)

1221 
__THROW
 
	`__n⁄nuŒ
 ((1));

1225 #ifde‡
__USE_XOPEN2K


1230 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1231 
__THROW
 
	`__n⁄nuŒ
 ((1));

1234 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1235 
__THROW
 
	`__n⁄nuŒ
 ((1));

1238 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1239 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1242 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1243 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1246 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1247 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1254 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1255 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1256 
__©å
, 
__cou¡
)

1257 
__THROW
 
	`__n⁄nuŒ
 ((1));

1260 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1261 
__THROW
 
	`__n⁄nuŒ
 ((1));

1264 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1265 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1269 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1270 
__THROW
 
	`__n⁄nuŒ
 ((1));

1273 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1274 
__THROW
 
	`__n⁄nuŒ
 ((1));

1277 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1278 
__ª°ri˘
 
__©å
,

1279 *
__ª°ri˘
 
__psh¨ed
)

1280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1283 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1284 
__psh¨ed
)

1285 
__THROW
 
	`__n⁄nuŒ
 ((1));

1297 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1298 (*
__de°r_fun˘i⁄
) (*))

1299 
__THROW
 
	`__n⁄nuŒ
 ((1));

1302 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1305 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1308 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1309 c⁄° *
__poöãr
)

1310 
__THROW
 
	`__©å_ac˚ss_n⁄e
 (2);

1313 #ifde‡
__USE_XOPEN2K


1315 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1316 
__˛ockid_t
 *
__˛ock_id
)

1317 
__THROW
 
	`__n⁄nuŒ
 ((2));

1332 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1333 (*
__∑ª¡
) (),

1334 (*
__chûd
Ë()Ë
__THROW
;

1337 #ifde‡
__USE_EXTERN_INLINES


1339 
__exã∫_ölöe
 

1340 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1342  
__thªad1
 =
__thªad2
;

1343 
	}
}

1346 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #ifde‡
__USE_MISC


63 
	~<bôs/ty≥s/FILE.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4))

143 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

146 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

147 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

148 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

149 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

150 
	`__n⁄nuŒ
 ((2, 3, 5))

151 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

153 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

154 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

155 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

156 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

157 
	`__n⁄nuŒ
 ((1, 2, 3, 5))

158 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

161 #ifdef 
__USE_MISC


169 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

170 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

171 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

172 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

173 
	`__n⁄nuŒ
 ((1, 2, 3, 5))

174 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

179 #ifde‡
__USE_GNU


188 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

191 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

43 
__THROW
 
	`__n⁄nuŒ
 ((1));

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

55 
	$£m_waô
 (
£m_t
 *
__£m
Ë
	`__n⁄nuŒ
 ((1));

57 #ifde‡
__USE_XOPEN2K


62 #i‚de‡
__USE_TIME_BITS64


63 
	$£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

64 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

65 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__REDIRECT


68 
	`__REDIRECT
 (
£m_timedwaô
,

69 (
£m_t
 *
__ª°ri˘
 
__£m
,

70 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

71 
__£m_timedwaô64
)

72 
	`__n⁄nuŒ
 ((1, 2));

74 
	#£m_timedwaô
 
__£m_timedwaô64


	)

79 #ifde‡
__USE_GNU


80 #i‚de‡
__USE_TIME_BITS64


81 
	$£m_˛ockwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

82 
˛ockid_t
 
˛ock
,

83 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

84 
	`__n⁄nuŒ
 ((1, 3));

86 #ifde‡
__REDIRECT


87 
	`__REDIRECT
 (
£m_˛ockwaô
,

88 (
£m_t
 *
__ª°ri˘
 
__£m
,

89 
˛ockid_t
 
˛ock
,

90 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

91 
__£m_˛ockwaô64
)

92 
	`__n⁄nuŒ
 ((1, 3));

94 
	#£m_˛ockwaô
 
__£m_˛ockwaô64


	)

100 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

103 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

106 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

107 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

110 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum-gíîic.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause")

152 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigsuspend function instead");

154 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

156 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

161 #ifde‡
__USE_MISC


168 
	#sigmask
(
sig
) \

169 
	`__glibc_ma¸o_w¨nög
 ("sigmask is deprecated") \

170 (()(1u << ((
sig
Ë- 1)))

	)

173 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

179 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

183 #ifde‡
__USE_MISC


184 
	#NSIG
 
_NSIG


	)

187 #ifde‡
__USE_GNU


188 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

192 #ifde‡
__USE_MISC


193 
__sigh™dÀr_t
 
	tsig_t
;

196 #ifde‡
__USE_POSIX


199 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1));

214 #ifde‡
__USE_GNU


216 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

220 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

223 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

224 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

229 
	~<bôs/siga˘i⁄.h
>

232 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

233 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

240 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

243 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

244 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

247 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__USE_POSIX199506


255 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

256 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__USE_POSIX199309


264 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

265 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

272 #i‚de‡
__USE_TIME_BITS64


273 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

274 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

275 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

276 
	`__n⁄nuŒ
 ((1));

278 #ifde‡
__REDIRECT


279 
	`__REDIRECT
 (
sigtimedwaô
,

280 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

281 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

282 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

283 
__sigtimedwaô64
)

284 
	`__n⁄nuŒ
 ((1));

286 
	#sigtimedwaô
 
__sigtimedwaô64


	)

292 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

293 
__THROW
;

298 #ifde‡
__USE_MISC


301 
	~<bôs/sigc⁄ãxt.h
>

304 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

309 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


310 
	#__√ed_size_t


	)

311 
	~<°ddef.h
>

313 
	~<bôs/ty≥s/°ack_t.h
>

314 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


316 
	~<sys/uc⁄ãxt.h
>

320 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


324 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW


325 
	`__©åibuã_dïªˇãd_msg__
 ("Use sigaction with SA_RESTART instead");

327 
	~<bôs/sig°ack.h
>

328 
	~<bôs/sig°ksz.h
>

329 
	~<bôs/ss_Êags.h
>

333 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

334 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

337 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

338 || 
deföed
 
__USE_MISC
)

339 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

342 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

343 || 
deföed
 
__USE_MISC
)

347 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

348 
__THROW
 
__©åibuã_dïªˇãd__
;

351 #ifde‡
__USE_XOPEN_EXTENDED


355 
	$sighﬁd
 (
__sig
Ë
__THROW


356 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

359 
	$sigªl£
 (
__sig
Ë
__THROW


360 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

363 
	$sigign‹e
 (
__sig
Ë
__THROW


364 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe signal function instead");

367 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW


368 
__©åibuã_dïªˇãd_msg__


372 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


375 
	~<bôs/±hªadty≥s.h
>

376 
	~<bôs/sigthªad.h
>

383 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

385 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

387 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

388 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

391 
	~<bôs/sig«l_ext.h
>

393 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

890 #ifde‡
__USE_EXTERN_INLINES


891 
	~<bôs/°dio.h
>

893 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


894 
	~<bôs/°dio2.h
>

897 
	~<bôs/Êﬂä.h
>

898 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

899 
	~<bôs/°dio-ldbl.h
>

902 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

540 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


541 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

543 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

544 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

551 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

552 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

555 
	$‰ì
 (*
__±r
Ë
__THROW
;

557 #ifde‡
__USE_MISC


563 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

564 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


565 
	`__©åibuã_Æloc_size__
 ((2, 3))

566 
__©å_dóŒoc_‰ì
;

569 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

570 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

573 #ifde‡
__USE_MISC


574 
	~<Æloˇ.h
>

577 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

578 || 
deföed
 
__USE_MISC


580 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


581 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

584 #ifde‡
__USE_XOPEN2K


586 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

590 #ifde‡
__USE_ISOC11


592 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

593 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

594 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

598 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

602 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


606 #ifde‡
__˝lu•lus


607 "C++" 
	$©_quick_exô
 ((*
__func
) ())

608 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

610 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

614 #ifdef 
__USE_MISC


617 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

618 
__THROW
 
	`__n⁄nuŒ
 ((1));

624 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


630 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

633 #ifde‡
__USE_ISOC99


636 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__USE_GNU


646 *
	$£cuª_gëív
 (c⁄° *
__«me
)

647 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


654 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifde‡
__USE_XOPEN2K


660 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

661 
__THROW
 
	`__n⁄nuŒ
 ((2));

664 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

667 #ifdef 
__USE_MISC


671 
	$˛óªnv
 (Ë
__THROW
;

675 #i‡
deföed
 
__USE_MISC
 \

676 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

682 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

685 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 #i‚de‡
__USE_FILE_OFFSET64


695 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mk°emp
 
mk°emp64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__USE_MISC


716 #i‚de‡
__USE_FILE_OFFSET64


717 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

721 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 
	#mk°emps
 
mk°emps64


	)

726 #ifde‡
__USE_LARGEFILE64


727 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

728 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__USE_XOPEN2K8


738 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__USE_GNU


748 #i‚de‡
__USE_FILE_OFFSET64


749 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

751 #ifde‡
__REDIRECT


752 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

753 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

755 
	#mko°emp
 
mko°emp64


	)

758 #ifde‡
__USE_LARGEFILE64


759 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 #i‚de‡
__USE_FILE_OFFSET64


769 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

770 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

772 #ifde‡
__REDIRECT


773 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

774 
__Êags
), 
mko°emps64
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

777 
	#mko°emps
 
mko°emps64


	)

780 #ifde‡
__USE_LARGEFILE64


781 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

782 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

794 #ifdef 
__USE_GNU


797 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


799 
__©å_dóŒoc_‰ì
 
__wur
;

802 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


808 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

809 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

814 #i‚de‡
__COMPAR_FN_T


815 
	#__COMPAR_FN_T


	)

816 (*
	t__com∑r_‚_t
) (const *, const *);

818 #ifdef 
__USE_GNU


819 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

822 #ifde‡
__USE_GNU


823 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

828 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

829 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

830 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

832 #ifde‡
__USE_EXTERN_INLINES


833 
	~<bôs/°dlib-b£¨ch.h
>

838 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

839 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

840 #ifde‡
__USE_GNU


841 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

842 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

843 
	`__n⁄nuŒ
 ((1, 4));

848 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 #ifde‡
__USE_ISOC99


852 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
div_t
 
	$div
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

863 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

865 #ifde‡
__USE_ISOC99


866 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

867 
__díom
)

868 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

872 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

873 || 
deföed
 
__USE_MISC


880 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

881 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

886 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

887 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

892 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

893 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

896 #ifde‡
__USE_MISC


898 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

899 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

900 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

901 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

902 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

904 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

905 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

910 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

911 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

912 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

914 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

915 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

917 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

918 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

919 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

921 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

922 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

923 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

924 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

937 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

941 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

942 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


943 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

945 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

946 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

947 
__THROW


948 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

949 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

951 #ifde‡
__USE_MISC


956 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


967 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

968 *c⁄° *
__ª°ri˘
 
__tokís
,

969 **
__ª°ri˘
 
__vÆuï
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

976 #ifde‡
__USE_XOPEN2KXSI


978 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

981 #ifde‡
__USE_XOPEN_EXTENDED


986 
	$gø¡±
 (
__fd
Ë
__THROW
;

990 
	$u∆ock±
 (
__fd
Ë
__THROW
;

995 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

998 #ifde‡
__USE_GNU


1002 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1006 
	`gë±
 ();

1009 #ifde‡
__USE_MISC


1013 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1020 
	$ây¶Ÿ
 (Ë
__THROW
;

1023 
	~<bôs/°dlib-Êﬂt.h
>

1026 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1027 
	~<bôs/°dlib.h
>

1030 
	~<bôs/Êﬂä.h
>

1031 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1032 
	~<bôs/°dlib-ldbl.h
>

1035 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

74 #i‚de‡
__USE_TIME_BITS64


76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

85 #ifde‡
__REDIRECT_NTH


86 
time_t
 
	`__REDIRECT_NTH
 (
time
, (time_à*
__timî
), 
__time64
);

87 
	`__REDIRECT_NTH
 (
dif·ime
, (
time_t
 
__time1
,Åime_à
__time0
),

88 
__dif·ime64
Ë
	`__©åibuã__
 ((
__c⁄°__
));

89 
time_t
 
	`__REDIRECT_NTH
 (
mktime
, (
tm
 *
__ç
), 
__mktime64
);

91 
	#time
 
__time64


	)

92 
	#dif·ime
 
__dif·ime64


	)

93 
	#mktime
 
__mktime64


	)

100 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

101 c⁄° *
__ª°ri˘
 
__f‹m©
,

102 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

104 #ifde‡
__USE_XOPEN


107 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

108 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

109 
__THROW
;

112 #ifde‡
__USE_XOPEN2K8


116 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

117 c⁄° *
__ª°ri˘
 
__f‹m©
,

118 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

119 
loˇÀ_t
 
__loc
Ë
__THROW
;

122 #ifde‡
__USE_GNU


123 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

124 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

125 
loˇÀ_t
 
__loc
Ë
__THROW
;

129 #i‚de‡
__USE_TIME_BITS64


132 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

136 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

139 #ifde‡
__REDIRECT_NTH


140 
tm
*
	`__REDIRECT_NTH
 (
gmtime
, (c⁄° 
time_t
 *
__timî
), 
__gmtime64
);

141 
tm
 *
	`__REDIRECT_NTH
 (
loˇ…ime
, (c⁄° 
time_t
 *
__timî
),

142 
__loˇ…ime64
);

144 
	#gmtime
 
__gmtime64


	)

145 
	#loˇ…ime
 
__loˇ…ime64


	)

150 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

151 #i‚de‡
__USE_TIME_BITS64


154 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

155 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

159 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

162 #ifde‡
__REDIRECT_NTH


163 
tm
*
	`__REDIRECT_NTH
 (
gmtime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

164 
tm
 *
__ª°ri˘
 
__ç
),

165 
__gmtime64_r
);

167 
tm
*
	`__REDIRECT_NTH
 (
loˇ…ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__t
,

168 
tm
 *
__ª°ri˘
 
__ç
),

169 
__loˇ…ime64_r
);

171 
	#gmtime_r
 
__gmtime64_r


	)

172 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

179 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

182 #i‚de‡
__USE_TIME_BITS64


183 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

185 #ifde‡
__REDIRECT_NTH


186 *
	`__REDIRECT_NTH
 (
˘ime
, (c⁄° 
time_t
 *
__timî
), 
__˘ime64
);

188 
	#˘ime
 
__˘ime64


	)

192 #ifde‡
__USE_POSIX


197 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

198 *
__ª°ri˘
 
__buf
Ë
__THROW
;

201 #i‚de‡
__USE_TIME_BITS64


202 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

203 *
__ª°ri˘
 
__buf
Ë
__THROW
;

205 #ifde‡
__REDIRECT_NTH


206 *
	`__REDIRECT_NTH
 (
˘ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

207 *
__ª°ri˘
 
__buf
), 
__˘ime64_r
);

209 
	#˘ime_r
 
__˘ime64_r


	)

217 *
__tz«me
[2];

218 
__daylight
;

219 
__timez⁄e
;

222 #ifdef 
__USE_POSIX


224 *
tz«me
[2];

228 
	$tz£t
 (Ë
__THROW
;

231 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


232 
daylight
;

233 
timez⁄e
;

239 
	#__i¶óp
(
yór
) \

240 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

243 #ifde‡
__USE_MISC


247 #i‚de‡
__USE_TIME_BITS64


249 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

251 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
time_t
 
	`__REDIRECT_NTH
 (
timegm
, (
tm
 *
__ç
), 
__timegm64
);

255 
time_t
 
	`__REDIRECT_NTH
 (
timñoˇl
, (
tm
 *
__ç
), 
__mktime64
);

257 
	#timegm
 
__timegm64


	)

262 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 #ifde‡
__USE_POSIX199309


267 #i‚de‡
__USE_TIME_BITS64


272 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

273 
time•ec
 *
__ªmaöög
);

276 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

279 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

282 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

283 
__THROW
;

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
«no¶ìp
, (c⁄° 
time•ec
 *
__ªque°ed_time
,

287 
time•ec
 *
__ªmaöög
),

288 
__«no¶ìp64
);

289 
	`__REDIRECT_NTH
 (
˛ock_gëªs
, (
˛ockid_t
 
__˛ock_id
,

290 
time•ec
 *
__ªs
),

291 
__˛ock_gëªs64
);

292 
	`__REDIRECT_NTH
 (
˛ock_gëtime
, (
˛ockid_t
 
__˛ock_id
, 

293 
time•ec
 *
__ç
), 
__˛ock_gëtime64
);

294 
	`__REDIRECT_NTH
 (
˛ock_£âime
, (
˛ockid_t
 
__˛ock_id
, const 

295 
time•ec
 *
__ç
), 
__˛ock_£âime64
);

297 
	#«no¶ìp
 
__«no¶ìp64


	)

298 
	#˛ock_gëªs
 
__˛ock_gëªs64


	)

299 
	#˛ock_gëtime
 
__˛ock_gëtime64


	)

300 
	#˛ock_£âime
 
__˛ock_£âime64


	)

305 #ifde‡
__USE_XOPEN2K


310 #i‚de‡
__USE_TIME_BITS64


311 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

312 c⁄° 
time•ec
 *
__ªq
,

313 
time•ec
 *
__ªm
);

315 #ifde‡
__REDIRECT


316 
	`__REDIRECT
 (
˛ock_«no¶ìp
, (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

317 c⁄° 
time•ec
 *
__ªq
,

318 
time•ec
 *
__ªm
),

319 
__˛ock_«no¶ìp_time64
);

321 
	#˛ock_«no¶ìp
 
__˛ock_«no¶ìp_time64


	)

326 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

331 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

332 
sigevít
 *
__ª°ri˘
 
__evp
,

333 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

336 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

339 #i‚de‡
__USE_TIME_BITS64


340 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

341 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

342 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

345 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

346 
__THROW
;

348 #ifde‡
__REDIRECT_NTH


349 
	`__REDIRECT_NTH
 (
timî_£âime
, (
timî_t
 
__timîid
, 
__Êags
,

350 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

351 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

352 
__timî_£âime64
);

354 
	`__REDIRECT_NTH
 (
timî_gëtime
, (
timî_t
 
__timîid
,

355 
ôimî•ec
 *
__vÆue
),

356 
__timî_gëtime64
);

358 
	#timî_£âime
 
__timî_£âime64


	)

359 
	#timî_gëtime
 
__timî_gëtime64


	)

364 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

368 #ifde‡
__USE_ISOC11


369 #i‚de‡
__USE_TIME_BITS64


371 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

374 #ifde‡
__REDIRECT_NTH


375 
	`__REDIRECT_NTH
 (
time•ec_gë
, (
time•ec
 *
__ts
, 
__ba£
),

376 
__time•ec_gë64
Ë
	`__n⁄nuŒ
 ((1));

378 
	#time•ec_gë
 
__time•ec_gë64


	)

384 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 #i‚de‡
__USE_TIME_BITS64


387 
	$time•ec_gëªs
 (
time•ec
 *
__ts
, 
__ba£
)

388 
__THROW
;

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
time•ec_gëªs
, (
time•ec
 *
__ts
,

392 
__ba£
),

393 
__time•ec_gëªs64
);

395 
	#time•ec_gëªs
 
__time•ec_gëªs64


	)

401 #ifde‡
__USE_XOPEN_EXTENDED


413 
gëd©e_îr
;

422 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

425 #ifde‡
__USE_GNU


436 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

437 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

440 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 1);

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur


805 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

809 
	$ißây
 (
__fd
Ë
__THROW
;

811 #ifde‡
__USE_MISC


814 
	$ây¶Ÿ
 (Ë
__THROW
;

819 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

822 #ifde‡
__USE_ATFILE


825 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

826 c⁄° *
__to
, 
__Êags
)

827 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

830 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


832 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

838 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

839 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur


841 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

845 #ifde‡
__USE_ATFILE


847 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

848 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

851 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

852 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur


854 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 3, 4);

858 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_ATFILE


862 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

863 
__THROW
 
	`__n⁄nuŒ
 ((2));

867 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

871 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

874 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

881 *
	`gëlogö
 ();

882 #ifde‡
__USE_POSIX199506


889 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

890 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

893 #ifdef 
__USE_MISC


895 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #ifdef 
__USE_POSIX2


903 
	~<bôs/gë›t_posix.h
>

907 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


911 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

912 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

916 #i‡
deföed
 
__USE_MISC


919 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

924 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

930 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur


932 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

933 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

939 
	$vh™gup
 (Ë
__THROW
;

942 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

951 
size_t
 
__off£t
, 
__sˇÀ
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

958 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

962 *
	$gëu£rshñl
 (Ë
__THROW
;

963 
	$ídu£rshñl
 (Ë
__THROW
;

964 
	$£tu£rshñl
 (Ë
__THROW
;

970 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

974 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

977 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

981 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

989 
	`fsync
 (
__fd
);

992 #ifde‡
__USE_GNU


995 
	$syncfs
 (
__fd
Ë
__THROW
;

999 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1002 
	`gëho°id
 ();

1005 
	$sync
 (Ë
__THROW
;

1008 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1011 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1016 
	$gëdèbÀsize
 (Ë
__THROW
;

1022 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1029 #ifde‡
__REDIRECT_NTH


1030 
	`__REDIRECT_NTH
 (
åunˇã
,

1031 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1032 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1034 
	#åunˇã
 
åunˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1044 #i‡
deföed
 
__USE_POSIX199309
 \

1045 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1048 #i‚de‡
__USE_FILE_OFFSET64


1049 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1051 #ifde‡
__REDIRECT_NTH


1052 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1053 
·runˇã64
Ë
__wur
;

1055 
	#·runˇã
 
·runˇã64


	)

1058 #ifde‡
__USE_LARGEFILE64


1059 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1065 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1066 || 
deföed
 
__USE_MISC


1070 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1076 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1080 #ifde‡
__USE_MISC


1091 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1096 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1108 
	#F_ULOCK
 0

	)

1109 
	#F_LOCK
 1

	)

1110 
	#F_TLOCK
 2

	)

1111 
	#F_TEST
 3

	)

1113 #i‚de‡
__USE_FILE_OFFSET64


1114 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1116 #ifde‡
__REDIRECT


1117 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1118 
lockf64
Ë
__wur
;

1120 
	#lockf
 
lockf64


	)

1123 #ifde‡
__USE_LARGEFILE64


1124 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1129 #ifde‡
__USE_GNU


1134 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1135 (
__exãnsi⁄__
 \

1136 ({ 
__ªsu…
; \

1137 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1138 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1139 
__ªsu…
; 
	}
}))

	)

1142 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1143 
__outfd
, 
__off64_t
 *
__poutoff
,

1144 
size_t
 
__Àngth
, 
__Êags
);

1147 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1150 
fd©async
 (
__fûdes
);

1153 #ifde‡
__USE_MISC


1159 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #ifdef 
__USE_XOPEN


1168 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1169 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1170 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1171 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1178 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1180 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1183 *
	`cu£rid
 (*
__s
);

1189 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1190 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1191 (*
__∑ª¡
) (),

1192 (*
__chûd
Ë()Ë
__THROW
;

1195 #ifde‡
__USE_MISC


1198 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1199 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1202 #ifde‡
__USE_GNU


1208 
	$˛o£_ønge
 (
__fd
, 
__max_fd
,

1209 
__Êags
Ë
__THROW
;

1213 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1214 
	~<bôs/uni°d.h
>

1218 
	~<bôs/uni°d_ext.h
>

1220 
__END_DECLS


	@/usr/include/utime.h

22 #i‚def 
_UTIME_H


23 
	#_UTIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	~<bôs/ty≥s/time_t.h
>

36 
	sutimbuf


38 #ifde‡
__USE_TIME_BITS64


39 
__time64_t
 
	ma˘ime
;

40 
__time64_t
 
	mmodtime
;

42 
__time_t
 
	ma˘ime
;

43 
__time_t
 
	mmodtime
;

49 #i‚de‡
__USE_TIME_BITS64


50 
	$utime
 (c⁄° *
__fûe
,

51 c⁄° 
utimbuf
 *
__fûe_times
)

52 
__THROW
 
	`__n⁄nuŒ
 ((1));

55 #ifde‡
__REDIRECT_NTH


56 
	`__REDIRECT_NTH
 (
utime
, (c⁄° *
__fûe
,

57 c⁄° 
utimbuf
 *
__fûe_times
),

58 
__utime64
);

60 
	#utime
 
__utime64


	)

64 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/linux/libc-compat.h

49 #i‚de‡
_LIBC_COMPAT_H


50 
	#_LIBC_COMPAT_H


	)

53 #i‡
deföed
(
__GLIBC__
)

56 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

61 
	#__UAPI_DEF_IF_IFCONF
 0

	)

62 
	#__UAPI_DEF_IF_IFMAP
 0

	)

63 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

64 
	#__UAPI_DEF_IF_IFREQ
 0

	)

66 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

68 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


69 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

78 
	#__UAPI_DEF_IF_IFCONF
 1

	)

79 
	#__UAPI_DEF_IF_IFMAP
 1

	)

80 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

81 
	#__UAPI_DEF_IF_IFREQ
 1

	)

83 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

85 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

90 #i‡
deföed
(
_NETINET_IN_H
)

94 
	#__UAPI_DEF_IN_ADDR
 0

	)

95 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

96 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

97 
	#__UAPI_DEF_IP_MREQ
 0

	)

98 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

99 
	#__UAPI_DEF_IN_CLASS
 0

	)

101 
	#__UAPI_DEF_IN6_ADDR
 0

	)

106 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

107 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

109 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

111 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

112 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

113 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

114 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

115 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

116 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

123 
	#__UAPI_DEF_IN_ADDR
 1

	)

124 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

125 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

126 
	#__UAPI_DEF_IP_MREQ
 1

	)

127 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

128 
	#__UAPI_DEF_IN_CLASS
 1

	)

130 
	#__UAPI_DEF_IN6_ADDR
 1

	)

133 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

134 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

135 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

136 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

137 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

138 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

139 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

144 #i‡
deföed
(
__NETIPX_IPX_H
)

146 
	#__UAPI_DEF_SOCKADDR_IPX
 0

	)

147 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 0

	)

148 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 0

	)

149 
	#__UAPI_DEF_IPX_CONFIG_DATA
 0

	)

150 
	#__UAPI_DEF_IPX_ROUTE_DEF
 0

	)

154 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

155 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

156 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

157 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

158 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

163 #i‡
deföed
(
_SYS_XATTR_H
)

164 
	#__UAPI_DEF_XATTR
 0

	)

166 
	#__UAPI_DEF_XATTR
 1

	)

176 #i‚de‡
__UAPI_DEF_IF_IFCONF


177 
	#__UAPI_DEF_IF_IFCONF
 1

	)

179 #i‚de‡
__UAPI_DEF_IF_IFMAP


180 
	#__UAPI_DEF_IF_IFMAP
 1

	)

182 #i‚de‡
__UAPI_DEF_IF_IFNAMSIZ


183 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

185 #i‚de‡
__UAPI_DEF_IF_IFREQ


186 
	#__UAPI_DEF_IF_IFREQ
 1

	)

189 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


190 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

193 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


194 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

198 #i‚de‡
__UAPI_DEF_IN_ADDR


199 
	#__UAPI_DEF_IN_ADDR
 1

	)

201 #i‚de‡
__UAPI_DEF_IN_IPPROTO


202 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

204 #i‚de‡
__UAPI_DEF_IN_PKTINFO


205 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

207 #i‚de‡
__UAPI_DEF_IP_MREQ


208 
	#__UAPI_DEF_IP_MREQ
 1

	)

210 #i‚de‡
__UAPI_DEF_SOCKADDR_IN


211 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

213 #i‚de‡
__UAPI_DEF_IN_CLASS


214 
	#__UAPI_DEF_IN_CLASS
 1

	)

218 #i‚de‡
__UAPI_DEF_IN6_ADDR


219 
	#__UAPI_DEF_IN6_ADDR
 1

	)

221 #i‚de‡
__UAPI_DEF_IN6_ADDR_ALT


222 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

224 #i‚de‡
__UAPI_DEF_SOCKADDR_IN6


225 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

227 #i‚de‡
__UAPI_DEF_IPV6_MREQ


228 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

230 #i‚de‡
__UAPI_DEF_IPPROTO_V6


231 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

233 #i‚de‡
__UAPI_DEF_IPV6_OPTIONS


234 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

236 #i‚de‡
__UAPI_DEF_IN6_PKTINFO


237 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

239 #i‚de‡
__UAPI_DEF_IP6_MTUINFO


240 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

244 #i‚de‡
__UAPI_DEF_SOCKADDR_IPX


245 
	#__UAPI_DEF_SOCKADDR_IPX
 1

	)

247 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEFINITION


248 
	#__UAPI_DEF_IPX_ROUTE_DEFINITION
 1

	)

250 #i‚de‡
__UAPI_DEF_IPX_INTERFACE_DEFINITION


251 
	#__UAPI_DEF_IPX_INTERFACE_DEFINITION
 1

	)

253 #i‚de‡
__UAPI_DEF_IPX_CONFIG_DATA


254 
	#__UAPI_DEF_IPX_CONFIG_DATA
 1

	)

256 #i‚de‡
__UAPI_DEF_IPX_ROUTE_DEF


257 
	#__UAPI_DEF_IPX_ROUTE_DEF
 1

	)

261 #i‚de‡
__UAPI_DEF_XATTR


262 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/socket.h

2 #i‚de‡
_LINUX_SOCKET_H


3 
	#_LINUX_SOCKET_H


	)

8 
	#_K_SS_MAXSIZE
 128

	)

10 
	t__kî√l_ß_Ámûy_t
;

16 
	s__kî√l_sockaddr_°‹age
 {

19 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

21 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

25 *
	m__Æign
;

29 
	#SOCK_SNDBUF_LOCK
 1

	)

30 
	#SOCK_RCVBUF_LOCK
 2

	)

32 
	#SOCK_BUF_LOCK_MASK
 (
SOCK_SNDBUF_LOCK
 | 
SOCK_RCVBUF_LOCK
)

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 #i‚de‡
__USE_TIME_BITS64


78 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__REDIRECT_NTH


81 
	`__REDIRECT_NTH
 (
sched_º_gë_öãrvÆ
,

82 (
__pid_t
 
__pid
, 
time•ec
 *
__t
),

83 
__sched_º_gë_öãrvÆ64
);

85 
	#sched_º_gë_öãrvÆ
 
__sched_º_gë_öãrvÆ64


	)

89 #ifde‡
__USE_GNU


91 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

92 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

93 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

94 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

95 
˝u£ç
)

	)

96 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

97 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

99 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

100 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

101 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

102 
˝u£ç
)

	)

103 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

104 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

106 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

107 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

108 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

109 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

111 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

112 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

113 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

114 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

115 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

116 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

117 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

118 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

119 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

120 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

121 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

122 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

124 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

125 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

126 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

130 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

131 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

134 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

135 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

138 
__END_DECLS


	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 }

	)

42 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

44 °ru˘ { } 
__em±y_
 ## 
NAME
; \

45 
TYPE
 
NAME
[]; \

46 }

	)

	@
1
.
1
/usr/include
149
3273
aros/aros_compat.c
aros/aros_compat.h
build/CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c
build/CMakeFiles/CheckIncludeFiles/HAVE_NET_IF_H.c
build/config.h
examples/ld_nfs.c
examples/nfs-fh.c
examples/nfs-io.c
examples/nfs-ln.c
examples/nfs-pthreads-async-readfile.c
examples/nfs-pthreads-async-writefile.c
examples/nfs-pthreads-example.c
examples/nfs-pthreads-fstat.c
examples/nfs-pthreads-writefile.c
examples/nfs-writefile.c
examples/nfs4-cat-talloc.c
examples/nfs4-cat.c
examples/nfsclient-async.c
examples/nfsclient-bcast.c
examples/nfsclient-listservers.c
examples/nfsclient-raw.c
examples/nfsclient-sync.c
examples/portmap-client.c
examples/portmap-server.c
include/libnfs-multithreading.h
include/libnfs-private.h
include/nfsc/libnfs-raw.h
include/nfsc/libnfs-zdr.h
include/nfsc/libnfs.h
include/slist.h
include/win32/win32_compat.h
lib/init.c
lib/krb5-wrapper.c
lib/krb5-wrapper.h
lib/libnfs-sync.c
lib/libnfs-zdr.c
lib/libnfs.c
lib/multithreading.c
lib/nfs_v3.c
lib/nfs_v4.c
lib/pdu.c
lib/socket.c
mount/libnfs-raw-mount.c
mount/libnfs-raw-mount.h
mount/mount.c
nfs/libnfs-raw-nfs.c
nfs/libnfs-raw-nfs.h
nfs/nfs.c
nfs/nfsacl.c
nfs4/libnfs-raw-nfs4.c
nfs4/libnfs-raw-nfs4.h
nfs4/nfs4.c
nlm/libnfs-raw-nlm.c
nlm/libnfs-raw-nlm.h
nlm/nlm.c
nsm/libnfs-raw-nsm.c
nsm/libnfs-raw-nsm.h
nsm/nsm.c
portmap/libnfs-raw-portmap.c
portmap/libnfs-raw-portmap.h
portmap/portmap.c
ps2_ee/config.h
ps2_ee/ps2_compat.c
ps2_ee/ps2_compat.h
ps3_ppu/config.h
ps3_ppu/ps3_compat.c
ps3_ppu/ps3_compat.h
rquota/libnfs-raw-rquota.c
rquota/libnfs-raw-rquota.h
rquota/rquota.c
tests/ld_timeout.c
tests/prog_access.c
tests/prog_access2.c
tests/prog_chmod.c
tests/prog_chown.c
tests/prog_create.c
tests/prog_fchmod.c
tests/prog_fchown.c
tests/prog_fstat.c
tests/prog_ftruncate.c
tests/prog_lchmod.c
tests/prog_lchown.c
tests/prog_link.c
tests/prog_lseek.c
tests/prog_lstat.c
tests/prog_mkdir.c
tests/prog_mknod.c
tests/prog_mount.c
tests/prog_open_read.c
tests/prog_open_write.c
tests/prog_opendir.c
tests/prog_read_update_pos.c
tests/prog_rename.c
tests/prog_rmdir.c
tests/prog_stat.c
tests/prog_statvfs.c
tests/prog_symlink.c
tests/prog_timeout.c
tests/prog_truncate.c
tests/prog_unlink.c
tests/prog_utimes.c
tls/handshake.c
tls/ktls.c
tls/tls-private.h
utils/nfs-cat.c
utils/nfs-cp.c
utils/nfs-ls.c
utils/nfs-stat.c
win32/win32_compat.c
win32/win32_errnowrapper.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/linux/in.h
/usr/include/linux/tls.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/libc-compat.h
/usr/include/linux/socket.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/features-time64.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/linux/stddef.h
